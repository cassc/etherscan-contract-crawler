{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n    address internal _operator;\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        _operator = msgSender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"!onlyOperator\");\r\n        _;\r\n    }\r\n\r\n    function transferOperator(address newOwner) public virtual onlyOwner {\r\n        _operator = newOwner;\r\n    }\r\n}\r\n\r\ncontract LuckyMiningContract is Ownable {\r\n    event TokensBurned(uint256 amount);\r\n    event MinerCreated(uint256 minerIndex, address recipient, uint256 amount);\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    ISwapRouter public _swapRouter;\r\n    address public mainPair;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public free;\r\n\r\n    IERC20 public usdt;\r\n    IERC20 public lucky;\r\n\r\n    uint256 public total_release;\r\n\r\n    struct Miner {\r\n        uint256 totalReleaseAmount;\r\n        uint256 releaseSeconds;\r\n        uint256 lastClaimTime;\r\n        uint256 claimedAmount;\r\n        uint256 createDate;\r\n    }\r\n\r\n    mapping(address => Miner[]) public miners;\r\n\r\n    constructor(address _usdt, address _lucky) {\r\n        usdt = IERC20(_usdt);\r\n        lucky = IERC20(_lucky);\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        mainPair = swapFactory.getPair(address(lucky), _swapRouter.WETH());\r\n\r\n        lucky.approve(address(_swapRouter), MAX);\r\n        usdt.approve(address(_swapRouter), MAX);\r\n\r\n        free = 0.005 ether;\r\n    }\r\n\r\n    function createMiner(\r\n        uint256 _releaseSeconds,\r\n        uint256 _totalReleaseAmount,\r\n        address _recipient\r\n    ) external onlyOperator {\r\n        require(\r\n            lucky.balanceOf(address(this)) >= _totalReleaseAmount,\r\n            \"Insufficient tokens\"\r\n        );\r\n        require(_releaseSeconds >= 8640000, \"day error\");\r\n        total_release += _totalReleaseAmount;\r\n        Miner memory newMiner = Miner({\r\n            totalReleaseAmount: _totalReleaseAmount,\r\n            releaseSeconds: _releaseSeconds,\r\n            lastClaimTime: block.timestamp,\r\n            claimedAmount: 0,\r\n            createDate: block.timestamp\r\n        });\r\n        miners[_recipient].push(newMiner);\r\n        emit MinerCreated(\r\n            miners[_recipient].length,\r\n            _recipient,\r\n            _totalReleaseAmount\r\n        );\r\n    }\r\n\r\n    function claimMiner(uint256 minerIndex) external payable returns (uint256) {\r\n        require(msg.value >= free, \"Insufficient fee\");\r\n\r\n        Miner storage miner = miners[msg.sender][minerIndex];\r\n        require(block.timestamp > miner.lastClaimTime, \"Cannot claim yet\");\r\n        uint256 timeElapsed = block.timestamp - miner.lastClaimTime;\r\n        if (timeElapsed > 0) {\r\n            uint256 amountPerSecond = miner.totalReleaseAmount /\r\n                miner.releaseSeconds;\r\n            uint256 claimAmount = timeElapsed * amountPerSecond;\r\n\r\n            uint256 maxClaimAmount = miner.totalReleaseAmount -\r\n                miner.claimedAmount;\r\n            claimAmount = (claimAmount > maxClaimAmount)\r\n                ? maxClaimAmount\r\n                : claimAmount;\r\n            require(claimAmount > 0, \"Claim completed\");\r\n            require(\r\n                lucky.balanceOf(address(this)) >= claimAmount,\r\n                \"Insufficient tokens\"\r\n            );\r\n\r\n            miner.lastClaimTime = block.timestamp;\r\n            miner.claimedAmount += claimAmount;\r\n            lucky.transfer(msg.sender, claimAmount);\r\n            return claimAmount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getMinerNum(address _recipient) public view returns (uint256) {\r\n        uint256 minerLeng = miners[_recipient].length;\r\n        return minerLeng;\r\n    }\r\n\r\n    function setFree(uint256 _free) external onlyOperator {\r\n        free = _free;\r\n    }\r\n\r\n    function getMinerInfo(\r\n        uint256 _startIndex,\r\n        address _recipient\r\n    ) public view returns (Miner[] memory) {\r\n        Miner[] memory result = new Miner[](5);\r\n        uint256 maxLeng = getMinerNum(_recipient);\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            if (_startIndex + i < maxLeng) {\r\n                result[i] = miners[_recipient][_startIndex + i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // usdt -> bnb\r\n    // bnb -> lucky\r\n    // lucky -> DEAD\r\n    function swapAndBurn(uint256 amount) external onlyOperator {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokenForFund(amount);\r\n        uint256 newBnbBalance = address(this).balance - initialBalance;\r\n        swapBNBForLucky(newBnbBalance);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(usdt);\r\n        path[1] = _swapRouter.WETH();\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBNBForLucky(uint256 bnbAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _swapRouter.WETH();\r\n        path[1] = address(lucky);\r\n        uint[] memory amounts = _swapRouter.swapExactETHForTokens{\r\n            value: bnbAmount\r\n        }(0, path, address(this), block.timestamp);\r\n        uint256 luckyAmount = amounts[amounts.length - 1];\r\n        lucky.transfer(DEAD, luckyAmount);\r\n        emit TokensBurned(luckyAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(_operator).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address _token, uint256 amount) external {\r\n        IERC20(_token).transfer(_operator, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lucky\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minerIndex\",\"type\":\"uint256\"}],\"name\":\"claimMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"createMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"free\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getMinerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LuckyMiningContract.Miner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getMinerNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lucky\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_free\",\"type\":\"uint256\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LuckyMiningContract", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000003b66457ae9410cb07e631a8a20f49d53a567dc29", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80d9dea8605c4d0886308a618420d6ef5a4731b3374c140672b4866e7c75b905"}