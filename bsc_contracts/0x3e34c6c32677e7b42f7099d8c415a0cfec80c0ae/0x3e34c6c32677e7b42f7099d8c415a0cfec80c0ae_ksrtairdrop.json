{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/*\r\n\r\n------------------------------------ \r\n CONTRACT MANAGEMENT:\r\n------------------------------------\r\n\r\n10% direct referral \ud83d\udc68  \r\n3% referred level 2 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d  \r\n1% referred level 3 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d  \r\n1% referred level 4 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d \ud83d\udc68\ud83c\udffd\u200d \ud83d\udc68\ud83c\udffd\u200d   \r\n1% referred level 5 \ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d\ud83d\udc68\ud83c\udffd\u200d \ud83d\udc68\ud83c\udffd\u200d \ud83d\udc68\ud83c\udffd\u200d \r\n------------------------------------\r\n\r\n*/\r\n\r\n\r\ninterface IBEP20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n        /**\r\n        * @dev Leaves the contract without owner. It will not be possible to call\r\n        * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n        *\r\n        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n        * thereby removing any functionality that is only available to the owner.\r\n        */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock the token contract\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ncontract ksrtairdrop is  Context, Ownable {\r\n    using SafeMath for uint256;\r\n    uint public totalPlayers;\r\n    bool private locked;   \r\n    bool private isstart;  \r\n    address public _tokenAddress = 0x7e358413038Ea38b2946dC33f2551B5630Ac6398;\r\n\r\n    uint256 lvl0 = 5;\r\n    uint256 lvl1 = 1;\r\n    uint256 lvl2 = 1;\r\n    uint256 lvl3 = 1;\r\n    uint256 lvl4 = 1;\r\n    uint256 lvl5 = 1;\r\n    uint256 mul = 1000000;\r\n\r\n    struct Player {\r\n        uint active;\r\n        uint time;\r\n        string hash;\r\n        address affFrom;\r\n        uint256 aff1sum; \r\n        uint256 aff2sum;\r\n        uint256 aff3sum;\r\n        uint256 aff4sum;\r\n        uint256 aff5sum;\r\n        uint256 w_token;      \r\n    }\r\n\r\n    struct Hash {\r\n        address user;\r\n        uint active;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n    require(!locked, \"No re-entrancy\");\r\n    locked = true;\r\n    _;\r\n    locked = false;\r\n    }\r\n\r\n\r\n\r\n    constructor(){\t\t\r\n        players[owner()].active = 1;\r\n        isstart = false;\r\n\t}\r\n\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(string => Hash) public hashs;\r\n\r\n    event Newbie(address indexed user, address indexed _referrer, uint _time);  \r\n    receive() external payable {}\r\n\r\n    function setAllFeePercent(uint256 _lvl0 ,uint256 _lvl1,uint256 _lvl2,uint256 _lvl3,uint256 _lvl4,uint256 _lvl5,uint256 _mul) external onlyOwner() {    \r\n        lvl0 = _lvl0;\r\n        lvl1 = _lvl1;\r\n        lvl2 = _lvl2;\r\n        lvl3 = _lvl3;\r\n        lvl4 = _lvl4;\r\n        lvl5 = _lvl5;\r\n        mul = _mul;\r\n    }\r\n\r\n    function setisstart(bool _isstart) external onlyOwner() {    \r\n        isstart = _isstart;\r\n    }\r\n\r\n    function settokenAddress(address __tokenAddress) external onlyOwner() {    \r\n        _tokenAddress = __tokenAddress;\r\n    }\r\n\r\n    function claim(address _affAddr, string memory _hash) public payable {\r\n        \r\n        Player storage player = players[msg.sender];\r\n        Hash storage hash = hashs[_hash]; \r\n        require(player.active == 0, \"No Reapeat\");\r\n        require(hash.active == 0, \"No Reapeat\");\r\n\r\n        totalPlayers++;\r\n        \r\n\r\n        if(_affAddr != address(0) && players[_affAddr].active != 0){\r\n            emit Newbie(msg.sender, _affAddr, block.timestamp);\r\n            register(msg.sender, _affAddr, _hash);\r\n        }\r\n        else{\r\n            emit Newbie(msg.sender, owner(), block.timestamp);\r\n            register(msg.sender, owner(), _hash);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function getvel(address _Addr) public view returns (uint256) { \r\n\t\tuint256 token = getlevel(_Addr,6);\r\n\t\tuint256 vel = token - players[_Addr].w_token;\r\n\t\treturn vel;\r\n\t}\r\n\r\n    function getlevel(address _Addr , uint256 _lvl) public view returns (uint256) { \r\n        Player storage player = players[_Addr];\r\n\t\r\n\t\tuint256 vel = 0;\r\n        if(_lvl == 0){\r\n            vel = lvl0 * mul;\r\n        }else if(_lvl == 1){\r\n           vel = player.aff1sum * lvl1 * mul;\r\n        }else if(_lvl == 2){\r\n            vel = player.aff2sum * lvl2 * mul;\r\n        }else if(_lvl == 3){\r\n            vel = player.aff3sum * lvl3 * mul;\r\n        }else if(_lvl == 4){\r\n            vel = player.aff4sum * lvl4 * mul;\r\n        }else if(_lvl == 5){\r\n            vel = player.aff5sum * lvl5 * mul;\r\n        }else if(_lvl == 6){\r\n            vel = ( (lvl0) + (player.aff1sum * lvl1) + (player.aff2sum * lvl2) + (player.aff3sum * lvl3) + ( player.aff4sum * lvl4) + (player.aff5sum  * lvl5) ) * mul;\r\n        }\r\n\r\n\t\treturn vel;\r\n\t}\r\n\r\n    \r\n\r\n    \r\n\r\n    function withdraw() public {        \r\n        require(isstart == true, \"Not started\");\r\n        uint256 vel = getvel(msg.sender);\r\n        require(players[msg.sender].active == 1, \"Not active\");\r\n        require(vel > 0, \"Not active\");\r\n        players[msg.sender].w_token = players[msg.sender].w_token.add(vel);\r\n\r\n        IBEP20(_tokenAddress).transfer(msg.sender, vel * 1 ether);\r\n    \r\n        //transfer token to user\r\n        \r\n    }\r\n\r\n     function recoverBEP20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        // do not allow recovering self token\r\n        require(tokenAddress != address(this), \"Self withdraw\");\r\n        IBEP20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n    function recoverBEP(address Address, uint256 tokenAmount) public onlyOwner {\r\n        payable(Address).transfer(tokenAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function register(address _addr, address _affAddr,string memory _hash) private{\r\n\r\n      Player storage player = players[_addr];\r\n      Hash storage hash = hashs[_hash]; \r\n      player.active = 1;\r\n      player.affFrom = _affAddr;\r\n      player.hash = _hash;\r\n      hash.user = _addr;\r\n      hash.active = 1;\r\n\r\n      address _affAddr1 = _affAddr;\r\n      address _affAddr2 = players[_affAddr1].affFrom;\r\n      address _affAddr3 = players[_affAddr2].affFrom;\r\n      address _affAddr4 = players[_affAddr3].affFrom;\r\n      address _affAddr5 = players[_affAddr4].affFrom;\r\n\r\n      players[_affAddr1].aff1sum = players[_affAddr1].aff1sum.add(1);\r\n      players[_affAddr2].aff2sum = players[_affAddr2].aff2sum.add(1);\r\n      players[_affAddr3].aff3sum = players[_affAddr3].aff3sum.add(1);\r\n      players[_affAddr4].aff4sum = players[_affAddr4].aff4sum.add(1);\r\n      players[_affAddr5].aff5sum = players[_affAddr5].aff5sum.add(1);     \r\n     \r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lvl\",\"type\":\"uint256\"}],\"name\":\"getlevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"getvel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hashs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"affFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aff1sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff2sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff3sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff4sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aff5sum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w_token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lvl0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lvl1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lvl2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lvl3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lvl4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lvl5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mul\",\"type\":\"uint256\"}],\"name\":\"setAllFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isstart\",\"type\":\"bool\"}],\"name\":\"setisstart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__tokenAddress\",\"type\":\"address\"}],\"name\":\"settokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ksrtairdrop", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9fe04f00ce45f54643d51706223e21e438089634f8f896080c25d748febfca2"}