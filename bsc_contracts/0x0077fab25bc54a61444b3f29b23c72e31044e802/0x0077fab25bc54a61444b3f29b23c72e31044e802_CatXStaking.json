{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CatXStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Custom errors\\nerror AprAlreadySet(uint256 _apr);\\nerror InvalidApr();\\nerror InvalidStakeDuration();\\nerror StakingPeriodNotOver();\\nerror NotEnoughTokensIntoStakingPool();\\nerror NothingToWithdraw();\\n\\n/**\\n * @title CatX Staking (CATX) Granny said \\\"Don't you dare GO to the Moon!\\\" \\n * @author Blue$hip (aka Blue__Ship, \u221elue_ship; \u221elue_8hip; 8lue_Ship) with the assistant of the OpenAI gpt-4 model\\n * @notice CatX.ai@proton.me Websites www.CatX.ai https://github.com/8lueShip/catx.ai Social Networks Telegram https://t.me/+S8_jaol3wvtlYzU0 Discord https://discord.gg/k3Z25ynY (Admin will NEVER Direct Message (DM) You). Legal disclaimer The information and content provided on this solidity script are intended for informational purposes only and do not constitute financial, investment, or other professional advice. Investing in cryptocurrencies, such as CATX, carries inherent risks, and users should conduct their own research and consult professional advisors before making any decisions. CATX and its team members disclaim any liability for any direct or indirect losses, damages, or consequences that may arise from the use of the information provided on this script. This disclaimer is governed by and construed in accordance with international law, and any disputes relating to this disclaimer shall be subject to the jurisdiction of the courts within which the offense was made. \\n * @dev CatX Staking\\n */\\n\\ncontract CatXStaking is Ownable {\\n\\n    // Custom events\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event DepositStakingPool(uint256 amount);\\n    event AprUpdated(uint256 apr);\\n    event BulkAprUpdated(uint aprNinetyDays, uint aprOneEightyDays, uint aprThreeSixtyDays);\\n    event WithdrawStakingPool(uint256 amount);\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public ercToken;\\n    uint64 private constant NinetyDaysInSeconds = 7776000;\\n    uint64 private constant OneEightyDaysInSeconds = 15552000;\\n    uint64 private constant ThreeSixtyDaysInSeconds = 31104000;\\n\\n    // APR are in percentage\\n    uint256 public aprNinety = 400;\\n    uint256 public aprOneEighty = 600;\\n    uint256 public aprThreeSixty = 800;\\n\\n    struct Stake {\\n        uint256 unlockTime;\\n        uint256 stakedAmount;\\n        uint256 userReward;\\n    }\\n\\n    mapping(address => Stake) public stakesNinety;\\n    mapping(address => Stake) public stakesOneEighty;\\n    mapping(address => Stake) public stakesThreeSixty;\\n\\n    uint256 public stakingPoolNinety;\\n    uint256 public stakingPoolOneEighty;\\n    uint256 public stakingPoolThreeSixty;\\n\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _tokenAddress, address owner_ ) {\\n        transferOwnership(owner_);\\n        ercToken = IERC20(_tokenAddress);\\n    }\\n\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n\\n    /**\\n     * @notice Returns the timestamp unlocking time of the user's stake\\n     * @param _user the address of the user\\n     * @param _stakingPeriod one of the three staking periods: 90, 180 or 360 days\\n     */\\n    function unlockTimeOf(address _user, uint256 _stakingPeriod) external view returns (uint256) {\\n        if (_stakingPeriod == 90) {\\n            return stakesNinety[_user].unlockTime;\\n        } else if (_stakingPeriod == 180) {\\n            return stakesOneEighty[_user].unlockTime;\\n        } else if (_stakingPeriod == 360) {\\n            return stakesThreeSixty[_user].unlockTime;\\n        } else {\\n            revert InvalidStakeDuration();\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens that the user has staked\\n     * @param _user the address of the user\\n     * @param _stakingPeriod one of the three staking periods: 90, 180 or 360 days\\n     */\\n    function stakedAmountOf(address _user, uint256 _stakingPeriod) external view returns (uint256) {\\n        if (_stakingPeriod == 90) {\\n            return stakesNinety[_user].stakedAmount;\\n        } else if (_stakingPeriod == 180) {\\n            return stakesOneEighty[_user].stakedAmount;\\n        } else if (_stakingPeriod == 360) {\\n            return stakesThreeSixty[_user].stakedAmount;\\n        } else {\\n            revert InvalidStakeDuration();\\n        }\\n    }\\n\\n\\n    /* ========== SETTER FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Set the APR for the 90 days staking period\\n     * @param _apr the new APR\\n     */\\n    function setAprNinetyDays(uint256 _apr) external onlyOwner {\\n        if (_apr == 0)\\n            revert InvalidApr();\\n        if (aprNinety == _apr)\\n            revert AprAlreadySet(_apr);\\n        aprNinety = _apr;\\n        emit AprUpdated(_apr);\\n    }\\n\\n    /**\\n     * @notice Set the APR for the 180 days staking period\\n     * @param _apr the new APR\\n     */\\n    function setAprOneEightyDays(uint256 _apr) external onlyOwner {\\n        if (_apr == 0)\\n            revert InvalidApr();\\n        if (aprOneEighty == _apr)\\n            revert AprAlreadySet(_apr);\\n        aprOneEighty = _apr;\\n        emit AprUpdated(_apr);\\n    }\\n\\n    /**\\n     * @notice Set the APR for the 360 days staking period\\n     * @param _apr the new APR\\n     */\\n    function setAprThreeSixtyDays(uint256 _apr) external onlyOwner {\\n        if (_apr == 0)\\n            revert InvalidApr();\\n        if (aprThreeSixty == _apr)\\n            revert AprAlreadySet(_apr);\\n        aprThreeSixty = _apr;\\n        emit AprUpdated(_apr);\\n    }\\n\\n    /**\\n     * @notice Set the APR for the 90, 180 and 360 days staking period\\n     * @param _aprNinetyDays the new APR for the 90 days staking period\\n     * @param _aprOneEightyDays the new APR for the 180 days staking period\\n     * @param _aprThreeSixtyDays the new APR for the 360 days staking period\\n     */\\n    function bulkSetApr(uint256 _aprNinetyDays, uint256 _aprOneEightyDays, uint256 _aprThreeSixtyDays) external onlyOwner {\\n        if (_aprNinetyDays == 0 || _aprOneEightyDays == 0 || _aprThreeSixtyDays == 0)\\n            revert InvalidApr();\\n        aprNinety = _aprNinetyDays;\\n        aprOneEighty = _aprOneEightyDays;\\n        aprThreeSixty = _aprThreeSixtyDays;\\n        emit BulkAprUpdated(_aprNinetyDays, _aprOneEightyDays, _aprThreeSixtyDays);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the 90 days staking pool\\n     * @param _amount the amount of tokens to deposit\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function depositStakingPoolNinetyDays(uint256 _amount) external onlyOwner {\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        stakingPoolNinety += _amount;\\n        emit DepositStakingPool(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the 180 days staking pool\\n     * @param _amount the amount of tokens to deposit\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function depositStakingPoolOneEightyDays(uint256 _amount) external onlyOwner {\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        stakingPoolOneEighty += _amount;\\n        emit DepositStakingPool(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the 360 days staking pool\\n     * @param _amount the amount of tokens to deposit\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function depositStakingPoolThreeSixtyDays(uint256 _amount) external onlyOwner {\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        stakingPoolThreeSixty += _amount;\\n        emit DepositStakingPool(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the 90 days staking pool\\n     * @param _amount the amount of tokens to withdraw\\n     * @dev can only withdraw available tokens, this can't impact current staked and rewards\\n     */\\n    function withdrawStakingPoolNinetyDays(uint256 _amount) external onlyOwner {\\n        if (stakingPoolNinety < _amount)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolNinety -= _amount;\\n        ercToken.transfer(owner(), _amount);\\n        emit WithdrawStakingPool(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the 180 days staking pool\\n     * @param _amount the amount of tokens to withdraw\\n     * @dev can only withdraw available tokens, this can't impact current staked and rewards\\n     */\\n    function withdrawStakingPoolOneEightyDays(uint256 _amount) external onlyOwner {\\n        if (stakingPoolOneEighty < _amount)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolOneEighty -= _amount;\\n        ercToken.transfer(owner(), _amount);\\n        emit WithdrawStakingPool(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the 360 days staking pool\\n     * @param _amount the amount of tokens to withdraw\\n     * @dev can only withdraw available tokens, this can't impact current staked and rewards\\n     */\\n    function withdrawStakingPoolThreeSixtyDays(uint256 _amount) external onlyOwner {\\n        if (stakingPoolThreeSixty < _amount)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolThreeSixty -= _amount;\\n        ercToken.transfer(owner(), _amount);\\n        emit WithdrawStakingPool(_amount);\\n    }\\n\\n    /* ========== WRITE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Stake tokens for 90 days\\n     * @param _amount the amount of tokens to stake\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function stakeNinetyDays(uint256 _amount) external {\\n        if (stakingPoolNinety < _amount * aprNinety / 100 / 4)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolNinety -= _amount * aprNinety / 100 / 4;\\n        stakesNinety[msg.sender].unlockTime = block.timestamp + NinetyDaysInSeconds;\\n        stakesNinety[msg.sender].userReward += _amount * aprNinety / 100 / 4;\\n        stakesNinety[msg.sender].stakedAmount += _amount;\\n\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake tokens for 180 days\\n     * @param _amount the amount of tokens to stake\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function stakeOneEightyDays(uint256 _amount) external {\\n        if (stakingPoolOneEighty < _amount * aprOneEighty / 100 / 2)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolOneEighty -= _amount * aprOneEighty / 100 / 2;\\n        stakesOneEighty[msg.sender].unlockTime = block.timestamp + OneEightyDaysInSeconds;\\n        stakesOneEighty[msg.sender].userReward += _amount * aprOneEighty / 100 / 2;\\n        stakesOneEighty[msg.sender].stakedAmount += _amount;\\n\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake tokens for 360 days\\n     * @param _amount the amount of tokens to stake\\n     * @dev the tokens must be approved to this contract before calling this function\\n     */\\n    function stakeThreeSixtyDays(uint256 _amount) external {\\n        if (stakingPoolThreeSixty < _amount * aprThreeSixty / 100)\\n            revert NotEnoughTokensIntoStakingPool();\\n\\n        stakingPoolThreeSixty -= _amount * aprThreeSixty / 100;\\n        stakesThreeSixty[msg.sender].unlockTime = block.timestamp + ThreeSixtyDaysInSeconds;\\n        stakesThreeSixty[msg.sender].userReward += _amount * aprThreeSixty / 100;\\n        stakesThreeSixty[msg.sender].stakedAmount += _amount;\\n\\n        ercToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw both staked tokens and rewards from the 90 days staking pool\\n     * @dev can only withdraw after the unlock time\\n     */\\n    function withdrawNinetyDays() external {\\n        uint256 currentTime = block.timestamp;\\n\\n        if(stakesNinety[msg.sender].stakedAmount == 0)\\n            revert NothingToWithdraw();\\n\\n        if (currentTime <= stakesNinety[msg.sender].unlockTime)\\n            revert StakingPeriodNotOver();\\n\\n        uint256 transferAmount = stakesNinety[msg.sender].stakedAmount + stakesNinety[msg.sender].userReward;\\n        stakesNinety[msg.sender].stakedAmount = 0;\\n        stakesNinety[msg.sender].userReward = 0;\\n\\n        ercToken.transfer(msg.sender, transferAmount);\\n\\n        emit Withdrawn(msg.sender, transferAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw both staked tokens and rewards from the 180 days staking pool\\n     * @dev can only withdraw after the unlock time\\n     */\\n    function withdrawOneEightyDays() external {\\n        uint256 currentTime = block.timestamp;\\n\\n        if(stakesOneEighty[msg.sender].stakedAmount == 0)\\n            revert NothingToWithdraw();\\n\\n        if (currentTime <= stakesOneEighty[msg.sender].unlockTime)\\n            revert StakingPeriodNotOver();\\n\\n        uint256 transferAmount = stakesOneEighty[msg.sender].stakedAmount + stakesOneEighty[msg.sender].userReward;\\n        stakesOneEighty[msg.sender].stakedAmount = 0;\\n        stakesOneEighty[msg.sender].userReward = 0;\\n\\n        ercToken.transfer(msg.sender, transferAmount);\\n\\n        emit Withdrawn(msg.sender, transferAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw both staked tokens and rewards from the 360 days staking pool\\n     * @dev can only withdraw after the unlock time\\n     */\\n    function withdrawThreeSixtyDays() external {\\n        uint256 currentTime = block.timestamp;\\n\\n        if(stakesThreeSixty[msg.sender].stakedAmount == 0)\\n            revert NothingToWithdraw();\\n\\n        if (currentTime <= stakesThreeSixty[msg.sender].unlockTime)\\n            revert StakingPeriodNotOver();\\n\\n        uint256 transferAmount = stakesThreeSixty[msg.sender].stakedAmount + stakesThreeSixty[msg.sender].userReward;\\n        stakesThreeSixty[msg.sender].stakedAmount = 0;\\n        stakesThreeSixty[msg.sender].userReward = 0;\\n\\n        ercToken.transfer(msg.sender, transferAmount);\\n\\n        emit Withdrawn(msg.sender, transferAmount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"AprAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokensIntoStakingPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPeriodNotOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"AprUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aprNinetyDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aprOneEightyDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aprThreeSixtyDays\",\"type\":\"uint256\"}],\"name\":\"BulkAprUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aprNinety\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprOneEighty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprThreeSixty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aprNinetyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aprOneEightyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aprThreeSixtyDays\",\"type\":\"uint256\"}],\"name\":\"bulkSetApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositStakingPoolNinetyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositStakingPoolOneEightyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositStakingPoolThreeSixtyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ercToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setAprNinetyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setAprOneEightyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setAprThreeSixtyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeNinetyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeOneEightyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeThreeSixtyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"stakedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesNinety\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesOneEighty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesThreeSixty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolNinety\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolOneEighty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolThreeSixty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"unlockTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNinetyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOneEightyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakingPoolNinetyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakingPoolOneEightyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakingPoolThreeSixtyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawThreeSixtyDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CatXStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000031957f0c4b74571bbcebabfbc9f3e2081107682100000000000000000000000040434a070c2092dd015cc0a5a00a0e23ede460c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}