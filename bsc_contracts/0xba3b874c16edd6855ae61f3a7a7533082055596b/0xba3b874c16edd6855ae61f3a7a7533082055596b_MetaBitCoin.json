{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n// Unlicensed SPDX-License-Identifier is not Open Source \r\n// This contract can not be used/forked without permission\r\n\r\n/*\r\n\r\nName: MetaBit Coin\r\nSymbol: MTBC\r\nSupply: 5,000,000,000,000\r\n\r\nWeb: MetaBitCrypto.com\r\n\r\nMarketing 5%\r\nReflection 5%\r\nAuto LP 5%\r\nDev 1%\r\nBurn 1%\r\n\r\nTotal fee on buy and sell = 17%\r\n\r\nLaunch Limits\r\n\r\n3% Max Holding \r\n1% Max Transaction\r\n\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                 assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = 0x15Db5a10b38001A6723d98c0E42a3eEa7349f98d;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MetaBitCoin is Context, IERC20, Ownable { \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromFee; \r\n    mapping (address => bool) public _isExcluded; \r\n    mapping (address => bool) public _isSnipe;\r\n    mapping (address => bool) public _preLaunchAccess;\r\n\r\n    // Blacklist: If 'noBlackList' is true wallets on this list can not buy - used for known bots\r\n    mapping (address => bool) public _isBlacklisted;\r\n\r\n    // Set contract so that blacklisted wallets cannot buy \r\n    bool public noBlackList = true;\r\n\r\n    \r\n\r\n    address[] private _excluded; // Excluded from rewards\r\n    address payable public Wallet_Marketing = payable(0x6cAF76E0BcDBC561B4ee5623EC6B8b55a2B6eB12); \r\n    address payable public Wallet_Dev = payable(0xbcEfBcBBdF1De68fE29aa846f408316503116528); \r\n    address payable public Wallet_Burn = payable(0x000000000000000000000000000000000000dEaD); \r\n    \r\n   \r\n\r\n\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 5000000000000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    string private constant _name = \"MetaBit Coin\"; \r\n    string private constant _symbol = \"MTBC\";  \r\n    uint8 private constant _decimals = 18;\r\n\r\n    // Counter for liquify trigger\r\n    uint8 private txCount = 0;\r\n    uint8 private swapTrigger = 10; \r\n\r\n    // Setting the initial fees\r\n    uint256 public _FeeReflection = 5; \r\n    uint256 public _FeeLiquidity = 5;\r\n    uint256 public _FeeMarketing = 5;\r\n    uint256 public _FeeBurn = 1;\r\n    uint256 public _FeeDev = 1; \r\n\r\n    // 'Previous fees' are used to keep track of fee settings when removing and restoring fees\r\n    uint256 private _previousFeeReflection = _FeeReflection;\r\n    uint256 private _previousFeeLiquidity = _FeeLiquidity;\r\n    uint256 private _previousFeeMarketing = _FeeMarketing;\r\n    uint256 private _previousFeeBurn = _FeeBurn;\r\n    uint256 private _previousFeeDev = _FeeDev; \r\n\r\n    // The following settings are used to calculate fee splits when distributing bnb to liquidity and external wallets\r\n    uint256 private _promoFee = _FeeMarketing+_FeeDev;\r\n    uint256 public _FeesTotal = _FeeMarketing+_FeeDev+_FeeLiquidity+_FeeReflection+_FeeBurn;\r\n\r\n    // Fee for the auto LP and the all bnb wallets - used to process fees \r\n    uint256 private _liquidityAndPromoFee = _FeeMarketing+_FeeDev+_FeeLiquidity;\r\n\r\n\r\n\r\n\r\n        uint256 private rBurn; //burn\r\n        uint256 private rReflect; //Reflections\r\n        uint256 private rLiquidity; //LP\r\n        uint256 private rTransferAmount; //After deducting fees\r\n        uint256 private rAmount; //total tokens sent for transfer\r\n\r\n        uint256 private tBurn; //burn\r\n        uint256 private tReflect; //Reflections\r\n        uint256 private tLiquidity; //LP\r\n        uint256 private tTransferAmount; //After deducting fees\r\n\r\n\r\n\r\n    uint256 private launchBlock;\r\n    uint256 private swapBlock;\r\n    bool public launchPhase = true;\r\n    bool public TradeOpen;\r\n\r\n\r\n   \r\n\r\n    // Wallet limits \r\n\r\n    // Max wallet holding (3% at launch)\r\n    uint256 public _maxWalletToken = _tTotal.mul(3).div(100);\r\n    uint256 private _previousMaxWalletToken = _maxWalletToken;\r\n\r\n    // Maximum transaction amount (1% at launch)\r\n    uint256 public _maxTxAmount = _tTotal.mul(1).div(100); \r\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\r\n                                     \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n        \r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[owner()] = _rTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // TESTNET BSC\r\n\r\n              \r\n        \r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n\r\n        /*\r\n\r\n        Set initial wallet mappings\r\n\r\n        */\r\n\r\n        // Wallet that are excluded from fees\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Marketing] = true; \r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n        // Wallets granted access before trade is oopen\r\n        _preLaunchAccess[owner()] = true;\r\n\r\n\r\n        //Exclude burn address from rewards - Rewards sent to burn are not deflationary! \r\n        _isExcluded[Wallet_Burn] = true;\r\n\r\n\r\n\r\n\r\n      \r\n        \r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n   \r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        rAmount = tAmount.mul(_getRate()); \r\n        \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    Presale Functions \r\n\r\n    Presales have different settings, turn them on and off with the click on a button!\r\n\r\n    */\r\n\r\n    // Get ready for presale!\r\n    function Presale_BEGIN() external onlyOwner {\r\n        set_Swap_And_Liquify_Enabled(false);        \r\n        removeAllFee();\r\n        removeWalletLimits();\r\n    }\r\n    \r\n    // Presale done! Set all fees \r\n    function Presale_END() external onlyOwner {\r\n        set_Swap_And_Liquify_Enabled(true);\r\n        restoreAllFee();\r\n        restoreWalletLimits();\r\n    }\r\n\r\n\r\n\r\n\r\n    function tokenFromReflection(uint256 _rAmount) public view returns(uint256) {\r\n        require(_rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return _rAmount.div(currentRate);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    \r\n\r\n    // Set a wallet address so that it does not have to pay transaction fees\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    // Set a wallet address so that it has to pay transaction fees\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    Blacklist - This is used to block a person from buying - known bot users are added to this\r\n    list prior to launch. We also check for people using snipe bots on the contract before we\r\n    add liquidity and block these wallets. We like all of our buys to be natural and fair.\r\n\r\n    */\r\n\r\n    // Blacklist - block wallets (ADD - COMMA SEPARATE MULTIPLE WALLETS)\r\n    function blacklist_Add_Wallets(address[] calldata addresses) external onlyOwner {\r\n       \r\n        uint256 startGas;\r\n        uint256 gasUsed;\r\n\r\n    for (uint256 i; i < addresses.length; ++i) {\r\n        if(gasUsed < gasleft()) {\r\n        startGas = gasleft();\r\n        if(!_isBlacklisted[addresses[i]]){\r\n        _isBlacklisted[addresses[i]] = true;}\r\n        gasUsed = startGas - gasleft();\r\n    }\r\n    }\r\n    }\r\n\r\n\r\n\r\n    // Blacklist - block wallets (REMOVE - COMMA SEPARATE MULTIPLE WALLETS)\r\n    function blacklist_Remove_Wallets(address[] calldata addresses) external onlyOwner {\r\n       \r\n        uint256 startGas;\r\n        uint256 gasUsed;\r\n\r\n    for (uint256 i; i < addresses.length; ++i) {\r\n        if(gasUsed < gasleft()) {\r\n        startGas = gasleft();\r\n        if(_isBlacklisted[addresses[i]]){\r\n        _isBlacklisted[addresses[i]] = false;}\r\n        gasUsed = startGas - gasleft();\r\n    }\r\n    }\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    You can turn the blacklist restrictions on and off.\r\n\r\n    During launch, it's a good idea to block known bot users from buying. But these are real people, so \r\n    when the contract is safe (and the price has increased) you can allow these wallets to buy/sell by setting\r\n    noBlackList to false\r\n\r\n    */\r\n\r\n    //Blacklist Switch - Turn on/off blacklisted wallet restrictions \r\n    function blacklist_Switch(bool true_or_false) public onlyOwner {\r\n        noBlackList = true_or_false;\r\n    } \r\n\r\n\r\n\r\n    /*\r\n\r\n    Manually set mappings\r\n\r\n    */\r\n\r\n\r\n    // Pre Launch Access - able to buy and sell before the trade is open \r\n    function mapping_preLaunchAccess(address account, bool true_or_false) external onlyOwner() {    \r\n        _preLaunchAccess[account] = true_or_false;\r\n    }\r\n\r\n    // Add wallet to snipe list \r\n    function mapping_isSnipe(address account, bool true_or_false) external onlyOwner() {  \r\n        _isSnipe[account] = true_or_false;\r\n    }\r\n\r\n    \r\n\r\n    \r\n    /*\r\n\r\n    FEES  \r\n\r\n    */\r\n\r\n    function _set_Fees(uint256 Liquidity, uint256 Marketing, uint256 Reflection, uint256 Burn) external onlyOwner() {\r\n\r\n        // Set the fees\r\n\r\n          _FeeLiquidity = Liquidity;\r\n          _FeeMarketing = Marketing;\r\n          _FeeReflection = Reflection;\r\n          _FeeBurn = Burn;\r\n\r\n        // For calculations and processing \r\n\r\n          _promoFee = _FeeMarketing+_FeeDev;\r\n          _liquidityAndPromoFee = _FeeLiquidity+_promoFee;\r\n          _FeesTotal = _FeeMarketing+_FeeDev+_FeeLiquidity+_FeeReflection+_FeeBurn;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    Updating Wallets\r\n\r\n    */\r\n\r\n    \r\n\r\n    //Update the marketing wallet\r\n    function Wallet_Update_Marketing(address payable wallet) public onlyOwner() {\r\n        Wallet_Marketing = wallet;\r\n        _isExcludedFromFee[Wallet_Marketing] = true;\r\n    }\r\n\r\n   \r\n    \r\n    /*\r\n\r\n    SwapAndLiquify Switches\r\n\r\n    */\r\n    \r\n    // Toggle on and off to activate auto liquidity and the promo wallet \r\n    function set_Swap_And_Liquify_Enabled(bool true_or_false) public onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit SwapAndLiquifyEnabledUpdated(true_or_false);\r\n    }\r\n\r\n    // This will set the number of transactions required before the 'swapAndLiquify' function triggers\r\n    function set_Number_Of_Transactions_Before_Liquify_Trigger(uint8 number_of_transactions) public onlyOwner {\r\n        swapTrigger = number_of_transactions;\r\n    }\r\n    \r\n\r\n\r\n    // This function is required so that the contract can receive BNB from pancakeswap\r\n    receive() external payable {}\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    SafeLaunch Features\r\n\r\n    Wallet Limits\r\n\r\n    Wallets are limited in two ways. The amount of tokens that can be purchased in one transaction\r\n    and the total amount of tokens a wallet can buy. Limiting a wallet prevents one wallet from holding too\r\n    many tokens, which can scare away potential buyers that worry that a whale might dump!\r\n\r\n    Wallet limits must be a whole number.\r\n\r\n    */\r\n\r\n\r\n    // Set the Max transaction amount (percent of total supply)\r\n    function set_Max_Transaction_Percent(uint256 max_Transaction_Percent) external onlyOwner() {\r\n\r\n        // Buyer protection - Max transaction can never be set to 0\r\n        require(max_Transaction_Percent > 0, \"Max transaction must be greater than zero!\");\r\n        _maxTxAmount = _tTotal*max_Transaction_Percent/100;\r\n    }\r\n    \r\n    \r\n    // Set the maximum permitted wallet holding (percent of total supply)\r\n     function set_Max_Wallet_Holding_Percent(uint256 max_Wallet_Holding_Percent) external onlyOwner() {\r\n        _maxWalletToken = _tTotal*max_Wallet_Holding_Percent/100;\r\n    }\r\n  \r\n    \r\n    // Open Trade - ONE WAY SWITCH! - Buyer Protection! \r\n    function openTrade() external onlyOwner() {\r\n        TradeOpen = true;\r\n        launchBlock = block.number;\r\n    }\r\n\r\n\r\n    // End Launch Phase - ONE WAY SWITCH - Buyer Protection!\r\n    function end_LaunchPhase() external onlyOwner() {\r\n        launchPhase = false;\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n\r\n\r\n    function _takeLiquidity(uint256 _tLiquidity, uint256 _rLiquidity) private {\r\n        \r\n        _rOwned[address(this)] = _rOwned[address(this)].add(_rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(_tLiquidity);\r\n    }\r\n\r\n\r\n\r\n    function _takeBurn(uint256 _tBurn, uint256 _rBurn) private {\r\n  \r\n        _tTotal = _tTotal.sub(_tBurn);\r\n        _rTotal = _rTotal.sub(_rBurn);\r\n\r\n        _rOwned[Wallet_Burn] = _rOwned[Wallet_Burn].add(rBurn);\r\n\r\n        if(_isExcluded[Wallet_Burn])\r\n            _tOwned[Wallet_Burn] = _tOwned[Wallet_Burn].add(tBurn);\r\n    }\r\n\r\n\r\n\r\n    function _takeReflection(uint256 _rReflect, uint256 _tReflect) private {\r\n        _rTotal = _rTotal.sub(_rReflect);\r\n        _tFeeTotal = _tFeeTotal.add(_tReflect);\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    // Remove all fees\r\n    function removeAllFee() private {\r\n        if(_FeeReflection == 0 && _FeeLiquidity == 0 && _FeeMarketing == 0 && _FeeDev == 0 && _FeeBurn == 0) return;\r\n        \r\n        _previousFeeReflection = _FeeReflection;\r\n        _previousFeeLiquidity = _FeeLiquidity;\r\n        _previousFeeMarketing = _FeeMarketing;\r\n        _previousFeeDev = _FeeDev;\r\n        _previousFeeBurn = _FeeBurn;\r\n        \r\n        _FeeReflection = 0;\r\n        _liquidityAndPromoFee = 0;\r\n        _FeeLiquidity = 0;\r\n        _FeeMarketing = 0;\r\n        _FeeDev = 0;\r\n        _FeeBurn = 0;\r\n        _promoFee = 0;\r\n        _FeesTotal = 0;\r\n    }\r\n    \r\n    // Restore all fees\r\n    function restoreAllFee() private {\r\n\r\n        _FeeReflection = _previousFeeReflection;\r\n        _FeeLiquidity = _previousFeeLiquidity;\r\n        _FeeMarketing = _previousFeeMarketing;\r\n        _FeeDev = _previousFeeDev;\r\n        _FeeBurn = _previousFeeBurn;\r\n\r\n\r\n        _FeesTotal = _FeeMarketing+_FeeDev+_FeeLiquidity+_FeeReflection+_FeeBurn;\r\n        _promoFee = _FeeMarketing+_FeeDev;\r\n        _liquidityAndPromoFee = _FeeMarketing+_FeeDev+_FeeLiquidity;\r\n    }\r\n\r\n\r\n\r\n    // Remove wallet limits (used during pre-sale)\r\n    function removeWalletLimits() private {\r\n        if(_maxWalletToken == _tTotal && _maxTxAmount == _tTotal) return;\r\n        \r\n        _previousMaxWalletToken = _maxWalletToken;\r\n        _previousMaxTxAmount = _maxTxAmount;\r\n\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletToken = _tTotal;\r\n    }\r\n\r\n    // Restore wallet limits\r\n    function restoreWalletLimits() private {\r\n\r\n        _maxWalletToken = _previousMaxWalletToken;\r\n        _maxTxAmount = _previousMaxTxAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0) && spender != address(0), \"ERR: zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n\r\n          if (launchPhase){\r\n\r\n                if (!TradeOpen){\r\n\r\n                    require(_preLaunchAccess[from] || _preLaunchAccess[to], \"Trade is not open yet, please come back later\");\r\n                    }\r\n                \r\n                if(TradeOpen){\r\n\r\n                        // Block snipebots for approx 30 seconds \r\n                        if (launchBlock + 10 > block.number){\r\n                        require((!_isSnipe[to] && !_isSnipe[from]), 'You tried to snipe, now you need to wait.');\r\n                        }\r\n\r\n                        // Buy in first block = snipe\r\n                        if (launchBlock + 1 > block.number){\r\n\r\n                            // Check if buy and permissions \r\n                            if(to != uniswapV2Pair && to != address(this) && !_preLaunchAccess[to]){\r\n                            _isSnipe[to] = true;\r\n                            }\r\n                        }\r\n\r\n                        if ((block.number > launchBlock + 2) && (_maxTxAmount != _tTotal/100)){\r\n\r\n                            // Increase max transaction to 1%\r\n                            _maxTxAmount = _tTotal/100;\r\n                            // Increase max wallet to 1%\r\n                            _maxWalletToken = _tTotal/100;\r\n\r\n                        }\r\n\r\n                        if (block.number > launchBlock + 5){\r\n\r\n                            // Increase max transaction to 2%\r\n                            _maxTxAmount = _tTotal.mul(2).div(100); \r\n\r\n                            // Increase max wallet to 2%\r\n                            _maxWalletToken = _tTotal.mul(2).div(100); \r\n\r\n                        }\r\n\r\n                        if (block.number > launchBlock + 10){\r\n\r\n                            // End Launch Phase\r\n                            launchPhase = false;\r\n\r\n                        }\r\n\r\n                }\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n\r\n        BLACKLIST RESTRICTIONS\r\n\r\n        */\r\n        \r\n        if (noBlackList){\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"This address is blacklisted. Transaction reverted.\");}\r\n\r\n\r\n\r\n        \r\n\r\n        /*\r\n\r\n        TRANSACTION AND WALLET LIMITS\r\n\r\n        */\r\n        \r\n\r\n        // Limit wallet total\r\n        if (to != owner() &&\r\n            to != Wallet_Marketing &&\r\n            to != Wallet_Burn &&\r\n            to != address(this) &&\r\n            to != uniswapV2Pair &&\r\n            from != owner()){\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"You are trying to buy too many tokens. You have reached the limit for one wallet.\");}\r\n\r\n\r\n        // Limit the maximum number of tokens that can be bought or sold in one transaction\r\n        if (from != owner() && to != owner() && from != Wallet_Marketing && to != Wallet_Marketing)\r\n            require(amount <= _maxTxAmount, \"You are trying to buy more than the max transaction limit.\");\r\n\r\n\r\n\r\n\r\n        require(from != address(0) && to != address(0), \"ERR: Using 0 address!\");\r\n        require(amount > 0, \"Token value must be higher than zero.\");\r\n\r\n\r\n        // SwapAndLiquify is triggered after every X transactions - this number can be adjusted using swapTrigger\r\n\r\n\r\n        if(\r\n            txCount >= swapTrigger && \r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled &&\r\n            block.number > swapBlock\r\n            )\r\n        {  \r\n            \r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance > _maxTxAmount) {contractTokenBalance = _maxTxAmount;}\r\n            txCount = 0;\r\n            swapAndLiquify(contractTokenBalance);\r\n            swapBlock = block.number;\r\n        }\r\n        \r\n\r\n        \r\n\r\n        \r\n        bool takeFee = true;\r\n         \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n    \r\n    function sendToWallet(address payable wallet, uint256 amount) private {\r\n            wallet.transfer(amount);\r\n        }\r\n\r\n    function precDiv(uint a, uint b, uint precision) internal pure returns (uint) {\r\n     return a*(10**precision)/b;\r\n         \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n       \r\n       uint256 splitPromo;\r\n       uint256 tokensToPromo;\r\n       uint256 splitM;\r\n       uint256 totalBNB;\r\n       \r\n\r\n        // Processing tokens into BNB (Used for all external wallets and creating the liquidity pair)\r\n\r\n\r\n        if (_promoFee != 0 && _FeeLiquidity != 0){\r\n\r\n\r\n            // Calculate the correct ratio splits for marketing and developer\r\n            splitPromo = precDiv(_promoFee,(_FeeLiquidity+_promoFee),2);\r\n            tokensToPromo = contractTokenBalance*splitPromo/100;\r\n\r\n\r\n        uint256 firstHalf = (contractTokenBalance-tokensToPromo)/2;\r\n        uint256 secondHalf = contractTokenBalance-(tokensToPromo+firstHalf);\r\n        uint256 balanceBeforeSwap = address(this).balance;\r\n        swapTokensForEth(firstHalf+tokensToPromo);\r\n        totalBNB = address(this).balance - balanceBeforeSwap;\r\n        uint256 promoBNB = totalBNB*splitPromo/100;\r\n        addLiquidity(secondHalf, (totalBNB-promoBNB));\r\n        emit SwapAndLiquify(firstHalf, (totalBNB-promoBNB), secondHalf);\r\n        totalBNB = address(this).balance;\r\n        splitM = precDiv(_FeeMarketing,_promoFee,2);\r\n        uint256 marketingBNB = totalBNB*splitM/100;\r\n        sendToWallet(Wallet_Marketing, marketingBNB);\r\n        sendToWallet(Wallet_Dev, (totalBNB-marketingBNB));\r\n\r\n    } else if (_promoFee != 0 && _FeeLiquidity == 0){\r\n\r\n        swapTokensForEth(contractTokenBalance);\r\n        totalBNB = address(this).balance;\r\n        splitM = precDiv(_FeeMarketing,_promoFee,2);\r\n        uint256 marketingBNB = totalBNB*splitM/100;\r\n        sendToWallet(Wallet_Marketing, marketingBNB);\r\n        sendToWallet(Wallet_Dev, (totalBNB-marketingBNB));\r\n\r\n    }\r\n    }\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    Creating Auto Liquidity\r\n\r\n    */\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    /*\r\n\r\n    PURGE RANDOM TOKENS - Add the random token address and a wallet to send them to\r\n\r\n    */\r\n\r\n    // Remove random tokens from the contract and send to a wallet\r\n    function remove_Random_Tokens(address random_Token_Address, address send_to_wallet, uint256 number_of_tokens) public onlyOwner returns(bool _sent){\r\n        require(random_Token_Address != address(this), \"Can not remove native token\");\r\n        uint256 randomBalance = IERC20(random_Token_Address).balanceOf(address(this));\r\n        if (number_of_tokens > randomBalance){number_of_tokens = randomBalance;}\r\n        _sent = IERC20(random_Token_Address).transfer(send_to_wallet, number_of_tokens);\r\n    }\r\n\r\n    /*\r\n    \r\n    UPDATE PANCAKESWAP ROUTER AND LIQUIDITY PAIRING\r\n\r\n    */\r\n\r\n\r\n    // Set new router and make the new pair address\r\n    function set_New_Router_and_Make_Pair(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newPCSRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newPCSRouter.factory()).createPair(address(this), _newPCSRouter.WETH());\r\n        uniswapV2Router = _newPCSRouter;\r\n    }\r\n   \r\n    // Set new router\r\n    function set_New_Router_Address(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newPCSRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Router = _newPCSRouter;\r\n    }\r\n    \r\n    // Set new address - This will be the 'Cake LP' address for the token pairing\r\n    function set_New_Pair_Address(address newPair) public onlyOwner() {\r\n        uniswapV2Pair = newPair;\r\n    }\r\n   \r\n\r\n    // Manual 'swapAndLiquify' Trigger (Enter the percent of the tokens that you'd like to send to swap and liquify)\r\n    function process_SwapAndLiquify_Now (uint256 percent_Of_Tokens_To_Liquify) public onlyOwner {\r\n        // Do not trigger if already in swap\r\n        require(!inSwapAndLiquify, \"Currently processing liquidity, try later.\"); \r\n        if (percent_Of_Tokens_To_Liquify > 100){percent_Of_Tokens_To_Liquify == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract*percent_Of_Tokens_To_Liquify/100;\r\n        swapAndLiquify(sendTokens);\r\n    }\r\n\r\n  \r\n    /*\r\n\r\n    Transfer Functions\r\n\r\n    There are 4 transfer options, based on whether the to, from, neither or both wallets are excluded from rewards\r\n\r\n    */\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        \r\n         \r\n        \r\n        if(!takeFee){\r\n            removeAllFee();\r\n            } else {\r\n                txCount++;\r\n            }\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n\r\n\r\n\r\n   function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        tBurn = tAmount*_FeeBurn/100;\r\n        tReflect = tAmount*_FeeReflection/100;\r\n        tLiquidity = tAmount*_liquidityAndPromoFee/100;\r\n\r\n        rAmount = tAmount.mul(_getRate());\r\n        rBurn = tBurn.mul(_getRate());\r\n        rReflect = tReflect.mul(_getRate());\r\n        rLiquidity = tLiquidity.mul(_getRate());\r\n\r\n        tTransferAmount = tAmount-(tBurn+tReflect+tLiquidity);\r\n        rTransferAmount = rAmount-(rBurn+rReflect+rLiquidity);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _takeLiquidity(tLiquidity, rLiquidity);\r\n        _takeBurn(tBurn, rBurn);\r\n        _takeReflection(rReflect, tReflect);\r\n\r\n        if(recipient == Wallet_Burn){\r\n\r\n        _tTotal = _tTotal.sub(tAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        }\r\n\r\n        \r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        tBurn = tAmount*_FeeBurn/100;\r\n        tReflect = tAmount*_FeeReflection/100;\r\n        tLiquidity = tAmount*_liquidityAndPromoFee/100;\r\n\r\n        rAmount = tAmount.mul(_getRate());\r\n        rBurn = tBurn.mul(_getRate());\r\n        rReflect = tReflect.mul(_getRate());\r\n        rLiquidity = tLiquidity.mul(_getRate());\r\n\r\n        tTransferAmount = tAmount-(tBurn+tReflect+tLiquidity);\r\n        rTransferAmount = rAmount-(rBurn+rReflect+rLiquidity);\r\n        \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\r\n        _takeLiquidity(tLiquidity, rLiquidity);\r\n        _takeBurn(tBurn, rBurn);\r\n        _takeReflection(rReflect, tReflect);\r\n\r\n        if(recipient == Wallet_Burn){\r\n\r\n        _tTotal = _tTotal.sub(tAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        tBurn = tAmount*_FeeBurn/100;\r\n        tReflect = tAmount*_FeeReflection/100;\r\n        tLiquidity = tAmount*_liquidityAndPromoFee/100;\r\n\r\n        rAmount = tAmount.mul(_getRate());\r\n        rBurn = tBurn.mul(_getRate());\r\n        rReflect = tReflect.mul(_getRate());\r\n        rLiquidity = tLiquidity.mul(_getRate());\r\n\r\n        tTransferAmount = tAmount-(tBurn+tReflect+tLiquidity);\r\n        rTransferAmount = rAmount-(rBurn+rReflect+rLiquidity);\r\n\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\r\n        if(recipient == Wallet_Burn){\r\n\r\n        _tTotal = _tTotal.sub(tAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        }\r\n\r\n        _takeLiquidity(tLiquidity, rLiquidity);\r\n        _takeBurn(tBurn, rBurn);\r\n        _takeReflection(rReflect, tReflect);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n     function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        tBurn = tAmount*_FeeBurn/100;\r\n        tReflect = tAmount*_FeeReflection/100;\r\n        tLiquidity = tAmount*_liquidityAndPromoFee/100;\r\n\r\n        rAmount = tAmount.mul(_getRate());\r\n        rBurn = tBurn.mul(_getRate());\r\n        rReflect = tReflect.mul(_getRate());\r\n        rLiquidity = tLiquidity.mul(_getRate());\r\n\r\n        tTransferAmount = tAmount-(tBurn+tReflect+tLiquidity);\r\n        rTransferAmount = rAmount-(rBurn+rReflect+rLiquidity);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \r\n\r\n        if(recipient == Wallet_Burn){\r\n\r\n        _tTotal = _tTotal.sub(tAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n\r\n        }\r\n\r\n        _takeLiquidity(tLiquidity, rLiquidity);\r\n        _takeBurn(tBurn, rBurn);\r\n        _takeReflection(rReflect, tReflect);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n}\r\n\r\n \r\n// Created by https://gentokens.com/ for https://metabitcrypto.com/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Presale_BEGIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Presale_END\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Wallet_Update_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isSnipe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_preLaunchAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"}],\"name\":\"_set_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"blacklist_Add_Wallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"blacklist_Remove_Wallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"blacklist_Switch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_LaunchPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"mapping_isSnipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"mapping_preLaunchAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_Of_Tokens_To_Liquify\",\"type\":\"uint256\"}],\"name\":\"process_SwapAndLiquify_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"send_to_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_tokens\",\"type\":\"uint256\"}],\"name\":\"remove_Random_Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_Transaction_Percent\",\"type\":\"uint256\"}],\"name\":\"set_Max_Transaction_Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_Wallet_Holding_Percent\",\"type\":\"uint256\"}],\"name\":\"set_Max_Wallet_Holding_Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"set_New_Pair_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"set_New_Router_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"set_New_Router_and_Make_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"number_of_transactions\",\"type\":\"uint8\"}],\"name\":\"set_Number_Of_Transactions_Before_Liquify_Trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"set_Swap_And_Liquify_Enabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaBitCoin", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b81a574ad8346c4effaf051304f6af083634ad22ad1eb06d76efded2ceca881"}