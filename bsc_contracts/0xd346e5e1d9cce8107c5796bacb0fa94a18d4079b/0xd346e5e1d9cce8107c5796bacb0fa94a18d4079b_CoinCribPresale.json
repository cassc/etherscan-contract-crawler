{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-09-30\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-09-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-08-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMathInt {\r\n    \r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CoinCribPresale {\r\n    using SafeMath for uint256;\r\n\r\n    // Mainnet\r\n    IERC20 public usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    IERC20 public busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    IERC20 public usdc = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\r\n\r\n    // IERC20 public usdt = IERC20(0x95D59d33E017533b996eAf351cf7428fE7510bc0);\r\n    // IERC20 public busd = IERC20(0x95D59d33E017533b996eAf351cf7428fE7510bc0);\r\n    // IERC20 public usdc = IERC20(0x95D59d33E017533b996eAf351cf7428fE7510bc0);\r\n    \r\n    IERC20 public token;\r\n\r\n    bool public paused; \r\n    uint256 minDeposit = 1;  //\r\n    address public owner;\r\n    address public feeReciever;\r\n    uint256 public perDollarPrice;  //in decimals\r\n    uint256 public UsdtoBnb; //one usd to bnb\r\n    uint256 public totalSold;\r\n    mapping(address => uint256) public userBuy;\r\n    mapping(address=>uint) public balances;\r\n\r\n    uint unlockedTokens = 0;\r\n\r\n    function unlockToken(uint _percentage) public onlyOwner{\r\n        unlockedTokens += (token.balanceOf(address(this))*_percentage)/1000;\r\n    }\r\n\r\n    function unlockedToken() public view returns(uint ){\r\n        return unlockedTokens;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender,\"Caller must be Ownable!!\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _price,address _presaleToken, address _feeReciever){\r\n        owner = msg.sender;\r\n        perDollarPrice = _price;\r\n        token = IERC20(_presaleToken);\r\n        feeReciever = _feeReciever;\r\n    }\r\n\r\n    function ikeBalance(address _user) public view returns(uint){\r\n        return token.balanceOf(_user);\r\n    }\r\n\r\n    function contractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function remainingToken() public view returns(uint){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    \r\n\r\n    //pid for selection of token USDT -> 1 or BUSD -> 2 USDC-->3\r\n    function buyfromToken(uint _pid,uint amount) public payable {\r\n        require(!paused,\"Presale is Paused!!\");\r\n        require(amount > 0 , \"Amount Must be greater than zero!!\");\r\n        require(amount >= minDeposit,\"You cannot buy less then 50$!!\");    \r\n        if(_pid == 1){\r\n\r\n            usdt.transferFrom(msg.sender,address(this),amount);\r\n            usdt.transfer(owner,amount);\r\n\r\n            uint temp = amount;\r\n            uint multiplier = ( perDollarPrice  * temp ) / 10 ** 18;\r\n            // token.transfer(msg.sender,multiplier);\r\n            balances[msg.sender] += multiplier;\r\n            totalSold += multiplier;\r\n            uint256 userTotalContribution = userBuy[msg.sender].add(multiplier);\r\n            userBuy[msg.sender] = userTotalContribution;\r\n\r\n        }\r\n        if(_pid == 2){\r\n\r\n            busd.transferFrom(msg.sender,address(this),amount);\r\n            busd.transfer(owner,amount);\r\n            uint temp = amount;\r\n            uint multiplier = ( perDollarPrice  * temp ) / 10 ** 18;\r\n            // token.transfer(msg.sender,multiplier);\r\n            balances[msg.sender] += multiplier;\r\n            totalSold += multiplier;\r\n            uint256 userTotalContribution = userBuy[msg.sender].add(multiplier);\r\n            userBuy[msg.sender] = userTotalContribution;\r\n        }\r\n\r\n        if(_pid == 3){\r\n            usdc.transferFrom(msg.sender,address(this),amount);\r\n            usdc.transfer(owner,amount);\r\n            uint temp = amount;\r\n            uint multiplier = ( perDollarPrice  * temp ) / 10 ** 18;\r\n            // token.transfer(msg.sender,multiplier);\r\n            balances[msg.sender] += multiplier;\r\n            totalSold += multiplier;\r\n            uint256 userTotalContribution = userBuy[msg.sender].add(multiplier);\r\n            userBuy[msg.sender] = userTotalContribution;\r\n        }\r\n\r\n        payable(feeReciever).transfer(msg.value);\r\n\r\n    }\r\n\r\n    function withdrawToken(uint _amount) public {\r\n        require(balances[msg.sender]>= _amount, \"Not enough balance\");\r\n        require(unlockedToken()>=_amount, \"Not enough token is unlocked\");\r\n        unlockedTokens -=_amount;\r\n        balances[msg.sender] -= _amount;\r\n        token.transfer(msg.sender,_amount);\r\n    } \r\n\r\n    //per dollar price in decimals\r\n    function setTokenPrice(uint _price) public onlyOwner{\r\n        perDollarPrice = _price;\r\n    }\r\n\r\n    //per dollar price in decimals of bnb\r\n    function setBnbPrice(uint _price) public onlyOwner{\r\n        UsdtoBnb = _price;\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner{\r\n        paused = _value;\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner{\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setBusd(address _token) public onlyOwner{\r\n        busd = IERC20(_token);\r\n    }\r\n\r\n    function setUsdt(address _token) public onlyOwner{\r\n        usdt = IERC20(_token);\r\n    }\r\n\r\n    function RescueFunds() public onlyOwner {\r\n        payable(msg.sender).transfer( address(this).balance );\r\n    }\r\n\r\n    function RescueTokens(IERC20 _add,uint _amount,address _recipient) public onlyOwner{\r\n        _add.transfer(_recipient,_amount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeFeeReciever(address _newRec) public onlyOwner {\r\n        feeReciever = _newRec;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_presaleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReciever\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsdtoBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyfromToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRec\",\"type\":\"address\"}],\"name\":\"changeFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ikeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBnbPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinCribPresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000004846fa17fad4d0000000000000000000000000000d78b99b99f9566d080b4f09dfe7061412e08ea90000000000000000000000000952d8b36799e65d6ca03080ef1c79c2af35dfa3a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1e50a0aded74171a57646025b4b05704c61bf6a9b2fef683c92dd9a01c58286d"}