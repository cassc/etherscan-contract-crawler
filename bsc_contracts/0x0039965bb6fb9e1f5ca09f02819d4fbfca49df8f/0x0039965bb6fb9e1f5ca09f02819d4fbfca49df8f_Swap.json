{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IPancakeV3SwapCallback {\r\n    function pancakeV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\r\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\r\n\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n}\r\n\r\ncontract Swap is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 commissionRate;\r\n    uint256 commissionRateDiv;\r\n\r\n    address routerAddress;\r\n    address wbnb;\r\n\r\n    address recipientForETH;\r\n\r\n    constructor() {\r\n        routerAddress = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\r\n        wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        recipientForETH = 0x0000000000000000000000000000000000000002;\r\n        commissionRate = 5;\r\n        commissionRateDiv = 1000;\r\n    }\r\n\r\n\r\n    function swapSingle(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum,\r\n        uint160 _sqrtPriceLimitX96\r\n    ) external payable returns (uint256 amountOut) {\r\n        uint256 value = 0;\r\n        if (_token0 != wbnb) {\r\n            IERC20(_token0).transferFrom(msg.sender, address(this), _amountIn);\r\n            _amountIn = _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv);\r\n        } else {\r\n            value = msg.value.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv);\r\n            _amountIn = value;\r\n        }\r\n\r\n        amountOut = IV3SwapRouter(routerAddress).exactInputSingle{value: value}(IV3SwapRouter.ExactInputSingleParams(\r\n            _token0,\r\n            _token1,\r\n            _fee,\r\n            _recipient,\r\n            _amountIn,\r\n            _amountOutMinimum,\r\n            _sqrtPriceLimitX96\r\n        ));\r\n    }\r\n\r\n    function swap(\r\n        bytes calldata _path,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum,\r\n        address _token0\r\n    ) external payable returns (uint256 amountOut) {\r\n        uint256 value = 0;\r\n        if (_token0 != wbnb) {\r\n            IERC20(_token0).transferFrom(msg.sender, address(this), _amountIn);\r\n            _amountIn = _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv);\r\n        } else {\r\n            value = msg.value.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv);\r\n            _amountIn = value;\r\n        }\r\n\r\n        amountOut = IV3SwapRouter(routerAddress).exactInput{value: value}(IV3SwapRouter.ExactInputParams(\r\n            _path,\r\n            _recipient,\r\n            _amountIn,\r\n            _amountOutMinimum\r\n        ));\r\n    }\r\n\r\n    function multicall(\r\n        bytes calldata _path,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum,\r\n        address _token0\r\n    ) external payable {\r\n        IERC20(_token0).transferFrom(msg.sender, address(this), _amountIn);\r\n\r\n        bytes[] memory calles = new bytes[](2);\r\n\r\n        calles[0] = encodeExactInputCall(\r\n            _path,\r\n            recipientForETH,\r\n            _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv),\r\n            _amountOutMinimum\r\n        );\r\n        calles[1] = encodeUnwrapWETH9(_amountOutMinimum,_recipient);\r\n\r\n        IV3SwapRouter(routerAddress).multicall(block.timestamp+300, calles);\r\n    }\r\n\r\n    function multicallSingle(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum,\r\n        uint160 _sqrtPriceLimitX96\r\n    ) external payable {\r\n        IERC20(_token0).transferFrom(msg.sender, address(this), _amountIn);\r\n\r\n        bytes[] memory calles = new bytes[](2);\r\n\r\n        calles[0] = encodeExactInputSingleCall(\r\n            _token0,\r\n            _token1,\r\n            _fee,\r\n            recipientForETH,\r\n            _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv),\r\n            _amountOutMinimum,\r\n            _sqrtPriceLimitX96\r\n        );\r\n        calles[1] = encodeUnwrapWETH9(_amountOutMinimum,_recipient);\r\n\r\n        IV3SwapRouter(routerAddress).multicall(block.timestamp+300,calles);\r\n    }\r\n\r\n    function encodeExactInputCall(\r\n        bytes calldata _path,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum\r\n    ) public view returns (bytes memory) {\r\n        return abi.encodeWithSelector(IV3SwapRouter(routerAddress).exactInput.selector, \r\n            IV3SwapRouter.ExactInputParams(\r\n                _path,\r\n                _recipient,\r\n                _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv),\r\n                _amountOutMinimum\r\n            )\r\n        );\r\n    }\r\n\r\n    function encodeExactInputSingleCall(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee,\r\n        address _recipient,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMinimum,\r\n        uint160 _sqrtPriceLimitX96\r\n    ) public view returns (bytes memory) {\r\n        return abi.encodeWithSelector(IV3SwapRouter(routerAddress).exactInputSingle.selector, \r\n            IV3SwapRouter.ExactInputSingleParams(\r\n                _token0,\r\n                _token1,\r\n                _fee,\r\n                _recipient,\r\n                _amountIn.mul(commissionRateDiv.sub(commissionRate)).div(commissionRateDiv),\r\n                _amountOutMinimum,\r\n                _sqrtPriceLimitX96\r\n            )\r\n        );\r\n    }\r\n\r\n    function encodeUnwrapWETH9(\r\n        uint256 _amount, address _recipient\r\n    ) public view returns (bytes memory) {\r\n        return abi.encodeWithSelector(IV3SwapRouter(routerAddress).unwrapWETH9.selector, \r\n            _amount,\r\n            _recipient\r\n        );\r\n    }\r\n\r\n    function approve(address _token, uint256 _amount) external {\r\n        IERC20(_token).approve(routerAddress, _amount);\r\n    }\r\n\r\n    // only owner\r\n\r\n    function setCommission(uint256 _commissionRate, uint256 _commissionRateDiv) public onlyOwner {\r\n        commissionRate = _commissionRate;\r\n        commissionRateDiv = _commissionRateDiv;\r\n    }\r\n\r\n    function setRouterAddress(address _routerAddress) public onlyOwner {\r\n        routerAddress = _routerAddress;\r\n    }\r\n\r\n    function setRecipientForEth(address _token) public onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdraw(address _token) public onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawEth() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"encodeExactInputCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"encodeExactInputSingleCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"encodeUnwrapWETH9\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"multicallSingle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRateDiv\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setRecipientForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"swapSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Swap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec506b48359d7d42f5948e8cf6f6e3220979ac6719af37d8d4f81241d5cbd938"}