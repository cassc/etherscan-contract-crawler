{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTExchangeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract NFTExchangeProxy {\\r\\n\\r\\n    bytes32 private constant implementationPosition = keccak256(\\\"implementation.contract:2022\\\");\\r\\n    bytes32 private constant proxyOwnerPosition = keccak256(\\\"owner.contract:2022\\\");\\r\\n\\r\\n    event Upgraded(address indexed implementation);\\r\\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        setUpgradabilityOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyProxyOwner() {\\r\\n        require(msg.sender == proxyOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // To get the address of the proxy contract's owner\\r\\n    function proxyOwner() public view returns (address owner) {\\r\\n        bytes32 position = proxyOwnerPosition;\\r\\n        assembly {\\r\\n            owner := sload(position)    // load the data in position from the storage\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // To get the address of the proxy contract\\r\\n    function implementation() public view returns (address impl) {\\r\\n        bytes32 position = implementationPosition;\\r\\n        assembly {\\r\\n            impl := sload(position)     // load the data in position from storage\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setImplementation(address _impl) internal {\\r\\n        bytes32 position = implementationPosition;  // get the current position of the proxy contract stored\\r\\n        assembly {\\r\\n            sstore(position, _impl)     // store the data _impl into the position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _upgradeTo(address _newImplementation) internal {\\r\\n        address currentImplementation = implementation();\\r\\n        require(currentImplementation != _newImplementation, \\\"NFTExchangeProxy: Upgrade the current proxy contract\\\");\\r\\n        setImplementation(_newImplementation);\\r\\n        emit Upgraded(_newImplementation);\\r\\n    }\\r\\n\\r\\n    // To upgrade the logic contract to new one\\r\\n    function upgradeTo(address _implementation) public onlyProxyOwner {\\r\\n        _upgradeTo(_implementation);\\r\\n    }\\r\\n\\r\\n    // To set new proxy contract's owner\\r\\n    function setUpgradabilityOwner(address _newProxyOwner) internal {\\r\\n        bytes32 position = proxyOwnerPosition;\\r\\n        assembly {\\r\\n            sstore(position, _newProxyOwner)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // To transfer proxy ownership to new owner\\r\\n    function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\\r\\n        require(_newOwner != address(0), \\\"NFTExchangeProxy: Transfer proxy ownership to zero address\\\");\\r\\n        require(_newOwner != proxyOwner(), \\\"NFTExchangeProxy: Transfer proxy ownership to current owner\\\");\\r\\n\\r\\n        emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\\r\\n        setUpgradabilityOwner(_newOwner);\\r\\n    }\\r\\n    \\r\\n    function setSuperAdmin(address) public onlyProxyOwner {\\r\\n        address _impl = implementation();\\r\\n        require(_impl != address(0), \\\"NFTExchangeProxy: Not set the implementation yet\\\");\\r\\n\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n            \\r\\n            default {\\r\\n                return(ptr, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        address _impl = implementation();\\r\\n        require(_impl != address(0), \\\"NFTExchangeProxy: Not set the implementation yet\\\");\\r\\n\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n            \\r\\n            default {\\r\\n                return(ptr, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        address _impl = implementation();\\r\\n        require(_impl != address(0), \\\"NFTExchangeProxy: Not set the implementation yet\\\");\\r\\n\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n            \\r\\n            default {\\r\\n                return(ptr, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTExchangeProxy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xd9a4353ccd458271aca2ce7d5ac8bc54fbc42ef2", "SwarmSource": ""}