{"SourceCode": "{\"DC-contract-Context.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal pure virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DC-interfaceIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\"},\"DC-libraryAddress.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"DC-librarySafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\nimport {Address} from  \\\"./DC-libraryAddress.sol\\\"  ;\\r\\nimport {IERC20} from  \\\"./DC-interfaceIERC20.sol\\\"  ;\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) +\\r\\n            (value);\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) -\\r\\n            (value);\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Decentralized_Community.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\n// ## Decentralized Community\\n// Blockchain Advertisement\\n// From : www.Deep.RichMind@gmail.com\\n// Hello, everyone. Thank you for your attention. If you are interested in this Decentralized community please take a few minutes and read our simple introduction.\\n// This smart contract is designed to support and promote early blockchain projects that have the potential to solve real-world problems and create positive social impact.\\n//\\n// ## What is a decentralized community?\\n// A decentralized community is a group of people who share a common vision and collaborate without relying on a central authority or intermediary.\\n// They use blockchain technology to create a stable, transparent, secure, and fair system that empowers them to make decisions, exchange value, and achieve their goals.\\n// A decentralized community can grow organically and dynamically, as more people join and contribute to the community. And the greatest part is As the number of members increases,the value of the community will grow.\\n//\\n// ## Why do we need a decentralized community for blockchain projects?\\n// We believe that blockchain technology has the potential to transform the world for the better.\\n// However, many blockchain projects face challenges such as lack of exposure, funding, feedback, and adoption.\\n// One of the biggest challenges of blockchain projects is that they cannot find an audience with digital currency and blockchain technology literacy, and for this they have to bear huge costs.\\n// Even with very high costs, their message does not reach the right people and audience and causes a lot of costs to be lost.\\n// We want to help these projects succeed and grow by creating a community based on trust and collaboration among our members and the projects we support.\\n// We also want to benefit from the innovation and value creation that these projects bring.\\n//\\n// ## How does our smart contract work?\\n// Our smart contract is based on a referral compensation plan that is executed by the blockchain.\\n// Every member can invite new members to join our community by sharing a unique referral link.\\n// Every member can use thier referral link infinite times and each member can have an unlimited number of members introduced directly and enroll them as a member without any other help of the other members.\\n// Every new member who joins through a referral link will pay a specified fee to the smart contract.\\n// The fee is not an investment or a donation, but the subscription fee of this smart contract.\\n// The smart contract ensures that the referral compensation plan is fair, transparent, and immutable.\\n// The Referral compensation Plan used in this smart contract was designed professionally for the first time in the industry and it works specifically for the decentralized community purposes.\\n//\\n// ## What are the benefits of joining our decentralized community?\\n// By joining our community, you will enjoy the following benefits:\\n// - You will be part of a passionate and knowledgeable community of blockchain enthusiasts who share your interests and goals.\\n// - You will have access to exclusive and quality information and opportunities about the blockchain projects we support.\\n// - You can have access to news and new projects and start your research by seeing the advertisements of new projects.\\n// - You have the chance to benefit from the benefits created through the decentralized community and the activities of other members.\\n// - You can benefit from the opportunities introduced by the smart contract even if you do not introduce or enroll anyone in this Decentralized community.\\n// - You will have a chance to earn some rewards from the referral compensation plan by inviting new members to join our community.\\n// - You will have a voice and a vote in deciding which blockchain projects we should support and how we should support them.\\n// - You will have the chance to introduce your own blockchain project to the community through this smart contract as a partnership opportunity.\\n//\\n// ## How can you join our decentralized community?\\n// It\\u0027s simple. All you need is a web browser with a compatible wallet extension that supports the blockchain we use.\\n// You can find your referral link from an existing member of our community.\\n// You can follow the link and pay the Subscription fee to the smart contract to become a member of our community.\\n// You can then start benefiting from the values created by the Decentralized Community and if you like you can start inviting new members using your own referral link and enjoy the benefits of our community.\\n//\\n// ## Important notes and warnings\\n// Before you join our community, please be aware of the following notes and warnings:\\n// - We do not ask for any investment from you in this contract now and not even in the future.\\n// - We do not have any daily or monthly profit or any other form now.\\n// - We will not have any daily or monthly profit or any other form in the future.\\n// - We do not have any projects for ourselves and we will not have any. Our role is to introduce only advertisements and we will not have any confirmation or denial about the projects.\\n// - We are only promoting the projects, but to decide on the projects, you must do enough research yourself.- We do not guarantee the success or failure of any project. We are just an advertiser.\\n// - Additional payment is not possible for anyone.\\n// - To become a member and receive all the benefits, you only need to register once.\\n// - We do not have any authentication and please do not share your information with anyone.\\n// - If you don\\u0027t want to provide email , you can use pseudonyms, of course, you can also use an irrelevant text when you are completing your regestration, but it should be noted that in cooperation with a project or multiple projects that needs email for recognition, You will not benefit from it automatically and you are responsible for this issue.\\n// - This smart contract does not have the power to distinguish between a real email and an irrelevant text when you are completing yourregistration, and you have complete freedom to provide your own email.\\n// - You should know that any text you write in the email box when you are compliting your membership , is your Referral-ID that you can use for enrolling other people to the Decentralized community.\\n// - If you do not enter your email, you will benefit from all the referral bonuses and group bonuses from the smart contract without any difference with other members, so don\\u0027t worry.\\n// - If someone claims to be on behalf of the contract and requests personal information from you, please do not trust it and any incident that occurs due to this action will definitely be your responsibility.\\n// - Any changes, including modification or change of information and personal location, referral-ID that was given to you, wallet information, or moving money, are not possible for anyone, because it is impossible for this smart contract to make any changes .\\n// - All information is recorded by blockchain.\\n// - All the money is backuped by the smart contract and no one has access to them.\\n// - No changes in the compensation plan or deposit is possible.\\n// - This smart contract has a creator but no owner.\\n// - And all the members are somehow the owners of the smart contract.\\n// - This smart contract has not given ownership and access to any person or any corporation, not even the programmers and developers of this contract,\\n// - After the execution of the contract, no changes in the calculations of the contract will be possible.\\n// - The subscription fee is the same for all members.\\n// - To register, you only need to pay the subscription fee once.\\n// - After your regestration is complete, the subscription fee is not refundable at any circumstances so please consider this issue before your action.\\n// - If someone asks you to pay more than once, please do not listen to them. Any other decision is made by you is your responsibility.\\n// - This decentralized community considers each purchased subscription as a person.\\n// - Every member must pay the subscription fee from their own wallet, and please do it yourself.\\n// - Please use decentralized wallets to secure the future of your bonuses and rewards that are given to you from this smart contract. you can not insure the future of a centralized wallet or a centralized exchange.\\n// - If someone says that they are going to complete your registration for you, do not trust them because they may have access to your wallet and the assets in it forever.\\n// - The amount of people\\u0027s bonuses and rewards does not make any difference between the members, all the benefits of the contract will be shared equally among all the people calculated by the compensation plan.\\n// - Any benefits outside the compensation plan received from the projects will be divided equally among all members.\\n// - If your place of residence is not in the list of countries, please do not register and if you do you are responsible for any issue.\\n// - It is your responsibility to ensure that your activity is consistent with the laws of the country you live in, so please do your research in this area and accept all the consequences before registering.\\n// - This smart contract works 100% through the smart contract uploaded on the blockchain and does not require any site or domain.\\n// - Any site, domain, or server that claims that there is a need to connect to or be a member of the decentralized community smart contract is completely false. Even if it is free.\\n// - Under no circumstances for membership, do not provide your information to any site, domain or server. If the server, domain, host is not decentralized, it cannot be trusted. Even if they are decentralized you dont need to give your information to them.\\n//\\n// : When a smart contract is launched on the blockchain, the source code will be clearly visible and it will be impossible to modify the comments in the source code. So it takes a lot of courage to declare our commitments and goals from the first day and stick to them forever.\\n// : The important point that we would like to mention is that all our goals and our path for the future were clear before the start of the smart contract, which is available from the moment we started.\\n// : Certainly, such an action requires high experience, expertise and resourcefulness in several specialized fields.\\n// : Together, we make a big contribution to the change and development and emergence and growth of technology and new businesses.\\n//\\n// ## Thank you for your attention\\n// We hope you are interested in joining our community and supporting the blockchain projects we believe in.\\n// If you have any questions or feedback, please feel free to contact us through our email given here.\\n// We look forward to hearing from you soon.\\n\\nimport {Context} from \\\"./DC-contract-Context.sol\\\";\\nimport {IERC20} from \\\"./DC-interfaceIERC20.sol\\\";\\nimport {SafeERC20} from \\\"./DC-librarySafeERC20.sol\\\";\\nimport {Address} from \\\"./DC-libraryAddress.sol\\\";\\n\\ncontract Decentralized_Community is Context {\\n    using SafeERC20 for IERC20;\\n    IERC20 private _TrxTech;\\n    address _trx = 0x55d398326f99059fF775485246999027B3197955;\\n    string[] ulkli = [\\\"AtlanticO\\\"];\\n\\n    struct IND {\\n        address ben;\\n        address BSa;\\n        address FT1;\\n        address FT2;\\n        string shp;\\n        uint256 uId;\\n        uint256 T1i;\\n        uint256 T2i;\\n        uint256 TT1i;\\n        uint256 TT2i;\\n        string ulk;\\n    }\\n\\n    struct IND2 {\\n        uint256 uId;\\n        string shpu;\\n        uint256 TstR;\\n        uint256 ZM;\\n    }\\n    struct CR {\\n        uint256 CRV;\\n        string CRK;\\n        uint256 CRVPget;\\n        uint256 CNTV;\\n        uint256 CRVPrwd;\\n        uint256 Prwd;\\n    }\\n\\n    CR cr;\\n\\n    struct AddressWallet {\\n        address mng;\\n        address community_members;\\n        address member_activation;\\n        address contract_value;\\n    }\\n    AddressWallet aw;\\n\\n    struct Felan {\\n        uint256 syFl;\\n        uint256 mtdl;\\n        uint256 sondo;\\n        uint256 tum_ksv;\\n        uint256 ghf;\\n        uint256 _uId;\\n    }\\n\\n    Felan fel;\\n    mapping(address =\\u003e IND) private _shpn;\\n    mapping(address =\\u003e IND2) private _shpn2;\\n    mapping(uint256 =\\u003e address) private Ashpa;\\n    mapping(address =\\u003e address[]) private bchm;\\n    mapping(uint256 =\\u003e address) private Flshpa;\\n    mapping(uint256 =\\u003e address) private nFlshpa;\\n    address private wall;\\n    uint256 private lastRun;\\n    uint256 private Zmn;\\n\\n    string public BillBoards = \\\"\\\";\\n    string public AboutUs = \\\"\\\";\\n\\n    constructor() {\\n        fel.ghf = 0;\\n        fel._uId = 0;\\n        fel.mtdl = 1;\\n        cr.CRV = 1 * 10**16;\\n        cr.CNTV = 1 * 10**16;\\n        cr.CRVPget = 1 * 10**16;\\n        cr.CRVPrwd = 1 * 10**16;\\n\\n        address _community_members = 0x91C88Cf671594C7cd287D9f5173C0d03214B4A3c;\\n        address _member_activation = 0x91C88Cf671594C7cd287D9f5173C0d03214B4A3c;\\n        address _contract_value = 0x91C88Cf671594C7cd287D9f5173C0d03214B4A3c;\\n        aw.mng = _msgSender();\\n        fel.sondo = block.timestamp;\\n        aw.community_members = _community_members;\\n        aw.member_activation = _member_activation;\\n        aw.contract_value = _contract_value;\\n        lastRun = block.timestamp;\\n        Zmn = 32000000;\\n\\n        _TrxTech = IERC20(_trx);\\n\\n        Ashpa[fel._uId] = _msgSender();\\n\\n        _shpn[aw.mng] = IND(\\n            _msgSender(),\\n            address(0),\\n            address(0),\\n            address(0),\\n            \\\"Deep.RichMind@gmail.com\\\",\\n            fel._uId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            \\\"DeJavu\\\"\\n        );\\n        _shpn2[aw.mng] = IND2(fel._uId, \\\"00\\\", 0, 0);\\n        fel._uId++;\\n    }\\n\\n    modifier mdntg() {\\n        require(\\n            _msgSender() == aw.mng,\\n            \\\"you are not allowed for this activity!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier sbts() {\\n        bool ismsgsender = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (_msgSender() == _shpn[Ashpa[i]].ben) {\\n                ismsgsender = true;\\n            }\\n        }\\n\\n        require(ismsgsender, \\\"You are not a member\\\");\\n        _;\\n    }\\n\\n    function Z_sulkli(string memory _country) public mdntg returns (bool) {\\n        ulkli.push(_country);\\n        return true;\\n    }\\n\\n    function compareStringsCaseInsensitive(string memory a, string memory b)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory aBytes = bytes(a);\\n        bytes memory bBytes = bytes(b);\\n\\n        if (aBytes.length != bBytes.length) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i \\u003c aBytes.length; i++) {\\n            if (lowerCase(uint8(aBytes[i])) != lowerCase(uint8(bBytes[i]))) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function lowerCase(uint8 data) internal pure returns (uint8) {\\n        if ((data \\u003e= 65) \\u0026\\u0026 (data \\u003c= 90)) {\\n            return uint8(data + 32);\\n        }\\n        return data;\\n    }\\n\\n    function A2_CountryList() public view returns (string[] memory) {\\n        string[] memory _ulkli = new string[](ulkli.length);\\n        for (uint256 i = 0; i \\u003c ulkli.length; i++) {\\n            _ulkli[i] = ulkli[i];\\n        }\\n        return _ulkli;\\n    }\\n\\n    function Z_strx(address _add) public mdntg returns (bool) {\\n        _trx = _add;\\n        return true;\\n    }\\n\\n    function ZZ_swaljdd(address _wal) public mdntg returns (bool) {\\n        wall = _wal;\\n        return true;\\n    }\\n\\n    function A1_membership(\\n        string memory referral_Id,\\n        string memory _country,\\n        string memory _email,\\n        address _wallet\\n    ) public {\\n        bool isulk = false;\\n        address referral;\\n\\n        require(_wallet == _msgSender(), \\\"This address is not conncted!\\\");\\n\\n        for (uint256 i = 0; i \\u003c ulkli.length; i++) {\\n            if (compareStringsCaseInsensitive(_country, ulkli[i])) isulk = true;\\n        }\\n        require(isulk, \\\"your country is not valid!\\\");\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (\\n                compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, referral_Id)\\n            ) {\\n                referral = Ashpa[i];\\n                break;\\n            }\\n        }\\n\\n        require(\\n            _msgSender() != referral,\\n            \\\"You can not enter the same address as your Referral_ID!\\\"\\n        );\\n        bool mthshp = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (Ashpa[i] == _msgSender()) {\\n                mthshp = true;\\n                break;\\n            }\\n        }\\n\\n        require(mthshp == false, \\\"This address is already a member!\\\");\\n\\n        bool mthEm = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, _email)) {\\n                mthEm = true;\\n                break;\\n            }\\n        }\\n\\n        require(mthEm == false, \\\"This Email is already a member!\\\");\\n\\n        bool mthUpline = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (Ashpa[i] == referral) {\\n                mthUpline = true;\\n                break;\\n            }\\n        }\\n        require(mthUpline == true, \\\"this referral_ID is not a member!\\\");\\n\\n        Ashpa[fel._uId] = _msgSender();\\n\\n        address pa = referral;\\n\\n        address ras;\\n\\n        IND memory MovASL = _shpn[referral];\\n        if (MovASL.TT1i == 0 \\u0026\\u0026 MovASL.TT2i == 0) {\\n            pa = MovASL.ben;\\n        }\\n        if (MovASL.TT1i != 0 \\u0026\\u0026 MovASL.TT2i == 0) {\\n            pa = MovASL.ben;\\n        }\\n        if (MovASL.TT1i \\u003e 0 \\u0026\\u0026 MovASL.TT2i \\u003e 0) {\\n            if (MovASL.TT1i \\u003e MovASL.TT2i) {\\n                ras = MovASL.FT2;\\n                MovASL = _shpn[ras];\\n            } else if (MovASL.TT1i == MovASL.TT2i) {\\n                ras = MovASL.FT1;\\n                MovASL = _shpn[ras];\\n            } else {\\n                ras = MovASL.FT1;\\n                MovASL = _shpn[ras];\\n            }\\n            IND memory Movshp = MovASL;\\n\\n            while (true) {\\n                if (Movshp.TT1i == 0 \\u0026\\u0026 Movshp.TT2i == 0) {\\n                    pa = Movshp.ben;\\n                    break;\\n                } else if (Movshp.TT1i \\u003e= Movshp.TT2i) {\\n                    if (\\n                        _shpn[Movshp.FT1].TT1i == 0 \\u0026\\u0026\\n                        _shpn[Movshp.FT1].TT2i == 0\\n                    ) {\\n                        pa = Movshp.FT1;\\n                        break;\\n                    } else {\\n                        Movshp = _shpn[Movshp.FT1];\\n                    }\\n                } else if (Movshp.TT1i \\u003c Movshp.TT2i) {\\n                    {\\n                        if (\\n                            _shpn[Movshp.FT2].TT1i == 0 \\u0026\\u0026\\n                            _shpn[Movshp.FT2].TT2i == 0\\n                        ) {\\n                            pa = Movshp.FT2;\\n                            break;\\n                        } else {\\n                            Movshp = _shpn[Movshp.FT2];\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        _shpn[_msgSender()] = IND(\\n            _msgSender(),\\n            pa,\\n            address(0),\\n            address(0),\\n            _email,\\n            fel._uId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            _country\\n        );\\n        _shpn2[_msgSender()] = IND2(fel._uId, referral_Id, 0, 0);\\n        fel._uId++;\\n\\n        if (_shpn[pa].T1i == 0) {\\n            _shpn[pa].T1i++;\\n            _shpn[pa].TT1i++;\\n            _shpn[pa].FT1 = _msgSender();\\n            _shpn2[pa].ZM++;\\n        } else if (_shpn[pa].T2i == 0) {\\n            _shpn[pa].T2i++;\\n            _shpn[pa].TT2i++;\\n            _shpn[pa].FT2 = _msgSender();\\n            _shpn2[pa].ZM++;\\n        }\\n        if (_shpn[pa].TT1i \\u003e= _shpn[pa].TT2i) {\\n            _shpn2[pa].TstR = _shpn[pa].TT2i;\\n        } else {\\n            _shpn2[pa].TstR = _shpn[pa].TT1i;\\n        }\\n        IND memory Mov;\\n        Mov = _shpn[pa];\\n        while (Mov.ben != address(0)) {\\n            if (_shpn[Mov.BSa].FT1 == Mov.ben) {\\n                _shpn[Mov.BSa].T1i++;\\n                _shpn[Mov.BSa].TT1i++;\\n                _shpn2[Mov.BSa].ZM++;\\n            } else if (_shpn[Mov.BSa].FT2 == Mov.ben) {\\n                _shpn[Mov.BSa].T2i++;\\n                _shpn[Mov.BSa].TT2i++;\\n                _shpn2[Mov.BSa].ZM++;\\n            }\\n            Mov = _shpn[Mov.BSa];\\n        }\\n        _TrxTech.safeTransferFrom(_msgSender(), aw.community_members, cr.CRV);\\n\\n        _TrxTech.safeTransferFrom(_msgSender(), aw.contract_value, cr.CNTV);\\n\\n        if (_shpn[pa].FT1 == _msgSender()) {\\n            _TrxTech.safeTransferFrom(_msgSender(), referral, cr.CRVPget);\\n        } else if (_shpn[pa].FT2 == _msgSender()) {\\n            _TrxTech.safeTransferFrom(\\n                _msgSender(),\\n                aw.member_activation,\\n                cr.CRVPget\\n            );\\n            fel.tum_ksv = fel.tum_ksv + cr.CRVPget;\\n        }\\n    }\\n\\n    function G_gratitude()\\n        public\\n        sbts\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            block.timestamp \\u003e fel.sondo + Zmn,\\n            \\\"the Time for calculating gratitudes has not come yet!\\\"\\n        );\\n        uint256 _syFl = 0;\\n        require(fel.ghf == 0, \\\"Proccesing\\\");\\n        uint256 minTis = _shpn[_msgSender()].T1i \\u003c= _shpn[_msgSender()].T2i\\n            ? _shpn[_msgSender()].T1i\\n            : _shpn[_msgSender()].T2i;\\n\\n        uint256 Point;\\n        uint256 OF;\\n        uint256 ntj;\\n        uint256 equ = 0;\\n        uint256 gom = 0;\\n        require(minTis \\u003e 0, \\\"You Dont Have Any gratitudes!\\\");\\n        fel.ghf = 1;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (_msgSender() == Ashpa[i]) {\\n                equ = 60 * 1000;\\n            }\\n\\n            ntj = _shpn[Ashpa[i]].T1i \\u003c= _shpn[Ashpa[i]].T2i\\n                ? _shpn[Ashpa[i]].T1i\\n                : _shpn[Ashpa[i]].T2i;\\n            if (ntj \\u003e 0) {\\n                if (ntj \\u003e= fel.mtdl) {\\n                    gom = 11 * 10**18;\\n                    Point = fel.mtdl;\\n                    OF = ntj - fel.mtdl;\\n                    _shpn[Ashpa[i]].T1i = (_shpn[Ashpa[i]].T1i) - ntj;\\n                    gom = 10 * 10 * 18;\\n                    _shpn[Ashpa[i]].T2i = (_shpn[Ashpa[i]].T2i) - ntj;\\n                    gom = 90 * 10 * 18;\\n\\n                    Flshpa[_syFl] = Ashpa[i];\\n                    _syFl++;\\n                    _TrxTech.safeTransferFrom(\\n                        aw.community_members,\\n                        address(this),\\n                        Point * cr.CRVPrwd + OF * cr.CRVPrwd\\n                    );\\n                    _TrxTech.transfer(aw.member_activation, OF * cr.CRVPrwd);\\n                    _TrxTech.transfer(_shpn[Ashpa[i]].ben, Point * cr.CRVPrwd);\\n                    fel.tum_ksv = fel.tum_ksv + (OF * cr.CRVPrwd);\\n                } else {\\n                    Point = ntj;\\n                    gom = 15 * 10**18;\\n                    _shpn[Ashpa[i]].T1i = (_shpn[Ashpa[i]].T1i) - Point;\\n                    gom = 18 * 10**18;\\n                    _shpn[Ashpa[i]].T2i = (_shpn[Ashpa[i]].T2i) - Point;\\n                    gom = 19 * 10**18;\\n                    _TrxTech.safeTransferFrom(\\n                        aw.community_members,\\n                        address(this),\\n                        Point * cr.CRVPrwd\\n                    );\\n                    _TrxTech.transfer(_shpn[Ashpa[i]].ben, Point * cr.CRVPrwd);\\n                }\\n            }\\n        }\\n\\n        fel.syFl = fel.syFl + _syFl;\\n\\n        fel.sondo = block.timestamp;\\n\\n        fel.ghf = 0;\\n        lastRun = block.timestamp;\\n\\n        return (\\n            _shpn[_msgSender()].T1i,\\n            _shpn[_msgSender()].T2i,\\n            fel._uId,\\n            Point,\\n            ntj,\\n            OF,\\n            fel.mtdl\\n        );\\n    }\\n\\n    function Z_sCR(\\n        uint256 _CRV,\\n        uint256 _CRVPget,\\n        uint256 _CNTV,\\n        uint256 _CRVPrwd,\\n        uint256 _mtdl,\\n        uint256 _zmn\\n    ) public mdntg returns (bool) {\\n        cr.CRV = _CRV;\\n        cr.CRVPget = _CRVPget;\\n        cr.CNTV = _CNTV;\\n        cr.CRVPrwd = _CRVPrwd;\\n        fel.mtdl = _mtdl;\\n        Zmn = _zmn;\\n        return true;\\n    }\\n\\n    function Z_sJM(\\n        address _community_members,\\n        address _member_activation,\\n        address _contract_value\\n    ) public mdntg {\\n        aw.community_members = _community_members;\\n        aw.member_activation = _member_activation;\\n        aw.contract_value = _contract_value;\\n    }\\n\\n    function ZZ_uidba2(uint256 iii, address mdntgjdd)\\n        public\\n        view\\n        returns (address)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        address _addres = Ashpa[iii];\\n        return _addres;\\n    }\\n\\n    function ZZ_userInformation(address _shpa, address mdntgjdd)\\n        public\\n        view\\n        returns (IND memory)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        return _shpn[_shpa];\\n    }\\n\\n    function ZZ_userInformation2(address _shpa, address mdntgjdd)\\n        public\\n        view\\n        returns (IND2 memory)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        return _shpn2[_shpa];\\n    }\\n\\n    function D2_Mrf() public view sbts returns (string[] memory, uint256) {\\n        address[] memory ntjadd = new address[](fel._uId);\\n\\n        uint256 c = 0;\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (\\n                compareStringsCaseInsensitive(\\n                    _shpn[_msgSender()].shp,\\n                    _shpn2[Ashpa[i]].shpu\\n                )\\n            ) {\\n                ntjadd[c] = Ashpa[i];\\n\\n                c = c + 1;\\n            }\\n        }\\n\\n        address[] memory ntjaddfi = new address[](c);\\n        string[] memory ntjem = new string[](c);\\n        for (uint256 i = 0; i \\u003c c; i++) {\\n            ntjaddfi[i] = ntjadd[i];\\n            ntjem[i] = _shpn[ntjadd[i]].shp;\\n        }\\n        return (ntjem, c);\\n    }\\n\\n    function D1_SDa()\\n        public\\n        view\\n        sbts\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        )\\n    {\\n        IND memory ch;\\n        ch = _shpn[_msgSender()];\\n        string memory output = \\\"\\\";\\n        uint256 _TT1i = ch.TT1i;\\n        uint256 _TT2i = ch.TT2i;\\n        uint256 _T1i = ch.T1i;\\n        uint256 _T2i = ch.T2i;\\n\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"[\\\",\\n                _shpn[_msgSender()].ulk,\\n                \\\",\\\",\\n                _shpn[ch.BSa].shp,\\n                \\\",\\\",\\n                _shpn[ch.FT1].shp,\\n                \\\",\\\",\\n                _shpn[ch.FT2].shp,\\n                \\\"]\\\"\\n            )\\n        );\\n        return (_TT1i, _TT2i, _T1i, _T2i, output);\\n    }\\n\\n    function X8_setBillboards(string memory _b1, string memory _b2)\\n        public\\n        mdntg\\n        returns (string memory)\\n    {\\n        BillBoards = string(abi.encodePacked(\\\"[\\\", _b1, \\\",\\\", _b2, \\\"]\\\"));\\n        return (BillBoards);\\n    }\\n\\n    function X9_setAboutUs(string memory _a1, string memory _a2)\\n        public\\n        mdntg\\n        returns (string memory)\\n    {\\n        BillBoards = string(abi.encodePacked(\\\"[\\\", _a1, \\\",\\\", _a2, \\\"]\\\"));\\n        return (AboutUs);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referral_Id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"A1_membership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"A2_CountryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AboutUs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BillBoards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D1_SDa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D2_Mrf\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_gratitude\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_b1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b2\",\"type\":\"string\"}],\"name\":\"X8_setBillboards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_a2\",\"type\":\"string\"}],\"name\":\"X9_setAboutUs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wal\",\"type\":\"address\"}],\"name\":\"ZZ_swaljdd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iii\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_uidba2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shpa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_userInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ben\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BSa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"shp\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T2i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT2i\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ulk\",\"type\":\"string\"}],\"internalType\":\"struct Decentralized_Community.IND\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shpa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_userInformation2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"uId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"shpu\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TstR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ZM\",\"type\":\"uint256\"}],\"internalType\":\"struct Decentralized_Community.IND2\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_CRV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CRVPget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CNTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CRVPrwd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mtdl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_zmn\",\"type\":\"uint256\"}],\"name\":\"Z_sCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_community_members\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_member_activation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract_value\",\"type\":\"address\"}],\"name\":\"Z_sJM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"Z_strx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"}],\"name\":\"Z_sulkli\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Decentralized_Community", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbda1827fda8325f49377bb7027b744c5993a25040925a7de97cc06f4007e2d7"}