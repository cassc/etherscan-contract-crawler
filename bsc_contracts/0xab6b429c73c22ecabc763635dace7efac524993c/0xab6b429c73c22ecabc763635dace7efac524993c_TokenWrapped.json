{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface TokenConverter {\r\n    function checkTokensDistance(address _tokenA, address _tokenB) external view returns (uint8);\r\n    function convertTwo(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint _amount\r\n    ) external view returns (uint);\r\n    function DEFAULT_ROUTER() external returns (address);\r\n    function DEFAULT_FACTORY() external returns (address);\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ncontract TokenWrapped {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n\r\n    uint public start = 0;\r\n    uint public THRESHOLD = 10 minutes;\r\n    uint public MAX_DOLLARS = 1000 * 1e18;\r\n\r\n    // main\r\n    address constant public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address constant public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address constant public TOKEN_CONVERTER = 0xe2bf8ef5E2b24441d5B2649A3Dc6D81afC1a9517;\r\n\r\n    TokenConverter tokenConverter;\r\n\r\n    address public owner;\r\n    modifier restricted {\r\n        require(msg.sender == owner, \"This function is restricted to owner\");\r\n        _;\r\n    }\r\n    modifier issuerOnly {\r\n        require(isIssuer[msg.sender], \"You do not have issuer rights\");\r\n        _;\r\n    }\r\n    modifier whitelistOnly {\r\n        require(isWhitelist[msg.sender], \"You do not have whitelist rights\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    mapping(address => bool) public isIssuer;\r\n    mapping(address => bool) public isWhitelist;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event IssuerRights(address indexed issuer, bool value);\r\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function mint(address _to, uint _amount) public issuerOnly returns (bool success) {\r\n        totalSupply += _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _amount) public issuerOnly returns (bool success) {\r\n        totalSupply -= _amount;\r\n        balanceOf[msg.sender] -= _amount;\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint _amount) public issuerOnly returns (bool success) {\r\n        allowance[_from][msg.sender] -= _amount;\r\n        balanceOf[_from] -= _amount;\r\n        totalSupply -= _amount;\r\n        emit Transfer(_from, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _amount) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint _amount) public returns (bool success) {\r\n        if (!isCan(msg.sender, _to, _amount)) return false;\r\n        balanceOf[msg.sender] -= _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n        \r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\r\n        if (!isCan(_from, _to, _amount)) return false;\r\n        allowance[_from][msg.sender] -= _amount;\r\n        balanceOf[_from] -= _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function isCan(address _from, address _to, uint _amount) internal returns (bool success) {\r\n\r\n        if (isWhitelist[_from] || isWhitelist[_to]) {\r\n            if (tokenConverter.checkTokensDistance(address(this), WBNB) == 1) {\r\n                if (start == 0) start = block.timestamp;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        if (tokenConverter.checkTokensDistance(address(this), WBNB) == 0) { \r\n            return true; \r\n        } else {\r\n            if (start == 0) start = block.timestamp; \r\n            if ((block.timestamp - start) >= THRESHOLD) return true;\r\n\r\n            uint inWBNB = tokenConverter.convertTwo(USDT, WBNB, MAX_DOLLARS);\r\n            uint inToken = tokenConverter.convertTwo(WBNB, address(this), inWBNB);\r\n\r\n            if (_amount <= inToken) return true;\r\n\r\n            address _pair = getPairAddress(address(this), WBNB, tokenConverter.DEFAULT_FACTORY());\r\n            // address _router = tokenConverter.DEFAULT_ROUTER();\r\n            // buy\r\n            if (msg.sender == _pair && _from == _pair) return false;\r\n            // sell\r\n            // if (msg.sender == _router && _to == _pair) return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function getPairAddress(address t1, address t2, address factory) internal view returns (address) {\r\n        return IFactory(factory).getPair(t1, t2); \r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        require(_newOwner != address(0), \"Invalid address: should not be 0x0\");\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setIssuerRights(address _issuer, bool _value) public restricted {\r\n        isIssuer[_issuer] = _value;\r\n        emit IssuerRights(_issuer, _value);\r\n    }\r\n\r\n    function setWhitelistRights(address _user, bool _value) public restricted {\r\n        isWhitelist[_user] = _value;\r\n    }\r\n\r\n    function setWhitelistUsers(address[] memory addresses, bool value)\r\n    public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            isWhitelist[addresses[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setThreshold(uint value_) public restricted {\r\n        THRESHOLD = value_;\r\n    }\r\n\r\n    function setMaxDollars(uint value_) public restricted {\r\n        MAX_DOLLARS = value_;\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), msg.sender);\r\n\r\n        isIssuer[msg.sender] = true;\r\n        emit IssuerRights(msg.sender, false);\r\n\r\n        tokenConverter = TokenConverter(TOKEN_CONVERTER);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"IssuerRights\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DOLLARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_CONVERTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIssuerRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setMaxDollars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelistRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenWrapped", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000544414f7663000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000544414f7663000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://789fe734066138f79186cfd9eb74736646c9269d0cfa2be4f0c4613438390e7b"}