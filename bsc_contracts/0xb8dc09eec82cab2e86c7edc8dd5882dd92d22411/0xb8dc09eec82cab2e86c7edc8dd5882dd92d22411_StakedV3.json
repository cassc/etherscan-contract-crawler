{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs \\u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) \\u003e\\u003e 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"},\"IAssets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ninterface IAssets {\\n    function asset(\\n        address user,\\n        uint pid,\\n        address token\\n    ) external view returns (uint256);\\n\\n    function plusAlone(\\n        address user,\\n\\t\\tuint pid,\\n\\t\\taddress token,\\n\\t\\tuint amount\\n    ) external;\\n\\n    function reduceAlone(\\n        address user,\\n\\t\\tuint pid,\\n\\t\\taddress token,\\n\\t\\tuint amount\\n    ) external;\\n}\"},\"ICompute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ninterface ICompute {\\n    function sqrtRatioAtTick(int24 tick) external pure returns (uint160 sqrtPriceX96);\\n    function tickAtSqrtRatio(uint160 sqrtPriceX96) external pure returns (int24 tick);\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external pure returns (uint128 liquidity);\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) external pure returns (uint256 amount0, uint256 amount1);\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IMasterChefV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\npragma abicoder v2;\\n\\ninterface IMasterChefV3 {\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n    function collect(CollectParams memory params) external returns (uint256 amount0, uint256 amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function harvest(uint256 _tokenId, address _to) external returns (uint256 reward);\\n    function withdraw(uint256 _tokenId, address _to) external returns (uint256 reward);\\n\\n    struct UserPositionInfo {\\n        uint128 liquidity;\\n        uint128 boostLiquidity;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 rewardGrowthInside;\\n        uint256 reward;\\n        address user;\\n        uint256 pid;\\n        uint256 boostMultiplier;\\n    }\\n    function userPositionInfos(uint256 _tokenId) external view returns (UserPositionInfo memory userInfo);\\n    function pendingCake(uint256 _tokenId) external view returns (uint256 reward);\\n}\"},\"INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position\\u0027s tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position\\u0027s tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\"},\"IPancakeV3LmPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ninterface IPancakeV3LmPool {\\n    function masterChef() external view returns (address);\\n}\"},\"IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.7.5;\\npragma abicoder v2;\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n    function positionManager() external view returns (address);\\n}\\n\"},\"IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"},\"IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.5.0;\\n\\nimport \\u0027./IUniswapV3PoolImmutables.sol\\u0027;\\nimport \\u0027./IUniswapV3PoolState.sol\\u0027;\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState\\n{\\n\\n}\\n\"},\"IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool\\u0027s fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    function lmPool() external view returns (address);\\n}\\n\"},\"IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool\\u0027s state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint32 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position\\u0027s key\\n    /// @param key The position\\u0027s key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"},\"IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \\u003e prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \\u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \\u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\\u0027s lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don\\u0027t need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \\u0026\\u0026 mulmod(x, y, denominator) \\u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.\\u0027s \\\"Hacker\\u0027s Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \\u003c= a \\u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \\u003c= a \\u003c 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) \\u003c= sqrt(a) \\u003c sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) \\u003c= sqrt(a) \\u003c 2**((k+1)/2) \\u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \\u003c\\u003c (log2(a) \\u003e\\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton\\u0027s method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 result * result \\u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                value \\u003e\\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 4 \\u003e 0) {\\n                value \\u003e\\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 2 \\u003e 0) {\\n                value \\u003e\\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 1 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value \\u003e= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value \\u003e= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value \\u003e= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value \\u003e= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value \\u003e= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value \\u003e= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 10**result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c (result * 8) \\u003c value ? 1 : 0);\\n        }\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y \\u003c 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"StakedV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n\\nimport \\\"./ISwapRouter.sol\\\";\\nimport \\\"./IQuoterV2.sol\\\";\\n\\n\\nimport \\\"./IUniswapV3Pool.sol\\\";\\nimport \\\"./IPancakeV3LmPool.sol\\\";\\nimport \\\"./IUniswapV3Factory.sol\\\";\\n\\nimport \\\"./IMasterChefV3.sol\\\";\\n\\nimport \\\"./ICompute.sol\\\";\\nimport \\\"./INonfungiblePositionManager.sol\\\";\\nimport \\\"./IWETH9.sol\\\";\\nimport \\\"./IAssets.sol\\\";\\n\\n\\ncontract StakedV3 is Ownable,ReentrancyGuard {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeCast for uint256;\\n\\t\\n\\t\\n\\taddress public route;\\n\\taddress public quotev2;\\n\\taddress public compute;\\n\\taddress public assets;\\n\\n\\taddress public factory;\\n\\taddress public weth;\\n\\taddress public manage;\\n\\n\\tuint public fee;\\n\\t\\n\\n\\tstruct pool {\\n\\t\\taddress token0; \\t\\t//\u8d28\u62bc\u5e01\u79cd\u5408\u7ea6\u5730\u5740\\n\\t\\taddress token1;\\t\\t//\u53e6\u4e00\u79cd\u5e01\u79cd\u5408\u7ea6\u5730\u5740\\n\\t\\taddress pool;\\t\\t//pool \u5408\u7ea6\u5730\u5740\\n\\t\\taddress farm;\\t\\t//farm \u5730\u5740\\n\\t\\tuint24 fee;\\t\\t\\t//pool\u624b\u7eed\u8d39\\n\\t\\tuint point;\\t\\t\\t//\u6ed1\u70b9\\n\\t\\tbool inStatus;\\t\\t//\u662f\u5426\u5f00\u542f\u8d28\u62bc\\n\\t\\tbool outStatus;\\t\\t//\u662f\u5426\u53ef\u4ee5\u63d0\u53d6\\n\\t\\tuint tokenId;\\t\\t//\u8d28\u62bc\u7684nft tokenId\\n\\t\\tuint wight0;\\n\\t\\tuint wight1;\\n\\t\\tuint lp0;\\n\\t\\tuint lp1;\\n\\t}\\n\\n\\t// \u662f\u5426\u81ea\u52a8\u8fdb\u884cFarm\\n\\tmapping(uint =\\u003e bool) public isFarm;\\n\\t// \u6ed1\u70b9\u6700\u5927\u6bd4\u7387 * 2\\n\\tuint private pointMax = 10 ** 8;\\n\\t// \u9879\u76ee\u5e93\\n\\tmapping(uint =\\u003e pool) public pools;\\n\\n\\tevent VerifyUpdate(address signer);\\n\\tevent Setting(address route,address quotev2,address compute,address factory,address weth,address manage);\\n\\tevent InvestToken(uint pid,address user,uint amount,uint investType,uint cycle,uint time);\\n\\tevent ExtractToken(uint pid,address user,address token,uint amount,uint fee,uint tradeType,uint time);\\n\\n\\tconstructor (\\n\\t\\taddress _route,\\n\\t\\taddress _quotev2,\\n\\t\\taddress _compute,\\n\\t\\taddress _assets,\\n\\t\\tuint _fee\\n\\t) {\\n\\t\\t_setting(_route,_quotev2,_compute,_assets,_fee);\\n\\t}\\n\\n\\t// \u63a5\u6536ETH NFT\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\tfunction onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n\\tfunction _tokenSend(\\n        address _token,\\n        uint _amount\\n    ) private returns (bool result) {\\n        if(_token == address(0)){\\n            Address.sendValue(payable(msg.sender),_amount);\\n            result = true;\\n        }else{\\n            IERC20 token = IERC20(_token);\\n            result = token.transfer(msg.sender,_amount);\\n        }\\n    }\\n\\n\\tfunction balanceOf(\\n\\t\\taddress _token\\n\\t) public view returns (uint balance) {\\n\\t\\tif(_token == weth) {\\n\\t\\t\\tbalance = address(this).balance;\\n\\t\\t}else {\\n\\t\\t\\tIERC20 token = IERC20(_token);\\n            balance = token.balanceOf(address(this));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unWrapped() private {\\n\\t\\tIERC20 token = IERC20(weth);\\n        uint balance = token.balanceOf(address(this));\\n\\t\\tif(balance \\u003e 0) {\\n\\t\\t\\tIWETH9(weth).withdraw(balance);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pointHandle(\\n\\t\\tuint point,\\n\\t\\tuint amount,\\n\\t\\tbool isplus\\n\\t) private view returns (uint result) {\\n\\t\\tuint rate = 1;\\n\\t\\tif(isplus) {\\n\\t\\t\\trate = pointMax.add(point);\\n\\t\\t}else {\\n\\t\\t\\trate = pointMax.sub(point);\\n\\t\\t}\\n\\t\\tresult = amount.mul(rate).div(pointMax);\\n\\t}\\n\\n\\tfunction abs(\\n\\t\\tint x\\n\\t) private pure returns (int) {\\n\\t\\treturn x \\u003e= 0 ? x : -x;\\n\\t}\\n\\n\\t// Balance check attempted to distribute and returned whether the distribution was successful\\n\\tfunction extractAmount(\\n\\t\\taddress token,\\n\\t\\tuint amount\\n\\t) private returns (bool) {\\n\\t\\tuint balance = balanceOf(token);\\n\\t\\t// Is the platform\\u0027s storage sufficient for direct distribution\\n\\t\\tif(balance \\u003e= amount) {\\n\\t\\t\\tif(token != weth) {\\n\\t\\t\\t\\trequire(_tokenSend(token,amount),\\\"Staked::extract fail\\\");\\n\\t\\t\\t}else {\\n\\t\\t\\t\\trequire(_tokenSend(address(0),amount),\\\"Staked::extract fail\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t// Activate failed projects\\n\\tfunction Reboot(\\n\\t\\tuint id,\\n\\t\\tuint deadline\\n\\t) public onlyOwner {\\n\\t\\t\\n\\t\\t(bool pass,PoolToken memory tokens) = Challenge(id);\\n\\t\\tif(!pass) {\\n\\t\\t\\t// Harvest income\\n\\t\\t\\t_harvest(id);\\n\\t\\t\\t// Remove all liquidity from the current project Farm\\n\\t\\t\\t_remove(id,tokens,deadline);\\n\\n\\t\\t\\t// Exchange into pledged currency\\n\\t\\t\\t_reSwap(id,tokens);\\n\\t\\t\\t// Withdrawal of NFT\\n\\t\\t\\t_withdraw(id);\\n\\n\\t\\t\\t// Update the latest currency price ratio\\n\\t\\t\\twightReset(id);\\n\\n\\t\\t\\t// Convert a single currency to two currencies for Farm\\n\\t\\t\\tuint amount0 = lpRate(id);\\n\\t\\t\\t(uint amountOut,) = _amountOut(id,pools[id].token0,pools[id].token1,amount0,false);\\n\\n\\t\\t\\tSwap(id,pools[id].token0,pools[id].token1,amount0,amountOut,0);\\n\\t\\t\\tMint(id,deadline);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Handling When Extracting Token Liquidity Fails\\n\\tfunction invalid(\\n\\t\\tuint id,\\n\\t\\taddress token,\\n\\t\\tuint amount,\\n\\t\\tuint deadline,\\n\\t\\tPoolToken memory tokens\\n\\t) private {\\n\\t\\t// Harvest income\\n\\t\\t_harvest(id);\\n\\t\\t// Remove all liquidity from the current project Farm\\n\\t\\t_remove(id,tokens,deadline);\\n\\t\\t// bytes memory path;\\n\\t\\tuint amountOut;\\n\\t\\tuint balance;\\n\\n\\t\\t// Convert all to extraction currency\\n\\t\\tif(tokens.token0 == token) {\\n\\t\\t\\tif(tokens.amount0 == 0) {\\n\\t\\t\\t\\t(amountOut,balance) = _amountOut(id,tokens.token1,tokens.token0,0,true);\\n\\t\\t\\t\\tSwap(id,tokens.token1,tokens.token0,balance,amountOut,0);\\n\\t\\t\\t}\\n\\t\\t}else {\\n\\t\\t\\tif(tokens.amount1 == 0) {\\n\\t\\t\\t\\t(amountOut,balance) = _amountOut(id,tokens.token0,tokens.token1,0,true);\\n\\t\\t\\t\\tSwap(id,tokens.token0,tokens.token1,balance,amountOut,0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Second attempt to distribute\\n\\t\\tbool result = extractAmount(token,amount);\\n\\t\\trequire(result,\\\"Staked::extraction failed (invalid:Insufficient reserves1)\\\");\\n\\t\\t// Withdrawal of NFT and Reset of Farm Pledge\\n\\t\\t_withdraw(id);\\n\\t\\t// Convert all to pledge currency\\n\\t\\tif(pools[id].token0 != token) {\\n\\t\\t\\t(amountOut,balance) = _amountOut(id,pools[id].token1,pools[id].token0,0,true);\\n\\t\\t\\tSwap(id,pools[id].token1,pools[id].token0,balance,amountOut,0);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Update the latest currency price ratio\\n\\t\\twightReset(id);\\n\\n\\t\\t// Convert a single currency to two currencies for Farm\\n\\t\\tuint amount0 = lpRate(id);\\n\\t\\t(amountOut,) = _amountOut(id,pools[id].token0,pools[id].token1,amount0,false);\\n\\t\\tSwap(id,pools[id].token0,pools[id].token1,amount0,amountOut,0);\\n\\t\\tMint(id,deadline);\\n\\t}\\n\\t\\n\\tfunction wightReset(\\n\\t\\tuint id\\n\\t) private {\\n\\t\\t(uint amountOut,) = _amountOut(id,pools[id].token0,pools[id].token1,10 ** 18,false);\\n\\t\\tpools[id].wight0 = 10 ** 18;\\n\\t\\tpools[id].wight1 = amountOut;\\n\\t}\\n\\n\\tfunction tryRun(\\n\\t\\tuint id,\\n\\t\\taddress token,\\n\\t\\tuint amount,\\n\\t\\tuint deadline,\\n\\t\\tPoolToken memory tokens,\\n\\t\\tuint liquidity\\n\\t) private returns (bool) {\\n\\t\\t\\n\\t\\tif(tokens.liquidity \\u003e liquidity) {\\n\\t\\t\\ttokens.liquidity = uint128(liquidity);\\n\\t\\t}else {\\n\\t\\t\\ttokens.liquidity = uint128(tokens.liquidity * 9999 / 10000);\\n\\t\\t}\\n\\t\\trequire(tokens.liquidity \\u003e 0,\\\"Staked::insufficient liquidity (valid)\\\");\\n\\t\\t(tokens.amount0,tokens.amount1) = ICompute(compute).getAmountsForLiquidity(tokens.sqrtPriceX96,tokens.sqrtRatioAX96,tokens.sqrtRatioBX96,tokens.liquidity);\\n\\t\\t_remove(id,tokens,deadline);\\n\\t\\t// Attempt to distribute\\n\\t\\tbool result = extractAmount(token,amount);\\n\\t\\tuint balance;\\n\\t\\tif(!result) {\\n\\t\\t\\tif(token == tokens.token0) {\\n\\t\\t\\t\\tbalance = balanceOf(tokens.token1);\\n\\t\\t\\t\\ttokens.amount1 = tokens.amount1 \\u003e balance ? balance : tokens.amount1;\\n\\t\\t\\t\\tSwap(id,tokens.token1,tokens.token0,tokens.amount1,6,0);\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tbalance = balanceOf(tokens.token0);\\n\\t\\t\\t\\ttokens.amount0 = tokens.amount0 \\u003e balance ? balance : tokens.amount0;\\n\\t\\t\\t\\tSwap(id,tokens.token0,tokens.token1,tokens.amount0,6,0);\\n\\t\\t\\t}\\n\\t\\t\\t// Attempt to distribute\\n\\t\\t\\tresult = extractAmount(token,amount);\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction valid(\\n\\t\\tuint id,\\n\\t\\taddress token,\\n\\t\\tuint amount,\\n\\t\\tuint deadline,\\n\\t\\tPoolToken memory tokens\\n\\t) private {\\n\\t\\tuint liquidity;\\n\\t\\tuint balance = balanceOf(token);\\n\\t\\tuint temp = amount.sub(balance).div(2);\\n\\t\\ttemp = temp \\u003e= 1 ? temp : 1;\\n\\n\\t\\tif(token == tokens.token0 \\u0026\\u0026 tokens.amount0 \\u003e 0) {\\n\\t\\t\\tliquidity = tokens.liquidity * temp / tokens.amount0;\\n\\t\\t}else if(tokens.amount1 \\u003e 0) {\\n\\t\\t\\tliquidity = tokens.liquidity * temp / tokens.amount1;\\n\\t\\t}\\n\\t\\t// Remove floating 2%\\n\\t\\tuint upAmount = liquidity * 102 / 100;\\n\\t\\tif(upAmount \\u003e tokens.liquidity) {\\n\\t\\t\\tliquidity = liquidity * 101 / 100;\\n\\t\\t}else {\\n\\t\\t\\tliquidity = upAmount;\\n\\t\\t}\\n\\t\\t// The second and third times\\n\\t\\tbool result = tryRun(id,token,amount,deadline,tokens,liquidity);\\n\\n\\t\\tif(!result) {\\n\\t\\t\\tbalance = balanceOf(token);\\n\\t\\t\\tuint outAmount = amount.sub(balance).mul(102).div(100);\\n\\t\\t\\t(,tokens) = Challenge(id);\\n\\t\\t\\tliquidity = uint128(liquidity * outAmount / temp);\\n\\t\\t\\t// The fourth and fifth time\\n\\t\\t\\tresult = tryRun(id,token,amount,deadline,tokens,liquidity);\\n\\t\\t}\\n\\t\\t\\n\\t\\trequire(result,\\\"Staked::final extraction failed\\\");\\n\\t}\\n\\n\\tfunction lpExtract(\\n\\t\\tuint id,\\n\\t\\taddress token,\\n\\t\\tuint amount,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\trequire(pools[id].token0 == token || pools[id].token1 == token,\\\"Staked::does not support decompression\\\");\\n\\t\\t// First attempt to distribute\\n\\t\\tbool result = extractAmount(token,amount);\\n\\t\\t\\n\\t\\tif(!result) {\\n\\t\\t\\trequire(pools[id].tokenId != 0,\\\"Staked::insufficient liquidity (lpExtract)\\\");\\n\\t\\t\\t(bool pass,PoolToken memory tokens) = Challenge(id);\\n\\t\\t\\t// Is liquidity ineffective\\n\\t\\t\\tif(pass) {\\n\\t\\t\\t\\tvalid(id,token,amount,deadline,tokens);\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tinvalid(id,token,amount,deadline,tokens);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unlpExtract(\\n\\t\\tuint amount,\\n\\t\\taddress token\\n\\t) private {\\n\\t\\tuint balance = balanceOf(token);\\n\\t\\tif(token != weth) {\\n\\t\\t\\trequire(balance \\u003e= amount,\\\"Staked::insufficient funds reserves\\\");\\n\\t\\t\\trequire(_tokenSend(token,amount),\\\"Staked::profit extract fail\\\");\\n\\t\\t}else {\\n\\t\\t\\trequire(balance \\u003e= amount,\\\"Staked::insufficient funds reserves\\\");\\n\\t\\t\\trequire(_tokenSend(address(0),amount),\\\"Staked::profit extract fail\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction Extract(\\n\\t\\tuint id,\\n\\t\\tuint tradeType,\\n\\t\\taddress token,\\n\\t\\tuint amount,\\n\\t\\tuint deadline\\n\\t) public nonReentrant {\\n\\t\\trequire(pools[id].outStatus,\\\"Staked::extract closed\\\");\\n\\t\\trequire(deadline \\u003e block.timestamp,\\\"Staked::transaction lapsed\\\");\\n\\t\\t\\n\\t\\t\\n\\t\\tuint reduceAmount = amount;\\n\\t\\t// Asset inspection\\n\\t\\tamount = pointMax.sub(fee).mul(amount).div(pointMax);\\n\\t\\tuint total = IAssets(assets).asset(msg.sender,id,token);\\n\\t\\trequire(total \\u003e= amount,\\\"Staked::Overdrawing\\\");\\n\\n\\t\\t// Is the income in the currency that constitutes lp\\n\\t\\tif(pools[id].token0 == token) {\\n\\t\\t\\tlpExtract(id,token,amount,deadline);\\n\\t\\t} else if(pools[id].token1 == token) {\\n\\t\\t\\tlpExtract(id,token,amount,deadline);\\n\\t\\t} else {\\n\\t\\t\\tunlpExtract(amount,token);\\n\\t\\t}\\n\\t\\t// Accounting\\n\\t\\tIAssets(assets).reduceAlone(msg.sender,id,token,reduceAmount);\\n\\t\\temit ExtractToken(id,msg.sender,token,amount,reduceAmount.sub(amount),tradeType,block.timestamp);\\n\\t}\\n\\n\\tfunction Convert(\\n\\t\\taddress tokenIn,\\n\\t\\tuint inAmount,\\n\\t\\tuint outAmount,\\n\\t\\tbytes memory path,\\n\\t\\tuint side\\n\\t) public onlyOwner {\\n\\t\\t_swap(tokenIn,inAmount,outAmount,path,side);\\n\\t}\\n\\n\\n\\tfunction pendingReward(\\n\\t\\tuint id\\n\\t) public view returns (uint256 reward) {\\n\\t\\treward = IMasterChefV3(pools[id].farm).pendingCake(pools[id].tokenId);\\n\\t}\\n\\n\\tfunction harvestFarm(\\n\\t\\tuint id\\n\\t) public onlyOwner {\\n\\t\\t_harvest(id);\\n\\t}\\n\\tfunction _harvest(\\n\\t\\tuint id\\n\\t) private {\\n\\t\\tIMasterChefV3(pools[id].farm).harvest(pools[id].tokenId,address(this));\\n\\t}\\n\\n\\tfunction withdrawNFT(\\n\\t\\tuint tokenId\\n\\t) public onlyOwner {\\n\\t\\tINonfungiblePositionManager(manage).safeTransferFrom(address(this),msg.sender,tokenId);\\n\\t}\\n\\n\\tfunction withdrawFarm(\\n\\t\\tuint id,\\n\\t\\tuint deadline\\n\\t) public onlyOwner {\\n\\t\\t_harvest(id);\\n\\t\\t(,PoolToken memory tokens) = Challenge(id);\\n\\t\\t_remove(id,tokens,deadline);\\n\\t\\t_withdraw(id);\\n\\t}\\n\\n\\tfunction _withdraw(\\n\\t\\tuint id\\n\\t) private {\\n\\t\\tIMasterChefV3(pools[id].farm).withdraw(pools[id].tokenId,address(this));\\n\\t\\t// Reset tokenId to 0\\n\\t\\tpools[id].tokenId = 0;\\n\\t}\\n\\n\\tfunction Invest(\\n\\t\\tuint id,\\n\\t\\tuint amount,\\n\\t\\tuint quoteAmount,\\n\\t\\tuint investType,\\n\\t\\tuint cycle,\\n\\t\\tuint deadline\\n\\t) public payable nonReentrant {\\n\\t\\trequire(pools[id].inStatus,\\\"Staked::invest project closed\\\");\\n\\t\\trequire(deadline \\u003e block.timestamp,\\\"Staked::transaction lapsed\\\");\\n\\t\\t// Pledged Tokens\\n\\t\\tif(pools[id].token0 == weth) {\\n\\t\\t\\trequire(msg.value == amount,\\\"Staked::input eth is not accurate\\\");\\n\\t\\t}else {\\n\\t\\t\\tTransferHelper.safeTransferFrom(pools[id].token0,msg.sender,address(this),amount);\\n\\t\\t}\\n\\t\\tuint balance = balanceOf(pools[id].token0);\\n\\t\\tuint amount0 = lpRate(id);\\n\\n\\t\\tif(isFarm[id]) {\\n\\t\\t\\t// Liquidity check\\n\\t\\t\\t(bool pass,PoolToken memory tokens) = Challenge(id);\\n\\t\\t\\tif(!pass) {\\n\\t\\t\\t\\t// Harvest income\\n\\t\\t\\t\\t_harvest(id);\\n\\t\\t\\t\\t// Remove liquidity\\n\\t\\t\\t\\t_remove(id,tokens,deadline);\\n\\t\\t\\t\\t// Exchange into pledged currency\\n\\t\\t\\t\\t_reSwap(id,tokens);\\n\\t\\t\\t\\t// Withdrawal of NFT\\n\\t\\t\\t\\t_withdraw(id);\\n\\t\\t\\t\\t// Update the latest currency price ratio\\n\\t\\t\\t\\twightReset(id);\\n\\t\\t\\t}\\n\\t\\t\\t// Token exchange\\n\\t\\t\\t// Number of tokens participating in redemption\\n\\t\\t\\tbalance = balanceOf(pools[id].token0);\\n\\t\\t\\tamount0 = lpRate(id);\\n\\t\\t\\t// QuoteAmount Recalculate Valuation\\n\\t\\t\\tif(!pass) {\\n\\t\\t\\t\\t(quoteAmount,) = _amountOut(id,pools[id].token0,pools[id].token1,amount0,false);\\n\\t\\t\\t}\\n\\t\\t\\t// Exchange token 1 token 0: Spend a fixed number of tokens\\n\\t\\t\\tSwap(id,pools[id].token0,pools[id].token1,amount0,quoteAmount,0);\\n\\n\\t\\t\\t// Add liquidity\\n\\t\\t\\tif(pools[id].tokenId == 0) {\\n\\t\\t\\t\\t// Mint\\n\\t\\t\\t\\tMint(id,deadline);\\n\\t\\t\\t}else {\\n\\t\\t\\t\\t// Append\\n\\t\\t\\t\\tAppend(id,tokens,deadline);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(amount \\u003e 0) {\\n\\t\\t\\t// Accounting\\n\\t\\t\\tif(investType == 1) {\\n\\t\\t\\t\\tIAssets(assets).plusAlone(msg.sender,id,pools[id].token0,amount);\\n\\t\\t\\t}\\n\\t\\t\\temit InvestToken(id,msg.sender,amount,investType,cycle,block.timestamp);\\n\\t\\t}\\n\\t}\\n\\n\\tstruct PoolToken {\\n\\t\\taddress token0;\\n\\t\\taddress token1;\\n\\t\\tuint amount0;\\n\\t\\tuint amount1;\\n\\t\\tint24 tickLower;\\n\\t\\tint24 tickUpper;\\n\\t\\tuint160 sqrtPriceX96;\\n\\t\\tuint160 sqrtRatioAX96;\\n\\t\\tuint160 sqrtRatioBX96;\\n\\t\\tuint128 liquidity;\\n\\t}\\n\\n\\t// Converting tokens from ineffective liquidity into pledged tokens\\n\\tfunction _reSwap(\\n\\t\\tuint id,\\n\\t\\tPoolToken memory tokens\\n\\t) private {\\n\\t\\tuint balance;\\n\\t\\tuint amountOut;\\n\\t\\tif(tokens.amount0 != 0) {\\n\\t\\t\\tif(tokens.token0 != pools[id].token0) {\\n\\t\\t\\t\\t(amountOut,balance) = _amountOut(id,tokens.token0,tokens.token1,0,true);\\n\\t\\t\\t\\tSwap(id,tokens.token0,tokens.token1,balance,amountOut,0);\\n\\t\\t\\t}\\n\\t\\t}else if(tokens.amount1 != 0) {\\n\\t\\t\\tif(tokens.token1 == pools[id].token1) {\\n\\t\\t\\t\\t(amountOut,balance) = _amountOut(id,tokens.token1,tokens.token0,0,true);\\n\\t\\t\\t\\tSwap(id,tokens.token1,tokens.token0,balance,amountOut,0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _amountOut(\\n\\t\\tuint id,\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint amountIn,\\n\\t\\tbool all\\n\\t) private returns (uint outAmount,uint inAmount) {\\n\\t\\tif(all) {\\n\\t\\t\\tamountIn = balanceOf(tokenIn);\\n\\t\\t}\\n\\t\\tbytes memory path = abi.encodePacked(tokenIn,pools[id].fee,tokenOut);\\n\\t\\t(outAmount,,,) = IQuoterV2(quotev2).quoteExactInput(path,amountIn);\\n\\t\\tinAmount = amountIn;\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\tuint id,\\n\\t\\tPoolToken memory tokens,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\tuint min0 = pointHandle(pools[id].point,tokens.amount0,false);\\n\\t\\tuint min1 = pointHandle(pools[id].point,tokens.amount1,false);\\n\\t\\tif(tokens.liquidity \\u003e 0) {\\n\\t\\t\\tIMasterChefV3(pools[id].farm).decreaseLiquidity(\\n\\t\\t\\t\\tIMasterChefV3.DecreaseLiquidityParams({\\n\\t\\t\\t\\t\\ttokenId:pools[id].tokenId,\\n\\t\\t\\t\\t\\tliquidity:tokens.liquidity,\\n\\t\\t\\t\\t\\tamount0Min:min0,\\n\\t\\t\\t\\t\\tamount1Min:min1,\\n\\t\\t\\t\\t\\tdeadline:deadline\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tIMasterChefV3(pools[id].farm).collect(\\n\\t\\t\\tIMasterChefV3.CollectParams({\\n\\t\\t\\t\\ttokenId:pools[id].tokenId,\\n\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\tamount0Max:uint128(0xffffffffffffffffffffffffffffffff),\\n\\t\\t\\t\\tamount1Max:uint128(0xffffffffffffffffffffffffffffffff)\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\tunWrapped();\\n\\t}\\n\\n\\tfunction MintTick(\\n\\t\\tuint id\\n\\t) private view returns (uint160,uint160,uint160,int24,int24) {\\n\\t\\t(uint160 sqrtPriceX96,int24 tick,,,,,) = IUniswapV3Pool(pools[id].pool).slot0();\\n\\t\\tint24 tickSpacing = IUniswapV3Pool(pools[id].pool).tickSpacing();\\n\\t\\tint256 grap = abs(tick * pools[id].point.toInt256() / pointMax.toInt256());\\n\\t\\tint24 tickLower;\\n\\t\\tint24 tickUpper;\\n\\t\\tif(grap \\u003e tickSpacing) {\\n\\t\\t\\ttickLower = int24((tick - grap) / tickSpacing * tickSpacing);\\n\\t\\t\\ttickUpper = int24((tick + grap) / tickSpacing * tickSpacing);\\n\\t\\t}else {\\n\\t\\t\\tint256 multiple = abs(tick / tickSpacing);\\n\\t\\t\\tif(multiple \\u003e= 1) {\\n\\t\\t\\t\\ttickLower = int24(-tickSpacing * (multiple + 3));\\n\\t\\t\\t\\ttickUpper = int24(tickSpacing * (multiple + 3));\\n\\t\\t\\t}else {\\n\\t\\t\\t\\ttickLower = int24(-tickSpacing * 3);\\n\\t\\t\\t\\ttickUpper = int24(tickSpacing * 3);\\n\\t\\t\\t}\\n\\t\\t\\tif(tickUpper \\u003e 887272) {\\n\\t\\t\\t\\ttickLower = int24(-887272 / tickSpacing * tickSpacing);\\n\\t\\t\\t\\ttickUpper = int24(887272 / tickSpacing * tickSpacing);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\tuint160 sqrtRatioAX96 = ICompute(compute).sqrtRatioAtTick(tickLower);\\n\\t\\tuint160 sqrtRatioBX96 = ICompute(compute).sqrtRatioAtTick(tickUpper);\\n\\t\\treturn (sqrtPriceX96,sqrtRatioAX96,sqrtRatioBX96,tickLower,tickUpper);\\n\\t}\\n\\n\\tfunction Mint(\\n\\t\\tuint id,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\t(uint160 sqrtPriceX96,uint160 sqrtRatioAX96,uint160 sqrtRatioBX96,int24 tickLower,int24 tickUpper) = MintTick(id);\\n\\t\\t// Corresponding correct currency and quantity\\n\\t\\tbool correct = pools[id].token0 \\u003c pools[id].token1;\\n\\t\\tPoolToken memory tokens;\\n\\t\\tif(correct) {\\n\\t\\t\\ttokens = PoolToken({\\n\\t\\t\\t\\ttoken0:pools[id].token0,\\n\\t\\t\\t\\ttoken1:pools[id].token1,\\n\\t\\t\\t\\tamount0:balanceOf(pools[id].token0),\\n\\t\\t\\t\\tamount1:balanceOf(pools[id].token1),\\n\\t\\t\\t\\ttickLower:tickLower,\\n\\t\\t\\t\\ttickUpper:tickUpper,\\n\\t\\t\\t\\tsqrtPriceX96:sqrtPriceX96,\\n\\t\\t\\t\\tsqrtRatioAX96:sqrtRatioAX96,\\n\\t\\t\\t\\tsqrtRatioBX96:sqrtRatioBX96,\\n\\t\\t\\t\\tliquidity:0\\n\\t\\t\\t});\\n\\t\\t}else {\\n\\t\\t\\ttokens = PoolToken({\\n\\t\\t\\t\\ttoken0:pools[id].token1,\\n\\t\\t\\t\\ttoken1:pools[id].token0,\\n\\t\\t\\t\\tamount0:balanceOf(pools[id].token1),\\n\\t\\t\\t\\tamount1:balanceOf(pools[id].token0),\\n\\t\\t\\t\\ttickLower:tickLower,\\n\\t\\t\\t\\ttickUpper:tickUpper,\\n\\t\\t\\t\\tsqrtPriceX96:sqrtPriceX96,\\n\\t\\t\\t\\tsqrtRatioAX96:sqrtRatioAX96,\\n\\t\\t\\t\\tsqrtRatioBX96:sqrtRatioBX96,\\n\\t\\t\\t\\tliquidity:0\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tuint128 liquidity = ICompute(compute).getLiquidityForAmounts(sqrtPriceX96,sqrtRatioAX96,sqrtRatioBX96,tokens.amount0,tokens.amount1);\\n\\t\\t(tokens.amount0,tokens.amount1) = ICompute(compute).getAmountsForLiquidity(sqrtPriceX96,sqrtRatioAX96,sqrtRatioBX96,liquidity);\\n\\t\\t_mint(id,tokens,deadline);\\n\\t}\\n\\n\\tfunction _mint(\\n\\t\\tuint id,\\n\\t\\tPoolToken memory tokens,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\trequire(tokens.amount0 \\u003e 0,\\\"Staked::Abnormal liquidity\\\");\\n\\t\\trequire(tokens.amount1 \\u003e 0,\\\"Staked::Abnormal liquidity\\\");\\n\\t\\tuint ethAmount = 0;\\n\\t\\t\\n\\t\\tif(tokens.token0 != weth) {\\n\\t\\t\\tTransferHelper.safeApprove(tokens.token0,manage,tokens.amount0);\\n\\t\\t} else {\\n\\t\\t\\tethAmount = tokens.amount0;\\n\\t\\t}\\n\\t\\tif(tokens.token1 != weth) {\\n\\t\\t\\tTransferHelper.safeApprove(tokens.token1,manage,tokens.amount1);\\n\\t\\t} else {\\n\\t\\t\\tethAmount = tokens.amount1;\\n\\t\\t}\\n\\t\\tuint amount0;\\n\\t\\tuint amount1;\\n\\t\\t// Add liquidity location\\n\\t\\t(pools[id].tokenId,,amount0,amount1) = INonfungiblePositionManager(manage).mint{ value:ethAmount }(\\n\\t\\t\\tINonfungiblePositionManager.MintParams({\\n\\t\\t\\t\\ttoken0:tokens.token0,\\n\\t\\t\\t\\ttoken1:tokens.token1,\\n\\t\\t\\t\\tfee:pools[id].fee,\\n\\t\\t\\t\\ttickLower:tokens.tickLower,\\n\\t\\t\\t\\ttickUpper:tokens.tickUpper,\\n\\t\\t\\t\\tamount0Desired:tokens.amount0,\\n\\t\\t\\t\\tamount1Desired:tokens.amount1,\\n\\t\\t\\t\\tamount0Min:1,\\n\\t\\t\\t\\tamount1Min:1,\\n\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\tdeadline:deadline\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\tif(tokens.token0 == pools[id].token0) {\\n\\t\\t\\tpools[id].lp0 = amount0;\\n\\t\\t\\tpools[id].lp1 = amount1;\\n\\t\\t}else {\\n\\t\\t\\tpools[id].lp0 = amount1;\\n\\t\\t\\tpools[id].lp1 = amount0;\\n\\t\\t}\\n\\t\\t// Farm Pledge\\n\\t\\tINonfungiblePositionManager(manage).safeTransferFrom(address(this),pools[id].farm,pools[id].tokenId);\\n\\t}\\n\\n\\tfunction Challenge(\\n\\t\\tuint id\\n\\t) public view returns (bool result,PoolToken memory tokens) {\\n\\t\\tuint amount0;\\n\\t\\tuint amount1;\\n\\t\\tint24 tickLower;\\n\\t\\tint24 tickUpper;\\n\\t\\tuint160 sqrtPriceX96;\\n\\t\\tuint160 sqrtRatioAX96;\\n\\t\\tuint160 sqrtRatioBX96;\\n\\t\\tif(pools[id].tokenId == 0) {\\n\\t\\t\\tresult = true;\\n\\t\\t} else {\\n\\t\\t\\tIMasterChefV3.UserPositionInfo memory tokenPosition = IMasterChefV3(pools[id].farm).userPositionInfos(pools[id].tokenId);\\n\\t\\t\\ttickLower = tokenPosition.tickLower;\\n\\t\\t\\ttickUpper = tokenPosition.tickUpper;\\n\\n\\t\\t\\t(sqrtPriceX96,,,,,,) = IUniswapV3Pool(pools[id].pool).slot0();\\n\\t\\t\\tsqrtRatioAX96 = ICompute(compute).sqrtRatioAtTick(tickLower);\\n\\t\\t\\tsqrtRatioBX96 = ICompute(compute).sqrtRatioAtTick(tickUpper);\\n\\t\\t\\t\\n\\t\\t\\t(amount0,amount1) = ICompute(compute).getAmountsForLiquidity(sqrtPriceX96,sqrtRatioAX96,sqrtRatioBX96,tokenPosition.liquidity);\\n\\t\\t\\tif(amount0 == 0 || amount1 == 0) {\\n\\t\\t\\t\\tresult = false;\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tresult = true;\\n\\t\\t\\t}\\n\\t\\t\\tbool correct = pools[id].token0 \\u003c pools[id].token1;\\n\\t\\t\\ttokens = PoolToken({\\n\\t\\t\\t\\ttoken0:correct ? pools[id].token0 : pools[id].token1,\\n\\t\\t\\t\\ttoken1:correct ? pools[id].token1 : pools[id].token0,\\n\\t\\t\\t\\tamount0:amount0,\\n\\t\\t\\t\\tamount1:amount1,\\n\\t\\t\\t\\ttickLower:tickLower,\\n\\t\\t\\t\\ttickUpper:tickUpper,\\n\\t\\t\\t\\tsqrtPriceX96:sqrtPriceX96,\\n\\t\\t\\t\\tsqrtRatioAX96:sqrtRatioAX96,\\n\\t\\t\\t\\tsqrtRatioBX96:sqrtRatioBX96,\\n\\t\\t\\t\\tliquidity:tokenPosition.liquidity\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\tfunction Append(\\n\\t\\tuint id,\\n\\t\\tPoolToken memory tokens,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\trequire(pools[id].tokenId != 0,\\\"Staked::no liquidity position\\\");\\n\\n\\t\\tuint amount0 = balanceOf(tokens.token0);\\n\\t\\tuint amount1 = balanceOf(tokens.token1);\\n\\n\\t\\tuint128 liquidity = ICompute(compute).getLiquidityForAmounts(tokens.sqrtPriceX96,tokens.sqrtRatioAX96,tokens.sqrtRatioBX96,amount0,amount1);\\n\\t\\t(tokens.amount0,tokens.amount1) = ICompute(compute).getAmountsForLiquidity(tokens.sqrtPriceX96,tokens.sqrtRatioAX96,tokens.sqrtRatioBX96,liquidity);\\n\\t\\t_append(id,tokens,deadline);\\n\\t} \\n\\n\\tfunction _append(\\n\\t\\tuint id,\\n\\t\\tPoolToken memory tokens,\\n\\t\\tuint deadline\\n\\t) private {\\n\\t\\trequire(tokens.amount0 \\u003e 0,\\\"Staked::Abnormal liquidity\\\");\\n\\t\\trequire(tokens.amount1 \\u003e 0,\\\"Staked::Abnormal liquidity\\\");\\n\\t\\tuint ethAmount = 0;\\n\\t\\tif(tokens.token0 != weth) {\\n\\t\\t\\tTransferHelper.safeApprove(tokens.token0,pools[id].farm,tokens.amount0);\\n\\t\\t} else {\\n\\t\\t\\tethAmount = tokens.amount0;\\n\\t\\t}\\n\\t\\tif(tokens.token1 != weth) {\\n\\t\\t\\tTransferHelper.safeApprove(tokens.token1,pools[id].farm,tokens.amount1);\\n\\t\\t} else {\\n\\t\\t\\tethAmount = tokens.amount1;\\n\\t\\t}\\n\\t\\t(,uint amount0,uint amount1) = IMasterChefV3(pools[id].farm).increaseLiquidity{ value:ethAmount }(\\n\\t\\t\\tIMasterChefV3.IncreaseLiquidityParams({\\n\\t\\t\\t\\ttokenId:pools[id].tokenId,\\n\\t\\t\\t\\tamount0Desired:tokens.amount0,\\n\\t\\t\\t\\tamount1Desired:tokens.amount1,\\n\\t\\t\\t\\tamount0Min:1,\\n\\t\\t\\t\\tamount1Min:1,\\n\\t\\t\\t\\tdeadline:deadline\\n\\t\\t\\t})\\n\\t\\t);\\n\\t\\tif(tokens.token0 == pools[id].token0) {\\n\\t\\t\\tpools[id].lp0 = amount0;\\n\\t\\t\\tpools[id].lp1 = amount1;\\n\\t\\t}else {\\n\\t\\t\\tpools[id].lp0 = amount1;\\n\\t\\t\\tpools[id].lp1 = amount0;\\n\\t\\t}\\n\\t}\\n\\t\\n\\n\\t// Side 0: Spending fixed quantity tokens 1: Booking fixed quantity tokens\\n\\tfunction Swap(\\n\\t\\tuint id,\\n\\t\\taddress tokenIn,\\n\\t\\taddress tokenOut,\\n\\t\\tuint inAmount,\\n\\t\\tuint outAmount,\\n\\t\\tuint side\\n\\t) private returns (uint,uint) {\\n\\t\\tbytes memory path;\\n\\t\\tif(side == 0) {\\n\\t\\t\\tpath = abi.encodePacked(tokenIn,pools[id].fee,tokenOut);\\n\\t\\t\\toutAmount = pointHandle(pools[id].point,outAmount,false);\\n\\t\\t}else if(side == 1) {\\n\\t\\t\\tpath = abi.encodePacked(tokenOut,pools[id].fee,tokenIn);\\n\\t\\t\\tinAmount = pointHandle(pools[id].point,inAmount,true);\\n\\t\\t}\\n\\t\\tif(inAmount \\u003e 0 \\u0026\\u0026 outAmount \\u003e 0) {\\n\\t\\t\\t_swap(tokenIn,inAmount,outAmount,path,side);\\n\\t\\t}\\n\\t\\treturn (inAmount,outAmount);\\n\\t}\\n\\t\\n\\tfunction _swap(\\n\\t\\taddress tokenIn,\\n\\t\\tuint inAmount,\\n\\t\\tuint outAmount,\\n\\t\\tbytes memory path,\\n\\t\\tuint side\\n\\t) private {\\n\\t\\tuint ethAmount = 0;\\n\\t\\tif(tokenIn != weth) {\\n\\t\\t\\tTransferHelper.safeApprove(tokenIn,route,inAmount);\\n\\t\\t}else {\\n\\t\\t\\tethAmount = inAmount;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(side == 0) {\\n\\t\\t\\t// Perform a fixed input exchange, if the execution fails, retrieve the exchange rate and try to execute it again\\n\\t\\t\\ttry ISwapRouter(route).exactInput{ value:ethAmount }(\\n\\t\\t\\t\\tISwapRouter.ExactInputParams({\\n\\t\\t\\t\\t\\tpath:path,\\n\\t\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\t\\tamountIn:inAmount,\\n\\t\\t\\t\\t\\tamountOutMinimum:outAmount\\n\\t\\t\\t\\t})\\n\\t\\t\\t) {} catch {\\n\\t\\t\\t\\t(outAmount,,,) = IQuoterV2(quotev2).quoteExactInput(path,inAmount);\\n\\t\\t\\t\\tISwapRouter(route).exactInput{ value:ethAmount }(\\n\\t\\t\\t\\t\\tISwapRouter.ExactInputParams({\\n\\t\\t\\t\\t\\t\\tpath:path,\\n\\t\\t\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\t\\t\\tamountIn:inAmount,\\n\\t\\t\\t\\t\\t\\tamountOutMinimum:outAmount\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}else if(side == 1) {\\n\\t\\t\\t// Perform a fixed output exchange, if the execution fails, retrieve the exchange rate and try to execute it again\\n\\t\\t\\ttry ISwapRouter(route).exactOutput{ value:ethAmount }(\\n\\t\\t\\t\\tISwapRouter.ExactOutputParams({\\n\\t\\t\\t\\t\\tpath:path,\\n\\t\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\t\\tamountOut:outAmount,\\n\\t\\t\\t\\t\\tamountInMaximum:inAmount\\n\\t\\t\\t\\t})\\n\\t\\t\\t) {} catch {\\n\\t\\t\\t\\t(inAmount,,,) = IQuoterV2(quotev2).quoteExactOutput(path,outAmount);\\n\\t\\t\\t\\tISwapRouter(route).exactOutput{ value:ethAmount }(\\n\\t\\t\\t\\t\\tISwapRouter.ExactOutputParams({\\n\\t\\t\\t\\t\\t\\tpath:path,\\n\\t\\t\\t\\t\\t\\trecipient:address(this),\\n\\t\\t\\t\\t\\t\\tamountOut:outAmount,\\n\\t\\t\\t\\t\\t\\tamountInMaximum:inAmount\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tunWrapped();\\n\\t}\\n\\n\\tfunction poolCreat(\\n\\t\\tuint _id,\\n\\t\\taddress _token0,\\n\\t\\taddress _token1,\\n\\t\\tuint24 _fee,\\n\\t\\tuint _point,\\n\\t\\tuint[] memory _level0,\\n\\t\\tuint[] memory _level1\\n\\t) public onlyOwner nonReentrant {\\n\\t\\trequire(pools[_id].pool == address(0),\\\"Staked::project existent\\\");\\n\\t\\trequire(_point \\u003c pointMax,\\\"Staked::invalid slippage\\\");\\n\\t\\trequire(_token0 != _token1,\\\"Staked::invalid pair\\\");\\n\\n\\t\\taddress tokenIn = _token0 == address(0) ? weth : _token0;\\n\\t\\taddress tokenOut = _token1 == address(0) ? weth : _token1;\\n\\n\\t\\taddress _pool = IUniswapV3Factory(factory).getPool(tokenIn,tokenOut,_fee);\\n\\t\\trequire(_pool != address(0),\\\"Staked::liquidit pool non-existent\\\");\\n\\t\\taddress _lmPool = IUniswapV3Pool(_pool).lmPool();\\n\\t\\trequire(_lmPool != address(0),\\\"Staked::does not support farms\\\");\\n\\t\\taddress _farm = IPancakeV3LmPool(_lmPool).masterChef();\\n\\t\\trequire(_farm != address(0),\\\"Staked::not bound to farm\\\");\\n\\t\\tpools[_id] = pool({\\n\\t\\t\\ttoken0:tokenIn,\\n\\t\\t\\ttoken1:tokenOut,\\n\\t\\t\\tfee:_fee,\\n\\t\\t\\tpool:_pool,\\n\\t\\t\\tfarm:_farm,\\n\\t\\t\\tpoint:_point,\\n\\t\\t\\tinStatus:true,\\n\\t\\t\\toutStatus:true,\\n\\t\\t\\ttokenId:uint(0),\\n\\t\\t\\twight0:_level0[0],\\n\\t\\t\\twight1:_level1[0],\\n\\t\\t\\tlp0:_level0[1],\\n\\t\\t\\tlp1:_level1[1]\\n\\t\\t});\\n\\t\\t_autoFarm(_id,true);\\n\\t}\\n\\n\\t// Calculate the amount of participation in exchange through value and liquidity ratio before calculating the pledge\\n\\tfunction lpRate(\\n\\t\\tuint id\\n\\t) public view returns (uint inAmount) {\\n\\t\\tuint balance = balanceOf(pools[id].token0);\\n\\t\\tuint rate0 = pools[id].lp0.mul(pools[id].wight1);\\n\\t\\trate0 = rate0.div(pools[id].wight0);\\n\\t\\tuint rate1 = pools[id].lp1;\\n\\t\\tuint total = rate0.add(rate1);\\n\\t\\tif(total \\u003e 0) {\\n\\t\\t\\tinAmount = rate1.mul(balance).div(total);\\n\\t\\t\\tif(inAmount == 0) {\\n\\t\\t\\t\\tinAmount = balance.div(2);\\n\\t\\t\\t}\\n\\t\\t}else {\\n\\t\\t\\tinAmount = balance.div(2);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction poolControl(\\n\\t\\tuint _id,\\n\\t\\tbool _in,\\n\\t\\tbool _out,\\n\\t\\tuint _point,\\n\\t\\tuint[] memory _level0,\\n\\t\\tuint[] memory _level1\\n\\t) public onlyOwner {\\n\\t\\trequire(_point \\u003c pointMax,\\\"Staked::invalid slippage\\\");\\n\\t\\tpools[_id].inStatus = _in;\\n\\t\\tpools[_id].outStatus = _out;\\n\\t\\tpools[_id].point = _point;\\n\\n\\t\\trequire(_level0[0] \\u003e 0,\\\"Staked::level0[0] \\u003e 0\\\");\\n\\t\\trequire(_level1[0] \\u003e 0,\\\"Staked::level1[0] \\u003e 0\\\");\\n\\t\\trequire(_level0[1] \\u003e 0,\\\"Staked::level0[1] \\u003e 0\\\");\\n\\t\\trequire(_level1[1] \\u003e 0,\\\"Staked::level1[1] \\u003e 0\\\");\\n\\t\\tpools[_id].wight0 = _level0[0];\\n\\t\\tpools[_id].wight1 = _level1[0];\\n\\t\\tpools[_id].lp0 = _level0[1];\\n\\t\\tpools[_id].lp1 = _level1[1];\\n\\t}\\n\\n\\n\\tfunction setting(\\n\\t\\taddress _route,\\n\\t\\taddress _quotev2,\\n\\t\\taddress _compute,\\n\\t\\taddress _assets,\\n\\t\\tuint _fee\\n\\t) public onlyOwner {\\n\\t\\t_setting(_route,_quotev2,_compute,_assets,_fee);\\n\\t}\\n\\n\\tfunction _setting(\\n\\t\\taddress _route,\\n\\t\\taddress _quotev2,\\n\\t\\taddress _compute,\\n\\t\\taddress _assets,\\n\\t\\tuint _fee\\n\\t) private {\\n\\t\\trequire(_route != address(0),\\\"Staked::invalid route address\\\");\\n\\t\\trequire(_quotev2 != address(0),\\\"Staked::invalid quotev2 address\\\");\\n\\t\\trequire(_compute != address(0),\\\"Staked::invalid compute address\\\");\\n\\t\\troute = _route;\\n\\t\\tquotev2 = _quotev2;\\n\\t\\tcompute = _compute;\\n\\t\\tassets = _assets;\\n\\t\\tfee = _fee;\\n\\t\\tfactory = ISwapRouter(_route).factory();\\n\\t\\tweth = ISwapRouter(_route).WETH9();\\n\\t\\tmanage = ISwapRouter(_route).positionManager();\\n\\t\\temit Setting(route,quotev2,compute,factory,weth,manage);\\n\\t}\\n\\n\\tfunction autoFarm(\\n\\t\\tuint _id,\\n\\t\\tbool _auto\\n\\t) public onlyOwner {\\n\\t\\t_autoFarm(_id,_auto);\\n\\t}\\n\\n\\tfunction _autoFarm(\\n\\t\\tuint _id,\\n\\t\\tbool _auto\\n\\t) private {\\n\\t\\tisFarm[_id] = _auto;\\n\\t}\\n\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeApprove: approve failed\\u0027\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeTransfer: transfer failed\\u0027\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::transferFrom: transferFrom failed\\u0027\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\u0027TransferHelper::safeTransferETH: ETH transfer failed\\u0027);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quotev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compute\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assets\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExtractToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"InvestToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quotev2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"compute\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manage\",\"type\":\"address\"}],\"name\":\"Setting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"VerifyUpdate\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Challenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioAX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtRatioBX96\",\"type\":\"uint160\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"internalType\":\"struct StakedV3.PoolToken\",\"name\":\"tokens\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"Convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Extract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Reboot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_auto\",\"type\":\"bool\"}],\"name\":\"autoFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"harvestFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_in\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_out\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_level0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_level1\",\"type\":\"uint256[]\"}],\"name\":\"poolControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_level0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_level1\",\"type\":\"uint256[]\"}],\"name\":\"poolCreat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"outStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wight0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wight1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotev2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"route\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quotev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compute\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assets\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakedV3", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000013f4ea83d0bd40e75c8222255bc855a974568dd4000000000000000000000000b048bbc1ee6b733fffcfb9e9cef7375518e2599700000000000000000000000054d61c786c12d8b56488907fadf76ea67420df050000000000000000000000009eaa023feeca98458e08099b147dd5452beb0e2a000000000000000000000000000000000000000000000000000000000007a120", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92d9a710b9ebd7dd0f496a61e6b534befe489a3c477aea100d7dd449de307374"}