{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    // function transferOwnership(address newOwner) public onlyOwner {\r\n    //     _transferOwnership(newOwner);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PresaleWPEPE is Ownable {\r\n    using SafeMath for uint256;\r\n    address payable private _wallet;\r\n\r\n    IBEP20 private usdtToken;\r\n\r\n    AggregatorV3Interface internal aggregatorBNBInterface;\r\n    AggregatorV3Interface internal aggregatorUSDTInterface;\r\n\r\n    mapping(address => uint256) private buyers;\r\n    mapping(address => address) private refOfs;\r\n\r\n    mapping(uint256 => Stage) private stages;\r\n\r\n    bool inSell = true;\r\n    uint256 currentStage;\r\n    event SetUSDTToken(IBEP20 tokenAddress);\r\n    event SetPriceByUSD(uint256 stage, uint256 newPrice);\r\n    event SetInSell(bool _inSell);\r\n    event BuyToken(\r\n        address buyer,\r\n        uint256 amount,\r\n        uint256 amountIn,\r\n        string buyFrom,\r\n        address refAddress\r\n    );\r\n\r\n    event SetCurrentStage(uint256 stage);\r\n\r\n    struct Stage {\r\n        uint256 totalRaise;\r\n        uint256 raised;\r\n        uint256 priceInUSDStage;\r\n    }\r\n\r\n    constructor(\r\n        address payable wallet,\r\n        IBEP20 usdtTokenAddress,\r\n        address _oracleETHperUSD,\r\n        address _oracleUSDTbyUSD\r\n    ) {\r\n        _wallet = wallet;\r\n        usdtToken = usdtTokenAddress;\r\n        aggregatorBNBInterface = AggregatorV3Interface(_oracleETHperUSD);\r\n        aggregatorUSDTInterface = AggregatorV3Interface(_oracleUSDTbyUSD);\r\n        currentStage = 1;\r\n        stages[1] = Stage( 362865000  * (10**18), 0, 0.0003193 * (10**18));\r\n        stages[2] = Stage( 1195320000  * (10**18), 0, 0.0003399 * (10**18));\r\n        stages[3] = Stage( 2305260000  * (10**18), 0, 0.0003605 * (10**18));\r\n        stages[4] = Stage( 4482450000  * (10**18), 0, 0.0003811 * (10**18));\r\n        stages[5] = Stage( 5741805000  * (10**18), 0, 0.0004017 * (10**18));\r\n        stages[6] = Stage( 7257300000  * (10**18), 0, 0.0004223 * (10**18));\r\n     \r\n    }\r\n\r\n    function setWallet(address payable wallet) public onlyOwner{\r\n            _wallet = wallet;\r\n    }\r\n\r\n    function setCurrentStage(uint256 stage) public onlyOwner {\r\n        currentStage = stage;\r\n        emit SetCurrentStage(stage);\r\n    }\r\n\r\n    function setAggregatorETHInterface(address _aggregatorETHInterface)\r\n        public\r\n        onlyOwner\r\n    {\r\n        aggregatorBNBInterface = AggregatorV3Interface(_aggregatorETHInterface);\r\n    }\r\n\r\n    function setAggregatorUSDTInterface(address _aggregatorUSDTInterface)\r\n        public\r\n        onlyOwner\r\n    {\r\n        aggregatorUSDTInterface = AggregatorV3Interface(\r\n            _aggregatorUSDTInterface\r\n        );\r\n    }\r\n\r\n    function setStageInfo(\r\n        uint256 stageId,\r\n        uint256 _totalRaise,\r\n        uint256 _raised,\r\n        uint256 _priceInUSDStage\r\n    ) public onlyOwner {\r\n        stages[stageId] = Stage(_totalRaise, _raised, _priceInUSDStage);\r\n    }\r\n\r\n    function setInSell(bool _inSell) public onlyOwner {\r\n        inSell = _inSell;\r\n        emit SetInSell(_inSell);\r\n    }\r\n\r\n    function setUSDTToken(IBEP20 token_address) public onlyOwner {\r\n        usdtToken = token_address;\r\n        emit SetUSDTToken(token_address);\r\n    }\r\n\r\n    function setPriceByUSD(uint256 stage, uint256 newPrice) public onlyOwner {\r\n        stages[stage].priceInUSDStage = newPrice;\r\n        emit SetPriceByUSD(stage, newPrice);\r\n    }\r\n\r\n    function setTotalRaise(uint256 stage, uint256 _totalRaise)\r\n        public\r\n        onlyOwner\r\n    {\r\n        stages[stage].totalRaise = _totalRaise;\r\n    }\r\n\r\n    function getRefOf(address _address) public view returns (address) {\r\n        return refOfs[_address];\r\n    }\r\n\r\n    function getPriceInUSD(uint256 stage) public view returns (uint256) {\r\n        return stages[stage].priceInUSDStage;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return buyers[account];\r\n    }\r\n\r\n    function getInSell() public view returns (bool) {\r\n        return inSell;\r\n    }\r\n\r\n    function getUSDTToken() public view returns (IBEP20) {\r\n        return usdtToken;\r\n    }\r\n\r\n    function getAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getAggregatorBNBInterface()\r\n        public\r\n        view\r\n        returns (AggregatorV3Interface)\r\n    {\r\n        return aggregatorBNBInterface;\r\n    }\r\n\r\n    function getAggregatorUSDTInterface()\r\n        public\r\n        view\r\n        returns (AggregatorV3Interface)\r\n    {\r\n        return aggregatorUSDTInterface;\r\n    }\r\n\r\n    function getTokenAmountBNB(uint256 amountBNB)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 lastBNBPriceByUSD = getLatestPriceBNBPerUSD();\r\n        return (amountBNB * lastBNBPriceByUSD) / getPriceInUSD();\r\n    }\r\n\r\n    function getTokenAmountUSDT(uint256 amountUSDT)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 lastUSDTPriceByUSD = getLatestPriceUSDTPerUSD();\r\n        return (amountUSDT * lastUSDTPriceByUSD) / getPriceInUSD();\r\n    }\r\n\r\n    function getLatestPriceBNBPerUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorBNBInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function getLatestPriceUSDTPerUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorUSDTInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function getPriceInUSD() public view returns (uint256) {\r\n        return stages[currentStage].priceInUSDStage;\r\n    }\r\n\r\n    function buyToken(\r\n        address buyer,\r\n        address transferTo,\r\n        uint256 amount,\r\n        uint256 amountIn,\r\n        string memory buyFrom,\r\n        address refOf\r\n    ) private returns (bool) {\r\n        buyers[transferTo] = buyers[transferTo].add(amount);\r\n        emit BuyToken(buyer, amount, amountIn, buyFrom, refOf);\r\n        return true;\r\n    }\r\n\r\n    function buyTokenByBNB(address refOf) external payable {\r\n        uint256 bnbAmount = msg.value;\r\n        uint256 amount = getTokenAmountBNB(bnbAmount);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        (_wallet).transfer(bnbAmount);\r\n        buyToken(msg.sender, msg.sender, amount, bnbAmount, \"BNB\", refOf);\r\n    }\r\n\r\n    function buyTokenByUSDT(uint256 amountUSDT, address refOf) external {\r\n        uint256 amount = getTokenAmountUSDT(amountUSDT);\r\n        require(amount > 0, \"Amount is zero\");\r\n        require(inSell, \"Invalid time for buying\");\r\n        uint256 ourAllowance = usdtToken.allowance(_msgSender(), address(this));\r\n        require(\r\n            amountUSDT <= ourAllowance,\r\n            \"Make sure to add enough allowance\"\r\n        );\r\n        require(\r\n            usdtToken.transferFrom(msg.sender, _wallet, amountUSDT),\r\n            \"Transfer USDT fail\"\r\n        );\r\n        buyToken(msg.sender, msg.sender, amount, amountUSDT, \"USDT\", refOf);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleETHperUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleUSDTbyUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyFrom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"SetCurrentStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_inSell\",\"type\":\"bool\"}],\"name\":\"SetInSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SetPriceByUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SetUSDTToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refOf\",\"type\":\"address\"}],\"name\":\"buyTokenByUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorBNBInterface\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorUSDTInterface\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceBNBPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceUSDTPerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRefOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorETHInterface\",\"type\":\"address\"}],\"name\":\"setAggregatorETHInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorUSDTInterface\",\"type\":\"address\"}],\"name\":\"setAggregatorUSDTInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"setCurrentStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inSell\",\"type\":\"bool\"}],\"name\":\"setInSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceByUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInUSDStage\",\"type\":\"uint256\"}],\"name\":\"setStageInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaise\",\"type\":\"uint256\"}],\"name\":\"setTotalRaise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresaleWPEPE", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000844f73ddb8c331870e4703cc5515fbe1cd6cc0600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000b97ad0e74fa7d920791e90258a6e2085088b4320", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83fdc7000e4bac0e6abca08d8c0de9773c61b1878c8bec8a8cac0296ff8b4fac"}