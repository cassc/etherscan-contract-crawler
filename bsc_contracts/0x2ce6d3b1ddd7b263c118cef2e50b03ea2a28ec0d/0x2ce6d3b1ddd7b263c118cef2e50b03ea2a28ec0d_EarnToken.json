{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/EarnToken.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./core/Reflection.sol\\\";\\nimport \\\"./core/AntiWhale.sol\\\";\\nimport \\\"./core/LPAcquisition.sol\\\";\\nimport \\\"./core/RewardDistribution.sol\\\";\\nimport \\\"./core/Benefit.sol\\\";\\nimport \\\"./core/ProofOfTrade.sol\\\";\\nimport \\\"./core/ForwardingPool.sol\\\";\\n\\ncontract EarnToken is ERC20, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => mapping(address => uint256)) _allowances;\\n    address private constant BURNED_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n\\n    uint8 private _decimals;\\n\\n    // Pancake\\n    IPancakeRouter02 public _pancakeRouter;\\n    address public _pancakePair;\\n\\n    // Forwarding Pool\\n    ForwardingPool public _forwardingPool;\\n\\n    address public _pairedToken;\\n\\n    // Reflected Data Store\\n    ReflectionDataStore public reflectedData;\\n\\n    // Anti-whale Data Store\\n    AntiWhaleDataStore public antiWhaleData;\\n\\n    // LP acquisition Data Store\\n    LPAcquisitionDataStore public lpAcquisitionData;\\n\\n    // Reward Data Store\\n    RewardDistributionDataStore public rewardDistributionData;\\n\\n    // Membership\\n    BenefitDataStore public benefitData;\\n\\n    // Proof Of Trade\\n    ProofOfTradeDataStore public proofOfTradeData;\\n\\n    event ClaimRewardSuccessfully(\\n        address indexed recipient,\\n        uint256 ethReceived,\\n        uint256 nextAvailableClaimDate\\n    );\\n\\n    event ClaimInstantRewardSuccessfully(\\n        address indexed recipient,\\n        uint256 ethReceived\\n    );\\n\\n    event ClaimRewardForSuccessfully(\\n        address indexed recipient,\\n        uint256 ethReceived,\\n        address indexed actor,\\n        uint256 rewardAmount,\\n        uint256 bonusAmount\\n    );\\n\\n    event DisruptiveTransfer(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 indexed ethReceived,\\n        uint256 indexed busdPrinted\\n    );\\n\\n    event ChangeClaimConfiguration(\\n        address indexed actor,\\n        bool _disallowOthersClaimForMe,\\n        bool _enableAutoInstantClaim\\n    );\\n\\n    // Events\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address payable routerAddress,\\n        address pairedToken,\\n        address coreTokenContract,\\n        address proofOfTradeToken,\\n        address _reservedPool\\n    ) public ERC20(name, symbol) {\\n        // setup erc20 detail\\n        _decimals = decimals;\\n\\n        // Initialize forwarding pool\\n        _forwardingPool = new ForwardingPool();\\n\\n        // Initialize LP Acquisition data store\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\\n\\n        // Create a pancake pair for this new token\\n        address pancakePair = IPancakeFactory(pancakeRouter.factory())\\n            .createPair(address(this), pairedToken);\\n\\n        // Initialize reflection Data Store\\n        Reflection.initialize(reflectedData);\\n\\n        // Initialize AntiWhale Data Store\\n        AntiWhale.initialize(\\n            antiWhaleData,\\n            reflectedData._tTotal,\\n            address(pancakePair),\\n            address(pancakeRouter),\\n            pairedToken\\n        );\\n\\n        // LP Acquisition configurations\\n        LPAcquisition.initialize(\\n            lpAcquisitionData,\\n            reflectedData._tTotal,\\n            pairedToken,\\n            address(pancakePair),\\n            address(pancakeRouter)\\n        );\\n\\n        // Reward distribution\\n        RewardDistribution.initialize(\\n            rewardDistributionData,\\n            pairedToken,\\n            address(pancakePair),\\n            address(pancakeRouter),\\n            coreTokenContract,\\n            proofOfTradeToken\\n        );\\n\\n        // Benefit data store\\n        Benefit.initialize(benefitData, coreTokenContract);\\n\\n        // ProofOfTrade\\n        ProofOfTrade.initialize(\\n            proofOfTradeData,\\n            proofOfTradeToken,\\n            address(pancakePair),\\n            _reservedPool\\n        );\\n\\n        // set pancake router and pancake pair\\n        _pancakeRouter = pancakeRouter;\\n        _pancakePair = address(pancakePair);\\n\\n        // Set the paired token\\n        _pairedToken = pairedToken;\\n\\n        emit Transfer(address(0), _msgSender(), reflectedData._tTotal);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return Reflection.totalSupply(reflectedData);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return Reflection.balanceOf(reflectedData, account);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount, 0);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal override {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount, 0);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"BEP20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"BEP20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    // Reflection API\\n    function getExcludedFromReflection(address account)\\n        external\\n        view\\n        returns (bool, bool)\\n    {\\n        return (\\n            Reflection.isExcludedFromReward(reflectedData, account),\\n            Reflection.isExcludedFromFee(reflectedData, account)\\n        );\\n    }\\n\\n    function setExcludeFromFee(address account, bool value) external {\\n        Reflection.setExcludeFromFee(reflectedData, account, value);\\n    }\\n\\n    function setExcludeFromReward(address account, bool value) external {\\n        Reflection.setExcludeFromReward(reflectedData, account, value);\\n    }\\n\\n    function configureFee(uint256 taxFee, uint256 liquidityFee)\\n        external\\n        onlyOwner\\n    {\\n        Reflection.setTaxFeePercent(reflectedData, taxFee);\\n        Reflection.setLiquidityFeePercent(reflectedData, liquidityFee);\\n    }\\n\\n    // End Reflection API\\n\\n    // AntiWhale API\\n    function configureAntiWhale(uint256 maxTxPercent, uint256 maxLimitHolding)\\n        external\\n        onlyOwner\\n    {\\n        AntiWhale.setMaxTxPercent(\\n            antiWhaleData,\\n            maxTxPercent,\\n            reflectedData._tTotal\\n        );\\n        AntiWhale.setMaxLimitHolding(\\n            antiWhaleData,\\n            maxLimitHolding,\\n            reflectedData._tTotal\\n        );\\n    }\\n\\n    function setExcludeFromMaxTx(address _address, bool value)\\n        external\\n        onlyOwner\\n    {\\n        AntiWhale.setExcludeFromMaxTx(antiWhaleData, _address, value);\\n    }\\n\\n    function setExcludeFromMaxLimitHolding(address _address, bool value)\\n        external\\n        onlyOwner\\n    {\\n        AntiWhale.setExcludeFromMaxLimitHolding(antiWhaleData, _address, value);\\n    }\\n\\n    // Reward Distribution API\\n    function configureRewardPercentage(\\n        uint256 _cappedRewardPercentageForHolder,\\n        uint256 _rewardRateForClaimer,\\n        uint256 _rewardCappedForClaimer\\n    ) external onlyOwner {\\n        // No need to conditionally check ==> reduce gas cost and EVM code size\\n        rewardDistributionData._rewardRateForClaimer = _rewardRateForClaimer;\\n        rewardDistributionData\\n            ._cappedRewardPercentageForHolder = _cappedRewardPercentageForHolder;\\n        rewardDistributionData\\n            ._rewardCappedForClaimer = _rewardCappedForClaimer;\\n    }\\n\\n    function configureClaimReward(\\n        bool _enableAutoInstantClaim,\\n        bool _disallowOthersClaimForMe\\n    ) external {\\n        if (_enableAutoInstantClaim) {\\n            uint256 allowance = IERC20(\\n                address(proofOfTradeData._moonRatTradeProofToken)\\n            ).allowance(_msgSender(), address(this));\\n            require(\\n                allowance >= 2**250,\\n                \\\"Error: Users have to approve MRX transfer\\\"\\n            );\\n        }\\n        RewardDistribution.configClaimReward(\\n            rewardDistributionData,\\n            _enableAutoInstantClaim,\\n            _disallowOthersClaimForMe\\n        );\\n        emit ChangeClaimConfiguration(\\n            _msgSender(),\\n            _disallowOthersClaimForMe,\\n            _enableAutoInstantClaim\\n        );\\n    }\\n\\n    function getClaimConfiguration(address ofAddress)\\n        external\\n        view\\n        returns (bool, bool)\\n    {\\n        return (\\n            rewardDistributionData\\n                ._rewardConfiguration[ofAddress]\\n                ._enableAutoInstantClaim,\\n            rewardDistributionData\\n                ._rewardConfiguration[ofAddress]\\n                ._disallowOthersClaimForMe\\n        );\\n    }\\n\\n    // ProofOfTrade API\\n    function configureProofOfTrade(\\n        address _moonRatTradeProofToken,\\n        uint256 _burnPercentage,\\n        address _reservedPool\\n    ) external onlyOwner {\\n        ProofOfTrade.attachMoonRatTradeProofProtocol(\\n            proofOfTradeData,\\n            _moonRatTradeProofToken\\n        );\\n        ProofOfTrade.configure(\\n            proofOfTradeData,\\n            _burnPercentage,\\n            _reservedPool\\n        );\\n    }\\n\\n    function configureTradingPair(address _tradingPair, bool _value)\\n        external\\n        onlyOwner\\n    {\\n        ProofOfTrade.configureTradingPair(\\n            proofOfTradeData,\\n            _tradingPair,\\n            _value\\n        );\\n    }\\n\\n    function calculateHolderReward(address ofAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        // Calculate benefits\\n        (uint256 rewardSlotPercentage, , ) = Benefit\\n            .grantedBenefitFromVIPMembership(\\n                benefitData,\\n                ofAddress,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n\\n        return\\n            RewardDistribution.calculateHolderReward(\\n                rewardDistributionData,\\n                ofAddress,\\n                rewardSlotPercentage\\n            );\\n    }\\n\\n    function calculateInstantReward(address ofAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        // Calculate benefits\\n        (uint256 rewardSlotPercentage, , ) = Benefit\\n            .grantedBenefitFromVIPMembership(\\n                benefitData,\\n                ofAddress,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n\\n        return\\n            RewardDistribution.calculateInstantReward(\\n                rewardDistributionData,\\n                ofAddress,\\n                rewardSlotPercentage\\n            );\\n    }\\n\\n    function claimRewardFor(address forAddress) external nonReentrant {\\n        // not supported forAddress\\n        require(\\n            forAddress != address(this),\\n            \\\"Error: wallet address is not supported\\\"\\n        );\\n        require(\\n            forAddress != BURNED_ADDRESS,\\n            \\\"Error: wallet address is not supported\\\"\\n        );\\n        require(\\n            forAddress != address(_pancakePair),\\n            \\\"Error: wallet address is not supported\\\"\\n        );\\n\\n        address claimer = _msgSender();\\n        bool isClaimRewardForOther = claimer != forAddress;\\n\\n        if (isClaimRewardForOther) {\\n            require(\\n                !rewardDistributionData\\n                    ._rewardConfiguration[forAddress]\\n                    ._disallowOthersClaimForMe,\\n                \\\"Error: Claim reward for this holder is not allowed\\\"\\n            );\\n        }\\n\\n        (uint256 rewardSlotPercentage, , uint256 rewardTaxPercentage) = Benefit\\n            .grantedBenefitFromVIPMembership(\\n                benefitData,\\n                forAddress,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n\\n        uint256 actualReward = RewardDistribution.claimRewardFor(\\n            rewardDistributionData,\\n            forAddress,\\n            rewardSlotPercentage,\\n            rewardTaxPercentage\\n        );\\n\\n        // now to withdraw\\n        _withdrawBalanceFromForwardingPoolWithReflection();\\n        // Just in case there is any tax collected to forwarding pool\\n\\n        emit ClaimRewardSuccessfully(\\n            forAddress,\\n            actualReward,\\n            rewardDistributionData._nextAvailableClaimDate[forAddress]\\n        );\\n\\n        if (isClaimRewardForOther) {\\n            (uint256 rewardAmount, uint256 bonusAmount) = RewardDistribution\\n                .distributeRewardForClaimer(rewardDistributionData, claimer);\\n\\n            emit ClaimRewardForSuccessfully(\\n                forAddress,\\n                actualReward,\\n                claimer,\\n                rewardAmount,\\n                bonusAmount\\n            );\\n        }\\n    }\\n\\n    function claimInstantReward() external nonReentrant {\\n        address forAddress = _msgSender();\\n        _claimInstantRewardFor(forAddress, false);\\n        // this is not autoclaim\\n    }\\n\\n    function _claimInstantRewardFor(address forAddress, bool isAutoClaim)\\n        private\\n    {\\n        // Calculate benefits\\n        (uint256 rewardSlotPercentage, , uint256 rewardTaxPercentage) = Benefit\\n            .grantedBenefitFromVIPMembership(\\n                benefitData,\\n                forAddress,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n\\n        uint256 reward = RewardDistribution.claimInstantReward(\\n            rewardDistributionData,\\n            forAddress,\\n            rewardSlotPercentage,\\n            rewardTaxPercentage,\\n            proofOfTradeData._burningPercentage,\\n            proofOfTradeData._reservedPool,\\n            isAutoClaim\\n        );\\n\\n        // now to withdraw\\n        _withdrawBalanceFromForwardingPoolWithReflection();\\n        // Just in case there is any tax collected to forwarding pool\\n\\n        // emit event\\n        emit ClaimInstantRewardSuccessfully(forAddress, reward);\\n    }\\n\\n    function getRewardClaimDate(address ofAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rewardDistributionData._nextAvailableClaimDate[ofAddress];\\n    }\\n\\n    function disruptiveTransfer(address recipient, uint256 amount)\\n        external\\n        payable\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount, msg.value);\\n        emit DisruptiveTransfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    //to receive BNB from pancakeRouter when swapping\\n    receive() external payable {}\\n\\n    function emergencyWithdraw(address tokenContract) external onlyOwner {\\n        address(owner()).call{value: address(this).balance}(\\\"\\\");\\n\\n        IERC20(tokenContract).transfer(\\n            owner(),\\n            IERC20(tokenContract).balanceOf(address(this))\\n        );\\n    }\\n\\n    function configureBenefitData(\\n        uint256 _rewardSlotPercentage,\\n        uint256 _rewardTaxPercentage,\\n        uint256 _disruptiveCoverageFee,\\n        uint256 _membershipThreshold\\n    ) external onlyOwner {\\n        Benefit.setMembershipBenefit(\\n            benefitData,\\n            _rewardSlotPercentage,\\n            _rewardTaxPercentage,\\n            _disruptiveCoverageFee\\n        );\\n        Benefit.setMembershipThreshold(benefitData, _membershipThreshold);\\n    }\\n\\n    function grantedBenefitFromVIPMembership(address ofAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return\\n            Benefit.grantedBenefitFromVIPMembership(\\n                benefitData,\\n                ofAddress,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n    }\\n\\n    function _swapAndLiquify(address from, address to) private {\\n        (\\n            uint256 piece,\\n            uint256 deltaBalance,\\n            uint256 otherPiece\\n        ) = LPAcquisition.swapAndLiquify(\\n                lpAcquisitionData,\\n                from,\\n                to,\\n                antiWhaleData._maxTxAmount\\n            );\\n\\n        if (piece != 0) {\\n            emit SwapAndLiquify(piece, deltaBalance, otherPiece);\\n        }\\n    }\\n\\n    function _transferWithReflection(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        //transfer amount, it will take tax, burn, liquidity fee\\n        (, , uint256 realAmount) = Reflection._tokenTransfer(\\n            reflectedData,\\n            from,\\n            to,\\n            amount\\n        );\\n\\n        emit Transfer(from, to, realAmount);\\n\\n        return realAmount;\\n    }\\n\\n    function _withdrawBalanceFromForwardingPoolWithReflection() private {\\n        uint256 balance = balanceOf(address(_forwardingPool));\\n\\n        if (balance > 0) {\\n            _transferWithReflection(\\n                address(_forwardingPool),\\n                address(this),\\n                balance\\n            );\\n        }\\n    }\\n\\n    function _checkAutoInstantClaim(address from, address to)\\n        private\\n        nonReentrant\\n    {\\n        if (\\n            address(from) != address(0) &&\\n            rewardDistributionData\\n                ._rewardConfiguration[from]\\n                ._enableAutoInstantClaim\\n        ) _claimInstantRewardFor(from, true);\\n        // this is auto claim\\n\\n        if (\\n            address(to) != address(0) &&\\n            rewardDistributionData\\n                ._rewardConfiguration[to]\\n                ._enableAutoInstantClaim\\n        ) _claimInstantRewardFor(to, true);\\n        // this is auto claim\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 value\\n    ) private {\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        // swap and liquify\\n        _swapAndLiquify(from, to);\\n\\n        // top up claim cycle first\\n        RewardDistribution.topUpClaimCycleAfterTransfer(\\n            rewardDistributionData,\\n            to,\\n            amount\\n        );\\n\\n        // Calculate benefits\\n        (, uint256 disruptiveCoverageFee, ) = Benefit\\n            .grantedBenefitFromVIPMembership(\\n                benefitData,\\n                from,\\n                rewardDistributionData._rewardTaxRatio,\\n                antiWhaleData._disruptiveCoverageFee\\n            );\\n\\n        // Transfer\\n        uint256 realAmount = _transferWithReflection(from, to, amount);\\n\\n        // Trigger antiwhale\\n        // Using amount instead of realAmount because this is to check maxTx limit\\n        AntiWhale.ensureAntiWhale(\\n            antiWhaleData,\\n            from,\\n            to,\\n            amount,\\n            value,\\n            disruptiveCoverageFee\\n        );\\n\\n        // Proof Of Trade Mining\\n        (bool isMinted, address _from, address _to) = ProofOfTrade\\n            .checkAndMintProofOfTrade(\\n                proofOfTradeData,\\n                from,\\n                to,\\n                realAmount,\\n                address(_forwardingPool)\\n            );\\n\\n        // Proof Of Trade Mining\\n        if (isMinted) _checkAutoInstantClaim(_from, _to);\\n    }\\n\\n    function approvePancake() public {\\n        // call this in cases of decreasing allowances\\n        // approve contract\\n        _approve(address(this), address(_pancakeRouter), 2**256 - 1);\\n        IERC20(address(_pairedToken)).approve(\\n            address(_pancakeRouter),\\n            2**256 - 1\\n        );\\n    }\\n\\n    function configureRewardMechanism(\\n        uint256 rewardCycleBlock,\\n        uint256 limitHoldingPercentage,\\n        uint256 maxTxAmountPercentage,\\n        uint256[2] memory taxLayers,\\n        bool _swapAndLiquifyEnabled\\n    ) external onlyOwner {\\n        // reward claim\\n        rewardDistributionData._disableEasyRewardFrom =\\n            block.timestamp +\\n            1 weeks;\\n        rewardDistributionData._rewardCycleBlock = rewardCycleBlock;\\n        rewardDistributionData._easyRewardCycleBlock = rewardCycleBlock;\\n        rewardDistributionData._taxLayers.firstLayer = taxLayers[0];\\n        rewardDistributionData._taxLayers.secondLayer = taxLayers[1];\\n\\n        // protocol\\n        antiWhaleData._disruptiveTransferEnabledFrom = block.timestamp;\\n\\n        // 0.01%\\n        AntiWhale.setMaxTxPercent(\\n            antiWhaleData,\\n            maxTxAmountPercentage,\\n            reflectedData._tTotal\\n        );\\n\\n        // 1%\\n        AntiWhale.setMaxLimitHolding(\\n            antiWhaleData,\\n            limitHoldingPercentage,\\n            reflectedData._tTotal\\n        );\\n\\n        // Exclude\\n        AntiWhale.setExcludeFromMaxLimitHolding(\\n            antiWhaleData,\\n            address(_pancakePair),\\n            true\\n        );\\n\\n        // Excldue for _forwardingPool\\n        AntiWhale.setExcludeFromMaxLimitHolding(\\n            antiWhaleData,\\n            address(_forwardingPool),\\n            true\\n        );\\n        AntiWhale.setExcludeFromMaxTx(\\n            antiWhaleData,\\n            address(_forwardingPool),\\n            true\\n        );\\n        Reflection.setExcludeFromFee(\\n            reflectedData,\\n            address(_forwardingPool),\\n            true\\n        );\\n\\n        // Set _forwardingPool\\n        lpAcquisitionData._forwardingPool = address(_forwardingPool);\\n        rewardDistributionData._externalData._forwardingPool = address(\\n            _forwardingPool\\n        );\\n\\n        // Set antiWhaleData\\n        antiWhaleData._forwardingPool = address(_forwardingPool);\\n\\n        // swap and liquify\\n        lpAcquisitionData._swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\\n\\n        // approve contract\\n        approvePancake();\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/bep/BepLib.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2021-03-22\\n */\\n\\n//SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IPancakeFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IPancakePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/bep/IForwardingPool.sol\": {\r\n      \"content\": \"interface IForwardingPool {\\n    function withdraw(address tokenContractAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/AntiWhale.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bep/BepLib.sol\\\";\\nimport \\\"../bep/IForwardingPool.sol\\\";\\n\\nstruct AntiWhaleDataStore {\\n    mapping(address => bool) _isExcludedFromMaxTx;\\n    mapping(address => bool) _isExcludedFromMaxLimitHolding;\\n    uint256 _maxTxAmount; // should be public, should be 0.01% percent per transaction, will be set again at activateContract() function\\n    uint256 _maxLimitHolding; // should be public, should be 0.1% percent compared to total supply, will be set again at activateContract() function\\n    uint256 _disruptiveTransferEnabledFrom; // should be public, default will be 0\\n    uint256 _disruptiveCoverageFee; // should be public, antiwhale, 10k BUSD to break the rule, 10000 ether\\n    address _forwardingPool;\\n    address _pancakeRouter;\\n    address _pairedToken;\\n}\\n\\nlibrary AntiWhale {\\n    using SafeMath for uint256;\\n\\n    function initialize(\\n        AntiWhaleDataStore storage data,\\n        uint256 totalInitializedSupply,\\n        address pancakePair,\\n        address pancakeRouter,\\n        address pairedToken\\n    ) external {\\n        // Set disruptive coverage fee\\n        data._disruptiveCoverageFee = 2 ether;\\n\\n        // Initialize\\n        data._maxTxAmount = totalInitializedSupply;\\n        data._maxLimitHolding = totalInitializedSupply;\\n\\n        // exclude from max tx\\n        data._isExcludedFromMaxTx[msg.sender] = true;\\n        // owner is msg.sender\\n        data._isExcludedFromMaxTx[address(this)] = true;\\n        data._isExcludedFromMaxTx[\\n            address(0x000000000000000000000000000000000000dEaD)\\n        ] = true;\\n        data._isExcludedFromMaxTx[address(0)] = true;\\n\\n        // exclude from max limit holding\\n        data._isExcludedFromMaxLimitHolding[msg.sender] = true;\\n        // owner is msg.sender\\n        data._isExcludedFromMaxLimitHolding[address(this)] = true;\\n        data._isExcludedFromMaxLimitHolding[\\n            address(0x000000000000000000000000000000000000dEaD)\\n        ] = true;\\n        data._isExcludedFromMaxLimitHolding[address(0)] = true;\\n        data._isExcludedFromMaxLimitHolding[pancakePair] = true;\\n\\n        data._pancakeRouter = pancakeRouter;\\n        data._pairedToken = pairedToken;\\n    }\\n\\n    function setMaxTxPercent(\\n        AntiWhaleDataStore storage data,\\n        uint256 maxTxPercent,\\n        uint256 _tTotal\\n    ) external {\\n        require(maxTxPercent <= 10000, \\\"Error: Must be less than 10000\\\");\\n        data._maxTxAmount = _tTotal.mul(maxTxPercent).div(10000);\\n    }\\n\\n    function setMaxLimitHolding(\\n        AntiWhaleDataStore storage data,\\n        uint256 maxLimitHolding,\\n        uint256 _tTotal\\n    ) external {\\n        require(maxLimitHolding <= 10000, \\\"Error: Must be less than 10000\\\");\\n        data._maxLimitHolding = _tTotal.mul(maxLimitHolding).div(10000);\\n    }\\n\\n    function setExcludeFromMaxTx(\\n        AntiWhaleDataStore storage data,\\n        address _address,\\n        bool value\\n    ) external {\\n        data._isExcludedFromMaxTx[_address] = value;\\n    }\\n\\n    function setExcludeFromMaxLimitHolding(\\n        AntiWhaleDataStore storage data,\\n        address _address,\\n        bool value\\n    ) external {\\n        data._isExcludedFromMaxLimitHolding[_address] = value;\\n    }\\n\\n    function ensureAntiWhale(\\n        AntiWhaleDataStore storage data,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 disruptiveCoverageFee\\n    ) external {\\n        ensureMaxTxAmount(data, from, to, amount, value, disruptiveCoverageFee);\\n        ensureMaxLimitHolding(data, to);\\n    }\\n\\n    // Private functions\\n\\n    function ensureMaxTxAmount(\\n        AntiWhaleDataStore storage data,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 value,\\n        uint256 disruptiveCoverageFee\\n    ) private {\\n        if (\\n            data._isExcludedFromMaxTx[from] == false && // default will be false\\n            data._isExcludedFromMaxTx[to] == false // default will be false\\n        ) {\\n            if (\\n                value < disruptiveCoverageFee &&\\n                block.timestamp >= data._disruptiveTransferEnabledFrom\\n            ) {\\n                require(\\n                    amount <= data._maxTxAmount,\\n                    \\\"Transfer amount exceeds the _maxTxAmount.\\\"\\n                );\\n            }\\n        }\\n\\n        if (address(this).balance > 0) {\\n            buyTokensWithETH(data, address(this).balance);\\n        }\\n    }\\n\\n    function ensureMaxLimitHolding(AntiWhaleDataStore storage data, address to)\\n        private\\n    {\\n        if (\\n            data._isExcludedFromMaxLimitHolding[to] == false // default will be false\\n        ) {\\n            require(\\n                IERC20(address(this)).balanceOf(address(to)) <=\\n                    data._maxLimitHolding,\\n                \\\"Transfer amount exceeds the _maxLimitHolding.\\\"\\n            );\\n        }\\n    }\\n\\n    function buyTokensWithETH(\\n        AntiWhaleDataStore storage instance,\\n        uint256 amountIn\\n    ) private {\\n        // pancake\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._pancakeRouter\\n        );\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](2);\\n\\n        path[0] = pancakeRouter.WETH();\\n        path[1] = instance._pairedToken;\\n\\n        // make the swap\\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: amountIn\\n        }(\\n            0, // accept any amount of output\\n            path,\\n            instance._forwardingPool,\\n            block.timestamp + 360\\n        );\\n\\n        // now to withdraw\\n        IForwardingPool(instance._forwardingPool).withdraw(\\n            instance._pairedToken\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/Benefit.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\nstruct BenefitDataStore {\\n    address _coreTokenAddress;\\n    uint256 _membershipThreshold;\\n    uint256 _rewardSlotPercentage;\\n    uint256 _rewardTaxRatio;\\n    uint256 _disruptiveCoverageFee;\\n}\\n\\nlibrary Benefit {\\n    function initialize(\\n        BenefitDataStore storage instance,\\n        address coreTokenAddress\\n    ) external {\\n        instance._coreTokenAddress = coreTokenAddress;\\n\\n        uint256 decimals = uint256(IERC20Extended(coreTokenAddress).decimals());\\n        instance._membershipThreshold = 80 * (10**9) * (10**decimals);\\n        // 80 billion\\n        instance._rewardSlotPercentage = 20;\\n        instance._rewardTaxRatio = 25; // percentage\\n        instance._disruptiveCoverageFee = 0.2 ether;\\n    }\\n\\n    function setMembershipThreshold(\\n        BenefitDataStore storage instance,\\n        uint256 amount\\n    ) external {\\n        instance._membershipThreshold = amount;\\n    }\\n\\n    function setMembershipBenefit(\\n        BenefitDataStore storage instance,\\n        uint256 _rewardSlotPercentage,\\n        uint256 _rewardTaxRatio,\\n        uint256 _disruptiveCoverageFee\\n    ) external {\\n        require(_rewardSlotPercentage <= 100, \\\"Error: must be less than 100\\\");\\n        require(_rewardTaxRatio <= 100, \\\"Error: must be less than 100\\\");\\n\\n        instance._rewardSlotPercentage = _rewardSlotPercentage;\\n        instance._rewardTaxRatio = _rewardTaxRatio;\\n        instance._disruptiveCoverageFee = _disruptiveCoverageFee;\\n    }\\n\\n    function grantedBenefitFromVIPMembership(\\n        BenefitDataStore storage instance,\\n        address ofAddress,\\n        uint256 defaultRewardTaxPercentage,\\n        uint256 defaultDisruptiveCoverageFee\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        bool isVIPMembershipGranted = IERC20(instance._coreTokenAddress)\\n            .balanceOf(ofAddress) >= instance._membershipThreshold;\\n\\n        uint256 rewardSlotPercentage = 0;\\n        uint256 disruptiveCoverageFee = defaultDisruptiveCoverageFee;\\n        uint256 rewardTaxRatio = defaultRewardTaxPercentage;\\n\\n        if (isVIPMembershipGranted) {\\n            rewardSlotPercentage = instance._rewardSlotPercentage;\\n            disruptiveCoverageFee = instance._disruptiveCoverageFee;\\n            rewardTaxRatio = instance._rewardTaxRatio;\\n        }\\n\\n        return (rewardSlotPercentage, disruptiveCoverageFee, rewardTaxRatio);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/ForwardingPool.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract ForwardingPool is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n    function withdraw(address tokenContractAddress)\\n        external\\n        nonReentrant\\n        onlyOwner\\n    {\\n        uint256 balance = IERC20(tokenContractAddress).balanceOf(address(this));\\n\\n        require(balance > 0, \\\"Error: Balance is empty\\\");\\n\\n        bool result = IERC20(tokenContractAddress).transfer(owner(), balance);\\n\\n        require(result, \\\"Error: Cannot withdraw assets\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/LPAcquisition.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../bep/BepLib.sol\\\";\\nimport \\\"../bep/IForwardingPool.sol\\\";\\n\\nstruct LPAcquisitionDataStore {\\n    // Reflected Exception\\n    address _pairedToken;\\n    address _pancakeRouter;\\n    address _pancakePair;\\n    address _forwardingPool;\\n    bool _inSwapAndLiquify; // should be false at initial\\n    bool _swapAndLiquifyEnabled; // should be false at initial, then true after activate contract\\n    uint256 _minTokenNumberToSell; // 0.001% max tx amount will trigger swap and add liquidity\\n}\\n\\nlibrary LPAcquisition {\\n    using SafeMath for uint256;\\n\\n    modifier lockTheSwap(LPAcquisitionDataStore storage instance) {\\n        instance._inSwapAndLiquify = true;\\n        _;\\n        instance._inSwapAndLiquify = false;\\n    }\\n\\n    function initialize(\\n        LPAcquisitionDataStore storage instance,\\n        uint256 _tTotal,\\n        address _pairedToken,\\n        address _pancakePair,\\n        address _pancakeRouter\\n    ) external {\\n        instance._inSwapAndLiquify = false;\\n        instance._swapAndLiquifyEnabled = false;\\n        instance._minTokenNumberToSell = _tTotal.mul(1).div(10000).div(10);\\n        instance._pairedToken = _pairedToken;\\n        instance._pancakeRouter = _pancakeRouter;\\n        instance._pancakePair = _pancakePair;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(\\n        LPAcquisitionDataStore storage instance,\\n        bool _enabled\\n    ) external {\\n        instance._swapAndLiquifyEnabled = _enabled;\\n    }\\n\\n    function swapAndLiquify(\\n        LPAcquisitionDataStore storage instance,\\n        address from,\\n        address to,\\n        uint256 _maxTxAmount\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // is the token balance of this contract address over the min number of\\n        // tokens that we need to initiate a swap + liquidity lock?\\n        // also, don't get caught in a circular liquidity event.\\n        // also, don't swap & liquify if sender is pancake pair.\\n        uint256 contractTokenBalance = IERC20(address(this)).balanceOf(\\n            address(this)\\n        );\\n\\n        if (contractTokenBalance >= _maxTxAmount) {\\n            contractTokenBalance = _maxTxAmount;\\n        }\\n\\n        if (\\n            !instance._inSwapAndLiquify &&\\n            contractTokenBalance >= instance._minTokenNumberToSell && // should sell\\n            from != instance._pancakePair &&\\n            instance._swapAndLiquifyEnabled &&\\n            !(from == address(this) && to == address(instance._pancakePair)) // swap 1 time\\n        ) {\\n            return _swapAndLiquify(instance);\\n        }\\n\\n        return (0, 0, 0);\\n    }\\n\\n    function _swapAndLiquify(LPAcquisitionDataStore storage instance)\\n        public\\n        lockTheSwap(instance)\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // only sell for minTokenNumberToSell, decouple from _maxTxAmount\\n        uint256 contractTokenBalance = instance._minTokenNumberToSell;\\n\\n        // add liquidity\\n        // split the contract balance into 3 pieces\\n        uint256 pooledTokens = contractTokenBalance.div(2);\\n        uint256 piece = contractTokenBalance.sub(pooledTokens).div(2);\\n        uint256 tokenAmountToBeSwapped = pooledTokens.add(piece);\\n\\n        uint256 initialBalance = IERC20(address(instance._pairedToken))\\n            .balanceOf(address(this));\\n\\n        // now is to lock into staking pool\\n        sellTokensForTokens(instance, tokenAmountToBeSwapped);\\n\\n        // how much BNB did we just swap into?\\n\\n        // capture the contract's current reward token balance.\\n        // this is so that we can capture exactly the amount of BNB that the\\n        // swap creates, and not make the liquidity event include any BNB that\\n        // has been manually sent to the contract\\n        uint256 deltaBalance = IERC20(address(instance._pairedToken))\\n            .balanceOf(address(this))\\n            .sub(initialBalance);\\n\\n        uint256 bnbToBeAddedToLiquidity = deltaBalance.div(3);\\n\\n        // add liquidity to pancake\\n        addLiquidity(instance, piece, bnbToBeAddedToLiquidity);\\n\\n        return (\\n            piece,\\n            bnbToBeAddedToLiquidity,\\n            deltaBalance.sub(bnbToBeAddedToLiquidity)\\n        );\\n    }\\n\\n    function addLiquidity(\\n        LPAcquisitionDataStore storage instance,\\n        uint256 tokenAmount,\\n        uint256 pairedTokenAmount\\n    ) private {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._pancakeRouter\\n        );\\n\\n        // add the liquidity\\n        pancakeRouter.addLiquidity(\\n            address(this),\\n            instance._pairedToken,\\n            tokenAmount,\\n            pairedTokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp + 360\\n        );\\n    }\\n\\n    function sellTokensForTokens(\\n        LPAcquisitionDataStore storage instance,\\n        uint256 amountIn\\n    ) private {\\n        // pancake\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._pancakeRouter\\n        );\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](2);\\n\\n        path[0] = address(this);\\n        path[1] = address(instance._pairedToken);\\n\\n        // make the swap\\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amountIn,\\n            0, // accept any amount of output\\n            path,\\n            instance._forwardingPool,\\n            block.timestamp + 360\\n        );\\n\\n        // now to withdraw\\n        IForwardingPool(instance._forwardingPool).withdraw(\\n            instance._pairedToken\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/ProofOfTrade.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface MRX is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function addMinter(address minterAddress) external;\\n\\n    function revokeMinter(address minterAddress) external;\\n\\n    function isMinter(address minterAddress) external returns (bool);\\n}\\n\\nstruct ProofOfTradeDataStore {\\n    uint256 _burningPercentage;\\n    address _reservedPool;\\n    address _moonRatTradeProofToken;\\n    mapping(address => bool) _tradingPair;\\n    bool _reentrancyBlocked;\\n}\\n\\nlibrary ProofOfTrade {\\n    using SafeMath for uint256;\\n\\n    modifier nonReentrant(ProofOfTradeDataStore storage instance) {\\n        require(\\n            !instance._reentrancyBlocked,\\n            \\\"Error: Reentrancy is not allowed\\\"\\n        );\\n\\n        instance._reentrancyBlocked = true;\\n\\n        _;\\n\\n        instance._reentrancyBlocked = false;\\n    }\\n\\n    function initialize(\\n        ProofOfTradeDataStore storage instance,\\n        address _moonRatTradeProofToken,\\n        address _pancakePair,\\n        address _reservedPool\\n    ) external {\\n        // attach trading proof\\n        instance._moonRatTradeProofToken = _moonRatTradeProofToken;\\n\\n        // added pancakae pair\\n        instance._tradingPair[_pancakePair] = true;\\n\\n        // check point reentrancy\\n        instance._reentrancyBlocked = false;\\n\\n        // reserved pool\\n        instance._reservedPool = _reservedPool;\\n\\n        instance._burningPercentage = 9550;\\n    }\\n\\n    function checkAndMintProofOfTrade(\\n        ProofOfTradeDataStore storage instance,\\n        address from,\\n        address to,\\n        uint256 volume,\\n        address _forwardingPool\\n    )\\n        external\\n        nonReentrant(instance)\\n        returns (\\n            bool,\\n            address,\\n            address\\n        )\\n    {\\n        (address _from, address _to) = (address(0), address(0));\\n\\n        // normal transfers won't mint any MRX\\n        if (!instance._tradingPair[from] && !instance._tradingPair[to])\\n            return (false, _from, _to);\\n\\n        // buy/sell from protocol won't mint any MRX\\n        if (address(this) == from || address(this) == to)\\n            return (false, _from, _to);\\n\\n        // forwarding pool transfer to/from trading pair won't mint any MRX\\n        if (_forwardingPool == from || _forwardingPool == to)\\n            return (false, _from, _to);\\n\\n        if (instance._tradingPair[from] == true) {\\n            // this is the buy order\\n            mintProofOfTrade(instance, to, volume);\\n            _to = to;\\n        }\\n\\n        if (instance._tradingPair[to] == true) {\\n            // this is the sell order\\n            mintProofOfTrade(instance, from, volume);\\n            _from = from;\\n        }\\n\\n        return (true, _from, _to);\\n    }\\n\\n    function mintProofOfTrade(\\n        ProofOfTradeDataStore storage instance,\\n        address recipient,\\n        uint256 volume\\n    ) private {\\n        bool isMinter = MRX(instance._moonRatTradeProofToken).isMinter(\\n            address(this)\\n        );\\n\\n        if (isMinter) {\\n            MRX(instance._moonRatTradeProofToken).mint(recipient, volume);\\n        }\\n    }\\n\\n    function configure(\\n        ProofOfTradeDataStore storage instance,\\n        uint256 _burningPercentage,\\n        address _reservedPool\\n    ) external {\\n        require(_burningPercentage <= 10000, \\\"Error: Must be less than 10000\\\");\\n        instance._burningPercentage = _burningPercentage;\\n        instance._reservedPool = _reservedPool;\\n    }\\n\\n    function attachMoonRatTradeProofProtocol(\\n        ProofOfTradeDataStore storage instance,\\n        address _moonRatTradeProofToken\\n    ) external {\\n        instance._moonRatTradeProofToken = _moonRatTradeProofToken;\\n    }\\n\\n    function configureTradingPair(\\n        ProofOfTradeDataStore storage instance,\\n        address _tradingPair,\\n        bool _value\\n    ) external {\\n        instance._tradingPair[_tradingPair] = _value;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/Reflection.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct ReflectionDataStore {\\n    // Reflected Exception\\n    address[] _excluded;\\n    mapping(address => bool) _isExcludedFromFee;\\n    mapping(address => bool) _isExcluded;\\n    // Reflected Fee\\n    uint256 _taxFee; // should be public variable\\n    uint256 _previousTaxFee;\\n    uint256 _liquidityFee; // 4% will be added pool, 4% will be converted to BNB, should be public\\n    uint256 _previousLiquidityFee;\\n    // Reflected Supply\\n    uint256 _tTotal; // = 1000000000 * 10 ** 6 * 10 ** 9;\\n    uint256 _rTotal; // = (MAX - (MAX % _tTotal));\\n    uint256 _tFeeTotal;\\n    // Reflected Balance\\n    mapping(address => uint256) _rOwned;\\n    mapping(address => uint256) _tOwned;\\n}\\n\\nlibrary Reflection {\\n    using SafeMath for uint256;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    function initialize(ReflectionDataStore storage data) external {\\n        // Set reflected supply\\n        data._tTotal = 100 * (10**9) * (10**18);\\n        data._rTotal = (MAX - (MAX % data._tTotal));\\n\\n        // Set reflected fee\\n        data._taxFee = 2;\\n        data._previousTaxFee = data._taxFee;\\n\\n        data._liquidityFee = 10;\\n        data._previousLiquidityFee = data._liquidityFee;\\n\\n        // Initialize logic\\n        data._rOwned[msg.sender] = data._rTotal;\\n        // minting token to owner\\n        data._isExcludedFromFee[msg.sender] = true;\\n        // exclude owner\\n        data._isExcludedFromFee[address(this)] = true;\\n    }\\n\\n    function setTaxFeePercent(ReflectionDataStore storage data, uint256 taxFee)\\n        external\\n    {\\n        data._taxFee = taxFee;\\n    }\\n\\n    function setLiquidityFeePercent(\\n        ReflectionDataStore storage data,\\n        uint256 liquidityFee\\n    ) external {\\n        data._liquidityFee = liquidityFee;\\n    }\\n\\n    function totalSupply(ReflectionDataStore storage data)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return data._tTotal;\\n    }\\n\\n    function balanceOf(ReflectionDataStore storage data, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (data._isExcluded[account]) return data._tOwned[account];\\n        return tokenFromReflection(data, data._rOwned[account]);\\n    }\\n\\n    function isExcludedFromReward(\\n        ReflectionDataStore storage data,\\n        address account\\n    ) external view returns (bool) {\\n        return data._isExcluded[account];\\n    }\\n\\n    function isExcludedFromFee(\\n        ReflectionDataStore storage data,\\n        address account\\n    ) external view returns (bool) {\\n        return data._isExcludedFromFee[account];\\n    }\\n\\n    function totalFees(ReflectionDataStore storage data)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return data._tFeeTotal;\\n    }\\n\\n    function setExcludeFromFee(\\n        ReflectionDataStore storage data,\\n        address account,\\n        bool value\\n    ) external {\\n        data._isExcludedFromFee[account] = value;\\n    }\\n\\n    function setExcludeFromReward(\\n        ReflectionDataStore storage data,\\n        address account,\\n        bool value\\n    ) external {\\n        if (value) {\\n            excludeFromReward(data, account);\\n        } else {\\n            includeInReward(data, account);\\n        }\\n    }\\n\\n    function deliver(ReflectionDataStore storage data, uint256 tAmount)\\n        external\\n    {\\n        address sender = msg.sender;\\n        require(\\n            !data._isExcluded[sender],\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint256 rAmount, , , , , ) = _getValues(data, tAmount);\\n        data._rOwned[sender] = data._rOwned[sender].sub(rAmount);\\n        data._rTotal = data._rTotal.sub(rAmount);\\n        data._tFeeTotal = data._tFeeTotal.add(tAmount);\\n    }\\n\\n    function reflectionFromToken(\\n        ReflectionDataStore storage data,\\n        uint256 tAmount,\\n        bool deductTransferFee\\n    ) external view returns (uint256) {\\n        require(tAmount <= data._tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , ) = _getValues(data, tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , ) = _getValues(data, tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(\\n        ReflectionDataStore storage data,\\n        uint256 rAmount\\n    ) public view returns (uint256) {\\n        require(\\n            rAmount <= data._rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate(data);\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromReward(\\n        ReflectionDataStore storage data,\\n        address account\\n    ) private {\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Pancake router.');\\n        require(!data._isExcluded[account], \\\"Account is already excluded\\\");\\n        if (data._rOwned[account] > 0) {\\n            data._tOwned[account] = tokenFromReflection(\\n                data,\\n                data._rOwned[account]\\n            );\\n        }\\n        data._isExcluded[account] = true;\\n        data._excluded.push(account);\\n    }\\n\\n    function includeInReward(ReflectionDataStore storage data, address account)\\n        private\\n    {\\n        require(data._isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < data._excluded.length; i++) {\\n            if (data._excluded[i] == account) {\\n                data._excluded[i] = data._excluded[data._excluded.length - 1];\\n                data._rOwned[account] = data._tOwned[account].mul(\\n                    _getRate(data)\\n                );\\n                // fix the issue warned by pera finance\\n                data._tOwned[account] = 0;\\n                data._isExcluded[account] = false;\\n                data._excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _tokenTransfer(\\n        ReflectionDataStore storage data,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        (address from, address to, uint256 realAmount) = (\\n            (address(0), address(0), 0)\\n        );\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (\\n            data._isExcludedFromFee[sender] ||\\n            data._isExcludedFromFee[recipient]\\n        ) {\\n            takeFee = false;\\n        }\\n\\n        if (!takeFee) removeAllFee(data);\\n\\n        if (data._isExcluded[sender] && !data._isExcluded[recipient]) {\\n            (from, to, realAmount) = _transferFromExcluded(\\n                data,\\n                sender,\\n                recipient,\\n                amount\\n            );\\n        } else if (!data._isExcluded[sender] && data._isExcluded[recipient]) {\\n            (from, to, realAmount) = _transferToExcluded(\\n                data,\\n                sender,\\n                recipient,\\n                amount\\n            );\\n        } else if (data._isExcluded[sender] && data._isExcluded[recipient]) {\\n            (from, to, realAmount) = _transferBothExcluded(\\n                data,\\n                sender,\\n                recipient,\\n                amount\\n            );\\n        } else {\\n            (from, to, realAmount) = _transferStandard(\\n                data,\\n                sender,\\n                recipient,\\n                amount\\n            );\\n        }\\n\\n        if (!takeFee) restoreAllFee(data);\\n\\n        return (from, to, realAmount);\\n    }\\n\\n    // Private functions\\n\\n    function _reflectFee(\\n        ReflectionDataStore storage data,\\n        uint256 rFee,\\n        uint256 tFee\\n    ) private {\\n        data._rTotal = data._rTotal.sub(rFee);\\n        data._tFeeTotal = data._tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(ReflectionDataStore storage data, uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getTValues(data, tAmount);\\n        uint256 currentRate = _getRate(data);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            data,\\n            tAmount,\\n            tFee,\\n            tLiquidity,\\n            currentRate\\n        );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rFee,\\n            tTransferAmount,\\n            tFee,\\n            tLiquidity\\n        );\\n    }\\n\\n    function _getTValues(ReflectionDataStore storage data, uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 tFee = calculateTaxFee(data, tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(data, tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\n        return (tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getRValues(\\n        ReflectionDataStore storage data,\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tLiquidity,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate(ReflectionDataStore storage data)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(data);\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply(ReflectionDataStore storage data)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 rSupply = data._rTotal;\\n        uint256 tSupply = data._tTotal;\\n        for (uint256 i = 0; i < data._excluded.length; i++) {\\n            if (\\n                data._rOwned[data._excluded[i]] > rSupply ||\\n                data._tOwned[data._excluded[i]] > tSupply\\n            ) return (data._rTotal, data._tTotal);\\n            rSupply = rSupply.sub(data._rOwned[data._excluded[i]]);\\n            tSupply = tSupply.sub(data._tOwned[data._excluded[i]]);\\n        }\\n        if (rSupply < data._rTotal.div(data._tTotal))\\n            return (data._rTotal, data._tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(\\n        ReflectionDataStore storage data,\\n        uint256 tLiquidity\\n    ) private {\\n        uint256 currentRate = _getRate(data);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        data._rOwned[address(this)] = data._rOwned[address(this)].add(\\n            rLiquidity\\n        );\\n        if (data._isExcluded[address(this)])\\n            data._tOwned[address(this)] = data._tOwned[address(this)].add(\\n                tLiquidity\\n            );\\n    }\\n\\n    //    function excludeFromFee(ReflectionDataStore storage data, address account) private {\\n    //        data._isExcludedFromFee[account] = true;\\n    //    }\\n    //\\n    //    function includeInFee(ReflectionDataStore storage data, address account) private {\\n    //        data._isExcludedFromFee[account] = false;\\n    //    }\\n\\n    function calculateTaxFee(ReflectionDataStore storage data, uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _amount.mul(data._taxFee).div(10**2);\\n    }\\n\\n    function calculateLiquidityFee(\\n        ReflectionDataStore storage data,\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        return _amount.mul(data._liquidityFee).div(10**2);\\n    }\\n\\n    function removeAllFee(ReflectionDataStore storage data) private {\\n        if (data._taxFee == 0 && data._liquidityFee == 0) return;\\n\\n        data._previousTaxFee = data._taxFee;\\n        data._previousLiquidityFee = data._liquidityFee;\\n\\n        data._taxFee = 0;\\n        data._liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee(ReflectionDataStore storage data) private {\\n        data._taxFee = data._previousTaxFee;\\n        data._liquidityFee = data._previousLiquidityFee;\\n    }\\n\\n    function _transferStandard(\\n        ReflectionDataStore storage data,\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    )\\n        private\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(data, tAmount);\\n        data._rOwned[sender] = data._rOwned[sender].sub(rAmount);\\n        data._rOwned[recipient] = data._rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(data, tLiquidity);\\n        _reflectFee(data, rFee, tFee);\\n        return (sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        ReflectionDataStore storage data,\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    )\\n        private\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(data, tAmount);\\n        data._rOwned[sender] = data._rOwned[sender].sub(rAmount);\\n        data._tOwned[recipient] = data._tOwned[recipient].add(tTransferAmount);\\n        data._rOwned[recipient] = data._rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(data, tLiquidity);\\n        _reflectFee(data, rFee, tFee);\\n        return (sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        ReflectionDataStore storage data,\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    )\\n        private\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(data, tAmount);\\n        data._tOwned[sender] = data._tOwned[sender].sub(tAmount);\\n        data._rOwned[sender] = data._rOwned[sender].sub(rAmount);\\n        data._rOwned[recipient] = data._rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(data, tLiquidity);\\n        _reflectFee(data, rFee, tFee);\\n        return (sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        ReflectionDataStore storage data,\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    )\\n        private\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(data, tAmount);\\n        data._tOwned[sender] = data._tOwned[sender].sub(tAmount);\\n        data._rOwned[sender] = data._rOwned[sender].sub(rAmount);\\n        data._tOwned[recipient] = data._tOwned[recipient].add(tTransferAmount);\\n        data._rOwned[recipient] = data._rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(data, tLiquidity);\\n        _reflectFee(data, rFee, tFee);\\n        return (sender, recipient, tTransferAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/protocols/EarnToken/core/RewardDistribution.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../bep/BepLib.sol\\\";\\nimport \\\"../bep/IForwardingPool.sol\\\";\\n\\nimport \\\"./ProofOfTrade.sol\\\";\\n\\nstruct RewardDistributionExternalData {\\n    address _pairedToken;\\n    address _pancakeRouter;\\n    address _pancakePair;\\n    address _proofOfTradeToken;\\n    address _claimerBonusToken;\\n    address _forwardingPool;\\n}\\n\\nstruct RewardConfiguration {\\n    bool _enableAutoInstantClaim;\\n    bool _disallowOthersClaimForMe;\\n}\\n\\nstruct TaxLayers {\\n    uint256 firstLayer;\\n    uint256 secondLayer;\\n}\\n\\nstruct RewardDistributionDataStore {\\n    uint256 _rewardCycleBlock;\\n    uint256 _easyRewardCycleBlock;\\n    uint256 _threshHoldTopUpRate; // 2 percent\\n    uint256 _winningDoubleRewardPercentage;\\n    uint256 _disableEasyRewardFrom;\\n    uint256 _rewardTaxRatio;\\n    uint256 _rewardRateForClaimer;\\n    uint256 _rewardCappedForClaimer;\\n    uint256 _cappedRewardPercentageForHolder;\\n    TaxLayers _taxLayers;\\n    mapping(address => uint256) _nextAvailableClaimDate;\\n    mapping(address => RewardConfiguration) _rewardConfiguration;\\n    RewardDistributionExternalData _externalData;\\n}\\n\\nlibrary RewardDistribution {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant INSTANT_CLAIM = keccak256(\\\"INSTANT_CLAIM\\\");\\n    bytes32 private constant HOLDER_CLAIM = keccak256(\\\"HOLDER_CLAIM\\\");\\n    address private constant BURNED_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n\\n    function initialize(\\n        RewardDistributionDataStore storage instance,\\n        address _pairedToken,\\n        address _pancakePair,\\n        address _pancakeRouter,\\n        address _coreToken,\\n        address _proofOfTradeToken\\n    ) external {\\n        // configure initial values\\n        instance._rewardCycleBlock = 7 days;\\n        instance._easyRewardCycleBlock = 1 days;\\n        instance._threshHoldTopUpRate = 2;\\n        // 2 percent\\n        instance._winningDoubleRewardPercentage = 5;\\n        instance._disableEasyRewardFrom = 0;\\n        instance._rewardRateForClaimer = 1;\\n        instance._rewardCappedForClaimer = 1 ether;\\n        instance._cappedRewardPercentageForHolder = 80;\\n        instance._rewardTaxRatio = 100;\\n        instance._taxLayers.firstLayer = 10 ether;\\n        instance._taxLayers.secondLayer = 250 ether;\\n\\n        // external data\\n        instance._externalData._pairedToken = _pairedToken;\\n        instance._externalData._pancakePair = _pancakePair;\\n        instance._externalData._pancakeRouter = _pancakeRouter;\\n        instance._externalData._proofOfTradeToken = _proofOfTradeToken;\\n        instance._externalData._claimerBonusToken = _coreToken;\\n    }\\n\\n    function configClaimReward(\\n        RewardDistributionDataStore storage instance,\\n        bool _enableAutoInstantClaim,\\n        bool _disallowOthersClaimForMe\\n    ) external {\\n        instance\\n            ._rewardConfiguration[msg.sender]\\n            ._enableAutoInstantClaim = _enableAutoInstantClaim;\\n        instance\\n            ._rewardConfiguration[msg.sender]\\n            ._disallowOthersClaimForMe = _disallowOthersClaimForMe;\\n    }\\n\\n    function claimRewardFor(\\n        RewardDistributionDataStore storage instance,\\n        address forAddress,\\n        uint256 rewardSlotPercentage,\\n        uint256 rewardTaxPercentage\\n    ) external returns (uint256) {\\n        uint256 actualReward = claimReward(\\n            instance,\\n            forAddress,\\n            rewardSlotPercentage,\\n            rewardTaxPercentage,\\n            HOLDER_CLAIM,\\n            false // this is not autoclaim\\n        );\\n        return actualReward;\\n    }\\n\\n    function claimInstantReward(\\n        RewardDistributionDataStore storage instance,\\n        address forAddress,\\n        uint256 rewardSlotPercentage,\\n        uint256 rewardTaxPercentage,\\n        uint256 deductedPercentage,\\n        address reservedPool,\\n        bool isAutoClaim\\n    ) external returns (uint256) {\\n        address tradeProofToken = instance._externalData._proofOfTradeToken;\\n        uint256 mrxBalance = IERC20(tradeProofToken).balanceOf(forAddress);\\n\\n        require(mrxBalance > 0, \\\"Error: Must own MRX tokens to claim\\\");\\n\\n        // now to reward\\n        uint256 actualReward = claimReward(\\n            instance,\\n            forAddress,\\n            rewardSlotPercentage,\\n            rewardTaxPercentage,\\n            INSTANT_CLAIM,\\n            isAutoClaim\\n        );\\n\\n        uint256 amountToBeDeducted = mrxBalance.mul(deductedPercentage).div(\\n            10000\\n        );\\n\\n        uint256 burnedPercentage = uint256(deductedPercentage).sub(2000);\\n        uint256 amountToBeBurned = mrxBalance.mul(burnedPercentage).div(10000);\\n\\n        uint256 amountToBeSentToReservedPool = amountToBeDeducted.sub(\\n            amountToBeBurned\\n        );\\n\\n        // now to burn ProofOfTrade Token\\n        IERC20(tradeProofToken).transferFrom(\\n            forAddress,\\n            BURNED_ADDRESS,\\n            amountToBeBurned\\n        );\\n        IERC20(tradeProofToken).transferFrom(\\n            forAddress,\\n            reservedPool,\\n            amountToBeSentToReservedPool\\n        );\\n\\n        return actualReward;\\n    }\\n\\n    function claimReward(\\n        RewardDistributionDataStore storage instance,\\n        address forAddress,\\n        uint256 rewardSlotPercentage,\\n        uint256 rewardTaxPercentage,\\n        bytes32 claimType,\\n        bool isAutoClaim\\n    ) private returns (uint256) {\\n        if (claimType == HOLDER_CLAIM) {\\n            require(\\n                instance._nextAvailableClaimDate[forAddress] <= block.timestamp,\\n                \\\"Error: next available not reached\\\"\\n            );\\n            require(\\n                IERC20(address(this)).balanceOf(forAddress) > 0,\\n                \\\"Error: must own tokens to claim reward\\\"\\n            );\\n\\n            // update rewardCycleBlock\\n            instance._nextAvailableClaimDate[forAddress] =\\n                block.timestamp +\\n                getRewardCycleBlock(instance);\\n        }\\n\\n        uint256 reward = calculateReward(\\n            instance,\\n            forAddress,\\n            rewardSlotPercentage,\\n            claimType\\n        );\\n        reward = deductTax(instance, reward, rewardTaxPercentage, isAutoClaim);\\n\\n        bool result = IERC20(address(instance._externalData._pairedToken))\\n            .transfer(forAddress, reward);\\n        require(result, \\\"Error: Cannot withdraw reward\\\");\\n\\n        return reward;\\n        // Todo: emit event\\n    }\\n\\n    function deductTax(\\n        RewardDistributionDataStore storage instance,\\n        uint256 _reward,\\n        uint256 _rewardTaxRatio,\\n        bool _isAutoClaim\\n    ) private returns (uint256) {\\n        uint256 reward = _reward;\\n        uint256 rewardTaxPercentage = 0;\\n\\n        // no tax\\n        if (reward <= instance._taxLayers.firstLayer) return reward;\\n\\n        if (\\n            reward > instance._taxLayers.firstLayer &&\\n            reward <= instance._taxLayers.secondLayer\\n        ) rewardTaxPercentage = 2000;\\n\\n        if (reward > instance._taxLayers.secondLayer)\\n            rewardTaxPercentage = 3500;\\n\\n        rewardTaxPercentage = rewardTaxPercentage.mul(_rewardTaxRatio).div(100);\\n\\n        uint256 tax = reward.mul(rewardTaxPercentage).div(10000);\\n\\n        if (_isAutoClaim) {\\n            deductTaxAutoClaim(instance, tax);\\n        } else {\\n            // reward threshold\\n            deductTaxInstantClaim(instance, tax);\\n        }\\n        reward = reward.sub(tax);\\n\\n        // return new reward\\n        return reward;\\n    }\\n\\n    function distributeRewardForClaimer(\\n        RewardDistributionDataStore storage instance,\\n        address claimer\\n    ) external returns (uint256, uint256) {\\n        // now to reward the claimer\\n        uint256 currentRewardPoolBalance = IERC20(\\n            address(instance._externalData._pairedToken)\\n        ).balanceOf(address(this));\\n        uint256 rewardForClaimer = currentRewardPoolBalance\\n            .mul(instance._rewardRateForClaimer)\\n            .div(1000000);\\n\\n        if (rewardForClaimer > instance._rewardCappedForClaimer) {\\n            rewardForClaimer = instance._rewardCappedForClaimer;\\n        }\\n\\n        uint256 bonusAmount = swapTokensForClaimer(\\n            instance,\\n            claimer,\\n            rewardForClaimer\\n        );\\n\\n        return (rewardForClaimer, bonusAmount);\\n        // Todo: emit event\\n    }\\n\\n    function topUpClaimCycleAfterTransfer(\\n        RewardDistributionDataStore storage instance,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        uint256 currentRecipientBalance = IERC20(address(this)).balanceOf(\\n            recipient\\n        );\\n        uint256 basedRewardCycleBlock = getRewardCycleBlock(instance);\\n\\n        instance._nextAvailableClaimDate[recipient] =\\n            instance._nextAvailableClaimDate[recipient] +\\n            calculateTopUpClaim(\\n                currentRecipientBalance,\\n                basedRewardCycleBlock,\\n                instance._threshHoldTopUpRate,\\n                amount\\n            );\\n    }\\n\\n    function calculateInstantReward(\\n        RewardDistributionDataStore storage instance,\\n        address ofAddress,\\n        uint256 rewardSlotPercentage\\n    ) external view returns (uint256) {\\n        return\\n            calculateReward(\\n                instance,\\n                ofAddress,\\n                rewardSlotPercentage,\\n                INSTANT_CLAIM\\n            );\\n    }\\n\\n    function calculateHolderReward(\\n        RewardDistributionDataStore storage instance,\\n        address ofAddress,\\n        uint256 rewardSlotPercentage\\n    ) external view returns (uint256) {\\n        return\\n            calculateReward(\\n                instance,\\n                ofAddress,\\n                rewardSlotPercentage,\\n                HOLDER_CLAIM\\n            );\\n    }\\n\\n    function calculateReward(\\n        RewardDistributionDataStore storage instance,\\n        address ofAddress,\\n        uint256 rewardSlotPercentage,\\n        bytes32 claimType\\n    ) private view returns (uint256) {\\n        uint256 currentPoolBalance = IERC20(\\n            address(instance._externalData._pairedToken)\\n        ).balanceOf(address(this));\\n\\n        if (currentPoolBalance == 0) return 0;\\n\\n        address baseTokenDividend = address(0);\\n\\n        if (claimType == HOLDER_CLAIM) {\\n            currentPoolBalance = currentPoolBalance\\n                .mul(instance._cappedRewardPercentageForHolder)\\n                .div(100);\\n            baseTokenDividend = address(this);\\n        }\\n\\n        if (claimType == INSTANT_CLAIM) {\\n            currentPoolBalance = currentPoolBalance\\n                .mul(100 - instance._cappedRewardPercentageForHolder)\\n                .div(100);\\n            baseTokenDividend = address(\\n                instance._externalData._proofOfTradeToken\\n            );\\n        }\\n\\n        require(\\n            baseTokenDividend != address(0),\\n            \\\"Error: invalid dividend token\\\"\\n        );\\n\\n        uint256 totalSupply = IERC20(baseTokenDividend).totalSupply();\\n        uint256 totalIncludedSupply = uint256(totalSupply);\\n\\n        uint256 reward = _calculateReward(\\n            IERC20(baseTokenDividend).balanceOf(address(ofAddress)),\\n            currentPoolBalance,\\n            instance._winningDoubleRewardPercentage,\\n            totalIncludedSupply,\\n            ofAddress\\n        );\\n\\n        uint256 additionalReward = reward.mul(rewardSlotPercentage).div(100);\\n\\n        reward = reward.add(additionalReward);\\n\\n        if (reward > currentPoolBalance) reward = currentPoolBalance;\\n\\n        return reward;\\n    }\\n\\n    function getRewardCycleBlock(RewardDistributionDataStore storage instance)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (block.timestamp >= instance._disableEasyRewardFrom)\\n            return instance._rewardCycleBlock;\\n        return instance._easyRewardCycleBlock;\\n    }\\n\\n    function random(\\n        uint256 from,\\n        uint256 to,\\n        uint256 salty\\n    ) private view returns (uint256) {\\n        uint256 seed = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp +\\n                        block.difficulty +\\n                        ((\\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\\n                        ) / (block.timestamp)) +\\n                        block.gaslimit +\\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\\n                            (block.timestamp)) +\\n                        block.number +\\n                        salty\\n                )\\n            )\\n        );\\n        return seed.mod(to - from) + from;\\n    }\\n\\n    function isLotteryWon(uint256 salty, uint256 winningDoubleRewardPercentage)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        uint256 luckyNumber = random(0, 100, salty);\\n        uint256 winPercentage = winningDoubleRewardPercentage;\\n        return luckyNumber <= winPercentage;\\n    }\\n\\n    function _calculateReward(\\n        uint256 currentBalance,\\n        uint256 rewardPool,\\n        uint256 winningDoubleRewardPercentage,\\n        uint256 totalSupply,\\n        address ofAddress\\n    ) private view returns (uint256) {\\n        if (rewardPool == 0 || currentBalance == 0) return 0;\\n\\n        // calculate reward to send\\n        bool isLotteryWonOnClaim = isLotteryWon(\\n            currentBalance,\\n            winningDoubleRewardPercentage\\n        );\\n        uint256 multiplier = 100;\\n\\n        if (isLotteryWonOnClaim) {\\n            multiplier = random(150, 200, currentBalance);\\n        }\\n\\n        // now calculate reward\\n        uint256 reward = rewardPool\\n            .mul(multiplier)\\n            .mul(currentBalance)\\n            .div(100)\\n            .div(totalSupply);\\n\\n        return reward;\\n    }\\n\\n    function calculateTopUpClaim(\\n        uint256 currentRecipientBalance,\\n        uint256 basedRewardCycleBlock,\\n        uint256 threshHoldTopUpRate,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        if (currentRecipientBalance == 0) {\\n            return block.timestamp + basedRewardCycleBlock;\\n        } else {\\n            uint256 rate = amount.mul(100).div(currentRecipientBalance);\\n\\n            if (uint256(rate) >= threshHoldTopUpRate) {\\n                uint256 incurCycleBlock = basedRewardCycleBlock\\n                    .mul(uint256(rate))\\n                    .div(100);\\n\\n                if (incurCycleBlock >= basedRewardCycleBlock) {\\n                    incurCycleBlock = basedRewardCycleBlock;\\n                }\\n\\n                return incurCycleBlock;\\n            }\\n\\n            return 0;\\n        }\\n    }\\n\\n    function deductTaxAutoClaim(\\n        RewardDistributionDataStore storage instance,\\n        uint256 amount\\n    ) private {\\n        // pancake\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._externalData._pancakeRouter\\n        );\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](3);\\n\\n        path[0] = instance._externalData._pairedToken;\\n        path[1] = pancakeRouter.WETH();\\n        // SMRAT use main pool is BNB\\n        path[2] = instance._externalData._claimerBonusToken;\\n\\n        // make the swap\\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amount,\\n            0, // accept any amount of output\\n            path,\\n            BURNED_ADDRESS,\\n            block.timestamp + 360\\n        );\\n    }\\n\\n    function swapTokensForClaimer(\\n        RewardDistributionDataStore storage instance,\\n        address recipient,\\n        uint256 amount\\n    ) private returns (uint256) {\\n        // pancake\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._externalData._pancakeRouter\\n        );\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](3);\\n\\n        path[0] = instance._externalData._pairedToken;\\n        path[1] = pancakeRouter.WETH();\\n        // SMRAT use main pool is BNB\\n        path[2] = instance._externalData._claimerBonusToken;\\n\\n        uint256 beforeBalance = IERC20(\\n            instance._externalData._claimerBonusToken\\n        ).balanceOf(recipient);\\n\\n        // make the swap\\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amount,\\n            0, // accept any amount of output\\n            path,\\n            recipient,\\n            block.timestamp + 360\\n        );\\n\\n        uint256 afterBalance = IERC20(instance._externalData._claimerBonusToken)\\n            .balanceOf(recipient);\\n\\n        return afterBalance.sub(beforeBalance);\\n    }\\n\\n    function deductTaxInstantClaim(\\n        RewardDistributionDataStore storage instance,\\n        uint256 amountIn\\n    ) private {\\n        // pancake\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(\\n            instance._externalData._pancakeRouter\\n        );\\n\\n        // generate the pancake pair path of token -> weth\\n        address[] memory path = new address[](2);\\n\\n        path[0] = address(instance._externalData._pairedToken);\\n        path[1] = address(this);\\n\\n        // make the swap\\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amountIn,\\n            0, // accept any amount of output\\n            path,\\n            instance._externalData._forwardingPool,\\n            block.timestamp + 360\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {\r\n      \"/contracts/protocols/EarnToken/core/Reflection.sol\": {\r\n        \"Reflection\": \"0x27d8Cb084E518c64E942574bD0f19C9A57971f86\"\r\n      },\r\n      \"/contracts/protocols/EarnToken/core/AntiWhale.sol\": {\r\n        \"AntiWhale\": \"0x60F60ED4aDD305d3dF32b26ED266175A36143275\"\r\n      },\r\n      \"/contracts/protocols/EarnToken/core/Benefit.sol\": {\r\n        \"Benefit\": \"0x7A91f5820Ce2146B94B6c6004b722f3D14992707\"\r\n      },\r\n      \"/contracts/protocols/EarnToken/core/ProofOfTrade.sol\": {\r\n        \"ProofOfTrade\": \"0x529aefdaFdFA3F59D0C7b7B3A7C27c0b5703e892\"\r\n      },\r\n      \"/contracts/protocols/EarnToken/core/LPAcquisition.sol\": {\r\n        \"LPAcquisition\": \"0xF75D925F3720171206f92F700292e49B13D8b159\"\r\n      },\r\n      \"/contracts/protocols/EarnToken/core/RewardDistribution.sol\": {\r\n        \"RewardDistribution\": \"0x276c5EfAAf4Bd7bf5889D7E9d1e271bcBB4A9DBD\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coreTokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proofOfTradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservedPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_disallowOthersClaimForMe\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enableAutoInstantClaim\",\"type\":\"bool\"}],\"name\":\"ChangeClaimConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"ClaimInstantRewardSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewardForSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"ClaimRewardSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DisruptiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"busdPrinted\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_forwardingPool\",\"outputs\":[{\"internalType\":\"contract ForwardingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pairedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimitHolding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disruptiveTransferEnabledFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disruptiveCoverageFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_forwardingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvePancake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benefitData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_coreTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_membershipThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardSlotPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTaxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disruptiveCoverageFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"calculateHolderReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"calculateInstantReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInstantReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"claimRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimitHolding\",\"type\":\"uint256\"}],\"name\":\"configureAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardSlotPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTaxPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disruptiveCoverageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_membershipThreshold\",\"type\":\"uint256\"}],\"name\":\"configureBenefitData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableAutoInstantClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_disallowOthersClaimForMe\",\"type\":\"bool\"}],\"name\":\"configureClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"configureFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moonRatTradeProofToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reservedPool\",\"type\":\"address\"}],\"name\":\"configureProofOfTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCycleBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitHoldingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"taxLayers\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"configureRewardMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cappedRewardPercentageForHolder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRateForClaimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCappedForClaimer\",\"type\":\"uint256\"}],\"name\":\"configureRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"configureTradingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disruptiveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"getClaimConfiguration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"getRewardClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"grantedBenefitFromVIPMembership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAcquisitionData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwardingPool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inSwapAndLiquify\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenNumberToSell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofOfTradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burningPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reservedPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moonRatTradeProofToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_reentrancyBlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectedData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tFeeTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardCycleBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_easyRewardCycleBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshHoldTopUpRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winningDoubleRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disableEasyRewardFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTaxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRateForClaimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCappedForClaimer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cappedRewardPercentageForHolder\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstLayer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondLayer\",\"type\":\"uint256\"}],\"internalType\":\"struct TaxLayers\",\"name\":\"_taxLayers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proofOfTradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimerBonusToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwardingPool\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistributionExternalData\",\"name\":\"_externalData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxLimitHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EarnToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000068590a47578e5060a29fd99654f4556dbfa05d100000000000000000000000007fea7a3d15518065f0bc28e0fbef3236fb7534fc0000000000000000000000008e1886cf6b4ed3d622596fe63e0d0cd522faf17f000000000000000000000000000000000000000000000000000000000000000e4561726e4255534420546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054542555344000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}