{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/EquityRTT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"./token/ReflectionTrackerToken.sol\\\";\\r\\n\\r\\ncontract EquityRTT is ReflectionTrackerToken {\\r\\n    // V2 Changelog\\r\\n    //  ReflectionTrackerToken:\\r\\n    //      Updated 'function _processAll(uint256 gas) private returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex)' - _lastProcessedIndex always being 0 has been resolved\\r\\n    //      Added 'function refreshBalancesOf(address[] memory accounts) external onlySharedOwners' - Method to support migrating to newer versions\\r\\n    //      Added 'function setReflectionInBNBs(address[] memory accounts, bool[] memory reflectionInBNBs) external onlySharedOwners' - Method to support migrating to newer versions\\r\\n    //      Added 'function setReflectionTokenAddresses(address[] memory accounts, address[] memory reflectionTokenAddresses) external onlySharedOwners' - Method to support migrating to newer versions\\r\\n    // V3 Changelog [Polygon V1]\\r\\n    //  Equity_RTT:\\r\\n    //      Fixed L04 of 'Equity_RTT' - Renamed to 'EquityRTT'\\r\\n    //  ReflectionTrackerToken:\\r\\n    //      Fixed L04 of 'magnitude' - Renamed to 'MAGNITUDE'\\r\\n    //      Fixed L04 of 'deadAddress' - Renamed to 'DEAD_ADDRESS'\\r\\n    //      Fixed L04 of '_excludedReflectionStateOfBNB' - Was unintentionally public, it is now private\\r\\n    //      Updated 'function _withdrawReflectionOf(address account, bool automatic) private returns (uint256)' - Added support for WETH as a reflectionToken\\r\\n    //      Updated 'address private _reflectiveTokenAddress' - Is now an IReflective interface called _reflective, no IERC20 assumption for the reflective needed anymore\\r\\n    //      Updated 'function _setBalanceOf(address account, uint256 balance) private' - Accounts transfering all of their balance will do a final process, because processAll will not cover them anymore \\r\\n    //      Updated constructor - Wrapped all parameters inside a struct to bypass compiler errors\\r\\n    //      Updated processAll - It now supports a force flag to process all accounts, even accounts on claim cooldown\\r\\n    // V3 Changelog [Polygon V1 RC]\\r\\n    //  Overall:\\r\\n    //      The overall system was changed to allow the holding of tokens of different fees. The RTT share is based on the accumulated value of tokens per fee.\\r\\n    //      Renamed everything related with BNB to ETH to be more inline with all services etc..\\r\\n    constructor(address[] memory teamAndMarketingWallets_, address uniswapV2Router02Address_, address defaultReflectionTokenAddress_) ReflectionTrackerToken(\\r\\n        ConstructorArguments(\\r\\n            \\\"Equity - Reflection Tracker Token\\\",\\r\\n            \\\"Equity_RTT\\\",\\r\\n            uniswapV2Router02Address_,\\r\\n            defaultReflectionTokenAddress_,\\r\\n            10800,\\r\\n            20,\\r\\n            400000,\\r\\n            teamAndMarketingWallets_\\r\\n        )\\r\\n    ) {}\\r\\n}\"\r\n    },\r\n    \"/contracts/token/ReflectionTrackerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"../access/SharedOwnable.sol\\\";\\r\\nimport \\\"../interfaces/IReflectionTracker.sol\\\";\\r\\nimport \\\"../interfaces/IReflective.sol\\\";\\r\\nimport \\\"../libraries/IterableMappingAddressUint256.sol\\\";\\r\\nimport \\\"../libraries/SafeMathInt.sol\\\";\\r\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract ReflectionTrackerToken is ERC20, IReflectionTracker, SharedOwnable {\\r\\n  struct ConstructorArguments {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    address uniswapV2Router02Address;\\r\\n    address defaultReflectionTokenAddress;\\r\\n    uint256 claimCooldown;\\r\\n    uint256 minimumTokenBalanceForReflections;\\r\\n    uint256 processingGas;\\r\\n    address[] sharedOwners;\\r\\n  }\\r\\n\\r\\n  using SafeMathUint for uint256;\\r\\n  using SafeMathInt for int256;\\r\\n  using IterableMappingAddressUint256 for IterableMappingAddressUint256.Map;\\r\\n\\r\\n  address constant private DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n  uint256 constant private MAGNITUDE = 2**128;\\r\\n\\r\\n  IReflective private _reflective;\\r\\n  IUniswapV2Router02 private _uniswapV2Router02;\\r\\n  address private _reflectiveTokenPairAddress;\\r\\n  IERC20 private _defaultReflectionToken;\\r\\n  uint256 private _claimCooldown;\\r\\n  uint256 private _minimumTokenBalanceForReflections;\\r\\n  bool private _excludedReflectionStateOfETH;\\r\\n  mapping(address => bool) private _excludedReflectionTokenState;\\r\\n  mapping(address => bool) private _excludedFromReflections;\\r\\n  uint256 private _processingGas;\\r\\n  mapping(address => bool) private _reflectionInETHs;\\r\\n  mapping(address => bool) private _disabledAutomatedReflections;\\r\\n  mapping(address => mapping(address => address)) private _reflectionTokenAddresses;\\r\\n  IterableMappingAddressUint256.Map private _tokenHolders;\\r\\n  uint256 private _lastProcessedIndex;\\r\\n  uint256 private _totalReflectionsTransferred;\\r\\n  mapping(address => uint256) private _withdrawnReflections;\\r\\n  mapping(address => uint256) private _lastClaimTimestamps;\\r\\n  uint256 private _magnifiedReflectionPerShare;\\r\\n  mapping(address => int256) private _magnifiedReflectionCorrections;\\r\\n\\r\\n  constructor(ConstructorArguments memory constructorArguments_) ERC20(constructorArguments_.name, constructorArguments_.symbol) {\\r\\n    _uniswapV2Router02 = IUniswapV2Router02(constructorArguments_.uniswapV2Router02Address);\\r\\n    _defaultReflectionToken = IERC20(constructorArguments_.defaultReflectionTokenAddress);\\r\\n    _claimCooldown = constructorArguments_.claimCooldown;\\r\\n    _minimumTokenBalanceForReflections = constructorArguments_.minimumTokenBalanceForReflections * (10**decimals());\\r\\n    _processingGas = constructorArguments_.processingGas;\\r\\n\\r\\n    _excludedFromReflections[address(this)] = true;\\r\\n    _excludedFromReflections[DEAD_ADDRESS] = true;\\r\\n    _excludedFromReflections[constructorArguments_.uniswapV2Router02Address] = true;\\r\\n\\r\\n    _defaultReflectionToken.totalSupply();\\r\\n    if (constructorArguments_.defaultReflectionTokenAddress != _uniswapV2Router02.WETH())\\r\\n      _getTokenPair(_uniswapV2Router02, constructorArguments_.defaultReflectionTokenAddress, _uniswapV2Router02.WETH());\\r\\n\\r\\n    for (uint256 i = 0; i < constructorArguments_.sharedOwners.length; i++)\\r\\n      setSharedOwner(constructorArguments_.sharedOwners[i]);\\r\\n\\r\\n    _excludedFromReflections[msg.sender] = true;\\r\\n  }\\r\\n\\r\\n  modifier onlyReflective() {\\r\\n      require(address(_reflective) == msg.sender, \\\"ReflectionTrackerToken: caller is not the reflective\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function isBoundTo(address reflectiveAddress) external view returns (bool) {\\r\\n    return address(_reflective) == reflectiveAddress;\\r\\n  }\\r\\n\\r\\n  function bindTo(address reflectiveAddress) external onlySharedOwners {\\r\\n    if (address(_reflective) != address(0))\\r\\n      revert(\\\"ReflectionTrackerToken: already bound\\\");\\r\\n\\r\\n    _reflective = IReflective(reflectiveAddress);\\r\\n    _reflectiveTokenPairAddress = _getTokenPair(_uniswapV2Router02, reflectiveAddress, _reflective.getTokenPairOtherTokenAddress());\\r\\n\\r\\n    _excludedReflectionTokenState[reflectiveAddress] = true;\\r\\n    _excludedFromReflections[reflectiveAddress] = true;\\r\\n    _excludedFromReflections[_reflectiveTokenPairAddress] = true;\\r\\n\\r\\n    setSharedOwner(reflectiveAddress);\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(address account) external view returns (uint256) {\\r\\n    return _getBalanceOf(account, false);\\r\\n  }\\r\\n\\r\\n  function refreshBalanceOf(address account) external {\\r\\n    _refreshBalanceOf(account);\\r\\n  }\\r\\n\\r\\n  function refreshBalancesOf(address[] memory accounts) external onlySharedOwners {\\r\\n    uint256 accountsLength = accounts.length;\\r\\n    for (uint256 i = 0; i < accountsLength; i++)\\r\\n      _refreshBalanceOf(accounts[i]);\\r\\n  }\\r\\n\\r\\n  function refreshBalance() external {    \\r\\n    _refreshBalanceOf(msg.sender);\\r\\n  }\\r\\n\\r\\n  function getUniswapV2Router02Address() external view returns (address) {\\r\\n    return address(_uniswapV2Router02);\\r\\n  }\\r\\n\\r\\n  function setUniswapV2Router02Address(address uniswapV2Router02Address) external onlySharedOwners {\\r\\n    address oldUniswapV2Router02Address = address(_uniswapV2Router02);\\r\\n    if (oldUniswapV2Router02Address != uniswapV2Router02Address) {\\r\\n      address oldReflectiveTokenPairAddress = _reflectiveTokenPairAddress;\\r\\n      IUniswapV2Router02 uniswapV2Router02 = IUniswapV2Router02(uniswapV2Router02Address);\\r\\n      address reflectiveTokenPairAddress = _getTokenPair(uniswapV2Router02, address(_reflective), _reflective.getTokenPairOtherTokenAddress());\\r\\n\\r\\n      if (address(_defaultReflectionToken) != uniswapV2Router02.WETH())\\r\\n        _getTokenPair(uniswapV2Router02, address(_defaultReflectionToken), uniswapV2Router02.WETH());\\r\\n\\r\\n      if (oldReflectiveTokenPairAddress != reflectiveTokenPairAddress) {\\r\\n        _setExcludedFromReflectionsOf(oldReflectiveTokenPairAddress, false);\\r\\n        _setExcludedFromReflectionsOf(reflectiveTokenPairAddress, true);\\r\\n        _reflectiveTokenPairAddress = reflectiveTokenPairAddress;\\r\\n      }\\r\\n\\r\\n      _setExcludedFromReflectionsOf(oldUniswapV2Router02Address, false);\\r\\n      _setExcludedFromReflectionsOf(uniswapV2Router02Address, true);\\r\\n      _uniswapV2Router02 = uniswapV2Router02;\\r\\n      emit UniswapV2Router02AddressUpdated(oldUniswapV2Router02Address, uniswapV2Router02Address);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getDefaultReflectionTokenAddress() external view returns (address) {\\r\\n    return address(_defaultReflectionToken);\\r\\n  }\\r\\n\\r\\n  function setDefaultReflectionTokenAddress(address defaultReflectionTokenAddress) external onlySharedOwners {\\r\\n    if (_excludedReflectionTokenState[defaultReflectionTokenAddress])\\r\\n      revert(\\\"ReflectionTrackerToken: excluded reflection token\\\");\\r\\n\\r\\n    address oldDefaultReflectionTokenAddress = address(_defaultReflectionToken);\\r\\n    if (oldDefaultReflectionTokenAddress != defaultReflectionTokenAddress) {\\r\\n      IERC20 defaultReflectionToken = IERC20(defaultReflectionTokenAddress);\\r\\n\\r\\n      defaultReflectionToken.totalSupply();\\r\\n      if (defaultReflectionTokenAddress != _uniswapV2Router02.WETH())\\r\\n        _getTokenPair(_uniswapV2Router02, defaultReflectionTokenAddress, _uniswapV2Router02.WETH());\\r\\n\\r\\n      _defaultReflectionToken = defaultReflectionToken;\\r\\n      emit DefaultReflectionTokenAddressUpdated(oldDefaultReflectionTokenAddress, defaultReflectionTokenAddress);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getClaimCooldown() external view returns (uint256) {\\r\\n    return _claimCooldown;\\r\\n  }\\r\\n\\r\\n  function setClaimCooldown(uint256 claimCooldown) external onlySharedOwners {\\r\\n    uint256 oldClaimCooldown = _claimCooldown;\\r\\n    if (oldClaimCooldown != claimCooldown) {\\r\\n      _claimCooldown = claimCooldown;\\r\\n      emit ClaimCooldownUpdated(oldClaimCooldown, claimCooldown);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getMinimumTokenBalanceForReflections() external view returns (uint256) {\\r\\n    return _minimumTokenBalanceForReflections;\\r\\n  }\\r\\n\\r\\n  function setMinimumTokenBalanceForReflections(uint256 minimumTokenBalanceForReflections) external onlySharedOwners {\\r\\n    minimumTokenBalanceForReflections *= 10**decimals();\\r\\n    uint256 oldMinimumTokenBalanceForReflections = _minimumTokenBalanceForReflections;\\r\\n    if (oldMinimumTokenBalanceForReflections != minimumTokenBalanceForReflections) {\\r\\n      _minimumTokenBalanceForReflections = minimumTokenBalanceForReflections;\\r\\n      emit MinimumTokenBalanceForReflectionsUpdated(oldMinimumTokenBalanceForReflections, minimumTokenBalanceForReflections);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getExcludedReflectionStateOfETH() external view returns (bool) {\\r\\n    return _excludedReflectionStateOfETH;\\r\\n  }\\r\\n\\r\\n  function setExcludedReflectionStateOfETH(bool excludedReflectionStateOfETH) external onlySharedOwners {\\r\\n    bool oldExcludedReflectionStateOfETH = _excludedReflectionStateOfETH;\\r\\n    if (oldExcludedReflectionStateOfETH != excludedReflectionStateOfETH) {\\r\\n      _excludedReflectionStateOfETH = excludedReflectionStateOfETH;\\r\\n      emit ExcludedReflectionStateOfETHUpdated(oldExcludedReflectionStateOfETH, excludedReflectionStateOfETH);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getExcludedReflectionTokenStateOf(address account) external view returns (bool) {\\r\\n    return _excludedReflectionTokenState[account];\\r\\n  }\\r\\n\\r\\n  function setExcludedReflectionTokenStateOf(address account, bool excludedReflectionTokenState) external onlySharedOwners {\\r\\n    bool oldExcludedReflectionTokenState = _excludedFromReflections[account];\\r\\n    if (oldExcludedReflectionTokenState != excludedReflectionTokenState) {\\r\\n      _excludedReflectionTokenState[account] = excludedReflectionTokenState;\\r\\n      emit ExcludedReflectionTokenStateUpdated(account, oldExcludedReflectionTokenState, excludedReflectionTokenState);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getExcludedFromReflectionsOf(address account) external view returns (bool) {\\r\\n    return _excludedFromReflections[account];\\r\\n  }\\r\\n\\r\\n  function setExcludedFromReflectionsOf(address account, bool excludedFromReflections) external onlySharedOwners {\\r\\n    _setExcludedFromReflectionsOf(account, excludedFromReflections);\\r\\n  }\\r\\n\\r\\n  function getProcessingGas() external view returns (uint256) {\\r\\n    return _processingGas;\\r\\n  }\\r\\n\\r\\n  function setProcessingGas(uint256 processingGas) external onlySharedOwners {\\r\\n    uint256 oldProcessingGas = _processingGas;\\r\\n    if (oldProcessingGas != processingGas) {\\r\\n      _processingGas = processingGas;\\r\\n      emit ProcessingGasUpdated(oldProcessingGas, processingGas);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getReflectionInETH() external view returns (bool) {\\r\\n    return _reflectionInETHs[msg.sender];\\r\\n  }\\r\\n\\r\\n  function getReflectionInETHOf(address account) external view returns (bool) {\\r\\n    return _reflectionInETHs[account];\\r\\n  }\\r\\n\\r\\n  function setReflectionInETH(bool reflectionInETH) external {\\r\\n    if (_excludedReflectionStateOfETH)\\r\\n      revert(\\\"ReflectionTrackerToken: excluded reflection in eth\\\");\\r\\n\\r\\n    bool oldReflectionInETH = _reflectionInETHs[msg.sender];\\r\\n    if (oldReflectionInETH != reflectionInETH) {\\r\\n      _reflectionInETHs[msg.sender] = reflectionInETH;\\r\\n      delete _reflectionTokenAddresses[address(_uniswapV2Router02)][msg.sender];\\r\\n      emit ReflectionInETHUpdated(msg.sender, oldReflectionInETH, reflectionInETH);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setReflectionInETHs(address[] memory accounts, bool[] memory reflectionInETHs) external onlySharedOwners {\\r\\n    uint256 accountsLength = accounts.length;\\r\\n    if (accountsLength != reflectionInETHs.length)\\r\\n      revert(\\\"ReflectionTrackerToken: accounts length must match reflectionInETHs length\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < accountsLength; i++) {\\r\\n      _reflectionInETHs[accounts[i]] = reflectionInETHs[i];\\r\\n      delete _reflectionTokenAddresses[address(_uniswapV2Router02)][accounts[i]];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getDisabledAutomatedReflections() external view returns (bool) {\\r\\n    return _disabledAutomatedReflections[msg.sender];\\r\\n  }\\r\\n\\r\\n  function setDisabledAutomatedReflections(bool disabledAutomatedReflections) external {\\r\\n    bool oldDisabledAutomatedReflections = _disabledAutomatedReflections[msg.sender];\\r\\n    if (oldDisabledAutomatedReflections != disabledAutomatedReflections) {\\r\\n      _disabledAutomatedReflections[msg.sender] = disabledAutomatedReflections;\\r\\n      emit DisabledAutomatedReflectionsUpdated(msg.sender, oldDisabledAutomatedReflections, disabledAutomatedReflections);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getReflectionTokenAddress() external view returns (address) {\\r\\n    return _reflectionTokenAddresses[address(_uniswapV2Router02)][msg.sender];\\r\\n  }\\r\\n\\r\\n  function getReflectionTokenAddressOf(address account) external view returns (address) {\\r\\n    return _reflectionTokenAddresses[address(_uniswapV2Router02)][account];\\r\\n  }\\r\\n\\r\\n  function setReflectionTokenAddress(address reflectionTokenAddress) external {\\r\\n    if (_excludedReflectionTokenState[reflectionTokenAddress])\\r\\n      revert(\\\"ReflectionTrackerToken: excluded reflection token address\\\");\\r\\n\\r\\n    address oldReflectionTokenAddress = _reflectionTokenAddresses[address(_uniswapV2Router02)][msg.sender];\\r\\n    if (oldReflectionTokenAddress != reflectionTokenAddress) {\\r\\n      IERC20 reflectionToken = IERC20(reflectionTokenAddress);\\r\\n\\r\\n      reflectionToken.totalSupply();\\r\\n      if (reflectionTokenAddress != _uniswapV2Router02.WETH())\\r\\n        _getTokenPair(_uniswapV2Router02, reflectionTokenAddress, _uniswapV2Router02.WETH());\\r\\n\\r\\n      _reflectionTokenAddresses[address(_uniswapV2Router02)][msg.sender] = reflectionTokenAddress;\\r\\n      delete _reflectionInETHs[msg.sender];\\r\\n      emit ReflectionTokenAddressUpdated(msg.sender, oldReflectionTokenAddress, reflectionTokenAddress);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setReflectionTokenAddresses(address[] memory accounts, address[] memory reflectionTokenAddresses) external onlySharedOwners {\\r\\n    uint256 accountsLength = accounts.length;\\r\\n    if (accountsLength != reflectionTokenAddresses.length)\\r\\n      revert(\\\"ReflectionTrackerToken: accounts length must match reflectionTokenAddresses length\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < accountsLength; i++) {\\r\\n      _reflectionTokenAddresses[address(_uniswapV2Router02)][accounts[i]] = reflectionTokenAddresses[i];\\r\\n      delete _reflectionInETHs[accounts[i]];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getNumberOfHolders() external view returns (uint256) {\\r\\n    return _tokenHolders.keys.length;\\r\\n  }\\r\\n\\r\\n  function getLastProcessedIndex() external view returns (uint256) {\\r\\n    return _lastProcessedIndex;\\r\\n  }\\r\\n\\r\\n  function getTotalReflectionsTransferred() external view returns (uint256) {\\r\\n    return _totalReflectionsTransferred;\\r\\n  }\\r\\n\\r\\n  function getWithdrawnReflectionsOf(address account) external view returns (uint256) {\\r\\n    return _withdrawnReflections[account];\\r\\n  }\\r\\n\\r\\n  function getWithdrawableReflectionsOf(address account) external view returns (uint256) {\\r\\n    return _getWithdrawableReflectionsOf(account);\\r\\n  }\\r\\n\\r\\n  function getAccountInfoOf(address account) external view returns (AccountInfo memory) {\\r\\n    return _getAccountInfo(account);\\r\\n  }\\r\\n\\r\\n  function getAccountInfoAtIndex(uint256 index) external view returns (AccountInfo memory) {\\r\\n    if (index >= _tokenHolders.keys.length)\\r\\n      return AccountInfo(address(0), -1, -1, 0, 0, 0, 0, 0);\\r\\n\\r\\n    address account = _tokenHolders.keys[index];\\r\\n    return _getAccountInfo(account);\\r\\n  }\\r\\n\\r\\n  function _getAccountInfo(address account) private view returns (AccountInfo memory accountInfo) {\\r\\n      accountInfo.account = account;\\r\\n      accountInfo.index = _tokenHolders.inserted[account] ? int256(_tokenHolders.indexOf[account]) : -1;\\r\\n      accountInfo.iterationsUntilProcessed = -1;\\r\\n\\r\\n      if (accountInfo.index >= 0) {\\r\\n          if (uint256(accountInfo.index) > _lastProcessedIndex)\\r\\n              accountInfo.iterationsUntilProcessed = accountInfo.index - int256(_lastProcessedIndex);\\r\\n          else {\\r\\n              uint256 processesUntilEndOfArray = _tokenHolders.keys.length > _lastProcessedIndex ? _tokenHolders.keys.length -_lastProcessedIndex : 0;\\r\\n              accountInfo.iterationsUntilProcessed = accountInfo.index + int256(processesUntilEndOfArray);\\r\\n          }\\r\\n      }\\r\\n\\r\\n      accountInfo.withdrawableReflections = _getWithdrawableReflectionsOf(account);\\r\\n      accountInfo.totalReflections = _accumulativeReflectionOf(account);\\r\\n      accountInfo.lastClaimTimestamp = _lastClaimTimestamps[account];\\r\\n      accountInfo.nextClaimTimestamp = accountInfo.lastClaimTimestamp > 0 ? accountInfo.lastClaimTimestamp + _claimCooldown : 0;\\r\\n      accountInfo.secondsUntilAutoClaimAvailable = accountInfo.nextClaimTimestamp > block.timestamp ? accountInfo.nextClaimTimestamp - block.timestamp : 0;\\r\\n  }\\r\\n\\r\\n  function transferReflections() external payable onlyReflective {\\r\\n    _transferReflections(msg.sender, msg.value);\\r\\n  }\\r\\n\\r\\n  function transferReflections(uint256 amount) external onlyReflective {\\r\\n    _transferReflections(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function process() external returns (bool) {\\r\\n    return _process(msg.sender, false);\\r\\n  }\\r\\n\\r\\n  function processAll() external onlySharedOwners returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n    return _processAll(_processingGas, false);\\r\\n  }\\r\\n\\r\\n  function processAll(bool force) external onlySharedOwners returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n    return _processAll(_processingGas, force);\\r\\n  }\\r\\n\\r\\n  function processAll(uint256 processingGas, bool force) external onlySharedOwners returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n    return _processAll(processingGas, force);\\r\\n  }\\r\\n\\r\\n  function _transfer(address, address, uint256) internal override pure {\\r\\n    revert(\\\"ReflectionTrackerToken: transfer is not allowed\\\");\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal override {\\r\\n    super._mint(account, amount);\\r\\n    _magnifiedReflectionCorrections[account] -= (_magnifiedReflectionPerShare * amount).toInt256Safe();\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal override {\\r\\n    super._burn(account, amount);\\r\\n    _magnifiedReflectionCorrections[account] += (_magnifiedReflectionPerShare * amount).toInt256Safe();\\r\\n  }\\r\\n\\r\\n  function _getTokenPair(IUniswapV2Router02 uniswapV2Router02, address tokenAddress, address otherTokenAddress) private view returns (address) {\\r\\n    address tokenPair = IUniswapV2Factory(uniswapV2Router02.factory()).getPair(tokenAddress, otherTokenAddress);\\r\\n    if (tokenPair == address(0))\\r\\n      revert(\\\"ReflectionTrackerToken: no valid token pair\\\");\\r\\n\\r\\n    return tokenPair;\\r\\n  }\\r\\n\\r\\n  function _getBalanceOf(address account, bool ignoreExcludedFromReflections) private view returns (uint256) {\\r\\n    return ignoreExcludedFromReflections || !_excludedFromReflections[account] ? balanceOf(account) : 0;\\r\\n  }\\r\\n\\r\\n  function _refreshBalanceOf(address account) private {\\r\\n    uint256 balance = !_excludedFromReflections[account] ? _getReflectiveBalanceOf(account) : 0;\\r\\n\\r\\n    _process(account, true);\\r\\n    _updateBalanceOf(account, balance);\\r\\n\\r\\n    if (balance == 0)\\r\\n      _tokenHolders.remove(account);\\r\\n    else\\r\\n      _tokenHolders.set(account, balance);\\r\\n  }\\r\\n\\r\\n  function _getReflectiveBalanceOf(address account) private view returns (uint256 balance) {\\r\\n    uint256 maxFee = _reflective.getMaxFee();\\r\\n    uint256 baseFee = _reflective.getBaseFee();\\r\\n    require(maxFee > baseFee, \\\"ReflectionTrackerToken: invalid fees\\\");\\r\\n\\r\\n    IReflective.SimpleFeeBalanceMap memory feeBalances = _reflective.getFeeBalancesOf(account);\\r\\n    for (uint256 i = 0; i < feeBalances.length; i++) {\\r\\n      uint256 fee = feeBalances.keys[i];\\r\\n      if (fee >= baseFee) {\\r\\n        uint256 reflectiveValue = ((fee - baseFee) * 100) / (maxFee - baseFee);\\r\\n        balance += (reflectiveValue * feeBalances.values[i] * (100 - fee)) / 10000;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _updateBalanceOf(address account, uint256 balance) private {\\r\\n    uint256 currentBalance = _getBalanceOf(account, true);\\r\\n\\r\\n    if (balance > currentBalance) {\\r\\n      uint256 mintAmount = balance - currentBalance;\\r\\n      _mint(account, mintAmount);\\r\\n    } else if (balance < currentBalance) {\\r\\n      uint256 burnAmount = currentBalance - balance;\\r\\n      _burn(account, burnAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setExcludedFromReflectionsOf(address account, bool excludedFromReflections) private {\\r\\n    bool oldExcludedFromReflections = _excludedFromReflections[account];\\r\\n    if (oldExcludedFromReflections != excludedFromReflections) {\\r\\n      _excludedFromReflections[account] = excludedFromReflections;\\r\\n      _refreshBalanceOf(account);\\r\\n      emit ExcludedFromReflectionsUpdated(account, oldExcludedFromReflections, excludedFromReflections);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _getWithdrawableReflectionsOf(address account) private view returns (uint256) {\\r\\n    return _accumulativeReflectionOf(account) - _withdrawnReflections[account];\\r\\n  }\\r\\n\\r\\n  function _accumulativeReflectionOf(address account) private view returns (uint256) {\\r\\n    return ((_magnifiedReflectionPerShare * _getBalanceOf(account, false)).toInt256Safe() + _magnifiedReflectionCorrections[account]).toUint256Safe() / MAGNITUDE;\\r\\n  }\\r\\n\\r\\n  function _transferReflections(address account, uint256 amount) private {\\r\\n    if (totalSupply() > 0 && amount > 0) {\\r\\n      _magnifiedReflectionPerShare += (amount * MAGNITUDE) / totalSupply();\\r\\n      emit ReflectionsTransferred(account, amount);\\r\\n      _totalReflectionsTransferred += amount;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n    return lastClaimTime > block.timestamp ? false : block.timestamp - lastClaimTime >= _claimCooldown;\\r\\n  }\\r\\n\\r\\n  function _process(address account, bool automatic) private returns (bool) {\\r\\n    if (_getBalanceOf(account, false) >= _minimumTokenBalanceForReflections) {\\r\\n      uint256 withdrawnReflections = _withdrawReflectionOf(account, automatic);\\r\\n\\r\\n      if (withdrawnReflections > 0) {\\r\\n        _lastClaimTimestamps[account] = block.timestamp;\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function _processAll(uint256 processingGas, bool force) private returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n    uint256 numberOfTokenHolders = _tokenHolders.keys.length;\\r\\n    if (numberOfTokenHolders == 0)\\r\\n      return (0, 0, 0, _lastProcessedIndex);\\r\\n\\r\\n    lastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n    uint256 gasLeft = gasleft();\\r\\n    while(gasUsed < processingGas && iterations < numberOfTokenHolders) {\\r\\n      lastProcessedIndex++;\\r\\n      if (lastProcessedIndex >= _tokenHolders.keys.length)\\r\\n        lastProcessedIndex = 0;\\r\\n\\r\\n      address account = _tokenHolders.keys[lastProcessedIndex];\\r\\n      if ((force || (!_disabledAutomatedReflections[account] && _canAutoClaim(_lastClaimTimestamps[account]))) && _process(account, true))\\r\\n        claims++;\\r\\n      iterations++;\\r\\n\\r\\n      uint256 newGasLeft = gasleft();\\r\\n      if (gasLeft > newGasLeft)\\r\\n        gasUsed += gasLeft - newGasLeft;\\r\\n      gasLeft = newGasLeft;\\r\\n    }\\r\\n\\r\\n    _lastProcessedIndex = lastProcessedIndex;\\r\\n    return (gasUsed, iterations, claims, _lastProcessedIndex);\\r\\n  }\\r\\n\\r\\n  function _withdrawReflectionOf(address account, bool automatic) private returns (uint256) {\\r\\n    address reflectionTokenAddress = _reflectionTokenAddresses[address(_uniswapV2Router02)][account];\\r\\n    IERC20 reflectionToken = reflectionTokenAddress == address(0) || _excludedReflectionTokenState[reflectionTokenAddress] ? _defaultReflectionToken : IERC20(reflectionTokenAddress);\\r\\n    uint256 withdrawableReflection = _getWithdrawableReflectionsOf(account);\\r\\n    if (withdrawableReflection > 0) {\\r\\n      bool success;\\r\\n\\r\\n      if (_reflectionInETHs[account] && !_excludedReflectionStateOfETH) {\\r\\n\\r\\n        uint256 ethAmountBeforeSwap = account.balance;\\r\\n        if (_uniswapV2Router02.WETH() == address(_defaultReflectionToken)) {\\r\\n          IWETH weth = IWETH(_uniswapV2Router02.WETH());\\r\\n          try weth.withdraw(withdrawableReflection) {\\r\\n            (success, ) = account.call{value: withdrawableReflection}(new bytes(0));\\r\\n          } catch {}\\r\\n        } else {\\r\\n          try _defaultReflectionToken.approve(address(_uniswapV2Router02), withdrawableReflection) {} catch {}\\r\\n\\r\\n          address[] memory path = new address[](2);\\r\\n          path[0] = address(_defaultReflectionToken);\\r\\n          path[1] = _uniswapV2Router02.WETH();\\r\\n\\r\\n          try _uniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens(withdrawableReflection, 0, path, account, block.timestamp) {} catch {}\\r\\n        }\\r\\n        uint256 ethAmountAfterSwap = account.balance;\\r\\n\\r\\n        success = ethAmountAfterSwap > ethAmountBeforeSwap;\\r\\n        uint256 ethAmount = ethAmountAfterSwap - ethAmountBeforeSwap;\\r\\n\\r\\n        if (success)\\r\\n          emit ReflectionETHClaimed(account, ethAmount, automatic);\\r\\n      } else {\\r\\n        uint256 reflectionTokenAmount;\\r\\n\\r\\n        if (reflectionToken != _defaultReflectionToken) {\\r\\n          address[] memory path;\\r\\n          if (_uniswapV2Router02.WETH() == address(reflectionToken)) {\\r\\n            path = new address[](2);\\r\\n            path[0] = address(_defaultReflectionToken);\\r\\n            path[1] = _uniswapV2Router02.WETH();\\r\\n          } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = address(_defaultReflectionToken);\\r\\n            path[1] = _uniswapV2Router02.WETH();\\r\\n            path[2] = address(reflectionToken);\\r\\n          }\\r\\n\\r\\n          _defaultReflectionToken.approve(address(_uniswapV2Router02), withdrawableReflection);\\r\\n\\r\\n          uint256 tokenAmountBeforeSwap = reflectionToken.balanceOf(account);\\r\\n          _uniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens(withdrawableReflection, 0, path, account, block.timestamp);\\r\\n          uint256 tokenAmountAfterSwap = reflectionToken.balanceOf(account);\\r\\n\\r\\n          success = tokenAmountAfterSwap > tokenAmountBeforeSwap;\\r\\n          reflectionTokenAmount = tokenAmountAfterSwap - tokenAmountBeforeSwap;\\r\\n        } else {\\r\\n          success = reflectionToken.transfer(account, withdrawableReflection);\\r\\n          reflectionTokenAmount = withdrawableReflection;\\r\\n        }\\r\\n        \\r\\n        if (success)\\r\\n          emit ReflectionTokenClaimed(account, address(reflectionToken), reflectionTokenAmount, automatic);\\r\\n      }\\r\\n      \\r\\n      if (success) {\\r\\n        _withdrawnReflections[account] += withdrawableReflection;\\r\\n        return withdrawableReflection;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b >= 0);\\r\\n\\r\\n    return b;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/SafeMathInt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary SafeMathInt {\\r\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n    require(a >= 0);\\r\\n\\r\\n    return uint256(a);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/IterableMappingAddressUint256.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary IterableMappingAddressUint256 {\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint256) values;\\r\\n        mapping(address => uint256) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, address key, uint256 val) internal {\\r\\n        if (map.inserted[key])\\r\\n            map.values[key] = val;\\r\\n        else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) internal {\\r\\n        if (!map.inserted[key])\\r\\n            return;\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IReflective.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"./IFeeable.sol\\\";\\r\\n\\r\\ninterface IReflective is IFeeable {\\r\\n  struct SimpleFeeBalanceMap {\\r\\n    uint256 length;\\r\\n    uint256[] keys;\\r\\n    uint256[] values;\\r\\n  }\\r\\n\\r\\n  function getBalanceOf(address account) external view returns (uint256);\\r\\n  function getFeeBalancesOf(address account) external view returns (SimpleFeeBalanceMap memory);\\r\\n\\r\\n  function getTokenPairOtherTokenAddress() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IReflectionTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IReflectionTracker {\\r\\n  struct AccountInfo {\\r\\n    address account;\\r\\n    int256 index;\\r\\n    int256 iterationsUntilProcessed;\\r\\n    uint256 withdrawableReflections;\\r\\n    uint256 totalReflections;\\r\\n    uint256 lastClaimTimestamp;\\r\\n    uint256 nextClaimTimestamp;\\r\\n    uint256 secondsUntilAutoClaimAvailable;\\r\\n  }\\r\\n\\r\\n  event UniswapV2Router02AddressUpdated(address indexed oldUniswapV2Router02Address, address indexed newUniswapV2Router02Address);\\r\\n  event DefaultReflectionTokenAddressUpdated(address indexed oldDefaultReflectionTokenAddress, address indexed newDefaultReflectionTokenAddress);\\r\\n  event ClaimCooldownUpdated(uint256 oldClaimCooldown, uint256 newClaimCooldown);\\r\\n  event MinimumTokenBalanceForReflectionsUpdated(uint256 oldMinimumTokenBalanceForReflections, uint256 newMinimumTokenBalanceForReflections);\\r\\n  event ExcludedReflectionStateOfETHUpdated(bool oldExcludedReflectionStateOfETH, bool newExcludedReflectionStateOfETH);\\r\\n  event ExcludedReflectionTokenStateUpdated(address indexed account, bool oldExcludedReflectionTokenState, bool newExcludedReflectionTokenState);\\r\\n  event ExcludedFromReflectionsUpdated(address indexed account, bool oldExcludedFromReflections, bool newExcludedFromReflections);\\r\\n  event ProcessingGasUpdated(uint256 oldProcessingGas, uint256 newProcessingGas);\\r\\n\\r\\n  event ReflectionInETHUpdated(address indexed account, bool oldReflectionInETH, bool newReflectionInETH);\\r\\n  event DisabledAutomatedReflectionsUpdated(address indexed account, bool oldDisabledAutomatedReflections, bool newDisabledAutomatedReflections);\\r\\n  event ReflectionTokenAddressUpdated(address indexed account, address oldReflectionTokenAddress, address newReflectionTokenAddress);\\r\\n\\r\\n  event ReflectionsTransferred(address indexed account, uint256 defaultReflectionTokenAmount);\\r\\n\\r\\n  event ReflectionETHClaimed(address indexed account, uint256 ethAmount, bool automatic);\\r\\n  event ReflectionTokenClaimed(address indexed account, address tokenAddress, uint256 tokenAmount, bool automatic);\\r\\n\\r\\n  function isBoundTo(address reflectiveAddress) external view returns (bool);\\r\\n  function bindTo(address reflectiveAddress) external;\\r\\n\\r\\n  function getBalanceOf(address account) external view returns (uint256);\\r\\n  function refreshBalanceOf(address account) external;\\r\\n  function refreshBalance() external;\\r\\n\\r\\n  function getUniswapV2Router02Address() external view returns (address);\\r\\n  function setUniswapV2Router02Address(address uniswapV2Router02Address) external;\\r\\n  function getDefaultReflectionTokenAddress() external view returns (address);\\r\\n  function setDefaultReflectionTokenAddress(address defaultReflectionTokenAddress) external;\\r\\n  function getClaimCooldown() external view returns (uint256);\\r\\n  function setClaimCooldown(uint256 claimCooldown) external;\\r\\n  function getMinimumTokenBalanceForReflections() external view returns (uint256);\\r\\n  function setMinimumTokenBalanceForReflections(uint256 minimumTokenBalanceForReflections) external;\\r\\n  function getExcludedReflectionStateOfETH() external view returns (bool);\\r\\n  function setExcludedReflectionStateOfETH(bool excludedReflectionStateOfETH) external;\\r\\n  function getExcludedReflectionTokenStateOf(address account) external view returns (bool);\\r\\n  function setExcludedReflectionTokenStateOf(address account, bool excludedReflectionTokenState) external;\\r\\n  function getExcludedFromReflectionsOf(address account) external view returns (bool);\\r\\n  function setExcludedFromReflectionsOf(address account, bool excludedFromReflections) external;\\r\\n  function getProcessingGas() external view returns (uint256);\\r\\n  function setProcessingGas(uint256 processingGas) external;\\r\\n\\r\\n  function getReflectionInETH() external view returns (bool);\\r\\n  function getReflectionInETHOf(address account) external view returns (bool);\\r\\n  function setReflectionInETH(bool reflectionInETH) external;\\r\\n  function getReflectionTokenAddress() external view returns (address);\\r\\n  function getReflectionTokenAddressOf(address account) external view returns (address);\\r\\n  function setReflectionTokenAddress(address reflectionTokenAddress) external;\\r\\n\\r\\n  function getNumberOfHolders() external view returns (uint256);\\r\\n  function getLastProcessedIndex() external view returns (uint256);\\r\\n  function getTotalReflectionsTransferred() external view returns (uint256);\\r\\n\\r\\n  function getWithdrawnReflectionsOf(address account) external view returns (uint256);\\r\\n  function getWithdrawableReflectionsOf(address account) external view returns (uint256);\\r\\n\\r\\n  function getAccountInfoOf(address account) external view returns (AccountInfo memory);\\r\\n  function getAccountInfoAtIndex(uint256 index) external view returns (AccountInfo memory);\\r\\n\\r\\n  function transferReflections() external payable;\\r\\n  function transferReflections(uint256 amount) external;\\r\\n\\r\\n  function process() external returns (bool);\\r\\n  function processAll() external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n  function processAll(bool force) external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n  function processAll(uint256 processingGas, bool force) external returns (uint256 gasUsed, uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFeeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IFeeable {\\r\\n  function getMaxFee() external pure returns (uint256);\\r\\n\\r\\n  function getBaseFee() external view returns (uint256);\\r\\n\\r\\n  function getCustomFeeOf(address account) external view returns (bool set, uint256 value);\\r\\n  function setCustomFeeOf(address account, bool set, uint256 value) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/access/SharedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC-BY-NC-4.0\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract SharedOwnable is Ownable {\\r\\n    address private _creator;\\r\\n    int256 _sharedOwnersCount;\\r\\n    mapping(address => bool) private _sharedOwners;\\r\\n    mapping(address => address[]) private _promoteVotes;\\r\\n    mapping(address => address[]) private _demoteVotes;\\r\\n    \\r\\n    event SharedOwnershipUpdated(address indexed sharedOwner, bool isSharedOwner);\\r\\n\\r\\n    constructor() Ownable() {\\r\\n        _creator = msg.sender;\\r\\n        _setIsSharedOwner(msg.sender, true);\\r\\n        renounceOwnership();\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        require(_creator == msg.sender, \\\"SharedOwnable: caller is not the creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySharedOwners() {\\r\\n        require(_sharedOwners[msg.sender], \\\"SharedOwnable: caller is not a shared owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getCreator() external view returns (address) {\\r\\n        return _creator;\\r\\n    }\\r\\n\\r\\n    function getSharedOwnerCount() external view returns (int256) {\\r\\n        return _sharedOwnersCount;\\r\\n    }\\r\\n\\r\\n    function isSharedOwner(address account) external view returns (bool) {\\r\\n        return _sharedOwners[account];\\r\\n    }\\r\\n\\r\\n    function setSharedOwner(address account) internal onlySharedOwners {\\r\\n        _setIsSharedOwner(account, true);\\r\\n    }\\r\\n\\r\\n    function votePromoteToSharedOwner(address account) external onlySharedOwners {\\r\\n        require(account != msg.sender, \\\"SharedOwnable: caller can not vote themself\\\");\\r\\n        require(!_sharedOwners[account], \\\"SharedOwnable: account is already a shared owner\\\");\\r\\n        uint256 promoteVotesLength = _promoteVotes[account].length;\\r\\n        for (uint256 i = 0; i < promoteVotesLength; i++)\\r\\n            require(_promoteVotes[account][i] != msg.sender, \\\"SharedOwnable: caller has voted already\\\");\\r\\n\\r\\n        _promoteVotes[account].push(msg.sender);\\r\\n        if (int256(promoteVotesLength + 1) >= ((_sharedOwnersCount + 1) / 2)) {\\r\\n            delete _promoteVotes[account];\\r\\n            _setIsSharedOwner(account, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function voteDemoteFromSharedOwner(address account) external onlySharedOwners {\\r\\n        require(account != msg.sender, \\\"SharedOwnable: caller can not vote themself\\\");\\r\\n        require(_sharedOwners[account], \\\"SharedOwnable: account is not a shared owner\\\");\\r\\n        uint256 demoteVotesLength = _demoteVotes[account].length;\\r\\n        for (uint256 i = 0; i < demoteVotesLength; i++)\\r\\n            require(_demoteVotes[account][i] != msg.sender, \\\"SharedOwnable: caller has voted already\\\");\\r\\n\\r\\n        _demoteVotes[account].push(msg.sender);\\r\\n        if (int256(demoteVotesLength + 1) >= ((_sharedOwnersCount + 1) / 2)) {\\r\\n            delete _demoteVotes[account];\\r\\n            _setIsSharedOwner(account, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setIsSharedOwner(address account, bool sharedOwner) private {\\r\\n        if (_sharedOwners[account] != sharedOwner) {\\r\\n            _sharedOwners[account] = sharedOwner;\\r\\n            _sharedOwnersCount += sharedOwner ? int256(1) : -1;\\r\\n            emit SharedOwnershipUpdated(account, sharedOwner);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"teamAndMarketingWallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router02Address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultReflectionTokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldClaimCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimCooldown\",\"type\":\"uint256\"}],\"name\":\"ClaimCooldownUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDefaultReflectionTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultReflectionTokenAddress\",\"type\":\"address\"}],\"name\":\"DefaultReflectionTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldDisabledAutomatedReflections\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newDisabledAutomatedReflections\",\"type\":\"bool\"}],\"name\":\"DisabledAutomatedReflectionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldExcludedFromReflections\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newExcludedFromReflections\",\"type\":\"bool\"}],\"name\":\"ExcludedFromReflectionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldExcludedReflectionStateOfETH\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newExcludedReflectionStateOfETH\",\"type\":\"bool\"}],\"name\":\"ExcludedReflectionStateOfETHUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldExcludedReflectionTokenState\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newExcludedReflectionTokenState\",\"type\":\"bool\"}],\"name\":\"ExcludedReflectionTokenStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumTokenBalanceForReflections\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumTokenBalanceForReflections\",\"type\":\"uint256\"}],\"name\":\"MinimumTokenBalanceForReflectionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProcessingGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProcessingGas\",\"type\":\"uint256\"}],\"name\":\"ProcessingGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"ReflectionETHClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldReflectionInETH\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newReflectionInETH\",\"type\":\"bool\"}],\"name\":\"ReflectionInETHUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReflectionTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReflectionTokenAddress\",\"type\":\"address\"}],\"name\":\"ReflectionTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"ReflectionTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultReflectionTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReflectionsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharedOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSharedOwner\",\"type\":\"bool\"}],\"name\":\"SharedOwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldUniswapV2Router02Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUniswapV2Router02Address\",\"type\":\"address\"}],\"name\":\"UniswapV2Router02AddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectiveAddress\",\"type\":\"address\"}],\"name\":\"bindTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountInfoAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"index\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"iterationsUntilProcessed\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilAutoClaimAvailable\",\"type\":\"uint256\"}],\"internalType\":\"struct IReflectionTracker.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfoOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"index\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"iterationsUntilProcessed\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilAutoClaimAvailable\",\"type\":\"uint256\"}],\"internalType\":\"struct IReflectionTracker.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultReflectionTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisabledAutomatedReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromReflectionsOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedReflectionStateOfETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedReflectionTokenStateOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProcessingGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReflectionInETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReflectionInETHOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReflectionTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReflectionTokenAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharedOwnerCount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflectionsTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router02Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWithdrawableReflectionsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWithdrawnReflectionsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectiveAddress\",\"type\":\"address\"}],\"name\":\"isBoundTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSharedOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"processAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processingGas\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"processAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refreshBalanceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"refreshBalancesOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimCooldown\",\"type\":\"uint256\"}],\"name\":\"setClaimCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultReflectionTokenAddress\",\"type\":\"address\"}],\"name\":\"setDefaultReflectionTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabledAutomatedReflections\",\"type\":\"bool\"}],\"name\":\"setDisabledAutomatedReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludedFromReflections\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReflectionsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"excludedReflectionStateOfETH\",\"type\":\"bool\"}],\"name\":\"setExcludedReflectionStateOfETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludedReflectionTokenState\",\"type\":\"bool\"}],\"name\":\"setExcludedReflectionTokenStateOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForReflections\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processingGas\",\"type\":\"uint256\"}],\"name\":\"setProcessingGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reflectionInETH\",\"type\":\"bool\"}],\"name\":\"setReflectionInETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"reflectionInETHs\",\"type\":\"bool[]\"}],\"name\":\"setReflectionInETHs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectionTokenAddress\",\"type\":\"address\"}],\"name\":\"setReflectionTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"reflectionTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setReflectionTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Router02Address\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router02Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferReflections\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"voteDemoteFromSharedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votePromoteToSharedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EquityRTT", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000000000000000000000050000000000000000000000006069f8d13020f9224e54524128492755cffedff4000000000000000000000000f24dd13ecbcadb05b1b7eb8089409b96a3b53ca00000000000000000000000004274847a17e3b1418dc9b6fde6c3b2a80f9a4f05000000000000000000000000c2cbf25bdd06daac529d3fee70f8c3c6ef13f2da000000000000000000000000cfa8b7dae05f9f168aed8522251a11dcc7429c66", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}