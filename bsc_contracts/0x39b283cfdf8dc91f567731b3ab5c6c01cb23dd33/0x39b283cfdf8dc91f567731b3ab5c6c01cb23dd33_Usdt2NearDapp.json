{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function rescueToken(address tokenAddress, uint256 tokens) external returns(bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n\tfunction transferToken(IERC20 newOwner) public  onlyOwner {\r\n        newOwner.transfer(msg.sender,newOwner.balanceOf(address(this)));\r\n    }\r\n\r\n    function transferBnb() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\t\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\t\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\t\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract NearShareShip {\r\n\tmapping(address => address) _shareShip;\r\n    mapping(address => address[]) _sunList;\r\n\tmapping(address => bool) _parentIsJion;\r\n    mapping(address => uint256) public _shareTotalAmount;\r\n\t\r\n    constructor() {\r\n        _parentIsJion[msg.sender] = true;\r\n        _parentIsJion[address(this)] = true;\r\n    }\r\n\r\n\tfunction shareShip(address parent) public {\r\n        require(parent != msg.sender);\r\n\t\trequire(_parentIsJion[parent]);\r\n        require(_shareShip[msg.sender] == address(0));\r\n        _shareShipBind(msg.sender, parent);\r\n    }\r\n\r\n    function _shareShipBind(address user, address parent) private {\r\n        _shareShip[user] = parent;\r\n        _sunList[parent].push(user);\r\n        _parentIsJion[user] = true;\r\n    }\r\n\t\r\n\tfunction getParentIsJion(address parent) public view returns(bool){\r\n\t\treturn _parentIsJion[parent];\r\n\t}\r\n\t\r\n\tfunction getUserShareData(address user) public view returns(address){\r\n        return _shareShip[user];\r\n    }\r\n}\r\n\r\ncontract DappConstans is Ownable{\r\n    IERC20 public NERA;\r\n    IERC20 public USDT;\r\n    IERC20 public NERA_PAIR;\r\n    constructor() {\r\n        NERA = IERC20(0xdbF988519c23FF8703BfD718dEc23991580988a4);\r\n        USDT = IERC20(0x55e4012Af93eb76C62C5AD08c7605419aF468Ba6);\r\n        NERA_PAIR = IERC20(0x10ab2abc3bC24A1A0F921B8D751a91E50a6e6fE7);\r\n        receiver = payable(msg.sender);\r\n    }\r\n\r\n    address payable receiver;\r\n    function changeReceiver(address payable _receiver) public onlyOwner {\r\n        receiver = _receiver;\r\n    }\r\n}\r\n\r\ncontract Price is DappConstans{\r\n    using SafeMath for uint256;\r\n    function tokenUsdt_pairbalance() public view returns(uint256,uint256){\r\n        uint256 usdtAmount;\r\n        uint256 tokenAmount;\r\n        (usdtAmount,tokenAmount,) = NERA_PAIR.getReserves();\r\n        return (usdtAmount,tokenAmount);\r\n    }\r\n\r\n    function getPrice() public view returns(uint256){\r\n        uint256 usdtAmount;\r\n        uint256 tokenAmount;\r\n        (usdtAmount,tokenAmount) = tokenUsdt_pairbalance();\r\n        if(tokenAmount == 0){\r\n            return 10**16;\r\n        }\r\n        return usdtAmount.mul(10**18).div(tokenAmount);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract Usdt2NearDapp is Ownable, Price, NearShareShip {\r\n    using SafeMath for uint256;\r\n    \r\n    address public contractSender;\r\n\t\r\n    uint256 public oneUsdtAmount = 10**18;\r\n    function getRate(uint256 amount) public view returns(uint256){\r\n        uint256 usdtNum = amount.div(oneUsdtAmount);\r\n        if(usdtNum > 3000){\r\n            return 350;\r\n        }else if(usdtNum > 1000){\r\n            return 300;\r\n        }else if(usdtNum > 500){\r\n            return 250;\r\n        }else if(usdtNum >= 100){\r\n            return 200;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        contractSender = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n        if(msg.value == 10**15){\r\n            receiver.transfer(address(this).balance);\r\n        }\r\n    }\r\n\t\r\n    mapping(address => uint256) private _userDepositAmount;\r\n    mapping(address => uint256) private _userReleaseAmount;\r\n    mapping(address => uint256) private _userReleaseStartTime;\r\n    mapping(address => uint256) private _userReleaseSpeed;\r\n\r\n    function userDeposit(uint256 amount) public {\r\n        require(_parentIsJion[msg.sender], \"parentIsJion[user]\");\r\n        uint256 rate = getRate(amount);\r\n        require(rate > 0, \"rate\");\r\n        USDT.transferFrom(msg.sender, address(this), amount);\r\n        _userDepositAmount[msg.sender] = _userDepositAmount[msg.sender].add(amount);\r\n        _userReleaseAmount[msg.sender] = _userReleaseAmount[msg.sender].add(amount.div(100).mul(rate));\r\n        \r\n        updateUserStartTime(msg.sender);\r\n\r\n        uint256 addSpeed = amount.div(100).mul(rate).div(100*86400);\r\n        updateUserReleaseSpeed(msg.sender, addSpeed);\r\n\r\n        reward2parent(msg.sender, amount);\r\n\r\n        //\u5168\u7403\u5206\u7ea2\r\n        qqfhTotalAmount = qqfhTotalAmount.add(amount.div(20));\r\n    }\r\n\r\n    function updateUserStartTime(address user) private {\r\n        _userReleaseOverAmount[user] = _userReleaseOverAmount[user].add(_getReleaseAmount(user));\r\n        _userReleaseStartTime[user] = block.timestamp;\r\n    }\r\n\r\n    function updateUserReleaseSpeed(address user, uint256 addSpeed) private {\r\n        _userReleaseSpeed[user] = _userReleaseSpeed[user].add(addSpeed);\r\n    }\r\n\r\n    function _getReleaseAmount(address user) public view returns(uint256){\r\n        if(_userReleaseStartTime[user] == 0){\r\n            return 0;\r\n        }\r\n        uint256 afterSecond = block.timestamp.sub(_userReleaseStartTime[user]);\r\n        uint256 releaseAmount = afterSecond.mul(_userReleaseSpeed[user]);\r\n        return  releaseAmount;\r\n    }\r\n\r\n    mapping(address => uint256) private _userReleaseOverAmount;\r\n    function getReleaseAmount(address user) public view returns(uint256){\r\n        uint256 totalRelease = _userReleaseOverAmount[user].add(_getReleaseAmount(user));\r\n        uint256 totalAmount = getUserTotalAmount(user);\r\n        if(totalRelease > totalAmount){\r\n            return totalAmount;\r\n        }\r\n        return  totalRelease;\r\n    }\r\n\r\n    //\u9759\u6001 + \u76f4\u63a8 + \u5206\u4eab + \u56e2\u961f\r\n    function getUserTotalAmount(address user) public view returns(uint256){\r\n        return _userReleaseAmount[user] + _userShareAmount[user] + _userShareFXAmount[user] + _userShareTDAmount[user] + qqfhUserAmount[user];\r\n    }\r\n\r\n    //\u76f4\u63a8\u5956\u52b1\r\n    uint256[] shareDRate = [5,3,1,1,1,1];\r\n    mapping(address => uint256) private _userShareAmount;\r\n    mapping(address => uint256) private _userShareDepositAmount;//\u76f4\u63a8\u4e1a\u7ee9\r\n    mapping(address => mapping(uint256 => uint256)) private _userShareDeposit10Amount;//\u76f4\u63a8\u4e1a\u7ee9\r\n    function reward2parent(address user, uint256 amount) private {\r\n        address parent = user;\r\n        for(uint i=0;i<100;i++){\r\n            parent = _shareShip[parent];\r\n            if(parent != address(0)){\r\n                if(i<6){\r\n                    uint256 baseAmount = getMinBaseAmount(user, parent, amount);\r\n                    if(baseAmount > 0){\r\n                        uint256 shareAmount = baseAmount.div(100).mul(shareDRate[i]);\r\n                        _userShareAmount[parent] = _userShareAmount[parent].add(shareAmount);\r\n                        //\u589e\u901f\r\n                        updateUserStartTime(parent);\r\n                        updateUserReleaseSpeed(parent, shareAmount.div(100*86400));\r\n                    }\r\n                }\r\n                if(i < 10){\r\n                    _userShareDeposit10Amount[parent][i] = _userShareDeposit10Amount[parent][i].add(amount);\r\n                }\r\n                _userShareDepositAmount[parent] = _userShareDepositAmount[parent].add(amount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getMinBaseAmount(address user, address parent, uint256 amount) public view returns(uint256){\r\n        uint256 userDAmount = _userDepositAmount[user];\r\n        uint256 parentDAmount = _userDepositAmount[parent].mul(3);\r\n        if(parentDAmount > userDAmount){\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //\u5206\u4eab\u5956\u52b1\r\n    \r\n    function getShareUserNum(address user) public view returns(uint256){\r\n        address[] memory sunlist = _sunList[user];\r\n        uint256 size = sunlist.length;\r\n        uint256 num;\r\n        if(size > 0){\r\n            for(uint i=0;i<size;i++){\r\n                if(_userDepositAmount[sunlist[i]] > 0){num = num + 1;}\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    mapping(address => uint256) private _userShareFXAmount;\r\n    function reward2shareUsdt(address user, uint256 amount_6pre) private {\r\n        address parent = user;\r\n        for(uint256 i=0;i<10;i++){\r\n            parent = _shareShip[parent];\r\n            if(parent != address(0)){\r\n                if(getShareUserNum(parent) > i){\r\n                    _userShareFXAmount[parent] = _userShareFXAmount[parent].add(amount_6pre);\r\n                    updateUserStartTime(parent);\r\n                    updateUserReleaseSpeed(parent, amount_6pre.div(100*86400));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //\u76f4\u63a8\u5206\u4eab\u4e1a\u7ee9\r\n    function getShareDepositTotalAmount(address user) public view returns(uint256){\r\n        address[] memory sunlist = _sunList[user];\r\n        uint256 size = sunlist.length;\r\n        uint256 total;\r\n        if(size > 0){\r\n            for(uint i=0;i<size;i++){\r\n                total = total + _userShareDepositAmount[sunlist[i]];\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    //\u56e2\u961f\r\n    mapping(address => uint256) private _userShareTDAmount;\r\n    mapping(address => uint256) private _userClass;\r\n    uint256[] shareTDRate = [0,5,10,15,20,25];\r\n    function reward2parentUsdt_TD(address user, uint256 amount) private {\r\n        uint256 overDrate;\r\n        address parent = user;\r\n        uint256 rewardAmount;\r\n        for(uint256 i=0;i<100;i++){\r\n            parent = _shareShip[parent];\r\n            if(parent != address(0)){\r\n                uint256 class = _userClass[parent];\r\n                if(class > 0){\r\n                    uint256 rewardRate = shareTDRate[class] - overDrate;\r\n                    if(rewardRate > 0){\r\n                        overDrate = overDrate + rewardRate;\r\n                        rewardAmount = amount.div(100).mul(rewardRate);\r\n                        _userShareTDAmount[parent] = _userShareTDAmount[parent].add(rewardAmount);\r\n\r\n                        updateUserStartTime(parent);\r\n                        updateUserReleaseSpeed(parent, rewardAmount);\r\n                    }\r\n                    if(overDrate >= 25){break ;}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateUserClass() public {\r\n        uint256 xqyj = getUserXqyj(msg.sender);\r\n              if(xqyj > 2000000 * oneUsdtAmount){\r\n            _userClass[msg.sender] = 5;\r\n        }else if(xqyj > 500000 * oneUsdtAmount){\r\n            _userClass[msg.sender] = 4;\r\n        }else if(xqyj > 100000 * oneUsdtAmount){\r\n            _userClass[msg.sender] = 3;\r\n        }else if(xqyj > 20000 * oneUsdtAmount){\r\n            _userClass[msg.sender] = 2;\r\n        }else if(xqyj > 5000 * oneUsdtAmount){\r\n            _userClass[msg.sender] = 1;\r\n        }\r\n    }\r\n\r\n    function getUserXqyj(address user) public view returns (uint256){\r\n        address[] memory sunlist = _sunList[user];\r\n        uint256 size = sunlist.length;\r\n        uint256 res;\r\n        uint256 MAXYJ;\r\n        if(size > 0){\r\n            for(uint i=0;i<size;i++){\r\n                uint256 sunYJ = _userShareDepositAmount[sunlist[i]];\r\n                if(sunYJ > MAXYJ){MAXYJ = sunYJ;}\r\n                res = res + sunYJ;\r\n            }\r\n        }\r\n        return res.sub(MAXYJ);\r\n    }\r\n\r\n    function getUserMaxClass(address user) public view returns (uint256){\r\n        uint256 xqyj = getUserXqyj(user);\r\n              if(xqyj > 2000000 * oneUsdtAmount){\r\n            return 5;\r\n        }else if(xqyj > 500000 * oneUsdtAmount){\r\n            return 4;\r\n        }else if(xqyj > 100000 * oneUsdtAmount){\r\n            return 3;\r\n        }else if(xqyj > 20000 * oneUsdtAmount){\r\n            return 2;\r\n        }else if(xqyj > 5000 * oneUsdtAmount){\r\n            return  1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getUserTDdata(address user) public view returns (uint256,uint256,uint256,uint256){\r\n        return (_userShareDepositAmount[user], getUserXqyj(user), _userClass[user], getUserMaxClass(user));\r\n    }\r\n\r\n    function getUserYJ_ZT(address user) public view returns (address[] memory, uint256[] memory, uint256[] memory){\r\n        address[] memory sunlist = _sunList[user];\r\n        uint256 size = sunlist.length;\r\n        uint256[] memory sunDeposit = new uint256[](size);\r\n        uint256[] memory sunYJ = new uint256[](size);\r\n        if(size > 0){\r\n            for(uint i=0;i<size;i++){\r\n                sunDeposit[i] = _userDepositAmount[sunlist[i]];\r\n                sunYJ[i] = _userShareDepositAmount[sunlist[i]];\r\n            }\r\n        }\r\n        return (sunlist, sunDeposit, sunYJ);\r\n    }\r\n    //\u4e0b10\u5c42\u4e1a\u7ee9\r\n    function getUserShareAmount_10CYJ(address user) public view returns (uint256[] memory){\r\n        uint256[] memory sunCengji = new uint256[](10);\r\n        for(uint i=0;i<10;i++){\r\n            sunCengji[i] = _userShareDeposit10Amount[user][i];\r\n        }\r\n        return (sunCengji);\r\n    }\r\n    \r\n\r\n    //\u5168\u7403\u5206\u7ea2\r\n    uint256 public qqfhTotalAmount;\r\n    mapping(address => uint256) private qqfhUserAmount;\r\n    function adminSendQQFH(address user, uint256 amount) public onlyOwner{\r\n        qqfhUserAmount[user] = qqfhUserAmount[user].add(amount);\r\n    }\r\n\r\n\r\n    mapping(address => uint256) private _userWithdrawAmount;\r\n    function getCanWithdrawAmount(address user) public view returns(uint256){\r\n        uint256 releaseAll = getReleaseAmount(user);\r\n        return releaseAll;\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 releaseAll = getReleaseAmount(msg.sender);\r\n        uint256 canWithdraw = releaseAll.sub(_userWithdrawAmount[msg.sender]);\r\n        require(canWithdraw > 0, \"canWithdraw\");\r\n        _userWithdrawAmount[msg.sender] = _userWithdrawAmount[msg.sender].add(canWithdraw);\r\n        withdrawToken(msg.sender, canWithdraw);\r\n    }\r\n\r\n    function withdrawToken(address user, uint256 usdtAmount) private {\r\n        uint256 sendAmount = usdtAmount.mul(10**18).div(getPrice());\r\n        NERA.transfer(user, sendAmount);\r\n        reward2shareUsdt(user, usdtAmount.div(100).mul(6));\r\n        reward2parentUsdt_TD(user, usdtAmount);\r\n    }\r\n\r\n    function getUserData(address account) public view returns (address, uint256[] memory) {\r\n        uint256[] memory list = new uint256[](20);\r\n        list[0] = USDT.allowance(account, address(this));\r\n        list[1] = USDT.balanceOf(account);\r\n        list[2] = NERA.balanceOf(account);\r\n\r\n        list[3] = getUserTotalAmount(account);//\u603b\u5f85\u91ca\u653e\r\n        list[4] = getReleaseAmount(account);//\u603b\u91ca\u653e\r\n        list[5] = _userWithdrawAmount[account];\r\n\r\n        list[6] = _userReleaseAmount[account];\r\n        list[7] = _userShareAmount[account];\r\n        list[8] = _userShareFXAmount[account];\r\n        list[9] = _userShareTDAmount[account];\r\n        list[10] = qqfhUserAmount[account];\r\n        \r\n        \r\n        list[11] = qqfhTotalAmount;\r\n        list[12] = getPrice();\r\n        list[12] = getShareUserNum(account);//\u6709\u6548\u76f4\u63a8\r\n        list[13] = _userReleaseSpeed[account] * 86400;//\u91ca\u653e\u901f\u5ea6\r\n        \r\n        return (_shareShip[account], list);\r\n    }\r\n\r\n    //\u7ed1\u5b9a\u9875\u9762\r\n    function getUserDataShare(address account) public view returns (address, uint256[] memory) {\r\n        uint256[] memory list = new uint256[](20);\r\n        list[0] = _userShareDeposit10Amount[account][0];\r\n        list[1] = _userShareDepositAmount[account];\r\n        list[2] = _userDepositAmount[account];\r\n        list[3] = getShareUserNum(account);//\u6709\u6548\u76f4\u63a8\r\n        return (_shareShip[account], list);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NERA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NERA_PAIR\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"_getReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_shareTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminSendQQFH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCanWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMinBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"getParentIsJion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShareDepositTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShareUserNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserDataShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMaxClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareAmount_10CYJ\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShareData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTDdata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserXqyj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserYJ_ZT\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qqfhTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"shareShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUsdt_pairbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateUserClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Usdt2NearDapp", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://151220b2be3c7d2cb865b5868ba8940e5809d82777797a5fdb1d0927d5643ac5"}