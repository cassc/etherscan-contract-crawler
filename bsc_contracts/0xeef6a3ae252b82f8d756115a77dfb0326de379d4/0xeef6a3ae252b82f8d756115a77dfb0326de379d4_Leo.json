{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns(uint256);\r\n    function decimals() external view returns(uint256);\r\n    function symbol() external view returns(string memory);\r\n    function name() external view returns(string memory);\r\n    function getOwner() external view returns(address);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function allowance(address _owner, address spender) external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            if(a>= b)\r\n                return b;\r\n            return a;    \r\n    }\r\n    \r\n}\r\n\r\n \r\ncontract Ownable {\r\n    address _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Leo is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _timestamp;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address[3] public admin_distribution;\r\n    uint256[7] public levelPercentages;\r\n    uint256[7] public levelCondition;\r\n    uint256 public leo_rate = 700000000000000;\r\n    uint256 public perDay= 1 days;\r\n    uint256 public payoutPercent = 70;\r\n    uint256 public adminPercentBuy = 5;\r\n    uint256 private _totalSupply;\r\n    uint256 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    address public token;\r\n\r\n    uint256 public totalCollection ;\r\n    uint256 public totalMint ;\r\n    uint256 public customerId;\r\n    uint256 public buyId;\r\n    uint256 public sellId;\r\n\r\n    uint256 public admin_income;\r\n    struct User {\r\n        address customer_address;\r\n        address referral_address;\r\n        uint256 totalDeposit;\r\n        uint256 totalWithdraw;\r\n        uint256 level_income;\r\n        uint256 last_ts;\r\n        uint256[7] levelincomes;\r\n        uint256 refferral;\r\n    }\r\n\r\n\r\n    struct Buyhistory {\r\n        address cust_address;\r\n        uint256 USDT_amt;\r\n        uint256 token_to_user;\r\n        uint256 distribution_amt;\r\n        uint256 distrbution_to_per_level;\r\n        uint256 admin_amt;\r\n    }\r\n\r\n    struct Sellhistory {\r\n        address cust_address;\r\n        uint256 token;\r\n        uint256 USDT_amt;\r\n        uint256 admin_USDT_amt;\r\n        uint256 final_USDT_amt;\r\n    }\r\n\r\n    mapping(uint256 => Buyhistory) public buyRecord;\r\n    mapping(uint256 => Sellhistory) public sellRecord;\r\n    mapping(uint256 => User) public userRegister;\r\n    mapping(address => uint256) public addressToUserId;\r\n    mapping(address => bool) public isRegistered;\r\n    event Missing(address indexed from, uint256 lasttime,uint256 currenttime,uint256 difference);\r\n\r\n    constructor(address token_address) {\r\n        _name = \"LEO Token\";\r\n        _symbol = \"LEO\";\r\n        _decimals = 18;\r\n        _totalSupply = 0 * 10 ** _decimals;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        totalCollection = 0;\r\n        totalMint = 0;\r\n        token = token_address;\r\n        isRegistered[address(this)] = true;\r\n        _timestamp[address(this)] = block.timestamp;\r\n        admin_distribution[0] = 0xFB6A28b2c5521001D4F0F2Efa3ce9c5325ce4184;\r\n        admin_distribution[1] = 0x605d50648f81470e240Ac04b7D2aa95Ba803E395;\r\n        admin_distribution[2] = 0xB60c4FA27014ac2C8431553d37E96ddC3C2852bf;\r\n\r\n        levelPercentages[0] = 100;\r\n        levelPercentages[1] = 20;\r\n        levelPercentages[2] = 10;\r\n        levelPercentages[3] = 5;\r\n        levelPercentages[4] = 5;\r\n        levelPercentages[5] = 5;\r\n        levelPercentages[6] = 5;\r\n        \r\n        levelCondition[0] = 1;\r\n        levelCondition[1] = 2;\r\n        levelCondition[2] = 3;\r\n        levelCondition[3] = 4;\r\n        levelCondition[4] = 5;\r\n        levelCondition[5] = 6;\r\n        levelCondition[6] = 7;\r\n    }\r\n\r\n\r\n    function getOwner() external view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external view returns(uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns(uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns(bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns(bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(_balances[sender]>= amount, \"Invalid Amount\");\r\n        if( block.timestamp.sub(_timestamp[sender]) > perDay.mul(30))\r\n        {\r\n            uint256 sendertax=_balances[sender].min(\r\n                (( ((block.timestamp.sub(_timestamp[sender])).div(perDay)).mul(_balances[sender]) ).mul(2)).div(1000)\r\n            );\r\n            _balances[sender] =  _balances[sender] - sendertax;\r\n            _totalSupply = _totalSupply.sub(sendertax);\r\n            if(_balances[sender] <= amount)\r\n                amount = amount.sub(sendertax);\r\n            emit Transfer(sender, address(0), sendertax);\r\n            _timestamp[sender]=block.timestamp;\r\n        }\r\n        else\r\n        {\r\n            emit Missing(sender, _timestamp[sender],block.timestamp, block.timestamp.sub(_timestamp[sender]));\r\n        }\r\n        if( block.timestamp.sub(_timestamp[recipient]) > perDay.mul(30))\r\n        {\r\n            uint256 receivertax=_balances[recipient].min(\r\n                (( ((block.timestamp.sub(_timestamp[recipient])).div(perDay)).mul(_balances[recipient]) ).mul(2)).div(1000)\r\n            );\r\n            _balances[recipient] =  _balances[recipient] - receivertax;\r\n            _totalSupply = _totalSupply.sub(receivertax);\r\n            emit Transfer(recipient, address(0), receivertax);\r\n            _timestamp[recipient]=block.timestamp;\r\n        }\r\n        else\r\n        {\r\n            emit Missing(recipient, _timestamp[recipient],block.timestamp, block.timestamp.sub(_timestamp[recipient]));\r\n        }\r\n        if(_timestamp[recipient] == 0 )\r\n        {\r\n            _timestamp[recipient]=block.timestamp;\r\n        }\r\n        if(amount >0 )\r\n        {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount.sub((amount.mul(5)).div(100)));\r\n            emit Transfer(sender, recipient, amount.sub((amount.mul(5)).div(100)));\r\n            emit Transfer(sender, address(0), (amount.mul(5)).div(100));\r\n            _totalSupply = _totalSupply.sub((amount.mul(5)).div(100));\r\n        }\r\n        IBEP20 usdt = IBEP20(token);\r\n        leo_rate =(usdt.balanceOf(address(this)).mul(1e18)).div(_totalSupply);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getUserInfo(address useraddress) public view returns (User memory)\r\n    {\r\n        uint256 userId = addressToUserId[useraddress];\r\n        return  userRegister[userId];\r\n    }\r\n    function register(address refer_address) public returns (uint256 custid) {\r\n        require(refer_address != msg.sender, \"Cannot refer yourself\");\r\n        require(!isRegistered[msg.sender], \"User is already registered\");\r\n        require(isRegistered[refer_address], \"Invaild referral address\");\r\n        custid = ++customerId;\r\n        userRegister[custid].customer_address = msg.sender;\r\n        userRegister[custid].referral_address = refer_address;\r\n        userRegister[custid].totalDeposit = 0;\r\n        userRegister[custid].totalWithdraw = 0;\r\n        userRegister[custid].level_income = 0;\r\n        userRegister[custid].last_ts = 0;\r\n        userRegister[custid].levelincomes=[0,0,0,0,0,0];\r\n        addressToUserId[msg.sender] = custid;\r\n        isRegistered[msg.sender] = true;\r\n        uint256 userId = addressToUserId[refer_address];\r\n        userRegister[userId].refferral =userRegister[userId].refferral+1;\r\n    }\r\n\r\n    function getTotalLevelIncome(address sponsorAddress) public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 1; i <= customerId; i++) {\r\n            if (userRegister[i].referral_address == sponsorAddress) {\r\n                count += userRegister[i].totalDeposit;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function BuyLeo (uint256 usdtAmount) public returns (uint256 id) {\r\n        require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n        require(usdtAmount >= 1e18, \"Minimum USDT buy limit is 1 USDT\");\r\n        IBEP20 usdt = IBEP20(token);\r\n        require(usdt.balanceOf(msg.sender) >= usdtAmount, \"Not enough USDT in the contract to proceed with the purchase\");\r\n        require(usdt.allowance(msg.sender, address(this)) >= usdtAmount, \"USDT allowance not provided\");\r\n        if( block.timestamp.sub(_timestamp[msg.sender]) > perDay.mul(30))\r\n        {\r\n            uint256 sendertax=_balances[msg.sender].min(\r\n                (( ((block.timestamp.sub(_timestamp[msg.sender])).div(perDay)).mul(_balances[msg.sender]) ).mul(2)).div(1000)\r\n            );\r\n            _balances[msg.sender] =  _balances[msg.sender] - sendertax;\r\n            _totalSupply = _totalSupply.sub(sendertax);\r\n            emit Transfer(msg.sender, address(0), sendertax);\r\n        }\r\n        else\r\n        {\r\n            emit Missing(msg.sender, _timestamp[msg.sender],block.timestamp, block.timestamp.sub(_timestamp[msg.sender]));\r\n        }\r\n        totalCollection = totalCollection + usdtAmount;\r\n        usdt.transferFrom(msg.sender, address(this), usdtAmount);\r\n        uint256 tokenAmount = usdtAmount.div(leo_rate);\r\n        tokenAmount = tokenAmount.mul(1e18);\r\n        uint256 userAmt = tokenAmount.mul(payoutPercent).div(100);\r\n        uint256 adminAmt = tokenAmount.mul(adminPercentBuy).div(100);\r\n        _balances[msg.sender] = _balances[msg.sender].add(userAmt);\r\n        emit Transfer(address(0), msg.sender, userAmt);\r\n        _balances[admin_distribution[0]] = _balances[admin_distribution[0]].add(adminAmt.mul(2).div(5));\r\n        emit Transfer(address(0), admin_distribution[0], adminAmt.mul(2).div(5));\r\n        _balances[admin_distribution[1]] = _balances[admin_distribution[1]].add(adminAmt.mul(3).div(10));\r\n        emit Transfer(address(0), admin_distribution[1], adminAmt.mul(3).div(10));\r\n        _balances[admin_distribution[2]] = _balances[admin_distribution[2]].add(adminAmt.mul(3).div(10));\r\n        emit Transfer(address(0), admin_distribution[2], adminAmt.mul(3).div(10));\r\n        admin_income = admin_income.add(adminAmt);\r\n        uint256 userId = addressToUserId[msg.sender];\r\n        require(userRegister[userId].last_ts + perDay <= block.timestamp, \"Buy operation can only be performed once every 24 hours\");\r\n        address currentReferrer = userRegister[userId].referral_address;\r\n        uint256 total_dis = 0;\r\n        for (uint256 i = 0; i < levelPercentages.length; i++) {\r\n            uint256 nextId = addressToUserId[currentReferrer];\r\n            if (currentReferrer == address(0)) {}\r\n            else {\r\n               if(\r\n               (userRegister[nextId].refferral >= levelCondition[i]) &&\r\n               (userRegister[nextId].totalDeposit > 0)\r\n               )\r\n               {\r\n                    uint256 refer_per = tokenAmount.mul(levelPercentages[i]).div(1000);\r\n                    _balances[currentReferrer] = _balances[currentReferrer].add(refer_per);\r\n                    emit Transfer(address(0), currentReferrer, refer_per);\r\n                    total_dis += refer_per;\r\n                    userRegister[nextId].level_income = userRegister[nextId].level_income.add(refer_per);\r\n                    userRegister[nextId].levelincomes[i]=userRegister[nextId].levelincomes[i]+refer_per;\r\n               }\r\n            }\r\n            currentReferrer = userRegister[nextId].referral_address;\r\n        }\r\n        userRegister[userId].totalDeposit = userRegister[userId].totalDeposit.add(usdtAmount);\r\n        totalMint = totalMint + userAmt + total_dis + adminAmt;\r\n        _totalSupply = _totalSupply + userAmt + total_dis + adminAmt;\r\n        leo_rate =(usdt.balanceOf(address(this)).mul(1e18)).div(_totalSupply);\r\n        id = ++buyId;\r\n        buyRecord[id].cust_address = msg.sender;\r\n        buyRecord[id].USDT_amt = usdtAmount;\r\n        buyRecord[id].token_to_user = userAmt;\r\n        buyRecord[id].distribution_amt = total_dis;\r\n        buyRecord[id].distrbution_to_per_level = 0;\r\n        buyRecord[id].admin_amt = adminAmt;\r\n        _timestamp[msg.sender]=block.timestamp;\r\n        userRegister[userId].last_ts = block.timestamp;\r\n        return id;\r\n    }\r\n\r\n\r\n\r\n    function sellLeo(uint256 tokenAmount) public returns (uint256 id) {\r\n        require(isRegistered[msg.sender], \"User is not registered\");\r\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n        uint256 userId = addressToUserId[msg.sender];\r\n        // Ensure the last sell operation was more than 24 hours ago\r\n        if(_balances[msg.sender]==tokenAmount)\r\n           tokenAmount=tokenAmount-1;\r\n        if( block.timestamp.sub(_timestamp[msg.sender]) > perDay.mul(30))\r\n        {\r\n            uint256 sendertax=_balances[msg.sender].min(\r\n                (( ((block.timestamp.sub(_timestamp[msg.sender])).div(perDay)).mul(_balances[msg.sender]) ).mul(2)).div(1000)\r\n            );\r\n            _balances[msg.sender] =  _balances[msg.sender] - sendertax;\r\n            _totalSupply = _totalSupply.sub(sendertax);\r\n            if(_balances[msg.sender] <= tokenAmount)\r\n                tokenAmount = tokenAmount.sub(sendertax);\r\n            emit Transfer(msg.sender, address(0), sendertax);\r\n        }\r\n        else\r\n        {\r\n            emit Missing(msg.sender, _timestamp[msg.sender],block.timestamp, block.timestamp.sub(_timestamp[msg.sender]));\r\n        }\r\n        if(tokenAmount >0)\r\n        {\r\n            uint256 usdtAmount = tokenAmount.mul(leo_rate).div(1 ether);\r\n            uint256 adminAmtSellEach = usdtAmount.mul(5).div(100);\r\n            uint256 contractremainingAmt = usdtAmount.mul(10).div(100);\r\n            uint256 userUsdtAmt = usdtAmount.sub(adminAmtSellEach).sub(contractremainingAmt);\r\n            IBEP20 usdt = IBEP20(token);\r\n            require(usdt.balanceOf(address(this)) >= usdtAmount, \"Not enough USDT in the contract to proceed with the withdrawal\");\r\n            require(tokenAmount.mul(leo_rate).div(1e18) <= (userRegister[userId].totalDeposit.mul(2)).sub(userRegister[userId].totalWithdraw), \"Cannot withdraw more than 2x total deposit at a time\");\r\n            require(usdtAmount >= 1e18, \"Minimum USDT withdraw limit is 1\");\r\n            _balances[msg.sender] = _balances[msg.sender].sub(tokenAmount);\r\n            _totalSupply = _totalSupply.sub(tokenAmount);\r\n            emit Transfer(msg.sender, address(0), tokenAmount); // Emit a transfer event to the zero address to signify burning\r\n            usdt.transfer( msg.sender, userUsdtAmt);\r\n            // admin transfer for 1%\r\n            usdt.transfer( admin_distribution[0], adminAmtSellEach.mul(2).div(5));\r\n            usdt.transfer( admin_distribution[1], adminAmtSellEach.mul(3).div(10));\r\n            usdt.transfer( admin_distribution[2], adminAmtSellEach.mul(3).div(10));\r\n            leo_rate =(usdt.balanceOf(address(this)).mul(1e18)).div(_totalSupply);\r\n            userRegister[userId].totalWithdraw = userRegister[userId].totalWithdraw+userUsdtAmt;        \r\n            // Record the sell history\r\n            id = ++sellId;\r\n            sellRecord[id] = Sellhistory({\r\n                cust_address: msg.sender,\r\n                token: tokenAmount,\r\n                USDT_amt: tokenAmount,\r\n                admin_USDT_amt: adminAmtSellEach,\r\n                final_USDT_amt: tokenAmount\r\n            });\r\n            _timestamp[msg.sender]=block.timestamp;\r\n            return id;\r\n        }\r\n        else \r\n        {\r\n            return sellId;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lasttime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currenttime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"}],\"name\":\"Missing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"BuyLeo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPercentBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admin_distribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cust_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"USDT_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_to_user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distrbution_to_per_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsorAddress\",\"type\":\"address\"}],\"name\":\"getTotalLevelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"customer_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"levelincomes\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256\",\"name\":\"refferral\",\"type\":\"uint256\"}],\"internalType\":\"struct Leo.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leo_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"custid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellLeo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cust_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDT_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_USDT_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"final_USDT_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"customer_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refferral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Leo", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f6857e7ca05fa229ab8622d3d634397c1eb79a37b46dd9d9e16bf2ac2053f4e"}