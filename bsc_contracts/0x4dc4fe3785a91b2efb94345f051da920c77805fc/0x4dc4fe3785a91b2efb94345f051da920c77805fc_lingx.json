{"SourceCode": "/**\r\n *Submitted for verification at Arbiscan.io on 2023-11-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-21\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n   \r\n}\r\n\r\ncontract lingx is Ownable {\r\n    using SafeMath for uint256;\r\n    address public uusdt;\r\n    address public utoken;\r\n    address public ueth;\r\n\r\n    IERC20 public USDT ;\r\n    IERC20 public Token;\r\n    IERC20 public Eth;\r\n    IERC20 public Btc;\r\n\r\n    mapping(address => uint256) public guanli;\r\n    address private _destroyAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n    uint256 public huiliu = 0;//\r\n    uint256 public listCount = 0;\r\n    uint256 public xianzhi = 10;\r\n    mapping (uint256 => address) public listToOwner;\r\n    mapping (uint256 => uint256) public listnum;\r\n    mapping (uint256 => uint256) public listtype;\r\n    address public uniswapV2Pair;\r\n    address public uniswapV2Pairold;\r\n    address public pair_btc;\r\n    address public pair_eth;\r\n    address public pair_arb;\r\n    address public fund1Address = address(0x1CA27A7C18bEde4bF336ba08fdCe9306c38b7030);\r\n    address public haveAddress = address(0x310cE302cD69bA11E87070a057A9032881c269E3);\r\n    address public shouAddress = address(0x9139c1aAE5E9D229C25dA805C86cA40200aE8681);\r\n    uint256 public _mintTotal;\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    // arbiscan   0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506    \r\n    constructor(address tokenOwner) {\r\n        setMintTotal(_mintTotal);\r\n        guanli[_owner]=1;\r\n        guanli[haveAddress]=1;\r\n        guanli[msg.sender]=1;\r\n        _owner = tokenOwner;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function changeRouter(address _router,address _routerold,address _pair_btc,address _pair_eth)public onlyOwner  {\r\n        uniswapV2Pair = _router;\r\n        uniswapV2Pairold = _routerold;\r\n        pair_btc = _pair_btc;\r\n        pair_eth = _pair_eth;\r\n        //pair_arb = _pair_arb;\r\n    }\r\n\r\n    function setMintTotal(uint256 mintTotal) private {\r\n        _mintTotal = mintTotal;\r\n    }\r\n\r\n    function kill() public onlyOwner{\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    function swapusdtbuy\r\n        (uint256 tokenAmount) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        require(USDT.balanceOf(msg.sender)>=tokenAmount,\"no usdt\");\r\n\t\taddress[] memory path = new address[](3);\r\n        path[0] = uusdt;\r\n        path[1] = ueth;\r\n        path[2] = utoken;\r\n        USDT.transferFrom(msg.sender,address(this), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            shouAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function userbaodan(uint256 _num) public {\r\n        require(USDT.balanceOf(msg.sender)>=_num*10**18,\"no usdt\");\r\n        require(_num>=xianzhi,\"no usdt\");\r\n        address[] memory path = new address[](3);\r\n        path[0] = uusdt;\r\n        path[1] = ueth;\r\n        path[2] = utoken;\r\n        uint256 shuliang = _num*10**18;\r\n        \r\n        USDT.transferFrom(msg.sender,shouAddress, shuliang.div(100).mul(70));\r\n        USDT.transferFrom(msg.sender,address(this), shuliang.div(100).mul(30));\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            shuliang.div(100).mul(30),\r\n            0,\r\n            path,\r\n            _destroyAddress,\r\n            block.timestamp\r\n        );\r\n        Token.transfer(msg.sender, 100000000000000000);\r\n        listCount = listCount+1;\r\n        listToOwner[listCount] = msg.sender;\r\n        listnum[listCount] = _num;\r\n        listtype[listCount] = 1;\r\n    }\r\n    /*\r\n    function userbaodan2(uint256 _num) public {\r\n        //require(USDT.balanceOf(msg.sender)>=_num*10**18,\"no usdt\");\r\n        //require(_num>=xianzhi,\"no usdt\");\r\n        address[] memory path = new address[](3);\r\n        path[0] = uusdt;\r\n        path[1] = ueth;\r\n        path[2] = utoken;\r\n        uint256 shuliang = _num*10**18;\r\n        \r\n        USDT.transferFrom(msg.sender,shouAddress, shuliang.div(100).mul(70));\r\n        USDT.transferFrom(msg.sender,address(this), shuliang.div(100).mul(30));\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            shuliang.div(100).mul(30),\r\n            0,\r\n            path,\r\n            _destroyAddress,\r\n            block.timestamp\r\n        );\r\n        //Token.transfer(msg.sender, 100000000000000000);\r\n        //listCount = listCount+1;\r\n        //listToOwner[listCount] = msg.sender;\r\n        //listnum[listCount] = _num;\r\n        //listtype[listCount] = 1;\r\n    }\r\n    function userbaodan3(uint256 _num) public {\r\n        require(USDT.balanceOf(msg.sender)>=_num*10**18,\"no usdt\");\r\n        require(_num>=xianzhi,\"no usdt\");\r\n        address[] memory path = new address[](3);\r\n        path[0] = uusdt;\r\n        path[1] = ueth;\r\n        path[2] = utoken;\r\n        uint256 shuliang = _num*10**18;\r\n        \r\n\r\n        Token.transfer(msg.sender, 100000000000000000);\r\n        listCount = listCount+1;\r\n        listToOwner[listCount] = msg.sender;\r\n        listnum[listCount] = _num;\r\n        listtype[listCount] = 1;\r\n    }\r\n    function userbaodan4(uint256 _num) public {\r\n\r\n        uint256 shuliang = _num*10**18;\r\n        \r\n        USDT.transferFrom(msg.sender,shouAddress, shuliang.div(100).mul(70));\r\n        USDT.transferFrom(msg.sender,address(this), shuliang.div(100).mul(30));\r\n\r\n       \r\n    }*/\r\n    \r\n    function userbaodantoken(uint256 _num) public {\r\n        uint256 shuliang = _num*10**18;\r\n        require(USDT.balanceOf(msg.sender)>=shuliang.div(100).mul(70),\"no usdt\");\r\n        require(_num>=xianzhi,\"no usdt\");\r\n        uint256 _priceu_a=(USDT.balanceOf(uniswapV2Pairold)*1000000/Eth.balanceOf(uniswapV2Pairold));//usdt/arb\r\n        uint256 _pricea_t=(Eth.balanceOf(uniswapV2Pair)*1000000/Token.balanceOf(uniswapV2Pair));//usdt/token\r\n        uint256 _price = (_priceu_a*_pricea_t)/1000000;\r\n        require(Token.balanceOf(msg.sender)>=(shuliang.div(100).mul(30)*1000000/_price),\"no token \");\r\n        //require(Token.balanceOf(msg.sender)>=100000000000000000,\"no token 0.1\");\r\n        USDT.transferFrom(msg.sender,shouAddress, shuliang.div(100).mul(70));\r\n        Token.transferFrom(msg.sender,_destroyAddress,((shuliang.div(100).mul(30)*1000000/_price)));\r\n        Token.transfer(msg.sender, 100000000000000000);\r\n        listCount = listCount+1;\r\n        listToOwner[listCount] = msg.sender;   \r\n        listnum[listCount] =_num;\r\n        listtype[listCount] = 2;\r\n    }\r\n    \r\n    function get_token_num(  uint256  _num) public view returns(uint256 _getnum) {\r\n        uint256 shuliang = _num*10**18;\r\n        uint256 _priceu_a=(USDT.balanceOf(uniswapV2Pairold)*1000000/Eth.balanceOf(uniswapV2Pairold));//usdt/arb\r\n        uint256 _pricea_t=(Eth.balanceOf(uniswapV2Pair)*1000000/Token.balanceOf(uniswapV2Pair));//usdt/token\r\n        uint256 _price = (_priceu_a*_pricea_t)/1000000;\r\n        _getnum = shuliang.div(100).mul(30)*1000000/_price;\r\n        return _getnum;\r\n    }\r\n\r\n\r\n    function get_list_one(  uint256  _id) public view returns(address _user,uint256 _num,uint256 _type) {\r\n        _user = listToOwner[_id];\r\n        _num = listnum[_id];\r\n        _type = listtype[_id];\r\n        return (_user,_num,_type);\r\n    }\r\n\r\n\r\n    function a_set_token(IERC20 _USDT,IERC20 _Token,IERC20 _Eth  ,address _uusdt,address _utoken ,address _ueth,IERC20 _Btc) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");////uarb Arb\r\n        USDT = _USDT;\r\n        Token = _Token;\r\n        Eth = _Eth;\r\n        uusdt = _uusdt;\r\n        utoken = _utoken;\r\n        ueth = _ueth;\r\n        Btc = _Btc;\r\n    }\r\n\r\n\r\n\r\n\r\n    function admin_tixian(address payable _to)  public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        _to.transfer(address(this).balance);\r\n    }\r\n      \r\n    function sir_set_sir(address _user,uint256 _ttype) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        guanli[_user]=_ttype;\r\n    }\r\n    \r\n    function sir_set_xianzhi(uint256 _xianzhi) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        xianzhi=_xianzhi;\r\n    }\r\n    //ueth Eth\r\n    function get_price() external view returns(uint256 _price) {\r\n        uint256 _priceu_a=(USDT.balanceOf(uniswapV2Pairold)*1000000/Eth.balanceOf(uniswapV2Pairold));//usdt/arb\r\n        uint256 _pricea_t=(Eth.balanceOf(uniswapV2Pair)*1000000/Token.balanceOf(uniswapV2Pair));//usdt/token\r\n        _price = (_priceu_a*_pricea_t)/1000000;\r\n    }\r\n//get_price get_price_btc get_price_eth get_price_arb\r\n    function get_price_btc() external view returns(uint256 _price) {\r\n        _price=(USDT.balanceOf(pair_btc)*1000000/Btc.balanceOf(pair_btc));//usdt/btc\r\n    }\r\n    function get_price_eth() external view returns(uint256 _price) {\r\n        _price = (USDT.balanceOf(pair_eth)*1000000/Eth.balanceOf(pair_eth));//usdt/eth\r\n    }\r\n\r\n\r\n    function  token_take(address toaddress,uint256 amount ) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        Token.transfer(toaddress, amount);\r\n    }\r\n    function  usdt_take(address toaddress,uint256 amount ) public {\r\n        require(guanli[msg.sender]==1,\"no sir\");\r\n        USDT.transfer(toaddress, amount);\r\n    }\r\n\r\n    function a_approve() public {\r\n        require(guanli[msg.sender]==1,\"no sir\");//uarb Arb\r\n        USDT.approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 1000000000000000000000000000);\r\n        Token.approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 100000000000000000000000000);\r\n        Eth.approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 100000000000000000000000000);\r\n    }//0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    //0x9a489505a00cE272eAa5e07Dba6491314CaE3796\r\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Btc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Eth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a_approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_Eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uusdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ueth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_Btc\",\"type\":\"address\"}],\"name\":\"a_set_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"admin_tixian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair_btc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair_eth\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"get_list_one\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_price_btc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_price_eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"get_token_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_getnum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guanli\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"huiliu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listtype\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_arb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_btc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ttype\",\"type\":\"uint256\"}],\"name\":\"sir_set_sir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xianzhi\",\"type\":\"uint256\"}],\"name\":\"sir_set_xianzhi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapusdtbuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"token_take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ueth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pairold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdt_take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"userbaodan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"userbaodantoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uusdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xianzhi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "lingx", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000220b00419e0e823b58ac432e9df6475073022d4f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1205db4581cf140c3d87230e589411d0bf72cf6ca0584f53d1fa88f0668294c1"}