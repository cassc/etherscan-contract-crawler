{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @title Luzion Protocol\r\n * @notice The future of Dual Reward with Auto-Staking, Auto-Compounding & BUSD Reflection all together!\r\n *\r\n * @custom:website https://luzion.io\r\n * @custom:whitepaper https://docs.luzion.io\r\n * @custom:telegram https://t.me/revoluziontoken\r\n */\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n/** LIBRARY / DEPENDENCY **/\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @title Safe Math\r\n * \r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Context\r\n * \r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\r\n\r\n    /** FUNCTION **/\r\n\r\n    /**\r\n     * @dev Act as the shorthand for msg.sender reference.\r\n     */\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Act as the shorthand for msg.data reference.\r\n     */\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev Act as the shorthand for msg.value reference.\r\n     */\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * \r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n        authorizations[_msgSender()] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other authorized accounts.\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(_msgSender()), \"Ownable: caller is not an authorized account\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if address is owner\r\n     */\r\n    function isOwner(address adr) public view returns (bool) {\r\n        return adr == owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n    \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n}\r\n\r\n\r\n/** ERC STANDARD **/\r\n\r\n/**\r\n * @title IERC20Extended\r\n * \r\n * @dev The interface for ERC20 with metadata extension included.\r\n */\r\ninterface IERC20Extended {\r\n\r\n\r\n    /** FUNCTION **/\r\n    \r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n    \r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n    \r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    /** EVENT **/\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * \r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20Extended {\r\n\r\n\r\n    /** DATA **/\r\n    uint8 private _decimals;\r\n    \r\n    uint256 private _totalSupply;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n    /** CONSTRUTOR **/\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(uint8 decimals_, string memory name_, string memory symbol_) {\r\n        _decimals = decimals_;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    /** FUNCTION **/\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n}\r\n\r\n\r\n/** ROUTER **/\r\n\r\ninterface IUniswapV2Pair {\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n    \r\n    function symbol() external pure returns (string memory);\r\n    \r\n    function decimals() external pure returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    \r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    \r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    \r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    \r\n    function factory() external view returns (address);\r\n    \r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    \r\n    function price0CumulativeLast() external view returns (uint256);\r\n    \r\n    function price1CumulativeLast() external view returns (uint256);\r\n    \r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    \r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    \r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    \r\n    function skim(address to) external;\r\n    \r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\n\r\n/** DIVIDEND DISTRIBUTOR **/\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor, Ownable {\r\n    \r\n\r\n    /* LIBRARY */\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /* DATA */\r\n    \r\n    IERC20Extended public rewardToken;\r\n    IUniswapV2Router02 public router;\r\n    \r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    \r\n    bool public initialized;\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public minPeriod;\r\n    uint256 public minDistribution;\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends; \r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor;\r\n\r\n    address public _token;\r\n    address[] public shareholders;\r\n    \r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n    mapping(address => Share) public shares;\r\n\r\n\r\n    /* MODIFIER */\r\n\r\n    modifier initializer() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(_msgSender() == _token);\r\n        _;\r\n    }\r\n\r\n\r\n    /* CONSTRUCTOR */\r\n\r\n    constructor(address rewardToken_, address router_) {\r\n        _token = _msgSender();\r\n        rewardToken = IERC20Extended(rewardToken_);\r\n        router = IUniswapV2Router02(router_);\r\n\r\n        dividendsPerShareAccuracyFactor = 10**36;\r\n        minPeriod = 1 hours;\r\n        minDistribution = 1 * (10**rewardToken.decimals());\r\n    }\r\n\r\n\r\n    /* EVENT */\r\n\r\n    event ChangeRouter(address caller, address prevRouter, address newRouter);\r\n\r\n\r\n    /* FUNCTION */\r\n\r\n    /**\r\n     * @dev Change router address.\r\n     */\r\n    function changeRouter(IUniswapV2Router02 _router) external authorized {\r\n        address prevRouter = address(router);\r\n        router = _router;\r\n        emit ChangeRouter(_msgSender(), prevRouter, address(router));\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can set initialization state for distributor.\r\n     */\r\n    function unInitialized(bool initialization) external authorized {\r\n        initialized = initialization;\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can set token address for dividend distributor.\r\n     */\r\n    function setTokenAddress(address token_) external initializer authorized {\r\n        _token = token_;\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can set distribution criteria for dividend distributor.\r\n     */\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override authorized {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can change reward token for dividend distribution.\r\n     */\r\n    function changeRewardToken(IERC20Extended _rewardToken) external authorized {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Only token contract can set the number of shares owned by the address.\r\n     */\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can deposit funds into the pool.\r\n     */\r\n    function deposit() external payable override authorized {\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(rewardToken);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens {\r\n            value: _msgValue()\r\n        } (0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = rewardToken.balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    /**\r\n     * @dev Only authorized address can process and trigger dividend distribution.\r\n     */\r\n    function process(uint256 gas) external override authorized {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if all the predetermined conditions for dividend distribution have been met.\r\n     */\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute dividend to the shareholders and update dividend information.\r\n     */\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            rewardToken.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the cumulative dividend for the given share.\r\n     */\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get unpaid dividend that needed to be distributed for the given address.\r\n     */\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    /**\r\n     * @dev Add the address to the array of shareholders.\r\n     */\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the address from the array of shareholders.\r\n     */\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    /**\r\n     * @dev Allow user to manually claim their accumulated dividend.\r\n     */\r\n    function claimDividend() external {\r\n        distributeDividend(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n\r\n/** LUZION PROTOCOL **/\r\n\r\ncontract LuzionProtocol is ERC20, Ownable {\r\n\r\n\r\n    /** LIBRARY **/\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /** DATA **/\r\n\r\n    IUniswapV2Router02 public router;\r\n    IUniswapV2Pair public pairContract;\r\n    DividendDistributor public distributor;\r\n\r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n\r\n    address public pair;\r\n    address public autoLiquidityReceiver;\r\n    address public treasuryReceiver;\r\n    address public ecosystemReceiver;\r\n    address public autoBlackhole;\r\n    \r\n    uint8 public rateDecimals;\r\n    \r\n    uint256 public rebaseRate;\r\n    uint256 public uintMax;\r\n    uint256 public gonsTotal;\r\n    uint256 public supplyTotal;\r\n    uint256 public supplyMax;\r\n    uint256 public supplyInitialFragment;\r\n    uint256 public lastRebasedTime;\r\n    uint256 public lastAddLiquidityTime;\r\n    uint256 public initRebaseStartTime;\r\n    uint256 public distributorGas;\r\n    uint256 public liquidityFee;\r\n    uint256 public treasuryFee;\r\n    uint256 public ecosystemFee;\r\n    uint256 public dividendFee;\r\n    uint256 public sellFee;\r\n    uint256 public autoBlackholeFee;\r\n    uint256 public totalFee;\r\n    uint256 public feeDenominator;\r\n    uint256 public gonsPerFragment;\r\n    uint256 public gonSwapThreshold;\r\n    uint256 public targetLiquidity;\r\n    uint256 public targetLiquidityDenominator;\r\n\r\n    bool public inSwap;\r\n    bool public swapEnabled;\r\n    bool public autoAddLiquidity;\r\n    bool public autoRebase;\r\n\r\n    mapping(address => bool) public _blacklistBotContract;\r\n    mapping(address => bool) public _isFeeExempt;\r\n    mapping(address => bool) public _isDividendExempt;\r\n    mapping(address => uint256) public _gonBalances;\r\n    mapping(address => mapping(address => uint256)) public _allowedFragments;\r\n\r\n\r\n    /** MODIFIER **/\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier validRecipient(address from, address to) {\r\n        require(to != address(ZERO), \"Cannot send to zero address!\");\r\n        require(!_blacklistBotContract[from], \"Sender address has been blacklisted because it is a bot contract address!\");\r\n        require(!_blacklistBotContract[to], \"Recipient address has been blacklisted because it is a bot contract address!\");\r\n        _;\r\n    }\r\n\r\n\r\n    /** CONSTRUCTOR **/\r\n\r\n    constructor(\r\n        uint256 _supplyMax,\r\n        uint256 _supplyInitial,\r\n        address _router,\r\n        DividendDistributor _distributor,\r\n        address[4] memory _feeReceiverSettings\r\n    ) ERC20(5, \"Luzion Protocol\", \"LZN\") {\r\n        router = IUniswapV2Router02(_router);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        pairContract = IUniswapV2Pair(pair);\r\n\r\n        _allowedFragments[address(this)][address(router)] = type(uint256).max;\r\n\r\n        uintMax = ~uint256(0);\r\n        rateDecimals = 7;\r\n        distributorGas = 500000;\r\n        dividendFee = 4;\r\n        liquidityFee = 2;\r\n        treasuryFee = 2;\r\n        ecosystemFee = 2;\r\n        autoBlackholeFee = 2;\r\n        sellFee = 4;\r\n        feeDenominator = 100;\r\n        targetLiquidity = 50;\r\n        targetLiquidityDenominator = 100;\r\n    \r\n        _initializeFeeReceivers(_feeReceiverSettings);\r\n        _initializeDistributor(_distributor);\r\n        \r\n        initRebaseStartTime = block.timestamp;\r\n        lastRebasedTime = block.timestamp;\r\n        \r\n        totalFee = liquidityFee.add(treasuryFee).add(ecosystemFee).add(dividendFee).add(autoBlackholeFee);\r\n        supplyInitialFragment = _supplyInitial.mul(10**5);\r\n        supplyTotal = supplyInitialFragment;\r\n        supplyMax = _supplyMax.mul(10**5);\r\n        gonsTotal = uintMax - (uintMax % supplyInitialFragment);\r\n        gonsPerFragment = gonsTotal.div(supplyTotal);\r\n        gonSwapThreshold = gonsTotal.div(10000).mul(10);\r\n\r\n        _gonBalances[_msgSender()] = gonsTotal;\r\n\r\n        autoRebase = false;\r\n        autoAddLiquidity = true;\r\n        swapEnabled = true;\r\n        \r\n        _isFeeExempt[_msgSender()] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[ecosystemReceiver] = true;\r\n        _isDividendExempt[_msgSender()] = true;\r\n        _isDividendExempt[pair] = true;\r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[DEAD] = true;\r\n\r\n        _transferOwnership(_msgSender());\r\n        emit Transfer(address(ZERO), _msgSender(), supplyTotal);\r\n\r\n    }\r\n\r\n\r\n    /** EVENT **/\r\n    event RebaseInitiated(uint256 indexed epoch, uint256 totalSupply);\r\n    event ChangeRouter(address caller, address prevRouter, address newRouter);\r\n    event ChangePairContract(address caller, address prevPairContract, address newPairContract);\r\n    event BotBlacklisted(address botAddress);\r\n\r\n\r\n    /** FUNCTION **/\r\n\r\n    // General function\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Change router address.\r\n     */\r\n    function changeRouter(IUniswapV2Router02 _router) external authorized {\r\n        address prevRouter = address(router);\r\n        router = _router;\r\n        emit ChangeRouter(_msgSender(), prevRouter, address(router));\r\n    }\r\n\r\n    /**\r\n     * @dev Change pair contract address.\r\n     */\r\n    function changePairContract(address _address) external authorized {\r\n        address prevPairContract = address(pairContract);\r\n        pairContract = IUniswapV2Pair(_address);\r\n        emit ChangeRouter(_msgSender(), prevPairContract, address(pairContract));\r\n    }\r\n\r\n    /**\r\n     * @dev Initiate manual synchronization.\r\n     */\r\n    function manualSync() external {\r\n        IUniswapV2Pair(pair).sync();\r\n    }\r\n\r\n    /**\r\n     * @dev Get the circulating supply based on fragment.\r\n     */\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (gonsTotal.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(gonsPerFragment);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the status for auto rebase.\r\n     */\r\n    function setAutoRebase(bool _flag) external authorized {\r\n        if (_flag) {\r\n            autoRebase = _flag;\r\n            lastRebasedTime = block.timestamp;\r\n        } else {\r\n            autoRebase = _flag;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set blacklist for known bot contract.\r\n     */\r\n    function setBotBlacklist(address _botAddress, bool _flag) external authorized {\r\n        require(\r\n            isContract(_botAddress),\r\n            \"Externally owned account are not allowed to be blacklisted only input smart contract address used for bot.\"\r\n        );\r\n        _blacklistBotContract[_botAddress] = _flag;\r\n        emit BotBlacklisted(_botAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Set settings for swap back.\r\n     */\r\n    function setSwapBackSettings(bool _enabled, uint256 _numerator, uint256 _denominator) external authorized {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = gonsTotal.div(_denominator).mul(_numerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow authorized account to rescue the token in the smart contract.\r\n     */\r\n    function rescueToken(address _tokenAddress, uint256 _tokens) external authorized returns (bool success) {\r\n        return ERC20(_tokenAddress).transfer(_msgSender(), _tokens);\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    /**\r\n     * @dev Rebase logic that will run internally.\r\n     */\r\n    function rebase() internal {\r\n        \r\n        if ( inSwap ) {\r\n            return;\r\n        }\r\n\r\n        uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;\r\n        uint256 deltaTime = block.timestamp - lastRebasedTime;\r\n        uint256 times = deltaTime.div(15 minutes);\r\n        uint256 epoch = times.mul(15);\r\n\r\n        if (deltaTimeFromInit < (365 days)) {\r\n            rebaseRate = 2355;\r\n        } else if (deltaTimeFromInit >= (365 days) && deltaTimeFromInit < ((15 * 365 days) / 10)) {\r\n            rebaseRate = 211;\r\n        } else if (deltaTimeFromInit >= ((15 * 365 days) / 10) && deltaTimeFromInit < (7 * 365 days)) {\r\n            rebaseRate = 14;\r\n        } else if (deltaTimeFromInit >= (7 * 365 days)) {\r\n            rebaseRate = 2;\r\n        }\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            supplyTotal = supplyTotal.mul((10**rateDecimals).add(rebaseRate)).div(10**rateDecimals);\r\n        }\r\n\r\n        gonsPerFragment = gonsTotal.div(supplyTotal);\r\n        lastRebasedTime = lastRebasedTime.add(times.mul(15 minutes));\r\n\r\n        pairContract.sync();\r\n\r\n        emit RebaseInitiated(epoch, supplyTotal);\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Logic to take fee that will run internally.\r\n     */\r\n    function takeFee(address _from, address _to, uint256 _gonAmount) internal  returns (uint256) {\r\n        \r\n        uint256 _totalFee = totalFee;\r\n        uint256 _treasuryFee = treasuryFee;\r\n\r\n        if (_to == pair) {\r\n            _totalFee = totalFee.add(sellFee);\r\n            _treasuryFee = treasuryFee.add(sellFee);\r\n        }\r\n\r\n        uint256 feeAmount = _gonAmount.mul(_totalFee).div(feeDenominator);\r\n       \r\n        _gonBalances[autoBlackhole] = _gonBalances[autoBlackhole].add(\r\n            _gonAmount.mul(autoBlackholeFee).div(feeDenominator)\r\n        );\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            _gonAmount.mul(_treasuryFee).div(feeDenominator)\r\n        );\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            _gonAmount.mul(ecosystemFee).div(feeDenominator)\r\n        );\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            _gonAmount.mul(dividendFee).div(feeDenominator)\r\n        );\r\n\r\n        _gonBalances[autoLiquidityReceiver] = _gonBalances[autoLiquidityReceiver].add(\r\n            _gonAmount.mul(liquidityFee).div(feeDenominator)\r\n        );\r\n        \r\n        emit Transfer(_from, address(this), feeAmount.div(gonsPerFragment));\r\n        \r\n        return _gonAmount.sub(feeAmount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Logic to swap back the token that will run internally.\r\n     */\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 amountToSwap = _gonBalances[address(this)].div(gonsPerFragment);\r\n\r\n        if( amountToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 amountETHToRespectiveReceiver = address(this).balance.sub(balanceBefore);\r\n        uint256 feeTotal = treasuryFee.add(ecosystemFee).add(dividendFee);\r\n\r\n        try distributor.deposit {\r\n            value: amountETHToRespectiveReceiver.mul(dividendFee).div(feeTotal)\r\n        } () {} catch {}\r\n\r\n        (bool success, ) = payable(treasuryReceiver).call{\r\n            value: amountETHToRespectiveReceiver.mul(treasuryFee).div(feeTotal),\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        (success, ) = payable(ecosystemReceiver).call{\r\n            value: amountETHToRespectiveReceiver.mul(ecosystemFee).div(feeTotal),\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        success = false;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Add liquidity logic that will run internally.\r\n     */\r\n    function addLiquidity() internal swapping {\r\n        \r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 autoLiquidityAmount = _gonBalances[address(this)].div(gonsPerFragment);\r\n        _gonBalances[autoLiquidityReceiver] = 0;\r\n        uint256 amountToLiquify = autoLiquidityAmount.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\r\n\r\n        if( amountToSwap == 0 ) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\r\n\r\n        if (amountToLiquify > 0 && amountETHLiquidity > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        lastAddLiquidityTime = block.timestamp;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Token buyback logic that will run internally.\r\n     */\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens {\r\n            value: amount\r\n        } (0, path, to, block.timestamp);\r\n    }\r\n\r\n    // Override ERC standard\r\n    \r\n    /**\r\n     * @dev Override ERC logic for approve to accommodate fragments.\r\n     */\r\n    function approve(address _spender, uint256 _value) public override returns (bool) {\r\n        _allowedFragments[_msgSender()][_spender] = _value;\r\n        emit Approval(_msgSender(), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for allowance to accommodate fragments.\r\n     */\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return _allowedFragments[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for decrease allowance to accommodate fragments.\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public override returns (bool) {\r\n        \r\n        uint256 oldValue = _allowedFragments[_msgSender()][_spender];\r\n        \r\n        if (_subtractedValue >= oldValue) {\r\n            _allowedFragments[_msgSender()][_spender] = 0;\r\n        } else {\r\n            _allowedFragments[_msgSender()][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        \r\n        emit Approval(_msgSender(), _spender, _allowedFragments[_msgSender()][_spender]);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for increase allowance to accommodate fragments.\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public override returns (bool) {\r\n        \r\n        _allowedFragments[_msgSender()][_spender] = _allowedFragments[_msgSender()][_spender].add(_addedValue);\r\n        \r\n        emit Approval(_msgSender(), _spender, _allowedFragments[_msgSender()][_spender]);\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for transfer to check addresses.\r\n     */\r\n    function transfer(address _to, uint256 _value) public override validRecipient(_msgSender(), _to) returns (bool) {\r\n\r\n        _transferFrom(_msgSender(), _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for transfer from to check addresses and accommodate fragment.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public override validRecipient(_from, _to) returns (bool) {\r\n        \r\n        if (_allowedFragments[_from][_msgSender()] != type(uint256).max) {\r\n            _allowedFragments[_from][_msgSender()] = _allowedFragments[_from][_msgSender()].sub(_value, \"Insufficient Allowance\");\r\n        }\r\n\r\n        _transferFrom(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for transfer that will be executed internally based on predetermined conditions.\r\n     */\r\n    function _basicTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        \r\n        uint256 gonAmount = _amount.mul(gonsPerFragment);\r\n        _gonBalances[_from] = _gonBalances[_from].sub(gonAmount);\r\n        _gonBalances[_to] = _gonBalances[_to].add(gonAmount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for transfer from that will be executed internally based on predetermined conditions.\r\n     */\r\n    function _transferFrom(address _from, address _to, uint256 _amount) internal returns (bool) {\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(_from, _to, _amount);\r\n        }\r\n\r\n        if (shouldRebase()) {\r\n           rebase();\r\n        }\r\n\r\n        if (shouldAddLiquidity()) {\r\n            addLiquidity();\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        uint256 gonAmount = _amount.mul(gonsPerFragment);\r\n        _gonBalances[_from] = _gonBalances[_from].sub(gonAmount);\r\n        uint256 gonAmountReceived = shouldTakeFee(_from, _to) ? takeFee(_from, _to, gonAmount) : gonAmount;\r\n        _gonBalances[_to] = _gonBalances[_to].add(gonAmountReceived);\r\n\r\n        if(!_isDividendExempt[_from]) {\r\n            try distributor.setShare(_from, balanceOf(_from)) {} catch {}\r\n        }\r\n        if(!_isDividendExempt[_to]) {\r\n            try distributor.setShare(_to, balanceOf(_to)) {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(_from, _to, gonAmountReceived.div(gonsPerFragment));\r\n\r\n        return true;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC logic for total supply.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return supplyTotal;\r\n    }\r\n   \r\n    /**\r\n     * @dev Override ERC logic for balance of an address and accommodate balance based on fragment.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _gonBalances[account].div(gonsPerFragment);\r\n    }\r\n\r\n    // Check function\r\n\r\n    /**\r\n     * @dev Check whether the predetermined conditions for taking fees have been met.\r\n     */\r\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        return (pair == from || pair == to) && !_isFeeExempt[from];\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the predetermined conditions for rebase have been met.\r\n     */\r\n    function shouldRebase() internal view returns (bool) {\r\n        return autoRebase && (supplyTotal < supplyMax) && _msgSender() != pair  && !inSwap && block.timestamp >= (lastRebasedTime + 15 minutes);\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the predetermined conditions for adding liquidity have been met.\r\n     */\r\n    function shouldAddLiquidity() internal view returns (bool) {\r\n        return autoAddLiquidity && !inSwap && _msgSender() != pair && block.timestamp >= (lastAddLiquidityTime + 12 hours);\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the predetermined condition for swap back have been met.\r\n     */\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return swapEnabled && !inSwap && _msgSender() != pair && _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if it is currently overliquified.\r\n     */\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    /**\r\n     * @dev Check to make sure that the transaction is not in swap.\r\n     */\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether fees are exempted from the given address.\r\n     */\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Check the value of swap threshold.\r\n     */\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(gonsPerFragment);\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the given address is a contract address.\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    // Fees related functions\r\n\r\n    /**\r\n     * @dev Set all the fee receiver settings during contract initialization.\r\n     * \r\n     * NOTE:\r\n     * 0 - Auto liquidity receiver\r\n     * 1 - Treasury receiver\r\n     * 2 - Ecosystem receiver\r\n     * 3 - Auto blackhole\r\n     */\r\n    function _initializeFeeReceivers(address[4] memory _feeReceiverSettings) internal {\r\n        _setFeeReceivers(_feeReceiverSettings[0], _feeReceiverSettings[1], _feeReceiverSettings[2], _feeReceiverSettings[3]);\r\n    }\r\n\r\n    /**\r\n     * @dev Set all the addresses that will receive fee.\r\n     */\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _treasuryReceiver, address _ecosystemReceiver, address _autoBlackhole) external authorized {\r\n        _setFeeReceivers(_autoLiquidityReceiver, _treasuryReceiver, _ecosystemReceiver, _autoBlackhole);\r\n    }\r\n\r\n    /**\r\n     * @dev Run internally to set all the fee receiver settings.\r\n     */\r\n    function _setFeeReceivers(address _autoLiquidityReceiver, address _treasuryReceiver, address _ecosystemReceiver, address _autoBlackhole) internal {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        treasuryReceiver = _treasuryReceiver;\r\n        ecosystemReceiver = _ecosystemReceiver;\r\n        autoBlackhole = _autoBlackhole;\r\n    }\r\n\r\n    /**\r\n     * @dev Exempt an address from fee.\r\n     */\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        _isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    // Dividend related functions\r\n    \r\n    /**\r\n     * @dev Set dividend distributor to be used for this contract.\r\n     */\r\n    function _initializeDistributor(DividendDistributor distributor_) internal {\r\n        distributor = DividendDistributor(distributor_);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize dividend distributor.\r\n     */\r\n    function distributorInitialization(bool initialized) public authorized {\r\n        distributor.unInitialized(initialized);\r\n    }\r\n    \r\n    /**\r\n     * @dev Set the information for dividend distributor.\r\n     */\r\n    function setDividendDistributor(address distributor_) public authorized {\r\n        distributor.unInitialized(false);\r\n        distributor.setTokenAddress(_msgSender());\r\n        distributor = DividendDistributor(distributor_);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the criteria for dividend distribution.\r\n     */\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the maximum gas to be used for auto dividend distribution.\r\n     */\r\n    function setDistributorSettings(uint256 gas) external authorized {\r\n        require(gas < 750000, \"Gas must be lower than 750000\");\r\n        distributorGas = gas;\r\n    }\r\n\r\n    /**\r\n     * @dev Exempt an address from dividend.\r\n     */\r\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\r\n        require(holder != address(this) && holder != pair);\r\n        _isDividendExempt[holder] = exempt;\r\n\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, balanceOf(holder));\r\n        }\r\n    }\r\n\r\n    // Liquidity related functions\r\n\r\n    /**\r\n     * @dev Get liquidity backing.\r\n     */\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        uint256 liquidityBalance = _gonBalances[pair].div(gonsPerFragment);\r\n        return accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    /**\r\n     * @dev Set the status for add liquidity automation.\r\n     */\r\n    function setAutoAddLiquidity(bool _flag) external authorized {\r\n        if(_flag) {\r\n            autoAddLiquidity = _flag;\r\n            lastAddLiquidityTime = block.timestamp;\r\n        } else {\r\n            autoAddLiquidity = _flag;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set settings for target liquidity.\r\n     */\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    // Buyback relateed functions\r\n\r\n    /**\r\n     * @dev Allow buyback and burn the token using funds stucked in smart contract.\r\n     */\r\n    function triggerZeusBuyback(uint256 amount) external authorized {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyInitial\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract DividendDistributor\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_feeReceiverSettings\",\"type\":\"address[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"BotBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPairContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPairContract\",\"type\":\"address\"}],\"name\":\"ChangePairContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"ChangeRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"RebaseInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowedFragments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklistBotContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_gonBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBlackhole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBlackholeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changePairContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"name\":\"distributorInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"setDividendDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_autoBlackhole\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInitialFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidityDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uintMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LuzionProtocol", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000c1b71080000000000000000000000000000000000000000000000000000000000004f58800000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000d77d1facaef1beae2ce8ac4cc25495460aaed0d2000000000000000000000000354e77bc87c8b1ff4ff00ef62f88829f23d44ad5000000000000000000000000630a70c2592cc07f65249f0401709160341a254d00000000000000000000000063a832c8695cfca7751adf076804a5f0d85e5eda000000000000000000000000000000000000000000000000000000000000dead", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48d73bfa8a3016a7f1fd279e07b6fcbfc1e4ad9a100f6028097bb21db1600bf1"}