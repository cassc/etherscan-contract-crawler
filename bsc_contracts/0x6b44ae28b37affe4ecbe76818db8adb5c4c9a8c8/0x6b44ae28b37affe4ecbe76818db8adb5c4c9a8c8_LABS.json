{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract LABS is IERC20, Auth {\r\n\tstring _name = \"ElectroLabs\";\r\n\tstring _symbol = \"LABS\";\r\n\tuint256 constant _totalSupply = 300_000_000 * (10 ** _decimals);\r\n\tuint8 constant _decimals = 9;\r\n\tuint32 _smd; uint32 _smr;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tmapping (address => bool) public noFees;\r\n\tmapping (address => bool) public noLimits;\r\n\tbool public tradingOpen;\r\n\tuint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n\tuint256 public taxSwapMin; uint256 public taxSwapMax;\r\n\tmapping (address => bool) public isLiquidityPool;\r\n\tuint16 public snipersCaught = 0;\r\n\tuint8 _maxTaxRate = 12; \r\n\tuint8 public _buyTaxRate; uint8 public _sellTaxRate; uint8 public _txTaxRate;\r\n\tuint16 public taxSharesP2E = 100;\r\n\tuint16 public taxSharesBurn = 100;\r\n\tuint16 public taxSharesLP = 100;\r\n\tuint16 public taxSharesMarketing = 600;\r\n\tuint16 public taxSharesTeam = 200;\r\n\tuint16 public taxSharesDonation = 100;\r\n\tuint16 private _totalTaxShares = taxSharesP2E + taxSharesBurn + taxSharesLP + taxSharesMarketing + taxSharesTeam + taxSharesDonation;\r\n\taddress constant _burnWallet = address(0);\r\n\r\n\tuint256 private _humanBlock = 0;\r\n\tmapping (address => bool) private _nonSniper;\r\n\tmapping (address => uint256) public blacklistBlock;\r\n\r\n\taddress payable public walletMarketing = payable(0xfB4ca4Cc5f263632493d18b183d1EFBd6E6Bb8AB); \r\n\taddress payable public walletTeam = payable(0x8CE45A1880A7ad1d3B79fAE2860265CD338705b5); \r\n\taddress payable public walletDonation = payable(0xDA9A8474C7B20BdF23a2e5395b0fBEcc39d60CA6); \r\n\taddress public walletTokensP2E = address(0x6D020Cd7A6d7d95a5Edc9cdb5E69ACc0282ccC58); \r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _dexRouterAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\taddress private immutable _liquidityPool;\r\n\tIUniswapV2Router02 private _dexRouter;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tconstructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n\t\ttradingOpen = false;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\ttaxSwapMin = _totalSupply * 10 / 10000;\r\n\t\ttaxSwapMax = _totalSupply * 50 / 10000;\r\n\t\t_dexRouter = IUniswapV2Router02(_dexRouterAddress);\r\n\t\tnoFees[owner] = true;\r\n\t\tnoFees[address(this)] = true;\r\n\t\tnoFees[_dexRouterAddress] = true;\r\n\t\tnoFees[walletMarketing] = true;\r\n\t\tnoFees[walletTokensP2E] = true;\r\n\t\tnoLimits[owner] = true;\r\n\t\tnoLimits[address(this)] = true;\r\n\t\tnoLimits[walletMarketing] = true;\r\n\t\tnoLimits[walletTokensP2E] = true;\r\n\t\tnoLimits[_burnWallet] = true;\r\n\r\n\t\t_smd = smd; _smr = smr;\r\n\t\t_balances[owner] = _totalSupply;\r\n\t\temit Transfer(address(0), address(owner), _totalSupply);\r\n\r\n\t\t_liquidityPool = IUniswapV2Factory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n\t\tisLiquidityPool[_liquidityPool] = true;\r\n\t\t_nonSniper[_liquidityPool] = true;\r\n\r\n\t\t_nonSniper[address(this)] = true;\r\n\t\t_nonSniper[owner] = true;\r\n\t\t_nonSniper[walletMarketing] = true;\r\n        _nonSniper[walletTokensP2E] = true;\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(sender), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner {\r\n\t\trequire(!tradingOpen, \"trading already open\");\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][_dexRouterAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][_dexRouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _dexRouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\t_dexRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction _openTrading() internal {\r\n\t\t_humanBlock = block.number + 4;\r\n\t\tmaxTxAmount     = 5 * _totalSupply / 1000 + 10**_decimals; \r\n\t\tmaxWalletAmount = 10 * _totalSupply / 1000 + 10**_decimals;\r\n\t\t_buyTaxRate = _maxTaxRate;\r\n\t\t_sellTaxRate = _maxTaxRate;\r\n\t\t_txTaxRate = 0; \r\n\t\ttradingOpen = true;\r\n\t}\r\n\r\n\tfunction _humanize(uint8 blkcount) internal {\r\n\t\tif ( _humanBlock > block.number || _humanBlock == 0 ) { _humanBlock = block.number + blkcount; }\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n\t\tif (!tradingOpen) { require(noFees[sender] && noLimits[sender], \"Trading not open\"); }\r\n\t\telse if ( _humanBlock > block.number ) {\r\n\t\t\tif ( uint160(address(recipient)) % _smd == _smr ) { _humanize(1); }\r\n\t\t\telse if ( blacklistBlock[sender] == 0 ) { _addBlacklist(recipient, block.number); }\r\n\t\t\telse { _addBlacklist(recipient, blacklistBlock[sender]); }\r\n\t\t} else if ( blacklistBlock[sender] != 0 ) { _addBlacklist(recipient, blacklistBlock[sender]); }\r\n\r\n\t\tif ( tradingOpen && blacklistBlock[sender] != 0 && blacklistBlock[sender] < block.number ) { revert(\"blacklisted\"); }\r\n\r\n\t\tif ( !_inTaxSwap && isLiquidityPool[recipient] ) { _swapTaxAndLiquify(); }\r\n\t\t\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _addBlacklist(address wallet, uint256 snipeBlockNum) internal {\r\n\t\tif ( !_nonSniper[wallet] && blacklistBlock[wallet] == 0 ) { \r\n\t\t\tblacklistBlock[wallet] = snipeBlockNum; \r\n\t\t\tsnipersCaught ++;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( tradingOpen && !noLimits[recipient] ) {\r\n\t\t\tif ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !isLiquidityPool[recipient] && (_balances[recipient] + transferAmount > maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen(address sender) private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( tradingOpen ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\telse if (noFees[sender] && noLimits[sender]) { checkResult = true; } \r\n\r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !tradingOpen || noFees[sender] || noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( isLiquidityPool[sender] ) { taxAmount = amount * _buyTaxRate / 100; }\r\n\t\telse if ( isLiquidityPool[recipient] ) { taxAmount = amount * _sellTaxRate / 100; }\r\n\t\telse { taxAmount = amount * _txTaxRate / 100; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction isBlacklisted(address wallet) external view returns(bool) {\r\n\t\tif ( blacklistBlock[wallet] != 0 ) { return true; }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction setExemptFromTax(address wallet, bool setting) external onlyOwner {\r\n\t\tnoFees[ wallet ] = setting;\r\n\t}\r\n\r\n\tfunction setExemptFromLimits(address wallet, bool setting) external onlyOwner {\r\n\t\tnoLimits[ wallet ] = setting;\r\n\t}\r\n\r\n\tfunction setTaxRates(uint8 newBuyTax, uint8 newSellTax, uint8 newTxTax) external onlyOwner {\r\n\t\trequire(newBuyTax <= _maxTaxRate && newSellTax <= _maxTaxRate && newTxTax <= _maxTaxRate, \"Tax too high\");\r\n\t\t_buyTaxRate = newBuyTax;\r\n\t\t_sellTaxRate = newSellTax;\r\n\t\t_txTaxRate = newTxTax;\r\n\t}\r\n\r\n\tfunction enableBuySupport() external onlyOwner {\r\n\t\t_buyTaxRate = 0;\r\n\t\t_sellTaxRate = 2 * _maxTaxRate;\r\n\t}\r\n  \r\n\tfunction setTaxDistribution(uint16 sharesTokenP2E, uint16 sharesTokenBurn, uint16 sharesAutoLP, uint16 sharesMarketing, uint16 sharesTeam, uint16 sharesDonation) external onlyOwner {\r\n\t\ttaxSharesP2E = sharesTokenP2E;\r\n\t\ttaxSharesBurn  = sharesTokenBurn;\r\n\t\ttaxSharesLP = sharesAutoLP;\r\n\t\ttaxSharesMarketing = sharesMarketing;\r\n\t\ttaxSharesTeam = sharesTeam;\r\n\t\ttaxSharesDonation = sharesDonation;\r\n\t\t_totalTaxShares = sharesTokenP2E + sharesTokenBurn + sharesAutoLP + sharesMarketing + sharesTeam + sharesDonation;\r\n\t}\r\n\r\n\tfunction setTaxWallets(address newMarketing, address newTeam, address newDonation, address newTokenP2E) external onlyOwner {\r\n\t\twalletMarketing = payable(newMarketing);\r\n\t\twalletTeam = payable(newTeam);\r\n\t\twalletDonation = payable(newDonation);\r\n\t\twalletTokensP2E = newTokenP2E;\r\n\t\tnoFees[newMarketing] = true;\r\n\t\tnoFees[newTeam] = true;\r\n\t\tnoFees[newDonation] = true;\r\n\t\tnoFees[walletTokensP2E] = true;\r\n\t\tnoLimits[walletTokensP2E] = true;\r\n\t}\r\n\r\n\tfunction increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n\t\trequire(newTxAmt >= maxTxAmount, \"tx limit too low\");\r\n\t\tmaxTxAmount = newTxAmt;\r\n\t\tuint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n\t\trequire(newWalletAmt >= maxWalletAmount, \"wallet limit too low\");\r\n\t\tmaxWalletAmount = newWalletAmt;\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\ttaxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\ttaxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(taxSwapMax>=taxSwapMin, \"MinMax error\");\r\n\t\trequire(taxSwapMax>_totalSupply / 100000, \"Upper threshold too low\");\r\n\t\trequire(taxSwapMax<_totalSupply / 100, \"Upper threshold too high\");\r\n\t}\r\n\r\n\r\n\tfunction _transferTaxTokens(address recipient, uint256 amount) private {\r\n\t\tif ( amount > 0 ) {\r\n\t\t\t_balances[address(this)] = _balances[address(this)] - amount;\r\n\t\t\t_balances[recipient] = _balances[recipient] + amount;\r\n\t\t\temit Transfer(address(this), recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= taxSwapMin && tradingOpen ) {\r\n\t\t\tif ( _taxTokensAvailable >= taxSwapMax ) { _taxTokensAvailable = taxSwapMax; }\r\n\r\n\t\t\t\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * taxSharesLP / _totalTaxShares / 2;\r\n\t\t\tuint256 _tokensToTransfer = _taxTokensAvailable * taxSharesP2E / _totalTaxShares;\r\n\t\t\t_transferTaxTokens(walletTokensP2E, _tokensToTransfer);\r\n\t\t\tuint256 _tokensToBurn = _taxTokensAvailable * taxSharesBurn / _totalTaxShares;\r\n\t\t\t_transferTaxTokens(_burnWallet, _tokensToBurn);\r\n\t\t\t\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP - _tokensToTransfer - _tokensToBurn;\r\n\t\t\tif( _tokensToSwap > 10**_decimals ) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( taxSharesLP > 0 ) {\r\n\t\t\t\t\tuint256 _ethWeiAmount = _ethSwapped * taxSharesLP / _totalTaxShares ;\r\n\t\t\t\t\t_approveRouter(_tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\t\tif(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n\t\t_approveRouter(tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _dexRouter.WETH();\r\n\t\t_dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction _distributeTaxEth(uint256 amount) private {\r\n\t\tuint16 _taxShareTotal = taxSharesMarketing + taxSharesTeam + taxSharesDonation;\r\n\t\tif ( taxSharesMarketing > 0 ) { walletMarketing.transfer(amount * taxSharesMarketing / _taxShareTotal); }\r\n\t\tif ( taxSharesTeam > 0 ) { walletTeam.transfer(amount * taxSharesTeam / _taxShareTotal); }\r\n\t\tif ( taxSharesDonation > 0 ) { walletDonation.transfer(amount * taxSharesDonation / _taxShareTotal); }\r\n\t}\r\n\r\n\tfunction taxTokensSwap() external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxEthSend() external onlyOwner { \r\n\t\t_distributeTaxEth(address(this).balance); \r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyTaxRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txTaxRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setExemptFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setExemptFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesTokenP2E\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTokenBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTeam\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDonation\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTxTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDonation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokenP2E\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEthSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesBurn\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesDonation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesLP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesMarketing\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesP2E\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharesTeam\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTokensSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDonation\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTokensP2E\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LABS", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003168d6c6000000000000000000000000000000000000000000000000000000001eba84ea", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://544e19cbf11ead54ffa96bed55f109680afa807eea4c2dde536f122b241f8afc"}