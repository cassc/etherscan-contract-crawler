{"SourceCode": "pragma solidity ^0.8.3;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IRevoTokenContract{\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRevoLib{\r\n  function getLiquidityValue(uint256 liquidityAmount) external view returns (uint256 tokenRevoAmount, uint256 tokenBnbAmount);\r\n  function getLpTokens(address _wallet) external view returns (uint256);\r\n  function tokenRevoAddress() external view returns (address);\r\n  function calculatePercentage(uint256 _amount, uint256 _percentage, uint256 _precision, uint256 _percentPrecision) external view returns (uint256);\r\n}\r\n\r\ninterface IRevoNFT{\r\n  function nftsDbIds(string memory _collection, string memory _dbId) external view returns (uint256);\r\n  function mintRevo(address _to, string memory _collection, string memory _dbId) external;\r\n  function nextRevoId() external returns(uint256);\r\n}\r\n\r\n\r\ninterface IRevoNFTAirdrop{\r\n  function addNFT(uint256 _index, uint256 _tokenId) external;\r\n}\r\n\r\ninterface IRevoNFTUtils{\r\n    struct PENDING_TX {\r\n        uint256 itemIndex;\r\n        string dbId;\r\n        string collection;\r\n        uint256 uniqueId;\r\n        string itemType;\r\n        address sender;\r\n    }\r\n\r\n    function dequeuePendingTx() external returns (PENDING_TX memory data);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() public view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _owner2;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function owner2() public view returns (address) {\r\n        return _owner2;\r\n    }\r\n\r\n    function setOwner2(address _address) public onlyOwner{\r\n        _owner2 = _address;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender() || _owner2 == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RevoNFTMinter is Ownable {\r\n    address public revoAddress;\r\n    IRevoTokenContract private revoToken;\r\n    address public revoLibAddress;\r\n    IRevoLib private revoLib;\r\n    \r\n    IRevoNFT private revoNFT;\r\n\r\n    IRevoNFTUtils private revoNFTUtils;\r\n\r\n    IRevoNFTAirdrop private revoNftAirdrop;\r\n    \r\n    uint256[] public indexes;\r\n    string[] public dbIds;\r\n    \r\n    constructor(address _revoLibAddress, address _revoNFT, address _revoNFTUtils) public{\r\n        setRevoLib(_revoLibAddress);\r\n        setRevo(revoLib.tokenRevoAddress());\r\n        setRevoNFT(_revoNFT);\r\n        setRevoNFTUtils(_revoNFTUtils);\r\n    }\r\n    \r\n    /*\r\n    Set revo Address & token\r\n    */\r\n    function setRevo(address _revo) public onlyOwner {\r\n        revoAddress = _revo;\r\n        revoToken = IRevoTokenContract(revoAddress);\r\n    }\r\n\r\n    function setRevoNftAirdrop(address _revo) public onlyOwner {\r\n        revoNftAirdrop = IRevoNFTAirdrop(_revo);\r\n    }\r\n    \r\n    /*\r\n    Set revoLib Address & libInterface\r\n    */\r\n    function setRevoLib(address _revoLib) public onlyOwner {\r\n        revoLibAddress = _revoLib;\r\n        revoLib = IRevoLib(revoLibAddress);\r\n    }\r\n    \r\n    function setRevoNFT(address _revoNFT) public onlyOwner {\r\n        revoNFT = IRevoNFT(_revoNFT);\r\n    }\r\n\r\n    function setRevoNFTUtils(address _revoNFTUtils) public onlyOwner {\r\n        revoNFTUtils = IRevoNFTUtils(_revoNFTUtils);\r\n    }\r\n    \r\n    function mintRevoSimilarNFTBatch(address[] memory _receivers, string memory _collection, string[] memory _dbId) public onlyOwner {\r\n        indexes = new uint256[](_receivers.length);\r\n        dbIds = new string[](_receivers.length);\r\n        \r\n        for(uint256 i=0; i < _receivers.length; i++){\r\n            revoNFT.mintRevo(_receivers[i], _collection, _dbId[i]);\r\n            indexes[i] = revoNFT.nextRevoId();\r\n            dbIds[i] = _dbId[i];\r\n        }\r\n    }\r\n\r\n    function mintBoosterPack(address[] memory _receivers, string memory _collection, string[] memory _dbId, uint256 _revoAmount) public onlyOwner {\r\n        mintRevoSimilarNFTBatch(_receivers, _collection, _dbId);\r\n        revoToken.transfer(_receivers[0], _revoAmount);\r\n        revoNFTUtils.dequeuePendingTx();\r\n    }\r\n\r\n    function mintCosmeticBoosterPack(address[] memory _receivers, string[] memory _collection, string[] memory _dbId) public onlyOwner {\r\n        indexes = new uint256[](_receivers.length);\r\n        dbIds = new string[](_receivers.length);\r\n        \r\n        for(uint256 i=0; i < _receivers.length; i++){\r\n            revoNFT.mintRevo(_receivers[i], _collection[i], _dbId[i]);\r\n            indexes[i] = revoNFT.nextRevoId();\r\n            dbIds[i] = _dbId[i];\r\n        }\r\n        revoNFTUtils.dequeuePendingTx();\r\n    }\r\n\r\n    function mintRevoAirdrop(address _receiver, string memory _collection, string[] memory _dbId, uint256 _airdropIndex) public onlyOwner {\r\n        indexes = new uint256[](_dbId.length);\r\n        dbIds = new string[](_dbId.length);\r\n        \r\n        for(uint256 i=0; i < _dbId.length; i++){\r\n            revoNFT.mintRevo(_receiver, _collection, _dbId[i]);\r\n            revoNftAirdrop.addNFT(_airdropIndex, revoNFT.nextRevoId());\r\n            indexes[i] = revoNFT.nextRevoId();\r\n            dbIds[i] = _dbId[i];\r\n        }\r\n    }\r\n\r\n    function mintNFT(address _receiver, string memory _collection, string memory _dbId) public onlyOwner {\r\n        revoNFT.mintRevo(_receiver, _collection, _dbId);\r\n    }\r\n\r\n    function mintNFTAndDequeue(address _receiver, string memory _collection, string memory _dbId) public onlyOwner {\r\n        revoNFT.mintRevo(_receiver, _collection, _dbId);\r\n        revoNFTUtils.dequeuePendingTx();\r\n    }\r\n    \r\n    function getLastIndexes() public view returns(uint256[] memory){\r\n        return indexes;\r\n    }\r\n    \r\n    function getLastDbIds() public view returns(string[] memory){\r\n        return dbIds;\r\n    }\r\n\r\n    function withdrawRevo(uint256 _amount) public onlyOwner {\r\n        revoToken.transfer(owner(), _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoLibAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revoNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revoNFTUtils\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dbIds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDbIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_dbId\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_revoAmount\",\"type\":\"uint256\"}],\"name\":\"mintBoosterPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_collection\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_dbId\",\"type\":\"string[]\"}],\"name\":\"mintCosmeticBoosterPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dbId\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dbId\",\"type\":\"string\"}],\"name\":\"mintNFTAndDequeue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_dbId\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_airdropIndex\",\"type\":\"uint256\"}],\"name\":\"mintRevoAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_dbId\",\"type\":\"string[]\"}],\"name\":\"mintRevoSimilarNFTBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoLibAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwner2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revo\",\"type\":\"address\"}],\"name\":\"setRevo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoLib\",\"type\":\"address\"}],\"name\":\"setRevoLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoNFT\",\"type\":\"address\"}],\"name\":\"setRevoNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoNFTUtils\",\"type\":\"address\"}],\"name\":\"setRevoNFTUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revo\",\"type\":\"address\"}],\"name\":\"setRevoNftAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRevo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevoNFTMinter", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000008f3374172fe34e0fc839705bb0b62183d1e5412000000000000000000000000ee35ab1effe4db2344348e3a98a6ef2687f43392000000000000000000000000b744a81d1471595051569f6a56c0f145e7b7f75a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21c2761fac182936e4df1561df3cb54e3d49d2415ff8b2cc45772e2037b2c408"}