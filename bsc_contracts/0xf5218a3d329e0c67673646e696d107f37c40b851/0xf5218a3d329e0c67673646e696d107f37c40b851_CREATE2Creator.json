{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ncontract CREATE2 {\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function call(\r\n        address target,\r\n        bytes calldata data,\r\n        uint256 value\r\n    ) public {\r\n        (bool success, bytes memory returnData) = target.call{value: value}(\r\n            data\r\n        );\r\n        require(success, string(returnData));\r\n    }\r\n\r\n    function native(\r\n        address reciver,\r\n        uint256 amount\r\n    ) public {\r\n        payable(reciver).transfer(amount);\r\n    }\r\n\r\n    function transfer(\r\n        address token,\r\n        address reciver,\r\n        uint256 amount\r\n    ) public {\r\n        token.call(abi.encodeWithSignature(\"transfer(address,uint256)\",reciver,amount));\r\n    }\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address sender,\r\n        address reciver,\r\n        uint256 amount\r\n    ) public {\r\n        token.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",sender,reciver,amount));\r\n    }\r\n\r\n    function transferFromToken(\r\n        address token,\r\n        address recipient,\r\n        address sender,\r\n        address reciver,\r\n        uint256 amount\r\n    ) public {\r\n        transferFrom(token, sender, recipient, amount);\r\n\r\n        transfer(token, reciver, amount);\r\n    }\r\n}\r\n\r\ncontract CREATE2Creator {\r\n    \r\n\r\n    function CREATE2Contract(bytes32 salt) private returns (address) {\r\n        CREATE2 _contract = new CREATE2{salt: salt}();\r\n        return address(_contract);\r\n    }\r\n\r\n    function getBytecode() private pure returns (bytes memory) {\r\n        bytes memory bytecode = type(CREATE2).creationCode;\r\n        return abi.encodePacked(bytecode);\r\n    }\r\n\r\n    function calculateAddress(bytes32 salt) public view returns (address) {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0xff),\r\n                address(this),\r\n                salt,\r\n                keccak256(getBytecode())\r\n            )\r\n        );\r\n\r\n        return address(uint160(uint256(hash)));\r\n    }\r\n\r\n    function CREATE2AndCallNative(\r\n        bytes32 salt,\r\n        address reciver,\r\n        uint256 amount\r\n    ) public {\r\n        address contractAddress = CREATE2Contract(salt);\r\n\r\n        bytes memory callData = abi.encodeWithSignature(\r\n            \"native(address,uint256)\",\r\n            reciver,\r\n            amount\r\n        );\r\n\r\n        (bool success, ) = contractAddress.call(callData);\r\n        require(success, \"Fail\");\r\n    }\r\n\r\n    function CREATE2AndCallTransfer(\r\n        bytes32 salt\r\n    ) public {\r\n        CREATE2Contract(salt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reciver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CREATE2AndCallNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"CREATE2AndCallTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"calculateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CREATE2Creator", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc810413b903d3b29cf68d76223d8b81260e42f2a917c750791d9e551331c852"}