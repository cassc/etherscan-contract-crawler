{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-07-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-22\r\n */\r\n\r\n// File: Libraries.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract BTD is IBEP20, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) public excluded;\r\n    mapping(address => bool) public excludedFromStaking;\r\n    mapping(address => bool) public automatedMarketMakers;\r\n\r\n\r\n    //Token Info\r\n    string public constant name = \"BuyTheDip\";\r\n    string public constant symbol = \"BTDP\";\r\n    uint8 public constant decimals = 9;\r\n    uint256 public constant totalSupply = 999990958407043 * 10**decimals;\r\n    uint256 public MaxWallet=totalSupply/100;\r\n    uint256 public constant MaxTax = 250;\r\n\r\n    uint256 private _buyTax = 0;\r\n    uint256 private _sellTax = 120;\r\n    uint256 private _transferTax = 0;\r\n    uint256 private _negativeBuyTax = 20;\r\n    uint256 private _liquidityTax = 168;\r\n    uint256 private _stakingTax = 416;\r\n    uint256 private _marketingTax = 416;\r\n    uint256 private constant TaxDenominator = 1000;\r\n\r\n    uint256 public LaunchTimestamp = type(uint256).max;\r\n\r\n    address private _pancakePairAddress;\r\n    IDEXRouter private _pancakeRouter;\r\n\r\n    address private constant PancakeRouter =\r\n\r\n       0x10ED43C718714eb63d5aA57B78B54704E256024E;//Mainnet\r\n    IBEP20 RewardsToken=\r\n    IBEP20(0x76A797A59Ba2C17726896976B7B3747BfD1d220f);//Mainnet\r\n\r\n    address public constant NegativeTaxWallet= address(0xFFFF);\r\n    address public MarketingWallet;\r\n    bool _lock;\r\n    modifier Lock() {\r\n        require(!_lock);\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n\r\n    constructor() {\r\n        _pancakeRouter = IDEXRouter(PancakeRouter);\r\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());\r\n        excluded[address(0xdead)] = true;\r\n        automatedMarketMakers[_pancakePairAddress] = true;\r\n\r\n        excludedFromStaking[_pancakePairAddress] = true;\r\n        excludedFromStaking[address(this)] = true;\r\n        excludedFromStaking[address(0xdead)] = true;\r\n        excludedFromStaking[NegativeTaxWallet]=true;\r\n\r\n        _addToken(msg.sender, totalSupply);\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n\r\n        MarketingWallet = msg.sender;\r\n        excluded[MarketingWallet] = true;\r\n        excluded[msg.sender] = true;\r\n        excluded[address(this)] = true;\r\n        _approve(address(this), address(_pancakeRouter), type(uint).max);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"from zero\");\r\n        require(recipient != address(0), \"to zero\");\r\n\r\n        if (excluded[sender] || excluded[recipient]) {\r\n            _feelessTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        require(block.timestamp >= LaunchTimestamp, \"trading not yet enabled\");\r\n        _regularTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _regularTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(balanceOf[sender] >= amount, \"exceeds balance\");\r\n        bool isBuy = automatedMarketMakers[sender];\r\n        bool isSell = automatedMarketMakers[recipient];\r\n        uint256 tax;\r\n        if (isSell) {\r\n            tax = _sellTax;\r\n        } else if (isBuy) {\r\n            require(balanceOf[recipient]+amount<=MaxWallet,\"Exceeds max Wallet\");\r\n            uint256 negativeTaxAmount=amount*_negativeBuyTax/TaxDenominator;\r\n            if(balanceOf[NegativeTaxWallet]>=negativeTaxAmount&&negativeTaxAmount>0){\r\n                _removeToken(NegativeTaxWallet,negativeTaxAmount);\r\n                _addToken(recipient,negativeTaxAmount);\r\n                emit Transfer(NegativeTaxWallet,recipient,negativeTaxAmount);\r\n            }\r\n            tax = _buyTax;\r\n        } else {\r\n            tax = _transferTax;\r\n        }\r\n\r\n        if (\r\n            (sender != _pancakePairAddress) &&\r\n            (!swapAndLiquifyDisabled) &&\r\n            (!_isSwappingContractModifier)\r\n        ) {\r\n            _swapContractToken();\r\n        }\r\n        _transferTaxed(sender, recipient, amount, tax);\r\n    }\r\n\r\n    function _transferTaxed(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 tax\r\n    ) private {\r\n        uint256 totalTaxedToken = (amount * tax) / TaxDenominator;\r\n        uint256 taxedAmount = amount - totalTaxedToken;\r\n\r\n        _removeToken(sender, amount);\r\n        if(totalTaxedToken>0)\r\n        {\r\n        _addToken(address(this), totalTaxedToken);\r\n        emit Transfer(sender, address(this), totalTaxedToken);\r\n        }\r\n        _addToken(recipient, taxedAmount);\r\n        emit Transfer(sender, recipient, taxedAmount);\r\n        _autoPayout();\r\n    }\r\n\r\n    function _feelessTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(balanceOf[sender] >= amount, \">balance\");\r\n        _removeToken(sender, amount);\r\n        _addToken(recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    EnumerableSet.AddressSet private _autoPayoutList;\r\n\r\n    function isAutoPayout(address account) public view returns (bool) {\r\n        return _autoPayoutList.contains(account);\r\n    }\r\n\r\n    function setMyAutoPayout(bool flag) external {\r\n        if (flag) _autoPayoutList.add(msg.sender);\r\n        else _autoPayoutList.remove(msg.sender);\r\n    }\r\n\r\n    uint256 constant AutoPayoutCount = 5;\r\n    uint256 currentPayoutIndex;\r\n\r\n\r\n\r\n    function _autoPayout() private Lock {\r\n        if (currentPayoutIndex >= _autoPayoutList.length())\r\n            currentPayoutIndex = 0;\r\n\r\n\r\n        for (uint256 i = 0; i < AutoPayoutCount; i++) {\r\n            address current = _autoPayoutList.at(currentPayoutIndex);\r\n            currentPayoutIndex++;\r\n            uint256 dividents = getDividents(current);\r\n            if (dividents > 0) {\r\n                alreadyPaidShares[current] =\r\n                    profitPerShare *\r\n                    getShares(current);\r\n\r\n                RewardsToken.transfer(current,dividents);\r\n            }\r\n\r\n            if (currentPayoutIndex >= _autoPayoutList.length()) {\r\n                currentPayoutIndex = 0;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapForToken(uint256 amount)\r\n        private\r\n        returns (uint256 newAmount)\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _pancakeRouter.WETH(); //BNB\r\n        path[1] = address(RewardsToken);\r\n\r\n        _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, address(this), block.timestamp);\r\n        newAmount = RewardsToken.balanceOf(address(this));\r\n    }\r\n\r\n\r\n    uint256 private constant DistributionMultiplier = 2**64;\r\n    uint256 public profitPerShare;\r\n    uint256 public totalShares;\r\n    uint256 public totalStakingReward;\r\n    uint256 public totalPayouts;\r\n    mapping(address => uint256) private alreadyPaidShares;\r\n    mapping(address => uint256) public totalPayout;\r\n\r\n    function _addToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = balanceOf[addr] + amount;\r\n        if (excludedFromStaking[addr]) {\r\n            balanceOf[addr] = newAmount;\r\n            return;\r\n        }\r\n        totalShares += amount;\r\n        uint256 payment = getDividents(addr);\r\n        alreadyPaidShares[addr] = profitPerShare * newAmount;\r\n        if(payment>0)\r\n            RewardsToken.transfer(addr,payment);\r\n        balanceOf[addr] = newAmount;\r\n        _autoPayoutList.add(addr);\r\n    }\r\n\r\n    function _removeToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = balanceOf[addr] - amount;\r\n        if (excludedFromStaking[addr]) {\r\n            balanceOf[addr] = newAmount;\r\n            return;\r\n        }\r\n\r\n        uint256 payment = getDividents(addr);\r\n        balanceOf[addr] = newAmount;\r\n        alreadyPaidShares[addr] = profitPerShare * getShares(addr);\r\n        if(payment>0)\r\n            RewardsToken.transfer(addr,payment);\r\n        totalShares -= amount;\r\n        if (newAmount == 0) _autoPayoutList.remove(addr);\r\n    }\r\n\r\n    function getDividents(address staker) public view returns (uint256) {\r\n        uint256 fullPayout = profitPerShare * getShares(staker);\r\n        if (fullPayout <= alreadyPaidShares[staker]) return 0;\r\n        return\r\n            (fullPayout - alreadyPaidShares[staker]) / DistributionMultiplier;\r\n    }\r\n\r\n    function _distributeStake(uint256 AmountWei) private {\r\n        if (AmountWei == 0) return;\r\n\r\n        if (totalShares == 0) {\r\n            (bool sent, ) = MarketingWallet.call{value: AmountWei}(\"\");\r\n            sent = true;\r\n        } else {\r\n            totalStakingReward += AmountWei;\r\n            profitPerShare += ((AmountWei * DistributionMultiplier) /\r\n                totalShares);\r\n        }\r\n    }\r\n\r\n\r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap() {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    function _swapContractToken()\r\n        private\r\n        lockTheSwap\r\n    {\r\n        uint256 contractBalance = balanceOf[address(this)];\r\n\r\n        uint256 minSwap = (balanceOf[_pancakePairAddress] * 2) / TaxDenominator;\r\n        if(contractBalance<minSwap) return;\r\n\r\n        uint256 tokenForLiquidity = ((contractBalance * _liquidityTax) / TaxDenominator)/2;\r\n        uint256 tokenForBNB = contractBalance - tokenForLiquidity*2;\r\n\r\n        uint256 swapToken = tokenForLiquidity + tokenForBNB;\r\n        _swapTokenForBNB(swapToken);\r\n        uint256 newBNB = address(this).balance;\r\n        uint256 liqBNB = (newBNB * tokenForLiquidity) / swapToken;\r\n        if (liqBNB > 0) _addLiquidity(tokenForLiquidity, liqBNB);\r\n        newBNB=address(this).balance;\r\n        uint256 totalBNBTax = TaxDenominator - _liquidityTax;\r\n        uint256 marketingBNB = (newBNB * _marketingTax) / totalBNBTax;\r\n        (bool sent, ) = MarketingWallet.call{value: marketingBNB}(\"\");\r\n        sent = true;\r\n        uint256 balanceBefore=RewardsToken.balanceOf(address(this));\r\n        swapForToken(newBNB - marketingBNB);\r\n        uint256 stakingToken=RewardsToken.balanceOf(address(this))-balanceBefore;\r\n        _distributeStake(stakingToken);\r\n\r\n    }\r\n\r\n    function _swapTokenForBNB(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n\r\n        _pancakeRouter.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\r\n            _pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n                address(this),\r\n                tokenamount,\r\n                0,\r\n                0,\r\n                owner(),\r\n                block.timestamp\r\n            );\r\n    }\r\n    function addInitialLiquidity() external payable onlyOwner{\r\n        address sender=msg.sender;\r\n        uint amount=balanceOf[sender]*18/100;\r\n        _removeToken(sender, amount);\r\n        _addToken(address(this), amount);\r\n        _pancakeRouter.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            amount,\r\n            0,\r\n            0,\r\n            sender,\r\n            block.timestamp\r\n            );\r\n\r\n    }\r\n    function getShares(address addr) public view returns (uint256) {\r\n        if (excludedFromStaking[addr]) return 0;\r\n        return balanceOf[addr];\r\n    }\r\n\r\n\r\n\r\n    function getTaxes()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 buyTax,\r\n            uint256 negativeBuyTax,\r\n            uint256 sellTax,\r\n            uint256 transferTax,\r\n            uint256 liquidityTax,\r\n            uint256 stakingTax,\r\n            uint256 marketingTax\r\n        )\r\n    {\r\n        buyTax = _buyTax;\r\n        negativeBuyTax=_negativeBuyTax;\r\n        sellTax = _sellTax;\r\n        transferTax = _transferTax;\r\n        liquidityTax = _liquidityTax;\r\n        stakingTax = _stakingTax;\r\n        marketingTax = _marketingTax;\r\n    }\r\n\r\n    bool public swapAndLiquifyDisabled;\r\n    event OnAddAMM(address AMM, bool Add);\r\n    event OnChangeMaxWallet(uint newMaxWallet);\r\n    function SetMaxWallet(uint newMaxWallet) external onlyOwner{\r\n        require(newMaxWallet>=totalSupply/200);\r\n        MaxWallet=newMaxWallet;\r\n        emit OnChangeMaxWallet(MaxWallet);\r\n    }\r\n\r\n    function AddOrRemoveAMM(address AMMPairAddress, bool Add)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(AMMPairAddress != _pancakePairAddress, \"can't change Pancake\");\r\n        if (Add) {\r\n            if (!excludedFromStaking[AMMPairAddress])\r\n                SetStakingExcluded(AMMPairAddress, true);\r\n            automatedMarketMakers[AMMPairAddress] = true;\r\n        } else {\r\n            automatedMarketMakers[AMMPairAddress] = false;\r\n        }\r\n        emit OnAddAMM(AMMPairAddress, Add);\r\n    }\r\n\r\n    event OnChangeMarketingWallet(address newWallet);\r\n\r\n    function ChangeMarketingWallet(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        MarketingWallet = newMarketingWallet;\r\n        emit OnChangeMarketingWallet(newMarketingWallet);\r\n    }\r\n\r\n\r\n    event OnSwitchSwapAndLiquify(bool Disabled);\r\n    function SwitchSwapAndLiquify(bool disabled) external onlyOwner {\r\n        swapAndLiquifyDisabled = disabled;\r\n        emit OnSwitchSwapAndLiquify(disabled);\r\n    }\r\n\r\n    event OnChangeTaxes(\r\n        uint256 liquidityTaxes,\r\n        uint256 stakingTaxes,\r\n        uint256 marketingTaxes,\r\n        uint256 buyTaxes,\r\n        uint256 negativeBuyTax,\r\n        uint256 sellTaxes,\r\n        uint256 transferTaxes\r\n    );\r\n\r\n    function SetTaxes(\r\n        uint256 liquidityTaxes,\r\n        uint256 stakingTaxes,\r\n        uint256 marketingTax,\r\n        uint256 buyTax,\r\n        uint256 negativeTax,\r\n        uint256 sellTax,\r\n        uint256 transferTax\r\n    ) external onlyOwner {\r\n        uint256 totalTax = liquidityTaxes + stakingTaxes + marketingTax;\r\n        require(totalTax == TaxDenominator);\r\n        require(buyTax <= MaxTax && sellTax <= MaxTax && transferTax <= MaxTax);\r\n\r\n        _marketingTax = marketingTax;\r\n        _liquidityTax = liquidityTaxes;\r\n        _stakingTax = stakingTaxes;\r\n        _negativeBuyTax=negativeTax;\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n        _transferTax = transferTax;\r\n        emit OnChangeTaxes(\r\n            liquidityTaxes,\r\n            stakingTaxes,\r\n            marketingTax,\r\n            buyTax,\r\n            negativeTax,\r\n            sellTax,\r\n            transferTax\r\n        );\r\n    }\r\n\r\n    function TriggerLiquify()\r\n        external\r\n        onlyOwner\r\n    {\r\n        _swapContractToken();\r\n    }\r\n\r\n    event OnExcludeFromStaking(address addr, bool exclude);\r\n\r\n    function SetStakingExcluded(address addr, bool exclude) public onlyOwner {\r\n        uint256 shares;\r\n        if (exclude) {\r\n            require(!excludedFromStaking[addr]);\r\n            uint256 newDividents = getDividents(addr);\r\n            shares = getShares(addr);\r\n            excludedFromStaking[addr] = true;\r\n            totalShares -= shares;\r\n            alreadyPaidShares[addr] = shares * profitPerShare;\r\n            RewardsToken.transfer(addr,newDividents);\r\n            _autoPayoutList.remove(addr);\r\n        } else _includeToStaking(addr);\r\n        emit OnExcludeFromStaking(addr, exclude);\r\n    }\r\n\r\n    function IncludeMeToStaking() external {\r\n        _includeToStaking(msg.sender);\r\n    }\r\n\r\n    function _includeToStaking(address addr) private {\r\n        require(excludedFromStaking[addr]);\r\n        excludedFromStaking[addr] = false;\r\n        uint256 shares = getShares(addr);\r\n        totalShares += shares;\r\n        alreadyPaidShares[addr] = shares * profitPerShare;\r\n        _autoPayoutList.add(addr);\r\n    }\r\n\r\n    event OnExclude(address addr, bool exclude);\r\n\r\n    function SetExcludedStatus(address account, bool flag) external onlyOwner {\r\n        require(\r\n            account != address(this) && account != address(0xdead),\r\n            \"can't Include\"\r\n        );\r\n        excluded[account] = flag;\r\n        emit OnExclude(account, flag);\r\n    }\r\n\r\n\r\n    event OnSetLaunchTimestamp(uint256 timestamp);\r\n\r\n    function Launch() external {\r\n        SetupLaunchTimestamp(block.timestamp);\r\n    }\r\n\r\n    function SetupLaunchTimestamp(uint256 timestamp) public onlyOwner {\r\n        require(block.timestamp < LaunchTimestamp);\r\n\r\n        LaunchTimestamp = timestamp;\r\n        emit OnSetLaunchTimestamp(timestamp);\r\n    }\r\n\r\n    function WithdrawStrandedToken(address strandedToken) external onlyOwner {\r\n        require(\r\n            (strandedToken != _pancakePairAddress) &&\r\n                strandedToken != address(this)\r\n        );\r\n        IBEP20 token = IBEP20(strandedToken);\r\n        token.transfer(MarketingWallet, token.balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == address(PancakeRouter));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = allowance[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // IBEP20 - Helpers\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue);\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"OnAddAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"OnChangeMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"OnChangeMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTaxes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTaxes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingTaxes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTaxes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"negativeBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTaxes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTaxes\",\"type\":\"uint256\"}],\"name\":\"OnChangeTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnExclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnExcludeFromStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnSetLaunchTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Disabled\",\"type\":\"bool\"}],\"name\":\"OnSwitchSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AMMPairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"AddOrRemoveAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IncludeMeToStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NegativeTaxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetExcludedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"SetMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"SetStakingExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTaxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTaxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"negativeTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetupLaunchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"SwitchSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TriggerLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strandedToken\",\"type\":\"address\"}],\"name\":\"WithdrawStrandedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"negativeBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAutoPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setMyAutoPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTD", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ec6c7780336cbc5c0245fe3c39bda5f1ecd4b23d71af66c3a25299d52cc54f9"}