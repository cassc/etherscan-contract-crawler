{"SourceCode": "pragma solidity ^0.6.0;// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Helper  {\r\n    event TransferOut(uint256 Amount, address To, address Token);\r\n    event TransferIn(uint256 Amount, address From, address Token);\r\n    modifier TestAllownce(\r\n        address _token,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) {\r\n        require(\r\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\r\n            \"no allowance\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function TransferToken(\r\n        address _Token,\r\n        address _Reciver,\r\n        uint256 _Amount\r\n    ) internal {\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        emit TransferOut(_Amount, _Reciver, _Token);\r\n        ERC20(_Token).transfer(_Reciver, _Amount);\r\n        require(\r\n            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\r\n                ,\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function TransferInToken(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\r\n        require(_Amount > 0);\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\r\n        emit TransferIn(_Amount, _Subject, _Token);\r\n        require(\r\n            (SafeMath.add(OldBalance, _Amount)) ==\r\n                CheckBalance(_Token, address(this)),\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function ApproveAllowanceERC20(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal {\r\n        require(_Amount > 0);\r\n        ERC20(_Token).approve(_Subject, _Amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract GovManager is Ownable {\r\n    address public GovernerContract;\r\n\r\n    modifier onlyOwnerOrGov() {\r\n        require(msg.sender == owner() || msg.sender == GovernerContract, \"Authorization Error\");\r\n        _;\r\n    }\r\n\r\n    function setGovernerContract(address _address) external onlyOwnerOrGov{\r\n        GovernerContract = _address;\r\n    }\r\n\r\n    constructor() public {\r\n        GovernerContract = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract PozBenefit is GovManager {\r\n    constructor() public {\r\n        PozFee = 15; // *10000\r\n        PozTimer = 1000; // *10000\r\n    \r\n       // POZ_Address = address(0x0);\r\n       // POZBenefit_Address = address(0x0);\r\n    }\r\n\r\n    uint256 public PozFee; // the fee for the first part of the pool\r\n    uint256 public PozTimer; //the timer for the first part fo the pool\r\n    \r\n    modifier PercentCheckOk(uint256 _percent) {\r\n        if (_percent < 10000) _;\r\n        else revert(\"Not in range\");\r\n    }\r\n    modifier LeftIsBigger(uint256 _left, uint256 _right) {\r\n        if (_left > _right) _;\r\n        else revert(\"Not bigger\");\r\n    }\r\n\r\n    function SetPozTimer(uint256 _pozTimer)\r\n        public\r\n        onlyOwnerOrGov\r\n        PercentCheckOk(_pozTimer)\r\n    {\r\n        PozTimer = _pozTimer;\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ETHHelper is Ownable {\r\n    constructor() public {\r\n        IsPayble = false;\r\n    }\r\n\r\n    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\r\n        require(msgValue >= _MinETHInvest, \"Send ETH to invest\");\r\n        emit TransferInETH(msgValue, msgSender);\r\n        _;\r\n    }\r\n\r\n    //@dev not/allow contract to receive funds\r\n    receive() external payable {\r\n        if (!IsPayble) revert();\r\n    }\r\n\r\n    event TransferOutETH(uint256 Amount, address To);\r\n    event TransferInETH(uint256 Amount, address From);\r\n\r\n    bool public IsPayble;\r\n \r\n    function SwitchIsPayble() public onlyOwner {\r\n        IsPayble = !IsPayble;\r\n    }\r\n\r\n    function TransferETH(address payable _Reciver, uint256 _ammount) internal {\r\n        emit TransferOutETH(_ammount, _Reciver);\r\n        uint256 beforeBalance = address(_Reciver).balance;\r\n        _Reciver.transfer(_ammount);\r\n        require(\r\n            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\r\n            \"The transfer did not complite\"\r\n        );\r\n    }\r\n \r\n}\r\n\r\n\r\n\r\n//For whitelist, \r\ninterface IWhiteList {\r\n    function Check(address _Subject, uint256 _Id) external view returns(uint);\r\n    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\r\n    function IsNeedRegister(uint256 _Id) external view returns(bool);\r\n    function LastRoundRegister(address _Subject,uint256 _Id) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \r\n\r\n\r\n\r\n\r\ncontract Manageable is ETHHelper, ERC20Helper, PozBenefit, Pausable  {\r\n    constructor() public {\r\n        Fee = 20; // *10000\r\n        //MinDuration = 0; //need to set\r\n        //PoolPrice = 0; // Price for create a pool\r\n        MaxDuration = 60 * 60 * 24 * 30 * 6; // half year\r\n        MinETHInvest = 10000; // for percent calc\r\n        MaxETHInvest = 100 * 10**18; // 100 eth per wallet\r\n        //WhiteList_Address = address(0x0);\r\n    }\r\n\r\n    mapping(address => uint256) FeeMap;\r\n    //@dev for percent use uint16\r\n    uint256 public Fee; //the fee for the pool\r\n    uint256 public MinDuration; //the minimum duration of a pool, in seconds\r\n    uint256 public MaxDuration; //the maximum duration of a pool from the creation, in seconds\r\n    uint256 public PoolPrice;\r\n    uint256 public MinETHInvest;\r\n    uint256 public MaxETHInvest;\r\n    uint256 public MinERC20Invest;\r\n    uint256 public MaxERC20Invest;\r\n    address public WhiteList_Address; //The address of the Whitelist contract\r\n    address public Benefit_Address;\r\n\r\n    bool public IsTokenFilterOn;\r\n    uint256 public TokenWhitelistId;\r\n    uint256 public MCWhitelistId; // Main Coin WhiteList ID\r\n\r\n    address public LockedDealAddress;\r\n    bool public UseLockedDealForTlp;\r\n\r\n    function SwapTokenFilter() public onlyOwner {\r\n        IsTokenFilterOn = !IsTokenFilterOn;\r\n    }\r\n\r\n    function setTokenWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\r\n        TokenWhitelistId = _whiteListId;\r\n    }\r\n\r\n    function setMCWhitelistId(uint256 _whiteListId) external onlyOwnerOrGov{\r\n        MCWhitelistId = _whiteListId;\r\n    }\r\n\r\n    function IsValidToken(address _address) public view returns (bool) {\r\n        return !IsTokenFilterOn || (IWhiteList(WhiteList_Address).Check(_address, TokenWhitelistId) > 0);\r\n    }\r\n\r\n    function IsERC20Maincoin(address _address) public view returns (bool) {\r\n        return !IsTokenFilterOn || IWhiteList(WhiteList_Address).Check(_address, MCWhitelistId) > 0;\r\n    }\r\n    \r\n    function SetWhiteList_Address(address _WhiteList_Address) public onlyOwnerOrGov {\r\n        WhiteList_Address = _WhiteList_Address;\r\n    }\r\n\r\n    function SetBenefit_Address(address _benefitAddress) public onlyOwnerOrGov {\r\n        Benefit_Address = _benefitAddress;\r\n    }\r\n\r\n    function SetMinMaxETHInvest(uint256 _MinETHInvest, uint256 _MaxETHInvest)\r\n        public\r\n        onlyOwnerOrGov\r\n    {\r\n        MinETHInvest = _MinETHInvest;\r\n        MaxETHInvest = _MaxETHInvest;\r\n    }\r\n    function SetMinMaxERC20Invest(uint256 _MinERC20Invest, uint256 _MaxERC20Invest)\r\n        public\r\n        onlyOwnerOrGov\r\n    {\r\n        MinERC20Invest = _MinERC20Invest;\r\n        MaxERC20Invest = _MaxERC20Invest;\r\n    }\r\n\r\n    function SetMinMaxDuration(uint256 _minDuration, uint256 _maxDuration)\r\n        public\r\n        onlyOwnerOrGov\r\n    {\r\n        MinDuration = _minDuration;\r\n        MaxDuration = _maxDuration;\r\n    }\r\n\r\n    function SetPoolPrice(uint256 _PoolPrice) public onlyOwnerOrGov {\r\n        PoolPrice = _PoolPrice;\r\n    }\r\n\r\n    function SetFee(uint256 _fee)\r\n        public\r\n        onlyOwnerOrGov\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger(_fee, PozFee)\r\n    {\r\n        Fee = _fee;\r\n    }\r\n\r\n    function SetPOZFee(uint256 _fee)\r\n        public\r\n        onlyOwnerOrGov\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger(Fee, _fee)\r\n    {\r\n        PozFee = _fee;\r\n    }\r\n\r\n    function SetLockedDealAddress(address lockedDeal) public onlyOwnerOrGov {\r\n        LockedDealAddress = lockedDeal;\r\n    }\r\n\r\n    function SwitchLockedDealForTlp() public onlyOwnerOrGov {\r\n        UseLockedDealForTlp = !UseLockedDealForTlp;\r\n    }\r\n\r\n    function isUsingLockedDeal() public view returns(bool) {\r\n        return UseLockedDealForTlp && LockedDealAddress != address(0x0);\r\n    }\r\n\r\n    function pause() public onlyOwnerOrGov {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwnerOrGov {\r\n        _unpause();\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Pools is Manageable {\r\n    event NewPool(address token, uint256 id);\r\n    event FinishPool(uint256 id);\r\n    event PoolUpdate(uint256 id);\r\n\r\n    constructor() public {\r\n        //  poolsCount = 0; //Start with 0\r\n    }\r\n\r\n    uint256 public poolsCount; // the ids of the pool\r\n    mapping(uint256 => Pool) pools; //the id of the pool with the data\r\n    mapping(address => uint256[]) poolsMap; //the address and all of the pools id's\r\n    struct Pool {\r\n        PoolBaseData BaseData;\r\n        PoolMoreData MoreData;\r\n    }\r\n    struct PoolBaseData {\r\n        address Token; //the address of the erc20 toke for sale\r\n        address Creator; //the project owner\r\n        uint256 FinishTime; //Until what time the pool is active\r\n        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\r\n        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\r\n        address Maincoin; // on adress.zero = ETH\r\n        uint256 StartAmount; //The total amount of the tokens for sale\r\n    }\r\n    struct PoolMoreData {\r\n        uint64 LockedUntil; // true - the investors getting the tokens after the FinishTime. false - intant deal\r\n        uint256 Lefttokens; // the ammount of tokens left for sale\r\n        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\r\n        uint256 OpenForAll; // The Time that all investors can invest\r\n        uint256 UnlockedTokens; //for locked pools\r\n        uint256 WhiteListId; // 0 is turn off, the Id of the whitelist from the contract.\r\n        bool TookLeftOvers; //The Creator took the left overs after the pool finished\r\n        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\r\n    }\r\n\r\n    function isPoolLocked(uint256 _id) public view returns(bool){\r\n        return pools[_id].MoreData.LockedUntil > now;\r\n    }\r\n\r\n    //create a new pool\r\n    function CreatePool(\r\n        address _Token, //token to sell address\r\n        uint256 _FinishTime, //Until what time the pool will work\r\n        uint256 _Rate, //the rate of the trade\r\n        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        uint64 _LockedUntil, //False = DSP or True = TLP\r\n        address _MainCoin, // address(0x0) = ETH, address of main token\r\n        bool _Is21Decimal, //focus the for smaller tokens.\r\n        uint256 _Now, //Start Time - can be 0 to not change current flow\r\n        uint256 _WhiteListId // the Id of the Whitelist contract, 0 For turn-off\r\n    ) public payable whenNotPaused {\r\n        require(msg.value >= PoolPrice, \"Need to pay for the pool\");\r\n        require(IsValidToken(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\r\n        require(\r\n            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\r\n            \"Main coin not in list\"\r\n        );\r\n        require(_FinishTime  < SafeMath.add(MaxDuration, now), \"Pool duration can't be that long\");\r\n        require(_LockedUntil < SafeMath.add(MaxDuration, now) , \"Locked value can't be that long\");\r\n        require(\r\n            _Rate <= _POZRate,\r\n            \"POZ holders need to have better price (or the same)\"\r\n        );\r\n        require(_POZRate > 0, \"It will not work\");\r\n        if (_Now < now) _Now = now;\r\n        require(\r\n            SafeMath.add(now, MinDuration) <= _FinishTime,\r\n            \"Need more then MinDuration\"\r\n        ); // check if the time is OK\r\n        TransferInToken(_Token, msg.sender, _StartAmount);\r\n        uint256 Openforall =\r\n            (_WhiteListId == 0) \r\n                ? _Now //and this\r\n                : SafeMath.add(\r\n                    SafeMath.div(\r\n                        SafeMath.mul(SafeMath.sub(_FinishTime, _Now), PozTimer),\r\n                        10000\r\n                    ),\r\n                    _Now\r\n                );\r\n        //register the pool\r\n        pools[poolsCount] = Pool(\r\n            PoolBaseData(\r\n                _Token,\r\n                msg.sender,\r\n                _FinishTime,\r\n                _Rate,\r\n                _POZRate,\r\n                _MainCoin,\r\n                _StartAmount\r\n            ),\r\n            PoolMoreData(\r\n                _LockedUntil,\r\n                _StartAmount,\r\n                _Now,\r\n                Openforall,\r\n                0,\r\n                _WhiteListId,\r\n                false,\r\n                _Is21Decimal\r\n            )\r\n        );\r\n        poolsMap[msg.sender].push(poolsCount);\r\n        emit NewPool(_Token, poolsCount);\r\n        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract PoolsData is Pools {\r\n    enum PoolStatus {Created, Open, PreMade, OutOfstock, Finished, Close} //the status of the pools\r\n\r\n    modifier isPoolId(uint256 _id) {\r\n        require(_id < poolsCount, \"Invalid Pool ID\");\r\n        _;\r\n    }\r\n\r\n    function GetMyPoolsId() public view returns (uint256[] memory) {\r\n        return poolsMap[msg.sender];\r\n    }\r\n\r\n    function GetPoolBaseData(uint256 _Id)\r\n        public\r\n        view\r\n        isPoolId(_Id)\r\n        returns (\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            pools[_Id].BaseData.Token,\r\n            pools[_Id].BaseData.Creator,\r\n            pools[_Id].BaseData.FinishTime,\r\n            pools[_Id].BaseData.Rate,\r\n            pools[_Id].BaseData.POZRate,\r\n            pools[_Id].BaseData.StartAmount\r\n        );\r\n    }\r\n\r\n    function GetPoolMoreData(uint256 _Id)\r\n        public\r\n        view\r\n        isPoolId(_Id)\r\n        returns (\r\n            uint64,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            pools[_Id].MoreData.LockedUntil,\r\n            pools[_Id].MoreData.Lefttokens,\r\n            pools[_Id].MoreData.StartTime,\r\n            pools[_Id].MoreData.OpenForAll,\r\n            pools[_Id].MoreData.UnlockedTokens,\r\n            pools[_Id].MoreData.Is21DecimalRate\r\n        );\r\n    }\r\n\r\n    function GetPoolExtraData(uint256 _Id)\r\n        public\r\n        view\r\n        isPoolId(_Id)\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            address\r\n        )\r\n    {\r\n        return (\r\n            pools[_Id].MoreData.TookLeftOvers,\r\n            pools[_Id].MoreData.WhiteListId,\r\n            pools[_Id].BaseData.Maincoin\r\n        );\r\n    }\r\n\r\n    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\r\n        public\r\n        view\r\n        isPoolId(_PoolId)\r\n        returns (bool)\r\n    {\r\n        return\r\n            pools[_PoolId].BaseData.FinishTime <= now &&\r\n            pools[_PoolId].MoreData.Lefttokens > 0 &&\r\n            !pools[_PoolId].MoreData.TookLeftOvers;\r\n    }\r\n\r\n    //@dev no use of revert to make sure the loop will work\r\n    function WithdrawLeftOvers(uint256 _PoolId) public isPoolId(_PoolId) returns (bool) {\r\n        //pool is finished + got left overs + did not took them\r\n        if (IsReadyWithdrawLeftOvers(_PoolId)) {\r\n            pools[_PoolId].MoreData.TookLeftOvers = true;\r\n            TransferToken(\r\n                pools[_PoolId].BaseData.Token,\r\n                pools[_PoolId].BaseData.Creator,\r\n                pools[_PoolId].MoreData.Lefttokens\r\n            );\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //calculate the status of a pool\r\n    function GetPoolStatus(uint256 _id)\r\n        public\r\n        view\r\n        isPoolId(_id)\r\n        returns (PoolStatus)\r\n    {\r\n        //Don't like the logic here - ToDo Boolean checks (truth table)\r\n        if (now < pools[_id].MoreData.StartTime) return PoolStatus.PreMade;\r\n        if (\r\n            now < pools[_id].MoreData.OpenForAll &&\r\n            pools[_id].MoreData.Lefttokens > 0\r\n        ) {\r\n            //got tokens + only poz investors\r\n            return (PoolStatus.Created);\r\n        }\r\n        if (\r\n            now >= pools[_id].MoreData.OpenForAll &&\r\n            pools[_id].MoreData.Lefttokens > 0 &&\r\n            now < pools[_id].BaseData.FinishTime\r\n        ) {\r\n            //got tokens + all investors\r\n            return (PoolStatus.Open);\r\n        }\r\n        if (\r\n            pools[_id].MoreData.Lefttokens == 0 &&\r\n            isPoolLocked(_id) &&\r\n            now < pools[_id].BaseData.FinishTime\r\n        ) //no tokens on locked pool, got time\r\n        {\r\n            return (PoolStatus.OutOfstock);\r\n        }\r\n        if (\r\n            pools[_id].MoreData.Lefttokens == 0 && !isPoolLocked(_id)\r\n        ) //no tokens on direct pool\r\n        {\r\n            return (PoolStatus.Close);\r\n        }\r\n        if (\r\n            now >= pools[_id].BaseData.FinishTime &&\r\n            !isPoolLocked(_id)\r\n        ) {\r\n            // After finish time - not locked\r\n            if (pools[_id].MoreData.TookLeftOvers) return (PoolStatus.Close);\r\n            return (PoolStatus.Finished);\r\n        }\r\n        if (\r\n            (pools[_id].MoreData.TookLeftOvers ||\r\n                pools[_id].MoreData.Lefttokens == 0) &&\r\n            (pools[_id].MoreData.UnlockedTokens +\r\n                pools[_id].MoreData.Lefttokens ==\r\n                pools[_id].BaseData.StartAmount)\r\n        ) return (PoolStatus.Close);\r\n        return (PoolStatus.Finished);\r\n    }\r\n}\r\n\r\n\r\n\r\n//True POZ Token will have this, \r\ninterface IPOZBenefit {\r\n    function IsPOZHolder(address _Subject) external view returns(bool);\r\n}\r\n\r\n\r\ninterface ILockedDeal {\r\n    function CreateNewPool(address _Token, uint64 _FinishTime, uint256 _StartAmount, address _Owner) external returns(uint256);\r\n    function WithdrawToken(uint256 _PoolId) external returns(bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Invest is PoolsData {\r\n    event NewInvestorEvent(uint256 Investor_ID, address Investor_Address, uint256 LockedDeal_ID);\r\n\r\n    modifier CheckTime(uint256 _Time) {\r\n        require(now >= _Time, \"Pool not open yet\");\r\n        _;\r\n    }\r\n\r\n    modifier validateSender(){\r\n        require(\r\n            msg.sender == tx.origin && !isContract(msg.sender),\r\n            \"Some thing wrong with the msgSender\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //using SafeMath for uint256;\r\n    constructor() public {\r\n        //TotalInvestors = 0;\r\n    }\r\n\r\n    //Investorsr Data\r\n    uint256 internal TotalInvestors;\r\n    mapping(uint256 => Investor) Investors;\r\n    mapping(address => uint256[]) InvestorsMap;\r\n    struct Investor {\r\n        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\r\n        address InvestorAddress; //\r\n        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\r\n        uint256 InvestTime; //the time that investment made\r\n    }\r\n\r\n    function getTotalInvestor() external view returns(uint256){\r\n        return TotalInvestors;\r\n    }\r\n    \r\n    //@dev Send in wei\r\n    function InvestETH(uint256 _PoolId)\r\n        external\r\n        payable\r\n        ReceivETH(msg.value, msg.sender, MinETHInvest)\r\n        whenNotPaused\r\n        CheckTime(pools[_PoolId].MoreData.StartTime)\r\n        isPoolId(_PoolId)\r\n        validateSender()\r\n    {\r\n        require(pools[_PoolId].BaseData.Maincoin == address(0x0), \"Pool is only for ETH\");\r\n        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\r\n        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\r\n        \r\n        TokenAllocate(_PoolId, ThisInvestor, Tokens);\r\n\r\n        uint256 EthMinusFee =\r\n            SafeMath.div(\r\n                SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\r\n                10000\r\n            );\r\n        // send money to project owner - the fee stays on contract\r\n        TransferETH(payable(pools[_PoolId].BaseData.Creator), EthMinusFee); \r\n        RegisterInvest(_PoolId, Tokens);\r\n    }\r\n\r\n    function InvestERC20(uint256 _PoolId, uint256 _Amount)\r\n        external\r\n        whenNotPaused\r\n        CheckTime(pools[_PoolId].MoreData.StartTime)\r\n        isPoolId(_PoolId)\r\n        validateSender()\r\n    {\r\n        require(\r\n            pools[_PoolId].BaseData.Maincoin != address(0x0),\r\n            \"Pool is for ETH, use InvestETH\"\r\n        );\r\n        TransferInToken(pools[_PoolId].BaseData.Maincoin, msg.sender, _Amount);\r\n        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\r\n        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\r\n\r\n        TokenAllocate(_PoolId, ThisInvestor, Tokens);\r\n\r\n        uint256 RegularFeePay =\r\n            SafeMath.div(SafeMath.mul(_Amount, CalcFee(_PoolId)), 10000);\r\n\r\n        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\r\n        FeeMap[pools[_PoolId].BaseData.Maincoin] = SafeMath.add(\r\n            FeeMap[pools[_PoolId].BaseData.Maincoin],\r\n            RegularFeePay\r\n        );\r\n        TransferToken(\r\n            pools[_PoolId].BaseData.Maincoin,\r\n            pools[_PoolId].BaseData.Creator,\r\n            RegularPaymentMinusFee\r\n        ); // send money to project owner - the fee stays on contract\r\n        RegisterInvest(_PoolId, Tokens);\r\n    }\r\n\r\n    function TokenAllocate(uint256 _PoolId, uint256 _ThisInvestor, uint256 _Tokens) internal {\r\n        uint256 lockedDealId;\r\n        if (isPoolLocked(_PoolId)) {\r\n            require(isUsingLockedDeal(), \"Cannot invest in TLP without LockedDeal\");\r\n            (address tokenAddress,,,,,) = GetPoolBaseData(_PoolId);\r\n            (uint64 lockedUntil,,,,,) = GetPoolMoreData(_PoolId);\r\n            ApproveAllowanceERC20(tokenAddress, LockedDealAddress, _Tokens);\r\n            lockedDealId = ILockedDeal(LockedDealAddress).CreateNewPool(tokenAddress, lockedUntil, _Tokens, msg.sender);\r\n        } else {\r\n            // not locked, will transfer the tokens\r\n            TransferToken(pools[_PoolId].BaseData.Token, Investors[_ThisInvestor].InvestorAddress, _Tokens);\r\n        }\r\n        emit NewInvestorEvent(_ThisInvestor, Investors[_ThisInvestor].InvestorAddress, lockedDealId);\r\n    }\r\n\r\n    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\r\n        pools[_PoolId].MoreData.Lefttokens = SafeMath.sub(\r\n            pools[_PoolId].MoreData.Lefttokens,\r\n            _Tokens\r\n        );\r\n        if (pools[_PoolId].MoreData.Lefttokens == 0) emit FinishPool(_PoolId);\r\n        else emit PoolUpdate(_PoolId);\r\n    }\r\n\r\n    function NewInvestor(\r\n        address _Sender,\r\n        uint256 _Amount,\r\n        uint256 _Pid\r\n    ) internal returns (uint256) {\r\n        Investors[TotalInvestors] = Investor(\r\n            _Pid,\r\n            _Sender,\r\n            _Amount,\r\n            block.timestamp\r\n        );\r\n        InvestorsMap[msg.sender].push(TotalInvestors);\r\n        TotalInvestors = SafeMath.add(TotalInvestors, 1);\r\n        return SafeMath.sub(TotalInvestors, 1);\r\n    }\r\n\r\n    function CalcTokens(\r\n        uint256 _Pid,\r\n        uint256 _Amount,\r\n        address _Sender\r\n    ) internal returns (uint256) {\r\n        uint256 msgValue = _Amount;\r\n        uint256 result = 0;\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\r\n            IsWhiteList(_Sender, pools[_Pid].MoreData.WhiteListId, _Amount);\r\n            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.POZRate);\r\n        }\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\r\n            (,,address _mainCoin) = GetPoolExtraData(_Pid);\r\n            if(_mainCoin == address(0x0)){\r\n                require(\r\n                    msgValue >= MinETHInvest && msgValue <= MaxETHInvest,\r\n                    \"Investment amount not valid\"\r\n                );\r\n            } else {\r\n                require(\r\n                    msgValue >= MinERC20Invest && msgValue <= MaxERC20Invest,\r\n                    \"Investment amount not valid\"\r\n                );\r\n            }\r\n            require(VerifyPozHolding(_Sender), \"Only POZ holder can invest\");\r\n            LastRegisterWhitelist(_Sender, pools[_Pid].MoreData.WhiteListId);\r\n            result = SafeMath.mul(msgValue, pools[_Pid].BaseData.Rate);\r\n        }\r\n        if (result >= 10**21) {\r\n            if (pools[_Pid].MoreData.Is21DecimalRate) {\r\n                result = SafeMath.div(result, 10**21);\r\n            }\r\n            require(\r\n                result <= pools[_Pid].MoreData.Lefttokens,\r\n                \"Not enough tokens in the pool\"\r\n            );\r\n            return result;\r\n        }\r\n        revert(\"Wrong pool status to CalcTokens\");\r\n    }\r\n\r\n    function VerifyPozHolding(address _Sender) internal view returns(bool){\r\n        if(Benefit_Address == address(0)) return true;\r\n        return IPOZBenefit(Benefit_Address).IsPOZHolder(_Sender);\r\n    }\r\n\r\n    function LastRegisterWhitelist(address _Sender,uint256 _Id) internal returns(bool) {\r\n        if (_Id == 0) return true; //turn-off\r\n        IWhiteList(WhiteList_Address).LastRoundRegister(_Sender, _Id);\r\n        return true;\r\n    }\r\n\r\n    function CalcFee(uint256 _Pid) internal view returns (uint256) {\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\r\n            return PozFee;\r\n        }\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\r\n            return Fee;\r\n        }\r\n        //will not get here, will fail on CalcTokens\r\n    }\r\n\r\n    //@dev use it with  require(msg.sender == tx.origin)\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    //  no need register - will return true or false base on Check\r\n    //  if need register - revert or true\r\n    function IsWhiteList(\r\n        address _Investor,\r\n        uint256 _Id,\r\n        uint256 _Amount\r\n    ) internal returns (bool) {\r\n        if (_Id == 0) return true; //turn-off\r\n        IWhiteList(WhiteList_Address).Register(_Investor, _Id, _Amount); //will revert if fail\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract InvestorData is Invest {\r\n    \r\n    //Give all the id's of the investment  by sender address\r\n    function GetMyInvestmentIds() public view returns (uint256[] memory) {\r\n        return InvestorsMap[msg.sender];\r\n    }\r\n\r\n    function GetInvestmentData(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            Investors[_id].Poolid,\r\n            Investors[_id].InvestorAddress,\r\n            Investors[_id].MainCoin,\r\n            Investors[_id].InvestTime\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ThePoolz is InvestorData {\r\n    constructor() public {    }\r\n\r\n    function WithdrawETHFee(address payable _to) public onlyOwner {\r\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\r\n    }\r\n\r\n    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\r\n        uint256 temp = FeeMap[_Token];\r\n        FeeMap[_Token] = 0;\r\n        TransferToken(_Token, _to, temp);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"FinishPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Investor_ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor_Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LockedDeal_ID\",\"type\":\"uint256\"}],\"name\":\"NewInvestorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"}],\"name\":\"TransferInETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"}],\"name\":\"TransferOutETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Benefit_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_POZRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_LockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_MainCoin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_Is21Decimal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_Now\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_WhiteListId\",\"type\":\"uint256\"}],\"name\":\"CreatePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetInvestmentData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMyInvestmentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMyPoolsId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"GetPoolBaseData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"GetPoolExtraData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"GetPoolMoreData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetPoolStatus\",\"outputs\":[{\"internalType\":\"enum PoolsData.PoolStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GovernerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"InvestERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"InvestETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"IsERC20Maincoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsPayble\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"IsReadyWithdrawLeftOvers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsTokenFilterOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"IsValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockedDealAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCWhitelistId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxERC20Invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxETHInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinERC20Invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinETHInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PozFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PozTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_benefitAddress\",\"type\":\"address\"}],\"name\":\"SetBenefit_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockedDeal\",\"type\":\"address\"}],\"name\":\"SetLockedDealAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"SetMinMaxDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MinERC20Invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxERC20Invest\",\"type\":\"uint256\"}],\"name\":\"SetMinMaxERC20Invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MinETHInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxETHInvest\",\"type\":\"uint256\"}],\"name\":\"SetMinMaxETHInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetPOZFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolPrice\",\"type\":\"uint256\"}],\"name\":\"SetPoolPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pozTimer\",\"type\":\"uint256\"}],\"name\":\"SetPozTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WhiteList_Address\",\"type\":\"address\"}],\"name\":\"SetWhiteList_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapTokenFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwitchIsPayble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwitchLockedDealForTlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenWhitelistId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UseLockedDealForTlp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteList_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawERC20Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawETHFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"WithdrawLeftOvers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPoolLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsingLockedDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGovernerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whiteListId\",\"type\":\"uint256\"}],\"name\":\"setMCWhitelistId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whiteListId\",\"type\":\"uint256\"}],\"name\":\"setTokenWhitelistId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ThePoolz", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d70d69a31b986394651834bba42cb4c685e6f651fc959b3185c3557dea9a34b2"}