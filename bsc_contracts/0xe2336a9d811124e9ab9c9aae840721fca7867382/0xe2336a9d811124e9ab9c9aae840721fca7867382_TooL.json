{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-14\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n// interface IDividendPool {\r\n//     function addTokenReward(uint256 rewardAmount) external;\r\n\r\n//     function addLPTokenReward(uint256 rewardAmount) external;\r\n\r\n// }\r\n\r\nlibrary SafeMath {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n     /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lockLPAmount;\r\n        uint256 lpAmount;\r\n    }\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    TokenDistributor public immutable _lpProvidersDistributor;\r\n\r\n    //0.25\r\n    uint256 public _createHolderNFTFee = 25;\r\n    //0.75\r\n    uint256 public _lpProvidersFee = 75;\r\n    //0.25\r\n    uint256 public _fundFee = 25;\r\n    //0.25\r\n    uint256 public _destroyFee = 25;\r\n\r\n    //0.4\r\n    uint256 public _marketNFTFee = 40;\r\n    //0.3\r\n    uint256 public _buyLPDividendFee = 30;\r\n    //0\r\n\r\n    uint256 public _sellLPDividendFee = 200;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _wBnb;\r\n    address public immutable _mainPair;\r\n\r\n    TokenDistributor public immutable _littleNFTRewardDistributor;\r\n\r\n    address public _largeNFTAddress;\r\n    address public _littleNFTAddress;\r\n\r\n    uint256 public _releaseLPStartTime;\r\n    uint256 public _releaseLPDailyDuration = 1 days;\r\n    uint256 public _releaseLPDailyRate = 100;\r\n\r\n    address public _lpDividendPool;\r\n    uint256 public _limitAmount;\r\n\r\n    address[] private excludeLpProviderList;\r\n    mapping(address => bool) excludeLpProvider;\r\n    mapping(address => uint256) lpRecordMap;\r\n    mapping(address => uint256) lpProviderIndex;\r\n    address[] private lpProviders;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    mapping(uint256 => bool) public createHolderNftNotDistributorMap;\r\n    mapping(uint256 => bool) public marketNftNotDistributorMap;\r\n\r\n    mapping(address => uint256) private _nftReward;\r\n    uint256 private blockCount;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address wBnbAddress,\r\n        address LargeNFTAddress, address LittleNFTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress, uint256 initLimitAmount\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _largeNFTAddress = LargeNFTAddress;\r\n        _littleNFTAddress = LittleNFTAddress;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _wBnb = wBnbAddress;\r\n        IERC20(wBnbAddress).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), wBnbAddress);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _tokenDistributor = new  TokenDistributor(wBnbAddress);\r\n        _littleNFTRewardDistributor = new  TokenDistributor(wBnbAddress);\r\n        _lpProvidersDistributor = new  TokenDistributor(wBnbAddress);\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n        _feeWhiteList[address(_littleNFTRewardDistributor)] = true;\r\n        _feeWhiteList[address(_lpProvidersDistributor)] = true;\r\n\r\n        excludeNFTHolder[address(0)] = true;\r\n        excludeNFTHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeNFTHolder[_mainPair] = true;\r\n        nftRewardCondition = 2 * tokenUnit;\r\n        lpRewardCondition = 2 * tokenUnit;\r\n\r\n        swapTokensAtAmount = 2 * tokenUnit;\r\n\r\n        _limitAmount = initLimitAmount * tokenUnit;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProviderList.push(address(0));\r\n        excludeLpProviderList.push(address(0x000000000000000000000000000000000000dEaD));\r\n\r\n        blockCount = 0;\r\n\r\n\r\n\r\n        //todo \u76f4\u63a5\u5f00\u76d8\r\n        startTradeBlock = block.number;\r\n        _releaseLPStartTime = block.timestamp;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"balance is not enough\");\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10 ** (_decimals - 6);\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                UserInfo storage userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                addLpProviderPrivate(from);\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                // (uint256 lpAmount, , , ) = getUserInfo(to);\r\n                // UserInfo storage userInfo = _userInfo[to];\r\n                uint256 lpAmount = _userInfo[to].lpAmount;\r\n                // if (lpLockAmount > 0) {\r\n                //     require(lpBalance + releaseAmount >= lpLockAmount, \"rq Lock\");\r\n                //     require(lpAmount + releaseAmount >= lpLockAmount, \"rq Lock\");\r\n                // }\r\n                require(lpAmount >= removeLPLiquidity, \">userLP\");\r\n                // _userInfo[to].lpAmount -= removeLPLiquidity;\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!T\");\r\n                takeFee = true;\r\n                if (addLPLiquidity > 0) {\r\n                    takeFee = false;\r\n                }\r\n                // if (removeLPLiquidity > 0) {\r\n                    // takeFee = false;\r\n                // }\r\n            }\r\n        }\r\n\r\n        if (takeFee && block.number < startTradeBlock + 6 + blockCount) {\r\n            _killTransfer(from, to, amount);\r\n            return;\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        \r\n        // uint256 limitAmount = _limitAmount;\r\n        // if (limitAmount > 0) {\r\n        //     //Hold Limit\r\n        //     if (!_feeWhiteList[to] && !_swapPairList[to]) {\r\n        //         require(limitAmount >= balanceOf(to), \"Limit\");\r\n        //     }\r\n        // }\r\n        // if (takeFee) {\r\n            // uint256 rewardGas = _rewardGas;\r\n            // uint256 blockNum = block.number;\r\n            // processCreateHolderNFTReward(rewardGas);\r\n            // if (processLargeNFTBlock != blockNum) {\r\n            //     processMarketNFTReward(rewardGas);\r\n            //     if(processLittleNFTBlock != blockNum){\r\n            //         processLpProviders(rewardGas);\r\n            //     }\r\n            // }\r\n        // }\r\n        // uint256 times = (block.timestamp - _releaseLPStartTime) / _releaseLPDailyDuration;\r\n        // if(times <= 30 && removeLPLiquidity > 0){\r\n            // _balances[to] = _balances[to] - maxSellAmount;\r\n        // }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function queryAddLiquidity(uint256 amount) public view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = SafeMath.sqrt(r0 * r1);\r\n                uint256 rootKLast = SafeMath.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = SafeMath.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = SafeMath.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _wBnb;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n            (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function queryRemoveLiquidity(uint256 amount) public view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n            (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            // if (_swapPairList[sender]) {//Buy\r\n                uint256 createHolderNFTFeeAmount = tAmount * _createHolderNFTFee / 10000;\r\n                if (createHolderNFTFeeAmount > 0) {\r\n                    feeAmount += createHolderNFTFeeAmount;\r\n                    _takeTransfer(sender, address(_tokenDistributor), createHolderNFTFeeAmount);\r\n                }\r\n                // uint256 marketNFTFeeAmount = tAmount * _marketNFTFee / 10000;\r\n                // if (marketNFTFeeAmount > 0) {\r\n                //     feeAmount += marketNFTFeeAmount;\r\n                //     _takeTransfer(sender, address(_littleNFTRewardDistributor), marketNFTFeeAmount);\r\n                // }\r\n                uint256 lpProvidersFeeAmount = tAmount * _lpProvidersFee / 10000;\r\n                if (lpProvidersFeeAmount > 0) {\r\n                    feeAmount += lpProvidersFeeAmount;\r\n                    _takeTransfer(sender, address(_lpProvidersDistributor), lpProvidersFeeAmount);\r\n                }\r\n                //destroy\r\n                uint256 _destroyFeeAmount = tAmount * _destroyFee / 10000;\r\n                if(_destroyFeeAmount > 0){\r\n                    feeAmount += _destroyFeeAmount;\r\n                    // _burn(address(this),_destroyFeeAmount);\r\n                    _takeTransfer(sender, address(0), _destroyFeeAmount);\r\n                }\r\n                //fund\r\n                uint256 fundFeeAmount = tAmount * _fundFee / 10000;\r\n                if (fundFeeAmount > 0) {\r\n                    feeAmount += fundFeeAmount;\r\n                    _takeTransfer(sender, fundAddress, fundFeeAmount);\r\n                }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        \r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _tTotal = _tTotal.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        uint256 lpAmount = tokenAmount / 2;\r\n\r\n        address distributor = address(_tokenDistributor);\r\n        address wBnb = _wBnb;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wBnb;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            distributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 WBNB = IERC20(wBnb);\r\n        uint256 wBnbBalance = WBNB.balanceOf(distributor);\r\n        WBNB.transferFrom(distributor, address(this), wBnbBalance);\r\n        // if (wBnbBalance > 0 && lpAmount > 0) {\r\n            // address lpDividendPool = _lpDividendPool;\r\n            // (, , uint liquidity) = _swapRouter.addLiquidity(\r\n            //     wBnb,\r\n            //     address(this),\r\n            //     wBnbBalance,\r\n            //     lpAmount,\r\n            //     0,\r\n            //     0,\r\n            //     lpDividendPool,\r\n            //     block.timestamp\r\n            // );\r\n            // IDividendPool(lpDividendPool).addLPTokenReward(liquidity);\r\n        // }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setCreateHolderNftNotDistributorMap(uint256 ownId,bool enable) external onlyOwner {\r\n        createHolderNftNotDistributorMap[ownId] = enable;\r\n    }\r\n\r\n     function setMarketNftNotDistributorMap(uint256 ownId,bool enable) external onlyOwner {\r\n        marketNftNotDistributorMap[ownId] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address contractAddr, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contractAddr).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    uint256 public _rewardGas = 2000000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n        _releaseLPStartTime = block.timestamp;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _userInfo[account].lpAmount = lpAmount;\r\n        }\r\n    }\r\n\r\n    function updateLPLockAmount(address account, uint256 lockAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _userInfo[account].lockLPAmount = lockAmount;\r\n        }\r\n    }\r\n\r\n    function initLPLockAmounts(address[] memory accounts, uint256 lpAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            uint256 len = accounts.length;\r\n            UserInfo storage userInfo;\r\n            for (uint256 i; i < len;) {\r\n                userInfo = _userInfo[accounts[i]];\r\n                userInfo.lpAmount = lpAmount;\r\n                userInfo.lockLPAmount = lpAmount;\r\n            unchecked{\r\n                ++i;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpLockAmount, uint256 releaseAmount, uint256 lpBalance\r\n    ) {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = userInfo.lpAmount;\r\n\r\n        lpLockAmount = userInfo.lockLPAmount;\r\n        if (_releaseLPStartTime > 0) {\r\n            uint256 times = (block.timestamp - _releaseLPStartTime) / _releaseLPDailyDuration;\r\n            releaseAmount = lpLockAmount * (1 + times) * _releaseLPDailyRate / 10000;\r\n            if (releaseAmount > lpLockAmount) {\r\n                releaseAmount = lpLockAmount;\r\n            }\r\n        }\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n\r\n    function setLargeNFTAddress(address adr) external onlyOwner {\r\n        _largeNFTAddress = adr;\r\n    }\r\n\r\n    function setLittleNFTAddress(address adr) external onlyOwner {\r\n        _littleNFTAddress = adr;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyOwner {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    uint256 public lpRewardCondition;\r\n\r\n    function setLpRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    \r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyOwner {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    //LargeNFT\r\n    uint256 public currentLargeNFTIndex;\r\n    uint256 public processLargeNFTBlock;\r\n    uint256 public processLargeNFTBlockDebt = 100;\r\n\r\n    function processCreateHolderNFTReward(uint256 gas) private {\r\n        if (processLargeNFTBlock + processLargeNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_largeNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_tokenDistributor);\r\n        if (balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = balanceOf(address(sender)) / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLargeNFTIndex >= totalNFT) {\r\n                currentLargeNFTIndex = 0;\r\n            }\r\n            shareHolder = nft.ownerOf(1 + currentLargeNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder] && !createHolderNftNotDistributorMap[1 + currentLargeNFTIndex]) {\r\n                _tokenTransfer(sender, shareHolder, amount, false);\r\n                _nftReward[shareHolder] += amount;\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLargeNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLargeNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLargeNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processLargeNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    //LittleNFT\r\n    uint256 public currentLittleNFTIndex;\r\n    uint256 public processLittleNFTBlock;\r\n    uint256 public processLittleNFTBlockDebt = 0;\r\n\r\n    function processMarketNFTReward(uint256 gas) private {\r\n        if (processLittleNFTBlock + processLittleNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_littleNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_littleNFTRewardDistributor);\r\n        if (balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = balanceOf(address(sender)) / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLittleNFTIndex >= totalNFT) {\r\n                currentLittleNFTIndex = 0;\r\n            }\r\n            shareHolder = nft.ownerOf(1 + currentLittleNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder] && !marketNftNotDistributorMap[1 + currentLittleNFTIndex]) {\r\n                _tokenTransfer(sender, shareHolder, amount, false);\r\n                _nftReward[shareHolder] += amount;\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLittleNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLittleNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLittleNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processLittleNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    uint256 public currentProcessLpProvidersIndex;\r\n    uint256 public processLpProvidersBlock;\r\n    uint256 public processLpProvidersDebt = 100;\r\n    function processLpProviders(uint256 gas) private {\r\n        if (processLpProvidersBlock + processLpProvidersDebt > block.number) {\r\n            return;\r\n        }\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        \r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        address sender = address(_lpProvidersDistributor);\r\n\r\n         uint256 tokenBalance = balanceOf(address(sender));\r\n\r\n        if (tokenBalance < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint excludeLpBalance = 0;\r\n        for(uint256 i = 0;i < excludeLpProviderList.length;i++){\r\n            address excludeLpProviderAdress = excludeLpProviderList[i];\r\n            if(excludeLpProvider[excludeLpProviderAdress]){\r\n                excludeLpBalance += mainpair.balanceOf(excludeLpProviderAdress);\r\n            }\r\n        }\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        //\u6392\u9664\u4e0d\u5206\u7ea2\u7684\u5730\u5740\r\n        uint excludeTotalPair = totalPair - excludeLpBalance;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentProcessLpProvidersIndex >= shareholderCount) {\r\n                currentProcessLpProvidersIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentProcessLpProvidersIndex];\r\n            pairBalance = mainpair.balanceOf(shareHolder);\r\n\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                uint256 amount = tokenBalance * pairBalance / excludeTotalPair;\r\n                _tokenTransfer(sender, shareHolder, amount, false);\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentProcessLpProvidersIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLpProvidersBlock = block.number;\r\n    }\r\n\r\n    function setDailyDuration(uint256 d) external onlyOwner {\r\n        _releaseLPDailyDuration = d;\r\n    }\r\n\r\n    function setReleaseLPDailyRate(uint256 rate) external onlyOwner {\r\n        _releaseLPDailyRate = rate;\r\n    }\r\n\r\n    function setLPDividendPool(address pool) external onlyOwner {\r\n        _lpDividendPool = pool;\r\n        _feeWhiteList[pool] = true;\r\n    }\r\n\r\n    function minusLPAmount(address account, uint256 amount) public {\r\n        require(_lpDividendPool == msg.sender, \"rq DividendPool\");\r\n        (uint256 lpAmount, uint256 lpLockAmount, uint256 releaseAmount, uint256 lpBalance) = getUserInfo(account);\r\n        if (lpLockAmount > 0) {\r\n            require(lpBalance + releaseAmount >= lpLockAmount, \"rq Lock\");\r\n        }\r\n        require(lpAmount >= amount, \">userLP\");\r\n        _userInfo[account].lpAmount -= amount;\r\n    }\r\n\r\n    function addLPAmount(address account, uint256 amount) public {\r\n        require(_lpDividendPool == msg.sender, \"rq DividendPool\");\r\n        _userInfo[account].lpAmount += amount;\r\n    }\r\n\r\n    function getUserNFTInfo(address account) public view returns (\r\n        uint256 tokenBalance, uint256 nftReward,\r\n        uint256 LargeNFTBalance, uint256 littleNFTBalance\r\n    ){\r\n        tokenBalance = balanceOf(account);\r\n        nftReward = _nftReward[account];\r\n        LargeNFTBalance = INFT(_largeNFTAddress).balanceOf(account);\r\n        littleNFTBalance = INFT(_littleNFTAddress).balanceOf(account);\r\n    }\r\n\r\n    function getLPInfo() public view returns (\r\n        uint256 totalLP, uint256 lpUAmount\r\n    ){\r\n        totalLP = IERC20(_mainPair).totalSupply();\r\n        lpUAmount = IERC20(_wBnb).balanceOf(_mainPair) * 2;\r\n    }\r\n\r\n    function setExcludeLpProvider(address addr) external onlyOwner {\r\n        if(!excludeLpProvider[addr]){\r\n            excludeLpProviderList.push(addr);\r\n        }\r\n        excludeLpProvider[addr] = true;\r\n    }\r\n\r\n    function addLpProviderPrivate(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLpProvider(address adr) public onlyOwner {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner {\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    function setLimitAmount(uint256 limitAmount) public onlyOwner {\r\n        _limitAmount = limitAmount;\r\n    }\r\n\r\n    function setBlockCount(uint256 _blockCount) public onlyOwner{\r\n        blockCount = _blockCount;\r\n    }\r\n    \r\n}\r\n\r\ncontract TooL is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),\r\n    //CreateHolder NFT\r\n        address(0xfB0c0aBdE2F2FEB37f6c177929e3DB9D3ad77E24),\r\n    //Market NFT\r\n        address(0x1a329B04DCD9443973F94876d643d1B1AB58e7d7),\r\n        \"TooL\",\r\n        \"TooL\",\r\n        18,\r\n        1000000,\r\n    //Receive\r\n        address(0xfC21EACA8302712e3dB8af3868B6994cC37e7E00),\r\n    //Fund\r\n        address(0xfC21EACA8302712e3dB8af3868B6994cC37e7E00),\r\n    //Limit\r\n        1000000000\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_createHolderNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTRewardDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpProvidersDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpProvidersFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wBnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addLpProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createHolderNftNotDistributorMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLargeNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLittleNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentProcessLpProvidersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LargeNFTBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPLockAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketNftNotDistributorMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"minusLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLpProvidersBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLpProvidersDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"queryAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"queryRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockCount\",\"type\":\"uint256\"}],\"name\":\"setBlockCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ownId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCreateHolderNftNotDistributorMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setDailyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExcludeLpProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setLPDividendPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLargeNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLittleNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLpRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ownId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setMarketNftNotDistributorMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLargeNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLittleNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setReleaseLPDailyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TooL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf7789cb599a5de7f0ccd4f1a057f2d6a8aa6c5079fbfeba4682a586b88ef19a"}