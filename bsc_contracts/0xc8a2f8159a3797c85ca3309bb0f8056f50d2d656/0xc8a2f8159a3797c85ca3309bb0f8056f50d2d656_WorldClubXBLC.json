{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2022-11-23\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/staking.sol\r\n\r\npragma solidity ^0.8.18;\r\n\r\ncontract WorldClubXBLC is Ownable, ReentrancyGuard {\r\n    address payable principalWallet = payable(0x2F53e1D33bBA31160e93a81B7c3C5E907304438d);\r\n    address payable liquidityWallet = payable(0x2F53e1D33bBA31160e93a81B7c3C5E907304438d); \r\n    AggregatorV3Interface internal priceFeed;\r\n    mapping(address => Vesting) public infoVesting;\r\n    mapping(address => bool) public isVesting;\r\n    mapping(address => address) public referrerLevel;\r\n    uint public maxEarn;\r\n    uint public totalWallets;\r\n    uint public totalWalletsUsed;\r\n    uint public earnPerSecond;\r\n    \r\n    uint256 constant MAX_LEVEL = 10;\r\n    mapping(uint256 => address[]) public queues; // Colas para cada nivel\r\n    mapping(address => uint256) public userLevel; // Nivel actual de cada usuario\r\n    mapping(address => uint256) public userReferrals; // Referidos de cada usuario por nivel\r\n\r\n    struct Vesting {\r\n        uint256 firstBalance;\r\n        uint numberWithdrawal;\r\n        uint totalWithdrawal;\r\n        uint initialTimestamp;\r\n    }\r\n\r\n    uint256 public priceStaking = 10*10**26; // precio decimal USD\r\n    event Staking(address stake, uint256 value);\r\n    event WithdrawStaking(address stake, uint256 value);\r\n    event WithdrawInitial(address stake, uint256 value);\r\n\r\n    constructor() {\r\n        // TESTNET 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526\r\n        // MAIN NET 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        priceFeed = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        totalWallets = 100000000;\r\n        maxEarn = 12000000*10**18;\r\n        earnPerSecond= 190258751 * 10 ** 8;\r\n       \r\n    }\r\n\r\n    // Token XBLC Address\r\n    IERC20 public token = IERC20(0x9cAA1F5C472D069a52adb0eA06DDB58D625dd979);\r\n\r\n    function getLatestPrice() public view returns (int256) {\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            uint256 startedAt,\r\n            uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    // ... (c\u00f3digo existente)\r\n\r\n    // Funci\u00f3n para unirse a la cola de un nivel\r\n    function joinLevelQueue(uint256 _level) internal {\r\n        require(_level > 0 && _level <= MAX_LEVEL, \"Invalid level\");\r\n        queues[_level].push(msg.sender);\r\n    }\r\n\r\n    // Funci\u00f3n para verificar y avanzar usuarios en la cola\r\n    function advanceQueue(uint256 _level) internal {\r\n        require(_level > 0 && _level < MAX_LEVEL, \"Invalid level for advancement\");\r\n\r\n        // Compruebe si el usuario en la parte frontal de la cola tiene suficientes referidos\r\n        while (queues[_level].length > 0 && userReferrals[queues[_level][0]] >= getReferralsNeededForNextLevel(_level)) {\r\n            // Avanzar al usuario al siguiente nivel\r\n            address user = queues[_level][0];\r\n            userLevel[user] = _level + 1;\r\n            userReferrals[user] = 0; // Restablecer referidos o manejarlo seg\u00fan sea necesario\r\n\r\n            // Eliminar al usuario de la cola actual\r\n            removeFrontFromQueue(_level);\r\n\r\n            // A\u00f1adir al usuario a la siguiente cola\r\n            joinLevelQueue(_level + 1);\r\n\r\n            // Evento o l\u00f3gica adicional para el avance de nivel\r\n            // ...\r\n        }\r\n    }\r\n\r\n    // Funci\u00f3n para eliminar el primer elemento de la cola (quien est\u00e1 al frente)\r\n    function removeFrontFromQueue(uint256 _level) internal {\r\n        require(queues[_level].length > 0, \"Queue is empty\");\r\n        for (uint i = 0; i < queues[_level].length - 1; i++) {\r\n            queues[_level][i] = queues[_level][i + 1];\r\n        }\r\n        queues[_level].pop();\r\n    }\r\n\r\n    // Funci\u00f3n para obtener la cantidad de referidos necesarios para el siguiente nivel\r\n    function getReferralsNeededForNextLevel(uint256 _currentLevel) public pure returns (uint256) {\r\n        require(_currentLevel < MAX_LEVEL, \"Already at max level\");\r\n        return 5**(_currentLevel);\r\n    }\r\n\r\n    function stakingInitial(address _referrer) public payable nonReentrant returns (bool) {\r\n        uint256 usdPrice = msg.value * uint256(getLatestPrice());\r\n        require(totalWallets - totalWalletsUsed > 0, \"There are no longer wallets available\");\r\n        require(usdPrice >= priceStaking, \"More BNB must be sent to continue\");\r\n        require(!isVesting[msg.sender], \"The wallet is already vesting\");\r\n\r\n        // Calculamos la parte que va a la wallet de liquidez (30%)\r\n        uint256 totalLiquidityPart = (msg.value * 30) / 100;\r\n        // La parte restante para el reparto en los niveles (70%)\r\n        uint256 totalReferralPart = msg.value - totalLiquidityPart;\r\n        // Variable para llevar el control del total distribuido\r\n        uint256 totalDistributed = 0;\r\n\r\n        // Enviar el 30% a la wallet de liquidez\r\n        liquidityWallet.transfer(totalLiquidityPart);\r\n\r\n        // Arreglo de comisiones por nivel\r\n        uint8[10] memory commissions = [5, 7, 8, 9, 9, 7, 5, 5, 5, 10];\r\n        \r\n        // Recorremos los niveles y distribuimos las comisiones\r\n        address currentReferrer = _referrer;\r\n        for (uint256 i = 0; i < commissions.length; i++) {\r\n            if (currentReferrer == address(0)) {\r\n                // Si no hay referente, a\u00f1adimos la comisi\u00f3n al total distribuido\r\n                uint256 commissionToLiquidity = (totalReferralPart * commissions[i]) / 100;\r\n                liquidityWallet.transfer(commissionToLiquidity);\r\n                totalDistributed += commissionToLiquidity;\r\n            } else {\r\n                // Enviar comisi\u00f3n al referente actual\r\n                uint256 commissionValue = (totalReferralPart * commissions[i]) / 100;\r\n                payable(currentReferrer).transfer(commissionValue);\r\n\r\n                // A\u00f1adir al total distribuido\r\n                totalDistributed += commissionValue;\r\n\r\n                // Pasar al siguiente referente en la cadena\r\n                currentReferrer = referrerLevel[currentReferrer];\r\n            }\r\n        }\r\n\r\n        // Si queda alguna cantidad por distribuir despu\u00e9s de pasar por todos los referentes, se env\u00eda al fondo de liquidez\r\n        if(totalDistributed < totalReferralPart) {\r\n            liquidityWallet.transfer(totalReferralPart - totalDistributed);\r\n        }\r\n\r\n        // Configuraci\u00f3n inicial del vesting para el usuario (no modificada)\r\n        isVesting[msg.sender] = true;\r\n        infoVesting[msg.sender] = Vesting({\r\n            firstBalance: 6000000 * 10**18,\r\n            numberWithdrawal: 0,\r\n            totalWithdrawal: 0,\r\n            initialTimestamp: block.timestamp\r\n        });\r\n\r\n        // Registrar que el usuario ha hecho staking\r\n        emit Staking(msg.sender, msg.value);\r\n\r\n        // Incrementar el contador de carteras usadas\r\n        totalWalletsUsed += 1;\r\n\r\n        // Registrar al usuario en la cola del nivel 1 si es su primer staking (no modificado)\r\n        if(userLevel[msg.sender] == 0) {\r\n            userLevel[msg.sender] = 1;\r\n            joinLevelQueue(1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawalVesting() external nonReentrant returns (bool) {\r\n        require( isVesting[msg.sender],\"The wallet is no longer staking\");\r\n        infoVesting[msg.sender].numberWithdrawal = infoVesting[msg.sender].numberWithdrawal + 1;\r\n        uint totalSeconds  = block.timestamp - infoVesting[msg.sender].initialTimestamp;\r\n        uint totalEarned = totalSeconds * earnPerSecond ;\r\n        \r\n        if(totalEarned > maxEarn){\r\n            totalEarned = maxEarn;\r\n        }\r\n        uint totalCanWithdrawal = totalEarned - infoVesting[msg.sender].totalWithdrawal;\r\n        require(\r\n            totalCanWithdrawal > 0,\r\n            \"You have nothing to withdraw\"\r\n        );\r\n        infoVesting[msg.sender].totalWithdrawal = totalCanWithdrawal +infoVesting[msg.sender].totalWithdrawal ;\r\n        token.transfer(msg.sender,totalCanWithdrawal);\r\n        emit WithdrawStaking(msg.sender,totalCanWithdrawal);\r\n        return true;\r\n    }\r\n    function withdrawalInitialDeposit() external  returns (bool) {\r\n        require( isVesting[msg.sender],\"The wallet is no longer staking\");\r\n        require( infoVesting[msg.sender].firstBalance > 0 ,\"The wallet is no longer staking\");\r\n        uint256 timeWithdrawal = infoVesting[msg.sender].initialTimestamp + (1 * 730 days);\r\n        require(\r\n            block.timestamp > timeWithdrawal,\r\n            \"You still can't withdraw your money\"\r\n        );\r\n        isVesting[msg.sender] = false;\r\n        token.transfer(msg.sender,infoVesting[msg.sender].firstBalance);\r\n        infoVesting[msg.sender].firstBalance = 0;\r\n        emit WithdrawInitial(msg.sender,infoVesting[msg.sender].firstBalance);\r\n        return true;\r\n    }\r\n\r\n    function getVesting(address user) public view returns(uint timeBlock, uint timeInit){\r\n        timeBlock = block.timestamp;\r\n        timeInit = infoVesting[user].initialTimestamp;\r\n   }\r\n   function withdraw(address recipient,uint valueWithdrawal) external onlyOwner{\r\n       token.transfer(recipient,valueWithdrawal);\r\n   }\r\n\r\n   // Funci\u00f3n para obtener la informaci\u00f3n de nivel y referidos de una wallet\r\nfunction getUserLevelAndReferrals(address _user) public view returns (uint256 level, uint256 referrals, uint256 queuePosition, uint256 queuedLevel) {\r\n    // Obtener el nivel y la cantidad de referidos del usuario\r\n    level = userLevel[_user];\r\n    referrals = userReferrals[_user];\r\n    \r\n    // Si el usuario est\u00e1 en alguna cola, encontramos su posici\u00f3n\r\n    queuePosition = 0; // Predeterminado como 0, que significa no est\u00e1 en la cola\r\n    queuedLevel = 0; // Nivel de la cola en la que el usuario est\u00e1 esperando\r\n    for (uint256 i = 1; i <= MAX_LEVEL; i++) {\r\n        for (uint256 j = 0; j < queues[i].length; j++) {\r\n            if (_user == queues[i][j]) {\r\n                queuePosition = j + 1; // La posici\u00f3n en la cola (empezando por 1)\r\n                queuedLevel = i; // El nivel de la cola\r\n                return (level, referrals, queuePosition, queuedLevel);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Si el usuario no est\u00e1 en ninguna cola, devolver\u00e1 0 para queuePosition y queuedLevel\r\n    return (level, referrals, queuePosition, queuedLevel);\r\n}\r\n\r\n\r\n    // Otras funciones para manejar la inscripci\u00f3n de referidos, gesti\u00f3n de colas, etc.\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawInitial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawStaking\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"earnPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentLevel\",\"type\":\"uint256\"}],\"name\":\"getReferralsNeededForNextLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLevelAndReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queuePosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queuedLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"infoVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queues\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerLevel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"stakingInitial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWalletsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueWithdrawal\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalInitialDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WorldClubXBLC", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6695876e18f9419a1b1b30645a3bcd9a33a93f64a9a3a9b2366dd4c3f0ecb1d8"}