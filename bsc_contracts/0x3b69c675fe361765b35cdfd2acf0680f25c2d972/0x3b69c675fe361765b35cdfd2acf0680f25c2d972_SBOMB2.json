{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-07\r\n */\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n//\r\n// SuperBOMB PROTOCOL COPYRIGHT (C) 2022\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\r\n\tfunction allowance(\r\n\t\taddress owner,\r\n\t\taddress spender\r\n\t) external view returns (uint256);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IPancakeSwapPair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\r\n\tfunction symbol() external pure returns (string memory);\r\n\r\n\tfunction decimals() external pure returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\r\n\tfunction allowance(\r\n\t\taddress owner,\r\n\t\taddress spender\r\n\t) external view returns (uint);\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint value\r\n\t) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint value,\r\n\t\tuint deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\r\n\tevent Burn(\r\n\t\taddress indexed sender,\r\n\t\tuint amount0,\r\n\t\tuint amount1,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint amount0In,\r\n\t\tuint amount1In,\r\n\t\tuint amount0Out,\r\n\t\tuint amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction factory() external view returns (address);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n\tfunction price0CumulativeLast() external view returns (uint);\r\n\r\n\tfunction price1CumulativeLast() external view returns (uint);\r\n\r\n\tfunction kLast() external view returns (uint);\r\n\r\n\tfunction mint(address to) external returns (uint liquidity);\r\n\r\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint amount0Out,\r\n\t\tuint amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint amountA,\r\n\t\tuint reserveA,\r\n\t\tuint reserveB\r\n\t) external pure returns (uint amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint amountIn,\r\n\t\tuint reserveIn,\r\n\t\tuint reserveOut\r\n\t) external pure returns (uint amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint amountOut,\r\n\t\tuint reserveIn,\r\n\t\tuint reserveOut\r\n\t) external pure returns (uint amountIn);\r\n\r\n\tfunction getAmountsOut(\r\n\t\tuint amountIn,\r\n\t\taddress[] calldata path\r\n\t) external view returns (uint[] memory amounts);\r\n\r\n\tfunction getAmountsIn(\r\n\t\tuint amountOut,\r\n\t\taddress[] calldata path\r\n\t) external view returns (uint[] memory amounts);\r\n\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n\tevent PairCreated(\r\n\t\taddress indexed token0,\r\n\t\taddress indexed token1,\r\n\t\taddress pair,\r\n\t\tuint\r\n\t);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB\r\n\t) external view returns (address pair);\r\n\r\n\tfunction allPairs(uint) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint);\r\n\r\n\tfunction createPair(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB\r\n\t) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipRenounced(address indexed previousOwner);\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\tconstructor() {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner());\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn msg.sender == _owner;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipRenounced(_owner);\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\tconstructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t\t_decimals = decimals_;\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n}\r\n\r\ncontract SBOMB2 is ERC20Detailed, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\tevent LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n\tstring public _name = \"SuperBomb\";\r\n\tstring public _symbol = \"SBOMB\";\r\n\tuint8 public _decimals = 5;\r\n\r\n\tIPancakeSwapPair public pairContract;\r\n\tmapping(address => bool) _isFeeExempt;\r\n\r\n\tmodifier validRecipient(address to) {\r\n\t\trequire(to != address(0x0));\r\n\t\t_;\r\n\t}\r\n\r\n\tuint256 public constant DECIMALS = 5;\r\n\tuint256 public constant MAX_UINT256 = ~uint256(0);\r\n\tuint8 public constant RATE_DECIMALS = 7;\r\n\r\n\tuint256 private constant INITIAL_FRAGMENTS_SUPPLY =\r\n\t\t325 * 10 ** 3 * 10 ** DECIMALS;\r\n\r\n\tuint256 public liquidityFee = 40;\r\n\tuint256 public treasuryFee = 25;\r\n\tuint256 public sbombInsuranceFundFee = 50;\r\n\tuint256 public sellFee = 20;\r\n\tuint256 public firePitFee = 25;\r\n\tuint256 public totalFee =\r\n\t\tliquidityFee.add(treasuryFee).add(sbombInsuranceFundFee).add(\r\n\t\t\tfirePitFee\r\n\t\t);\r\n\tuint256 public feeDenominator = 1000;\r\n\r\n\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\taddress ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n\taddress public autoLiquidityReceiver;\r\n\taddress public treasuryReceiver;\r\n\taddress public sbombInsuranceFundReceiver;\r\n\taddress public firePit;\r\n\taddress public pairAddress;\r\n\tbool public swapEnabled = true;\r\n\tIPancakeSwapRouter public router;\r\n\taddress public pair;\r\n\tbool inSwap = false;\r\n\tmodifier swapping() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\r\n\tuint256 private constant TOTAL_GONS =\r\n\t\tMAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n\tuint256 private constant MAX_SUPPLY = 325 * 10 ** 7 * 10 ** DECIMALS;\r\n\r\n\tbool public _autoRebase;\r\n\tbool public _autoAddLiquidity;\r\n\tuint256 public _initRebaseStartTime;\r\n\tuint256 public _lastRebasedTime;\r\n\tuint256 public _lastAddLiquidityTime;\r\n\tuint256 public _totalSupply;\r\n\tuint256 private _gonsPerFragment;\r\n\r\n\tmapping(address => uint256) private _gonBalances;\r\n\tmapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\tmapping(address => bool) public blacklist;\r\n\r\n\tconstructor(\r\n\t\taddress _router\r\n\t) ERC20Detailed(\"SuperBomb2\", \"SBOMB2\", uint8(DECIMALS)) Ownable() {\r\n\t\tif (_router != address(0)) {\r\n\t\t\trouter = IPancakeSwapRouter(_router);\r\n\r\n\t\t\tpair = IPancakeSwapFactory(router.factory()).createPair(\r\n\t\t\t\trouter.WETH(),\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\tpairAddress = pair;\r\n\t\t\tpairContract = IPancakeSwapPair(pair);\r\n\t\t}\r\n\r\n\t\tautoLiquidityReceiver = 0x49707808908f0C2450B3F2672E012eDBf49eD808;\r\n\t\ttreasuryReceiver = 0xE90bb54e39d8e90594b0EeCa9a9954DAF6f44CFf;\r\n\t\tsbombInsuranceFundReceiver = 0x823225c3F9f5c3328cd01C304948eDd034e719fd;\r\n\t\tfirePit = 0x18635Af9E7120186af7D3eB3c9580C1BF19AEBe2;\r\n\r\n\t\t_allowedFragments[address(this)][address(router)] = uint256(-1);\r\n\r\n\t\t_totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n\t\t_gonBalances[treasuryReceiver] = TOTAL_GONS;\r\n\t\t_gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\t\t_initRebaseStartTime = block.timestamp;\r\n\t\t_lastRebasedTime = block.timestamp;\r\n\t\t_autoRebase = true;\r\n\t\t_autoAddLiquidity = true;\r\n\t\t_isFeeExempt[treasuryReceiver] = true;\r\n\t\t_isFeeExempt[address(this)] = true;\r\n\r\n\t\t_transferOwnership(treasuryReceiver);\r\n\t\temit Transfer(address(0x0), treasuryReceiver, _totalSupply);\r\n\t}\r\n\r\n\tfunction rebase() internal {\r\n\t\tif (inSwap) return;\r\n\t\tuint256 rebaseRate;\r\n\t\tuint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\r\n\t\tuint256 deltaTime = block.timestamp - _lastRebasedTime;\r\n\t\tuint256 times = deltaTime.div(15 minutes);\r\n\t\tuint256 epoch = times.mul(15);\r\n\r\n\t\tif (deltaTimeFromInit < (365 days)) {\r\n\t\t\trebaseRate = 2355;\r\n\t\t} else if (deltaTimeFromInit >= (7 * 365 days)) {\r\n\t\t\trebaseRate = 2;\r\n\t\t} else if (deltaTimeFromInit >= ((15 * 365 days) / 10)) {\r\n\t\t\trebaseRate = 14;\r\n\t\t} else if (deltaTimeFromInit >= (365 days)) {\r\n\t\t\trebaseRate = 211;\r\n\t\t}\r\n\r\n\t\tfor (uint256 i = 0; i < times; i++) {\r\n\t\t\t_totalSupply = _totalSupply\r\n\t\t\t\t.mul((10 ** RATE_DECIMALS).add(rebaseRate))\r\n\t\t\t\t.div(10 ** RATE_DECIMALS);\r\n\t\t}\r\n\r\n\t\t_gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\t\t_lastRebasedTime = _lastRebasedTime.add(times.mul(15 minutes));\r\n\r\n\t\tpairContract.sync();\r\n\r\n\t\temit LogRebase(epoch, _totalSupply);\r\n\t}\r\n\r\n\tfunction transfer(\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external override validRecipient(to) returns (bool) {\r\n\t\t_transferFrom(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external override validRecipient(to) returns (bool) {\r\n\t\tif (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n\t\t\t_allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n\t\t\t\tmsg.sender\r\n\t\t\t].sub(value, \"Insufficient Allowance\");\r\n\t\t}\r\n\t\t_transferFrom(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _basicTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal returns (bool) {\r\n\t\tuint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\t\t_gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n\t\t_gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal returns (bool) {\r\n\t\trequire(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n\r\n\t\tif (inSwap) {\r\n\t\t\treturn _basicTransfer(sender, recipient, amount);\r\n\t\t}\r\n\t\tif (shouldRebase()) {\r\n\t\t\trebase();\r\n\t\t}\r\n\r\n\t\tif (shouldAddLiquidity()) {\r\n\t\t\taddLiquidity();\r\n\t\t}\r\n\r\n\t\tif (shouldSwapBack()) {\r\n\t\t\tswapBack();\r\n\t\t}\r\n\r\n\t\tuint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\t\t_gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\t\tuint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n\t\t\t? takeFee(sender, recipient, gonAmount)\r\n\t\t\t: gonAmount;\r\n\t\t_gonBalances[recipient] = _gonBalances[recipient].add(\r\n\t\t\tgonAmountReceived\r\n\t\t);\r\n\r\n\t\temit Transfer(\r\n\t\t\tsender,\r\n\t\t\trecipient,\r\n\t\t\tgonAmountReceived.div(_gonsPerFragment)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction takeFee(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 gonAmount\r\n\t) internal returns (uint256) {\r\n\t\tuint256 _totalFee = totalFee;\r\n\t\tuint256 _treasuryFee = treasuryFee;\r\n\r\n\t\tif (recipient == pair) {\r\n\t\t\t_totalFee = totalFee.add(sellFee);\r\n\t\t\t_treasuryFee = treasuryFee.add(sellFee);\r\n\t\t}\r\n\r\n\t\tuint256 feeAmount = gonAmount.div(feeDenominator).mul(_totalFee);\r\n\r\n\t\t_gonBalances[firePit] = _gonBalances[firePit].add(\r\n\t\t\tgonAmount.div(feeDenominator).mul(firePitFee)\r\n\t\t);\r\n\t\t_gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n\t\t\tgonAmount.div(feeDenominator).mul(\r\n\t\t\t\t_treasuryFee.add(sbombInsuranceFundFee)\r\n\t\t\t)\r\n\t\t);\r\n\t\t_gonBalances[autoLiquidityReceiver] = _gonBalances[\r\n\t\t\tautoLiquidityReceiver\r\n\t\t].add(gonAmount.div(feeDenominator).mul(liquidityFee));\r\n\r\n\t\temit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\t\treturn gonAmount.sub(feeAmount);\r\n\t}\r\n\r\n\tfunction addLiquidity() internal swapping {\r\n\t\tuint256 autoLiquidityAmount = _gonBalances[autoLiquidityReceiver].div(\r\n\t\t\t_gonsPerFragment\r\n\t\t);\r\n\t\t_gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n\t\t\t_gonBalances[autoLiquidityReceiver]\r\n\t\t);\r\n\t\t_gonBalances[autoLiquidityReceiver] = 0;\r\n\t\tuint256 amountToLiquify = autoLiquidityAmount.div(2);\r\n\t\tuint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\r\n\r\n\t\tif (amountToSwap == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = router.WETH();\r\n\r\n\t\tuint256 balanceBefore = address(this).balance;\r\n\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamountToSwap,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n\t\tuint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\r\n\r\n\t\tif (amountToLiquify > 0 && amountETHLiquidity > 0) {\r\n\t\t\trouter.addLiquidityETH{ value: amountETHLiquidity }(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tamountToLiquify,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\tautoLiquidityReceiver,\r\n\t\t\t\tblock.timestamp\r\n\t\t\t);\r\n\t\t}\r\n\t\t_lastAddLiquidityTime = block.timestamp;\r\n\t}\r\n\r\n\tfunction swapBack() internal swapping {\r\n\t\tuint256 amountToSwap = _gonBalances[address(this)].div(\r\n\t\t\t_gonsPerFragment\r\n\t\t);\r\n\r\n\t\tif (amountToSwap == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 balanceBefore = address(this).balance;\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = router.WETH();\r\n\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamountToSwap,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n\t\tuint256 amountETHToTreasuryAndSIF = address(this).balance.sub(\r\n\t\t\tbalanceBefore\r\n\t\t);\r\n\r\n\t\t(bool success, ) = payable(treasuryReceiver).call{\r\n\t\t\tvalue: amountETHToTreasuryAndSIF.mul(treasuryFee).div(\r\n\t\t\t\ttreasuryFee.add(sbombInsuranceFundFee)\r\n\t\t\t),\r\n\t\t\tgas: 30000\r\n\t\t}(\"\");\r\n\t\t(success, ) = payable(sbombInsuranceFundReceiver).call{\r\n\t\t\tvalue: amountETHToTreasuryAndSIF.mul(sbombInsuranceFundFee).div(\r\n\t\t\t\ttreasuryFee.add(sbombInsuranceFundFee)\r\n\t\t\t),\r\n\t\t\tgas: 30000\r\n\t\t}(\"\");\r\n\t}\r\n\r\n\tfunction withdrawAllToTreasury() external swapping onlyOwner {\r\n\t\tuint256 amountToSwap = _gonBalances[address(this)].div(\r\n\t\t\t_gonsPerFragment\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tamountToSwap > 0,\r\n\t\t\t\"There is no SuperBOMB token deposited in token contract\"\r\n\t\t);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = router.WETH();\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamountToSwap,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\ttreasuryReceiver,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction shouldTakeFee(\r\n\t\taddress from,\r\n\t\taddress to\r\n\t) internal view returns (bool) {\r\n\t\treturn (pair == from || pair == to) && !_isFeeExempt[from];\r\n\t}\r\n\r\n\tfunction shouldRebase() internal view returns (bool) {\r\n\t\treturn\r\n\t\t\t_autoRebase &&\r\n\t\t\t(_totalSupply < MAX_SUPPLY) &&\r\n\t\t\tmsg.sender != pair &&\r\n\t\t\t!inSwap &&\r\n\t\t\tblock.timestamp >= (_lastRebasedTime + 15 minutes);\r\n\t}\r\n\r\n\tfunction shouldAddLiquidity() internal view returns (bool) {\r\n\t\treturn\r\n\t\t\t_autoAddLiquidity &&\r\n\t\t\t!inSwap &&\r\n\t\t\tmsg.sender != pair &&\r\n\t\t\tblock.timestamp >= (_lastAddLiquidityTime + 2 days);\r\n\t}\r\n\r\n\tfunction shouldSwapBack() internal view returns (bool) {\r\n\t\treturn !inSwap && msg.sender != pair;\r\n\t}\r\n\r\n\tfunction setAutoRebase(bool _flag) external onlyOwner {\r\n\t\tif (_flag) {\r\n\t\t\t_autoRebase = _flag;\r\n\t\t\t_lastRebasedTime = block.timestamp;\r\n\t\t} else {\r\n\t\t\t_autoRebase = _flag;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setAutoAddLiquidity(bool _flag) external onlyOwner {\r\n\t\tif (_flag) {\r\n\t\t\t_autoAddLiquidity = _flag;\r\n\t\t\t_lastAddLiquidityTime = block.timestamp;\r\n\t\t} else {\r\n\t\t\t_autoAddLiquidity = _flag;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction allowance(\r\n\t\taddress owner_,\r\n\t\taddress spender\r\n\t) external view override returns (uint256) {\r\n\t\treturn _allowedFragments[owner_][spender];\r\n\t}\r\n\r\n\tfunction decreaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 subtractedValue\r\n\t) external returns (bool) {\r\n\t\tuint256 oldValue = _allowedFragments[msg.sender][spender];\r\n\t\tif (subtractedValue >= oldValue) {\r\n\t\t\t_allowedFragments[msg.sender][spender] = 0;\r\n\t\t} else {\r\n\t\t\t_allowedFragments[msg.sender][spender] = oldValue.sub(\r\n\t\t\t\tsubtractedValue\r\n\t\t\t);\r\n\t\t}\r\n\t\temit Approval(\r\n\t\t\tmsg.sender,\r\n\t\t\tspender,\r\n\t\t\t_allowedFragments[msg.sender][spender]\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 addedValue\r\n\t) external returns (bool) {\r\n\t\t_allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n\t\t\tspender\r\n\t\t].add(addedValue);\r\n\t\temit Approval(\r\n\t\t\tmsg.sender,\r\n\t\t\tspender,\r\n\t\t\t_allowedFragments[msg.sender][spender]\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) external override returns (bool) {\r\n\t\t_allowedFragments[msg.sender][spender] = value;\r\n\t\temit Approval(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction checkFeeExempt(address _addr) external view returns (bool) {\r\n\t\treturn _isFeeExempt[_addr];\r\n\t}\r\n\r\n\tfunction getCirculatingSupply() public view returns (uint256) {\r\n\t\treturn\r\n\t\t\t(TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n\t\t\t\t_gonsPerFragment\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction isNotInSwap() external view returns (bool) {\r\n\t\treturn !inSwap;\r\n\t}\r\n\r\n\tfunction manualSync() external {\r\n\t\tIPancakeSwapPair(pair).sync();\r\n\t}\r\n\r\n\tfunction setFeeReceivers(\r\n\t\taddress _autoLiquidityReceiver,\r\n\t\taddress _treasuryReceiver,\r\n\t\taddress _sbombInsuranceFundReceiver,\r\n\t\taddress _firePit\r\n\t) external onlyOwner {\r\n\t\tautoLiquidityReceiver = _autoLiquidityReceiver;\r\n\t\ttreasuryReceiver = _treasuryReceiver;\r\n\t\tsbombInsuranceFundReceiver = _sbombInsuranceFundReceiver;\r\n\t\tfirePit = _firePit;\r\n\t}\r\n\r\n\tfunction getLiquidityBacking(\r\n\t\tuint256 accuracy\r\n\t) public view returns (uint256) {\r\n\t\tuint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\r\n\t\treturn\r\n\t\t\taccuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\r\n\t}\r\n\r\n\tfunction setWhitelist(address _addr) external onlyOwner {\r\n\t\t_isFeeExempt[_addr] = true;\r\n\t}\r\n\r\n\tfunction setBotBlacklist(\r\n\t\taddress _botAddress,\r\n\t\tbool _flag\r\n\t) external onlyOwner {\r\n\t\trequire(\r\n\t\t\tisContract(_botAddress),\r\n\t\t\t\"only contract address, not allowed exteranlly owned account\"\r\n\t\t);\r\n\t\tblacklist[_botAddress] = _flag;\r\n\t}\r\n\r\n\tfunction setPairAddress(address _pairAddress) public onlyOwner {\r\n\t\tpairAddress = _pairAddress;\r\n\t}\r\n\r\n\tfunction setLP(address _address) external onlyOwner {\r\n\t\tpairContract = IPancakeSwapPair(_address);\r\n\t}\r\n\r\n\tfunction totalSupply() external view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address who) external view override returns (uint256) {\r\n\t\treturn _gonBalances[who].div(_gonsPerFragment);\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n\t\tuint size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(addr)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firePit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firePitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbombInsuranceFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbombInsuranceFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sbombInsuranceFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_firePit\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SBOMB2", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a22efd69c637b0ef5d90d1901b7bff5c56390c5ca9745325e92b46a084eb10ca"}