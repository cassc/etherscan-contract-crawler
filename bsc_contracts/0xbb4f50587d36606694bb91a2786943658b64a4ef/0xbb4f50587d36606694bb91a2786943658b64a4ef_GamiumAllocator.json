{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GamiumAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./GamiumToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IERC20Contract {\\r\\n  function mint(address _to, uint256 _amount) external;\\r\\n}\\r\\n\\r\\ncontract GamiumAllocator  is Ownable {\\r\\n    event ERC20Released(string category, address to, uint256 amount);\\r\\n    \\r\\n    // total distributed\\r\\n    uint public totalMinted;\\r\\n\\r\\n    // token contract\\r\\n    address public tokenContract;\\r\\n\\r\\n    // Distribution structure\\r\\n    struct Distribution {\\r\\n        address  _beneficiary;\\r\\n        uint _tgeAmount;\\r\\n        uint _linearAmount;\\r\\n        uint64 _start;\\r\\n        uint64 _duration;\\r\\n    }\\r\\n\\r\\n    // UNIX dates\\r\\n    uint64 private constant _TGE = 1_648_641_600; // TGE = Wed Mar 30 2022 12:00:00 GMT+0000\\r\\n    uint64 private constant _Month1 = 1_651_320_000; // Month 1 = Sat Apr 30 2022 12:00:00 GMT+0000\\r\\n    uint64 private constant _Month3 = 1_656_590_400; // Month 3 = Thu Jun 30 2022 12:00:00 GMT+0000\\r\\n    uint64 private constant _Month6 = 1_664_539_200; // Month 6 = Fri Sep 30 2022 12:00:00 GMT+0000\\r\\n\\r\\n    // durations\\r\\n    uint64 private constant _0_months = 0; // 0 months\\r\\n    uint64 private constant _6_months = 15_780_000; // 6 months\\r\\n    uint64 private constant _12_months = 31_560_000; // 12 months\\r\\n    uint64 private constant _24_months = 63_120_000; // 24 months\\r\\n\\r\\n    // addresses\\r\\n    address public constant airdropAddress = 0x290Fe1E49FF85423A318A57Bfc32f9A2cdA5E5fC;\\r\\n    address public constant earlyAdoptersAddress = 0x16f6148926B89bAff7993ac527B844a6B8b19F4B;\\r\\n    address public constant privateAddress = 0x5880ddb0AF34b9F7142d51fA9a5592A59ecb27c5;\\r\\n    address public constant publicAddress = 0x6eB4e85933eCf0E775948b332f2bFf15b94CABFd;\\r\\n    address public constant communityAddress = 0xD28f471420973C6797Cbda169D575d1c2a041C25;\\r\\n    address public constant advisorsAddress = 0x0B865fB2b945db91df8467090bEA114E14Da60F7;\\r\\n    address public constant stakingAddress = 0x9D913Aed157c2ED227f0464dE26b1D9852DD6074;\\r\\n    address public constant liquidityAddress = 0x59CE5f2cfAb1f78d266f37Ea27Dfd165FB8d7F22;\\r\\n    address public constant treasuryAddress = 0xED9CD51501cF4dE8C1dfBBcf36f6374e4AbCb9F0;\\r\\n    address public constant marketingAddress = 0x2368b4099Fc339177b0Aa13F49925cE062ebF78A;\\r\\n    address public constant teamAddress = 0x517Ba0f2d72D488083F5270953c930e7F742B88b;\\r\\n    address public constant exchangesReserveAddress = 0xeA7071A5E506c74f5A8364148C1B24ff2c0F7ABE;\\r\\n\\r\\n    // decimal base\\r\\n    uint private constant decimalBase = 1e18;\\r\\n\\r\\n    // tge distribution values\\r\\n    uint private constant airdropTGEValue = 0 * decimalBase;\\r\\n    uint private constant earlyAdoptersTGEValue = 50_000_000 * decimalBase;\\r\\n    uint private constant privateTGEValue = 750_000_000 * decimalBase;\\r\\n    // Unlock all TGE, because launchpads distribute them for their users following vesting\\r\\n    uint private constant publicTGEValue = 1_500_000_000 * decimalBase;\\r\\n    uint private constant communityTGEValue = 200_000_000 * decimalBase;\\r\\n    uint private constant advisorsTGEValue = 0 * decimalBase; \\r\\n    uint private constant stakingTGEValue = 0 * decimalBase; \\r\\n    uint private constant liquidityTGEValue = 500_000_000 * decimalBase;\\r\\n    uint private constant treasuryTGEValue = 250_000_000 * decimalBase; \\r\\n    uint private constant marketingTGEValue = 180_000_000 * decimalBase;\\r\\n    uint private constant teamTGEValue = 0 * decimalBase;\\r\\n    uint private constant exchangesTGEValue = 1_500_000_000 * decimalBase;\\r\\n\\r\\n    // linear distribution values\\r\\n    uint private constant airdropLinearValue = 500_000_000 * decimalBase; // 500M (TOTAL)\\r\\n    uint private constant earlyAdoptersLinearValue = 450_000_000 * decimalBase; // 500M (TOTAL)\\r\\n    uint private constant privateLinearValue = 6_750_000_000 * decimalBase; // 7500M (TOTAL)\\r\\n    uint private constant publicLinearValue = 0 * decimalBase; // 1500M (TOTAL)\\r\\n    uint private constant communityLinearValue = 800_000_000 * decimalBase; // 1000M (TOTAL)\\r\\n    uint private constant advisorsLinearValue = 3_000_000_000 * decimalBase; // 3000M (TOTAL)\\r\\n    uint private constant stakingLinearValue = 3_500_000_000 * decimalBase; // 2500M (TOTAL)\\r\\n    uint private constant liquidityLinearValue = 0 * decimalBase; // 0\\r\\n    uint private constant treasuryLinearValue = 12_250_000_000 * decimalBase; // 12500M (TOTAL) - 2% TGE\\r\\n    uint private constant marketingLinearValue = 8_820_000_000 * decimalBase; // 9000M (TOTAL) - 2% TGE\\r\\n    uint private constant teamLinearValue = 9_000_000_000 * decimalBase; // 9000M (TOTAL) \\r\\n    uint private constant exchangesLinearValue = 0 * decimalBase; // 0\\r\\n\\r\\n    // creating linear distributions config\\r\\n    Distribution private _airdrop = Distribution(airdropAddress, airdropTGEValue, airdropLinearValue, _Month1, _0_months);\\r\\n    Distribution private _earlyAdopters = Distribution(earlyAdoptersAddress, earlyAdoptersTGEValue, earlyAdoptersLinearValue, _Month3, _24_months);\\r\\n    Distribution private _private = Distribution(privateAddress, privateTGEValue, privateLinearValue, _Month3, _24_months);\\r\\n    Distribution private _public = Distribution(publicAddress, publicTGEValue, publicLinearValue, _TGE, _0_months);\\r\\n    Distribution private _community = Distribution(communityAddress, communityTGEValue, communityLinearValue, _Month3, _12_months);\\r\\n    Distribution private _advisors = Distribution(advisorsAddress, advisorsTGEValue, advisorsLinearValue, _Month6, _24_months);\\r\\n    Distribution private _staking = Distribution(stakingAddress, stakingTGEValue, stakingLinearValue, _Month3, _24_months);\\r\\n    Distribution private _liquidity = Distribution(liquidityAddress, liquidityTGEValue, liquidityLinearValue, _TGE, _0_months);\\r\\n    Distribution private _treasury = Distribution(treasuryAddress, treasuryTGEValue, treasuryLinearValue, _TGE, _24_months);\\r\\n    Distribution private _marketing = Distribution(marketingAddress, marketingTGEValue, marketingLinearValue, _TGE, _24_months);\\r\\n    Distribution private _team = Distribution(teamAddress, teamTGEValue, teamLinearValue, _Month6, _24_months);\\r\\n    Distribution private _exchanges = Distribution(exchangesReserveAddress, exchangesTGEValue, exchangesLinearValue, _TGE, _0_months);\\r\\n\\r\\n    // categories of tokenomics\\r\\n    string[12] private categories = [\\\"Airdrop\\\", \\\"Seed\\\", \\\"Private\\\", \\\"Public\\\", \\\"Community\\\", \\\"Advisors\\\", \\\"Staking\\\", \\\"Liquidity\\\", \\\"Treasury\\\", \\\"Marketing\\\", \\\"Team\\\", \\\"Exchanges\\\"];\\r\\n    \\r\\n    // Distributions mapping depending on the category\\r\\n    mapping(string => uint) public GMMReleased;\\r\\n    mapping(string => uint8) private _categoriesMap;\\r\\n    mapping(string => bool) private _categoryExist;\\r\\n\\r\\n    // Distributions array\\r\\n    Distribution[12] private _distributions;\\r\\n\\r\\n    constructor(address _tokenContract) {\\r\\n        tokenContract = _tokenContract;\\r\\n        _setDefaultValues();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set up arrays and mappings.\\r\\n     */\\r\\n    function _setDefaultValues() private {\\r\\n        _distributions[0] = _airdrop;\\r\\n        _distributions[1] = _earlyAdopters;\\r\\n        _distributions[2] = _private;\\r\\n        _distributions[3] = _public;\\r\\n        _distributions[4] = _community;\\r\\n        _distributions[5] = _advisors;\\r\\n        _distributions[6] = _staking;\\r\\n        _distributions[7] = _liquidity;\\r\\n        _distributions[8] = _treasury;\\r\\n        _distributions[9] = _marketing;\\r\\n        _distributions[10] = _team;\\r\\n        _distributions[11] = _exchanges;\\r\\n        \\r\\n        _categoriesMap[\\\"Airdrop\\\"] = 0;\\r\\n        _categoriesMap[\\\"Seed\\\"] = 1;\\r\\n        _categoriesMap[\\\"Private\\\"] = 2;\\r\\n        _categoriesMap[\\\"Public\\\"] = 3;\\r\\n        _categoriesMap[\\\"Community\\\"] = 4;\\r\\n        _categoriesMap[\\\"Advisors\\\"] = 5;\\r\\n        _categoriesMap[\\\"Staking\\\"] = 6;\\r\\n        _categoriesMap[\\\"Liquidity\\\"] = 7;\\r\\n        _categoriesMap[\\\"Treasury\\\"] = 8;\\r\\n        _categoriesMap[\\\"Marketing\\\"] = 9;\\r\\n        _categoriesMap[\\\"Team\\\"] = 10;\\r\\n        _categoriesMap[\\\"Exchanges\\\"] = 11;\\r\\n        \\r\\n        _categoryExist[\\\"Airdrop\\\"] = true;\\r\\n        _categoryExist[\\\"Seed\\\"] = true;\\r\\n        _categoryExist[\\\"Private\\\"] = true;\\r\\n        _categoryExist[\\\"Public\\\"] = true;\\r\\n        _categoryExist[\\\"Community\\\"] = true;\\r\\n        _categoryExist[\\\"Advisors\\\"] = true;\\r\\n        _categoryExist[\\\"Staking\\\"] = true;\\r\\n        _categoryExist[\\\"Liquidity\\\"] = true;\\r\\n        _categoryExist[\\\"Treasury\\\"] = true;\\r\\n        _categoryExist[\\\"Marketing\\\"] = true;\\r\\n        _categoryExist[\\\"Team\\\"] = true;\\r\\n        _categoryExist[\\\"Exchanges\\\"] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint tokenContract tokens.\\r\\n     *\\r\\n     * Emits a {ERC20Released} event.\\r\\n     */\\r\\n     function mintTokens(address beneficiary, uint256 releasable, string memory category) private {\\r\\n        if (releasable > 0) {\\r\\n            IERC20Contract gmmContract = IERC20Contract(tokenContract);\\r\\n\\r\\n            GMMReleased[category] += releasable;\\r\\n            totalMinted += releasable;\\r\\n            gmmContract.mint(beneficiary, releasable);\\r\\n            emit ERC20Released(category, beneficiary, releasable);\\r\\n        }\\r\\n     }\\r\\n\\r\\n    /**\\r\\n     * @dev Release the tokens used for liquidity and exchanges reserve.\\r\\n     *\\r\\n     * Emits a {ERC20Released} event.\\r\\n     */\\r\\n    function unlockLiquidity() external onlyOwner {\\r\\n        uint256 releasableLiquidity = categoryReleasable(\\\"Liquidity\\\");\\r\\n        mintTokens(liquidityAddress, releasableLiquidity, \\\"Liquidity\\\");\\r\\n\\r\\n        uint256 releasableExchanges = categoryReleasable(\\\"Exchanges\\\");\\r\\n        mintTokens(exchangesReserveAddress, releasableExchanges, \\\"Exchanges\\\");\\r\\n\\r\\n        uint256 releasablePublic = categoryReleasable(\\\"Public\\\");\\r\\n        mintTokens(publicAddress, releasablePublic, \\\"Public\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Release all the tokens that are releasable.\\r\\n     *\\r\\n     * Emits a {ERC20Released} event.\\r\\n     */\\r\\n    function releaseTokens() external virtual {\\r\\n        require(_TGE < uint64(block.timestamp), \\\"TGE event did not start yet\\\");\\r\\n\\r\\n        for (uint i = 0; i < categories.length; i++) {\\r\\n            address beneficiary = _distributions[i]._beneficiary;\\r\\n            uint256 releasable = categoryReleasable(categories[i]);\\r\\n\\r\\n            mintTokens(beneficiary, releasable, categories[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalTokens() public view virtual returns (uint) {\\r\\n        uint total = 0;\\r\\n        for (uint i = 0; i < categories.length; i++) {\\r\\n\\r\\n            uint tgeAmount = _distributions[i]._tgeAmount;\\r\\n            uint linearAmount = _distributions[i]._linearAmount;\\r\\n\\r\\n            total += (tgeAmount + linearAmount);\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculates the amount of tokens that are releasable for certain category.\\r\\n     */\\r\\n    function categoryReleasable(string memory _category) public view virtual returns (uint256) {\\r\\n        require(_categoryExist[_category], \\\"Category does not exist\\\");\\r\\n        uint8 i = _categoriesMap[_category];\\r\\n        \\r\\n        uint tgeAmount = _distributions[i]._tgeAmount;\\r\\n        uint linearAmount = _distributions[i]._linearAmount;\\r\\n        uint64 start = _distributions[i]._start;\\r\\n        uint64 duration = _distributions[i]._duration;\\r\\n        \\r\\n        uint256 vestingReleasable = _vestingSchedule(start, duration, linearAmount, uint64(block.timestamp));\\r\\n        uint256 releasable = vestingReleasable + tgeAmount - GMMReleased[_category];\\r\\n        return releasable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Virtual implementation of the vesting formula. This returns the amout vested, as a function of time, for\\r\\n     * an asset given its total historical allocation.\\r\\n       check https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/finance/VestingWallet.sol\\r\\n     */\\r\\n    function _vestingSchedule(uint64 start, uint64 duration, uint linearAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\r\\n        if (timestamp < start) {\\r\\n            return 0;\\r\\n        } else if (timestamp > start + duration) {\\r\\n            return linearAllocation;\\r\\n        } else {\\r\\n            return (linearAllocation * (timestamp - start)) / duration;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/GamiumToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\ninterface _AntiBotContract {\\r\\n    function applyAntiBot(address sender, address recipient, uint256 amount) external;\\r\\n}\\r\\n\\r\\ncontract GamiumToken is ERC20Capped, Ownable, Pausable {\\r\\n    // Antibot object\\r\\n    _AntiBotContract antiBotContract;\\r\\n    bool private antiBotEnabled;\\r\\n\\r\\n    // minter address\\r\\n    address public minter;\\r\\n\\r\\n    // events\\r\\n    event TokensMinted(address _to, uint256 _amount);\\r\\n    event LogNewMinter(address _minter);\\r\\n\\r\\n    // max total Supply to be minted\\r\\n    uint256 private _capToken = 50 * 10 ** 9 * 1e18;\\r\\n\\r\\n    constructor() ERC20(\\\"Gamium\\\", \\\"GMM\\\") ERC20Capped(_capToken) {}\\r\\n\\r\\n    function pause() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the minter.\\r\\n     */\\r\\n    modifier onlyMinter() {\\r\\n        require(_msgSender() != address(0), \\\"GamiumToken: minting from the zero address\\\");\\r\\n        require(_msgSender() == minter, \\\"GamiumToken: Caller is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @param newMinter The address of the new minter.\\r\\n     */\\r\\n    function setMinter(address newMinter) external onlyOwner {\\r\\n        require(newMinter != address(0), \\\"GamiumToken: Cannot set zero address as minter.\\\");\\r\\n        minter = newMinter;\\r\\n        emit LogNewMinter(minter);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev minting function.\\r\\n     *\\r\\n     * Emits a {TokensMinted} event.\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external onlyMinter {\\r\\n        super._mint(to, amount);\\r\\n        emit TokensMinted(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param status The status of the antibot.\\r\\n     */\\r\\n    function setAntiBot(bool status) external onlyOwner {\\r\\n        antiBotEnabled = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param antiBotAddress The address of the antibot.\\r\\n     */\\r\\n    function setAntiBotAddress(address antiBotAddress) external onlyOwner {\\r\\n        antiBotContract = _AntiBotContract(antiBotAddress);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\r\\n        internal\\r\\n        whenNotPaused\\r\\n        override\\r\\n    {\\r\\n        if (antiBotEnabled) {\\r\\n            // call antibot contract\\r\\n            antiBotContract.applyAntiBot(from, to, amount);\\r\\n        }\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"GMMReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"categoryReleasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAdoptersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangesReserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GamiumAllocator", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005b6bf0c7f989de824677cfbd507d9635965e9cd3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}