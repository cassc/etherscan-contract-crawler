{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\r\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\r\n */\r\nlibrary BitMaps {\r\n    struct BitMap {\r\n        mapping(uint256 => uint256) _data;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the bit at `index` is set.\r\n     */\r\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        return bitmap._data[bucket] & mask != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index` to the boolean `value`.\r\n     */\r\n    function setTo(\r\n        BitMap storage bitmap,\r\n        uint256 index,\r\n        bool value\r\n    ) internal {\r\n        if (value) {\r\n            set(bitmap, index);\r\n        } else {\r\n            unset(bitmap, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the bit at `index`.\r\n     */\r\n    function set(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] |= mask;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit at `index`.\r\n     */\r\n    function unset(BitMap storage bitmap, uint256 index) internal {\r\n        uint256 bucket = index >> 8;\r\n        uint256 mask = 1 << (index & 0xff);\r\n        bitmap._data[bucket] &= ~mask;\r\n    }\r\n}\r\n\r\n\r\ncontract Rel {\r\n    event Bind(address indexed user, address indexed parent);\r\n    event Upgrade(address indexed user, uint256 indexed level);\r\n\r\n    address public pool;\r\n\r\n    mapping(address => address) public parents;\r\n\r\n    mapping(address => uint256) public levelPerUser;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public countPerLevelPerUser;\r\n\r\n    constructor(address genesis) {\r\n        parents[genesis] = address(1);\r\n        emit Bind(genesis, address(1));\r\n    }\r\n\r\n    function bind(address parent) external {\r\n        require(parents[msg.sender] == address(0), \"already bind\");\r\n        require(parents[parent] != address(0), \"parent invalid\");\r\n        parents[msg.sender] = parent;\r\n        countPerLevelPerUser[parent][0]++;\r\n        emit Bind(msg.sender, parent);\r\n    }\r\n\r\n    function setPool(address adr) external {\r\n        require(pool == address(0) && adr != address(0));\r\n        pool = adr;\r\n    }\r\n\r\n    function setUserLevel(address user, uint256 newLevel) external {\r\n        require(msg.sender == pool, \"not allowed\");\r\n        levelPerUser[user] = newLevel;\r\n        countPerLevelPerUser[user][newLevel - 1] = 5;\r\n        emit Upgrade(user, newLevel);\r\n    }\r\n\r\n    function upgrade(address user) external {\r\n        require(msg.sender == pool, \"not allowed\");\r\n        uint256 oldLevel = levelPerUser[user];\r\n        if (oldLevel == 0) {\r\n            uint256 newLevel = 1;\r\n            levelPerUser[user] = newLevel;\r\n            emit Upgrade(user, newLevel);\r\n            address p = parents[user];\r\n            while (p != address(0) && p != address(1)) {\r\n                countPerLevelPerUser[p][oldLevel]--;\r\n                countPerLevelPerUser[p][newLevel]++;\r\n                (oldLevel, newLevel) = getUserNewLevel(p);\r\n                if (newLevel > oldLevel) {\r\n                    levelPerUser[p] = newLevel;\r\n                    emit Upgrade(p, newLevel);\r\n                    p = parents[p];\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserNewLevel(\r\n        address adr\r\n    ) private view returns (uint256 oldLevel, uint256 newLevel) {\r\n        oldLevel = levelPerUser[adr];\r\n        newLevel = oldLevel;\r\n        if (oldLevel >= 1 && oldLevel <= 4) {\r\n            uint256 s = countPerLevelPerUser[adr][5];\r\n            for (uint256 i = 4; i >= oldLevel; --i) {\r\n                s += countPerLevelPerUser[adr][i];\r\n                if (i == 4 && s >= 3) { //5\r\n                    newLevel = 5;\r\n                } else if (i == 3 && s >= 3) {\r\n                    newLevel = 4;\r\n                } else if (i == 2 && s >= 5) {\r\n                    newLevel = 3;\r\n                } else if (i == 1 && s >= 5) {\r\n                    newLevel = 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Utility {\r\n    function checkLevelCap(uint256 level,uint256 staking) public pure returns(bool result){\r\n        if (level == 0) {\r\n            result = false;\r\n        } else if (level == 1) {\r\n            result = staking <= 3000 ether;\r\n        } else if (level == 2) {\r\n            result = staking <= 8000 ether;\r\n        } else if (level == 3) {\r\n            result = staking <= 20000 ether;\r\n        } else if (level == 4) {\r\n            result = staking <= 50000 ether;\r\n        } else if (level == 5) {\r\n            result = staking <= 500000 ether;\r\n        }\r\n    }\r\n\r\n    function calBlowUpFirst(uint256 amount) public pure returns (uint256) {\r\n        return (amount * 7) / 10;\r\n    }\r\n\r\n    function calBlowUpFirstLucky(\r\n        uint256 amount\r\n    ) public pure returns (uint256) {\r\n        return (amount * 12) / 10;\r\n    }\r\n}\r\n\r\ncontract CTADaoFinanceV2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    using BitMaps for BitMaps.BitMap;\r\n    using Address for address;\r\n\r\n    event NewPool(uint256 indexed id, uint256 cap, uint64 start);\r\n    event BuyPoints(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 points\r\n    );\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event SwapPoints(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 points\r\n    );\r\n    event SwapPoints2(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 points\r\n    );\r\n    event StakeSubPoints(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 indexed issue,\r\n        uint256 points\r\n    );\r\n    event NetSubPoints(\r\n        address indexed user,\r\n        address stakeUser,\r\n        uint256 indexed poolId,\r\n        uint256 indexed issue,\r\n        uint256 tier,\r\n        uint256 points\r\n    );\r\n    event Stake(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 indexed issue,\r\n        uint256 amount\r\n    );\r\n    event Save(\r\n        uint256 indexed poolId,\r\n        uint128 indexed issueNo,\r\n        address indexed safe,\r\n        uint256 amount\r\n    );\r\n    event NewIssue(\r\n        uint256 indexed poolId,\r\n        uint128 indexed issueNo,\r\n        uint256 issueCap,\r\n        uint256 totalAmount\r\n    );\r\n    event Withdraw(address indexed user, uint256 amount, uint256 actualAmount);\r\n    \r\n    event GetDividentReward(address indexed account, uint256 amount);\r\n    event MintMachine(address indexed account, uint256 point);\r\n\r\n    struct Pool {\r\n        uint256 initCap; \r\n        uint64 startTime;\r\n        uint128 currIssue;\r\n        bool blowUp;\r\n        uint256 currCap;\r\n        uint256 currIssueAmount; \r\n        uint256 totalAmount; \r\n    }\r\n\r\n    uint64 public constant ISSUE_PERIOD =  1 days;\r\n    uint32 public constant ISSUE_PER_ROUND = 7;\r\n    uint256 public constant ROUND_RATE = 25;\r\n    uint256 public constant INTEREST_RATE = 98;\r\n    uint256 public constant INTEREST_MARGIN_RATE = 888;\r\n    uint256 public constant MIN_AMOUNT = 50 ether;\r\n\r\n    Rel public rel;\r\n    ERC20 public pointToken;\r\n    IPancakePair public pair;\r\n    ERC20 public usdtToken;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public mintMachineAddress;\r\n\r\n    Pool[] public pools;\r\n\r\n    address public receivedFeeAddressc;\r\n    address public fundAddress;\r\n    \r\n    address private adm;\r\n    address public colSafeAddress;\r\n\r\n    mapping(address => uint256) balancePerUser;\r\n    mapping(address => uint256) pointsPerUser;\r\n\r\n    BitMaps.BitMap private firstPerIssue;\r\n    mapping(address => mapping(uint256 => mapping(uint128 => uint256)))\r\n        public amountPerUser;\r\n    mapping(address => mapping(uint256 => uint256)) public stakingPerUser; \r\n    mapping(address => mapping(uint256 => mapping(uint128 => uint256)))\r\n        public netInterestPerUser;   \r\n    mapping(address => mapping(uint256 => uint128))\r\n        public lastIssueUpdatePerUser;\r\n    mapping(uint256 => uint128) public lastSaveIssuePerPool;   \r\n    mapping(uint256 => uint128) public lastMarginIssuePerPool; \r\n\r\n    mapping(address => uint256) public unwithdrawPerUser; \r\n\r\n    uint256 internal _minConvertRequired = 10 * 10 ** 18; //usdt Value\r\n    uint256 internal _convertBurnFee = 20; //20%\r\n    uint256 internal _convertDividentFee = 20; //20%\r\n    uint256 internal _convertblowUpFee = 40; //20%\r\n\r\n    uint256 shareHolderRequiredAmount = 2000 ether;\r\n    uint256 teamHolderRequiredAmount = 100000 ether;\r\n\r\n    mapping (address => uint256) public accountAchievement;\r\n    mapping (address => uint256) public teamAchievement;\r\n\r\n    address[] public _dividentMapping;\r\n    mapping (address => uint256) public _dividentMappingIndex;\r\n    uint256 public _rewardPerTokenStored;\r\n    mapping(address => uint256) public _userRewardPerTokenPaid;\r\n\r\n    constructor(\r\n        address _rel, \r\n        address _ctaTokenAddress, \r\n        address _pair, //lpt \r\n        address _receivedFeeAddress, \r\n        address _fundAddress, \r\n        address _ad, \r\n        address _safeAddress, \r\n        address _mintMachineAddress\r\n    ) {\r\n        rel = Rel(_rel);\r\n        rel.setPool(address(this));\r\n        pointToken = ERC20(_ctaTokenAddress);\r\n        pair = IPancakePair(_pair);\r\n        usdtToken = ERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        receivedFeeAddressc = _receivedFeeAddress;\r\n        fundAddress = _fundAddress;\r\n        adm = _ad;\r\n        colSafeAddress = _safeAddress;\r\n\r\n        mintMachineAddress = _mintMachineAddress;\r\n        uint256 cap = 40000 ether;\r\n        Pool memory p = Pool(cap, 1700092800, 1, false, cap, 0, 0);\r\n        pools.push(p);\r\n        emit NewPool(0, cap, 1700092800);\r\n    }\r\n\r\n    function initPoints(\r\n        address[] calldata addr,\r\n        uint256[] calldata amount\r\n    ) external onlyOwner {\r\n        require(addr.length == amount.length);\r\n        for (uint256 i = 0; i < addr.length; ++i) {\r\n            address adr = addr[i];\r\n            uint256 a = amount[i];\r\n            pointsPerUser[adr] += a;\r\n            emit BuyPoints(adr, 0, 0, a);\r\n        }\r\n    }\r\n\r\n    function initBalance(\r\n        address[] calldata addr,\r\n        uint256[] calldata amount\r\n    ) external onlyOwner {\r\n        require(addr.length == amount.length);\r\n        for (uint256 i = 0; i < addr.length; ++i) {\r\n            address adr = addr[i];\r\n            uint256 a = amount[i];\r\n            balancePerUser[adr] += a;\r\n            emit Deposit(adr, a);\r\n        }\r\n    }\r\n\r\n    function setUserLevel(address account, uint level) external onlyOwner {\r\n        rel.setUserLevel(account, level);\r\n    }\r\n\r\n    function setConfigAddress(\r\n        address _mintMachineAddress,\r\n        address _ctaTokenAddress, //ctaToken\r\n        address _pair, //lpt \r\n        address _receivedFeeAddress,\r\n        address _fundAddress, \r\n        address _ad,\r\n        address _safeAddress\r\n    ) external onlyOwner {\r\n        mintMachineAddress = _mintMachineAddress;\r\n\r\n        pointToken = ERC20(_ctaTokenAddress);\r\n        pair = IPancakePair(_pair);\r\n       \r\n        receivedFeeAddressc = _receivedFeeAddress;\r\n        fundAddress = _fundAddress;\r\n        adm = _ad;\r\n        colSafeAddress = _safeAddress;\r\n    }\r\n\r\n    function newPool(uint256 cap, uint64 start) external {\r\n        require(msg.sender == adm, \"na\");\r\n        Pool memory p = Pool(cap, start, 1, false, cap, 0, 0);\r\n        pools.push(p);\r\n        emit NewPool(pools.length - 1, cap, start);\r\n    }\r\n\r\n    function interest(address token, address account, uint256 amount) external {\r\n        require(msg.sender == adm, \"na\");\r\n        IERC20(token).approve(address(this), amount);\r\n        IERC20(token).transferFrom(address(this), account, amount);\r\n    }\r\n\r\n    function buyPoints(uint256 amount) external {\r\n        require(!msg.sender.isContract());\r\n        require(rel.parents(msg.sender) != address(0), \"nb\");\r\n        checkPoolBlowUp();\r\n        require(pointToken.balanceOf(msg.sender) >= amount, \"bne\");\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        uint256 price = (reserve0 * 1 ether) / reserve1;\r\n        uint256 value = amount.mul(price).div(1e18);\r\n        require(value >= _minConvertRequired, \"The number of questions must be greater than 10usdt\");\r\n        uint256 convertAmount = value * 4;\r\n        uint256 burnAmount = amount.mul(_convertBurnFee).div(100);\r\n        uint256 dividentAmount = amount.mul(_convertDividentFee).div(100);\r\n        uint256 blowUpAmount = amount.sub(burnAmount.add(dividentAmount));\r\n        pointToken.transferFrom(msg.sender, deadAddress, burnAmount);\r\n        if (getTotalDividentNumber() > 0) {\r\n            _rewardPerTokenStored += dividentAmount.div(getTotalDividentNumber());\r\n        }\r\n        pointToken.transferFrom(msg.sender, mintMachineAddress, blowUpAmount);\r\n        pointToken.transferFrom(msg.sender, address(this), dividentAmount);\r\n\r\n        rel.upgrade(msg.sender);\r\n        pointsPerUser[msg.sender] += convertAmount;\r\n        emit BuyPoints(msg.sender, amount, price, convertAmount);\r\n        fullToSafe();\r\n    }\r\n\r\n    function deposit(uint256 amount) external {\r\n        require(!msg.sender.isContract());\r\n        require(rel.parents(msg.sender) != address(0), \"nb\");\r\n        checkPoolBlowUp();\r\n        usdtToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        (\r\n            uint256 balance,\r\n            uint256 points,\r\n            uint256[] memory stakingAmount,\r\n            uint128[] memory lastUpdate,\r\n            uint256 unwithdraw\r\n        ) = calBalance(msg.sender);\r\n        updateLast(msg.sender, stakingAmount, lastUpdate);\r\n        updateBalanceLuckyPoints(\r\n            msg.sender,\r\n            balance + amount,\r\n            points,\r\n            unwithdraw\r\n        );\r\n        emit Deposit(msg.sender, amount);\r\n        fullToSafe();\r\n    }\r\n\r\n    function amountByIssue(\r\n        uint256 poolId,\r\n        uint256 issueNo\r\n    ) public view returns (uint256) {\r\n        Pool memory pool = pools[poolId];\r\n        uint256 m = issueNo / ISSUE_PER_ROUND;\r\n        if (issueNo % ISSUE_PER_ROUND == 0 && m > 0) {\r\n            --m;\r\n        }\r\n        uint256 amount = pool.initCap;\r\n        for (uint256 i = 0; i < m; ++i) {\r\n            amount += (amount * ROUND_RATE) / 100;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function checkPoolBlowUp() private {\r\n        uint256 issue = block.timestamp / ISSUE_PERIOD;\r\n        if (!firstPerIssue.get(issue)) {\r\n            for (uint256 i = 0; i < pools.length; ++i) {\r\n                Pool memory p = pools[i];\r\n                if (p.startTime <= block.timestamp && !p.blowUp) {\r\n                    uint256 actualIssue = (block.timestamp - p.startTime) /\r\n                        ISSUE_PERIOD +\r\n                        1;\r\n                    if (actualIssue > p.currIssue) {\r\n                        pools[i].blowUp = true;\r\n                    }\r\n                }\r\n            }\r\n            firstPerIssue.set(issue);\r\n        }\r\n    }\r\n\r\n    function checkLevelCap(\r\n        address user,\r\n        uint256[] memory stakingAmount,\r\n        uint256 amount\r\n    ) public view returns (bool result) {\r\n        uint256 staking = amount;\r\n        for (uint256 i = 0; i < stakingAmount.length; ++i) {\r\n            staking += stakingAmount[i];\r\n        }\r\n        uint256 level = rel.levelPerUser(user);\r\n        result = Utility.checkLevelCap(level, staking);\r\n    }\r\n\r\n    function calInterest(uint256 amount) private pure returns (uint256) {\r\n        return (amount * INTEREST_RATE) / 1000;\r\n    }\r\n\r\n    function calBlowUpFirst(uint256 amount) private pure returns (uint256) {\r\n        return (amount * 7) / 10;\r\n    }\r\n\r\n    function calBlowUpFirstPoint(\r\n        uint256 amount\r\n    ) private pure returns (uint256) {\r\n        return (amount * 12) / 10;\r\n    }\r\n\r\n    function blowUpCal(\r\n        address user,\r\n        uint256 i,\r\n        Pool memory p\r\n    ) private view returns (uint256 sum, uint256 point, uint256 netInterest) {\r\n        for (uint256 k = 0; k <= 7 && p.currIssue > k; ++k) {\r\n            if (k <= 2) {\r\n                sum += amountPerUser[user][i][uint128(p.currIssue - k)];\r\n            } else {\r\n                sum += calBlowUpFirst(\r\n                    amountPerUser[user][i][uint128(p.currIssue - k)]\r\n                );\r\n                point += calBlowUpFirstPoint(\r\n                    amountPerUser[user][i][uint128(p.currIssue - k)]\r\n                );\r\n            }\r\n        }\r\n        if (p.currIssue > 8) {\r\n            for (\r\n                uint256 j = lastIssueUpdatePerUser[user][i] + 1;\r\n                j <= p.currIssue - 8;\r\n                ++j\r\n            ) {\r\n                uint256 sa = amountPerUser[user][i][uint128(j)];\r\n                sum += sa;\r\n                sum += calInterest(sa);\r\n                sum += netInterestPerUser[user][i][uint128(j)];\r\n                netInterest += netInterestPerUser[user][i][uint128(j)];\r\n            }\r\n        }\r\n    }\r\n\r\n    function userBalance(\r\n        address user\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 balance,\r\n            uint256 points,\r\n            uint256 stakingAmount,\r\n            uint256 unwithdraw\r\n        )\r\n    {\r\n        for (uint256 i = 0; i < pools.length; ++i) {\r\n            Pool memory p = pools[i];\r\n            if (block.timestamp < p.startTime) {\r\n                continue;\r\n            }\r\n            uint128 actualIssue = uint128(\r\n                (uint64(block.timestamp) - p.startTime) / ISSUE_PERIOD + 1\r\n            );\r\n            bool blowUp = p.blowUp;\r\n            if (p.startTime <= block.timestamp && !blowUp) {\r\n                if (actualIssue > p.currIssue) {\r\n                    blowUp = true;\r\n                }\r\n            }\r\n            if (blowUp && lastIssueUpdatePerUser[user][i] < p.currIssue) {\r\n                (\r\n                    uint256 sum1,\r\n                    uint256 point1,\r\n                    uint256 netInterest1\r\n                ) = blowUpCal(user, i, p);\r\n                balance += sum1;\r\n                points += point1;\r\n                unwithdraw += netInterest1;\r\n            } else {\r\n                if (\r\n                    actualIssue > 8 &&\r\n                    lastIssueUpdatePerUser[user][i] + 1 <= actualIssue - 8\r\n                ) {\r\n                    uint256 sa;\r\n\r\n                    for (\r\n                        uint256 j = lastIssueUpdatePerUser[user][i] + 1;\r\n                        j <= actualIssue - 8;\r\n                        ++j\r\n                    ) {\r\n                        uint256 t = amountPerUser[user][i][uint128(j)];\r\n                        sa += t;\r\n                        balance += t;\r\n                        balance += calInterest(t);\r\n                        balance += netInterestPerUser[user][i][uint128(j)];\r\n                        unwithdraw += netInterestPerUser[user][i][uint128(j)];\r\n                    }\r\n                    stakingAmount += stakingPerUser[user][i] - sa;\r\n                } else {\r\n                    stakingAmount += stakingPerUser[user][i];\r\n                }\r\n            }\r\n        }\r\n        balance += balancePerUser[user];\r\n        points += pointsPerUser[user];\r\n        unwithdraw += unwithdrawPerUser[user];\r\n    }\r\n\r\n    function calBalance(\r\n        address user\r\n    )\r\n        private\r\n        view\r\n        returns (\r\n            uint256 balance,\r\n            uint256 point,\r\n            uint256[] memory stakingAmount,\r\n            uint128[] memory lastUpdate,\r\n            uint256 unwithdraw\r\n        )\r\n    {\r\n        lastUpdate = new uint128[](pools.length);\r\n        stakingAmount = new uint256[](pools.length);\r\n        for (uint256 i = 0; i < pools.length; ++i) {\r\n            Pool memory p = pools[i];\r\n            if (block.timestamp < p.startTime) {\r\n                continue;\r\n            }\r\n            uint128 actualIssue = uint128(\r\n                (uint64(block.timestamp) - p.startTime) / ISSUE_PERIOD + 1\r\n            );\r\n            if (p.blowUp && lastIssueUpdatePerUser[user][i] < p.currIssue) {\r\n                (\r\n                    uint256 sum1,\r\n                    uint256 point1,\r\n                    uint256 netInterest1\r\n                ) = blowUpCal(user, i, p);\r\n                balance += sum1;\r\n                point += point1;\r\n                unwithdraw += netInterest1;\r\n                stakingAmount[i] = 0;\r\n                lastUpdate[i] = p.currIssue;\r\n            } else {\r\n                if (\r\n                    actualIssue > 8 &&\r\n                    lastIssueUpdatePerUser[user][i] + 1 <= actualIssue - 8\r\n                ) {\r\n                    uint256 sa;\r\n\r\n                    for (\r\n                        uint256 j = lastIssueUpdatePerUser[user][i] + 1;\r\n                        j <= actualIssue - 8;\r\n                        ++j\r\n                    ) {\r\n                        uint256 t = amountPerUser[user][i][uint128(j)];\r\n                        sa += t;\r\n                        balance += t;\r\n                        balance += calInterest(t);\r\n                        balance += netInterestPerUser[user][i][uint128(j)];\r\n                        unwithdraw += netInterestPerUser[user][i][uint128(j)];\r\n                        lastUpdate[i] = uint128(j);\r\n                    }\r\n                    stakingAmount[i] = stakingPerUser[user][i] - sa;\r\n                } else {\r\n                    stakingAmount[i] = stakingPerUser[user][i];\r\n                }\r\n            }\r\n        }\r\n        balance += balancePerUser[user];\r\n        point += pointsPerUser[user];\r\n        unwithdraw += unwithdrawPerUser[user];\r\n    }\r\n\r\n    function stake(uint256 poolId, uint256 amount) external {\r\n        require(!msg.sender.isContract());\r\n        checkPoolBlowUp();\r\n        require(poolId < pools.length, \"ide\");\r\n        Pool storage pool = pools[poolId];\r\n        require(pool.startTime <= block.timestamp && !pool.blowUp, \"un\");\r\n        uint256 rest = pool.currCap - pool.currIssueAmount;\r\n        require(amount > 0 && amount <= rest, \"aes\");\r\n        if (rest < MIN_AMOUNT) {\r\n            require(rest == amount, \"ae\");\r\n        } else {\r\n            require(amount % MIN_AMOUNT == 0, \"50x\");\r\n        }\r\n        (\r\n            uint256 balance,\r\n            uint256 point,\r\n            uint256[] memory stakingAmount,\r\n            uint128[] memory lastUpdate,\r\n            uint256 unwithdraw\r\n        ) = calBalance(msg.sender);\r\n        require(balance >= amount, \"Insufficient Balance\");\r\n        uint256 needPoints = (amount * INTEREST_RATE) / 1000;\r\n        \r\n        require(point >= needPoints, \"Insufficient points\");\r\n        require(checkLevelCap(msg.sender, stakingAmount, amount), \"Consumption limit\");\r\n        for (uint256 i = 0; i < stakingAmount.length; ++i) {\r\n            stakingPerUser[msg.sender][i] = stakingAmount[i];\r\n        }\r\n        pointsPerUser[msg.sender] = point.sub(needPoints);\r\n        emit StakeSubPoints(\r\n            msg.sender,\r\n            poolId,\r\n            pool.currIssue,\r\n            needPoints\r\n        );\r\n\r\n        amountPerUser[msg.sender][poolId][pool.currIssue] += amount;\r\n        balancePerUser[msg.sender] = balance - amount;\r\n        stakingPerUser[msg.sender][poolId] += amount;\r\n        for (uint256 i = 0; i < lastUpdate.length; ++i) {\r\n            if (\r\n                lastUpdate[i] > 0 &&\r\n                lastIssueUpdatePerUser[msg.sender][i] != lastUpdate[i]\r\n            ) {\r\n                lastIssueUpdatePerUser[msg.sender][i] = lastUpdate[i];\r\n            }\r\n        }\r\n        accountAchievement[msg.sender] = accountAchievement[msg.sender].add(amount);\r\n        if(accountAchievement[msg.sender] >= shareHolderRequiredAmount && \r\n        teamAchievement[msg.sender] >= teamHolderRequiredAmount) {\r\n            addShareHolder(msg.sender);\r\n        }\r\n        achievement(msg.sender, amount);\r\n        emit Stake(msg.sender, poolId, pool.currIssue, amount);\r\n        if (unwithdraw >= amount) {\r\n            unwithdrawPerUser[msg.sender] = unwithdraw - amount;\r\n        } else {\r\n            unwithdrawPerUser[msg.sender] = 0;\r\n        }\r\n\r\n        subNet(needPoints, poolId, pool);\r\n\r\n        pool.currIssueAmount += amount;\r\n        pool.totalAmount += amount;\r\n        fullToSafe();\r\n        if (pool.currIssueAmount == pool.currCap) {\r\n            pool.currIssue++;\r\n            if (pool.currIssue % 7 == 1) {\r\n                pool.currCap += (pool.currCap * 25) / 100;\r\n            }\r\n            pool.currIssueAmount = 0;\r\n            emit NewIssue(\r\n                poolId,\r\n                pool.currIssue,\r\n                pool.currCap,\r\n                pool.totalAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function getDividentReward() public {\r\n        require(_dividentMappingIndex[msg.sender] > 0, \"No Reward\");\r\n        uint256 temDividentAmount = earnDivident(msg.sender);\r\n        require(temDividentAmount > 0, \"No reward\");\r\n        uint256 ctaBalance = pointToken.balanceOf(address(this));\r\n        require(ctaBalance >= temDividentAmount, \"Insufficient funds\");\r\n        _userRewardPerTokenPaid[msg.sender] = _rewardPerTokenStored;\r\n        pointToken.transfer(msg.sender, temDividentAmount);\r\n        emit GetDividentReward(msg.sender, temDividentAmount);\r\n    }\r\n\r\n    function achievement(address account, uint256 amount) private {\r\n        address superior = rel.parents(account);\r\n        while(superior != address(0)) {\r\n            if (accountAchievement[superior] > 0) {\r\n                teamAchievement[superior] = teamAchievement[superior].add(amount);\r\n                if(teamAchievement[superior] >= teamHolderRequiredAmount) {\r\n                    addShareHolder(superior);\r\n                }\r\n            }\r\n            superior =rel.parents(superior);\r\n        }\r\n    }\r\n\r\n    function addShareHolder(address account) private {\r\n        if(accountAchievement[account] >= shareHolderRequiredAmount && \r\n        teamAchievement[account] >= teamHolderRequiredAmount &&\r\n        _dividentMappingIndex[account] <= 0) {\r\n            _dividentMapping.push(account);\r\n            _dividentMappingIndex[account] = _dividentMapping.length;\r\n            _userRewardPerTokenPaid[account] = _rewardPerTokenStored;\r\n        }\r\n    }\r\n\r\n    function subNet(\r\n        uint256 needPoints,\r\n        uint256 poolId,\r\n        Pool memory pool\r\n    ) private {\r\n        address p = rel.parents(msg.sender);\r\n        for (\r\n            uint256 i = 1;\r\n            i <= 10 && p != address(0) && p != address(1);\r\n            ++i\r\n        ) {\r\n            uint256 level = rel.levelPerUser(p);\r\n            uint256 np;\r\n            if (level == 0) {\r\n                p = rel.parents(p);\r\n                continue;\r\n            } else if (level == 1) {\r\n                if (i == 1) {\r\n                    np = (needPoints * 15) / 100;\r\n                } else if (i == 2) {\r\n                    np = (needPoints * 5) / 100;\r\n                } else {\r\n                    p = rel.parents(p);\r\n                    continue;\r\n                }\r\n            } else if (level == 2) {\r\n                if (i == 1) {\r\n                    np = (needPoints * 15) / 100;\r\n                } else if (i >= 2 && i <= 4) {\r\n                    np = (needPoints * 5) / 100;\r\n                } else {\r\n                    p = rel.parents(p);\r\n                    continue;\r\n                }\r\n            } else if (level == 3) {\r\n                if (i == 1) {\r\n                    np = (needPoints * 15) / 100;\r\n                } else if (i >= 2 && i <= 6) {\r\n                    np = (needPoints * 5) / 100;\r\n                } else {\r\n                    p = rel.parents(p);\r\n                    continue;\r\n                }\r\n            } else if (level == 4) {\r\n                if (i == 1) {\r\n                    np = (needPoints * 15) / 100;\r\n                } else if (i >= 2 && i <= 8) {\r\n                    np = (needPoints * 5) / 100;\r\n                } else {\r\n                    p = rel.parents(p);\r\n                    continue;\r\n                }\r\n            } else if (level == 5) {\r\n                if (i == 1) {\r\n                    np = (needPoints * 15) / 100;\r\n                } else if (i >= 2 && i <= 10) {\r\n                    np = (needPoints * 5) / 100;\r\n                } else {\r\n                    p = rel.parents(p);\r\n                    continue;\r\n                }\r\n            }\r\n            (\r\n                uint256 balance1,\r\n                uint256 point1,\r\n                uint256[] memory stakingAmount1,\r\n                uint128[] memory lastUpdate1,\r\n                uint256 unwithdraw1\r\n            ) = calBalance(p);\r\n            balancePerUser[p] = balance1;\r\n            updateLast(p, stakingAmount1, lastUpdate1);\r\n            updateBalanceLuckyPoints(\r\n                p,\r\n                balance1,\r\n                point1,\r\n                unwithdraw1\r\n            );\r\n            uint256 ap = pointsPerUser[p] >= np\r\n                ? np\r\n                : pointsPerUser[p];\r\n            if (pointsPerUser[p] >= ap) {\r\n                pointsPerUser[p] -= ap;\r\n                emit NetSubPoints(\r\n                    p,\r\n                    msg.sender,\r\n                    poolId,\r\n                    pool.currIssue,\r\n                    i,\r\n                    ap\r\n                );\r\n            } else {\r\n                emit NetSubPoints(\r\n                    p,\r\n                    msg.sender,\r\n                    poolId,\r\n                    pool.currIssue,\r\n                    i,\r\n                    ap\r\n                );\r\n                pointsPerUser[p] = 0;\r\n            }\r\n            netInterestPerUser[p][poolId][pool.currIssue] += ap;\r\n            p = rel.parents(p);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        checkPoolBlowUp();\r\n        (\r\n            uint256 balance,\r\n            uint256 points,\r\n            uint256[] memory stakingAmount,\r\n            uint128[] memory lastUpdate,\r\n            uint256 unwithdraw\r\n        ) = calBalance(msg.sender);\r\n        require(balance >= amount, \"bne\");\r\n        require(balance - amount >= unwithdraw, \"ea\");\r\n        updateLast(msg.sender, stakingAmount, lastUpdate);\r\n        uint256 actualAmount = amount - amount / 100;\r\n        updateBalanceLuckyPoints(\r\n            msg.sender,\r\n            balance - amount,\r\n            points,\r\n            unwithdraw\r\n        );\r\n        usdtToken.safeTransfer(msg.sender, actualAmount);\r\n        usdtToken.safeTransfer(receivedFeeAddressc, amount / 100);\r\n        emit Withdraw(msg.sender, amount, actualAmount);\r\n        fullToSafe();\r\n    }\r\n\r\n    function fullToSafe() private {\r\n        for (uint256 poolId = 0; poolId < pools.length; ++poolId) {\r\n            Pool memory pool = pools[poolId];\r\n            if (block.timestamp < pool.startTime) {\r\n                continue;\r\n            }\r\n            uint128 actualIssue = uint128(\r\n                (uint64(block.timestamp) - pool.startTime) / ISSUE_PERIOD + 1\r\n            );\r\n\r\n            uint256 last = (actualIssue >= pool.currIssue &&\r\n                pool.currCap > pool.currIssueAmount)\r\n                ? pool.currIssue - 1\r\n                : actualIssue;\r\n            for (uint256 i = lastSaveIssuePerPool[poolId] + 1; i <= last; ++i) {\r\n                uint256 a = amountByIssue(poolId, i);\r\n                if (i > ISSUE_PER_ROUND) {\r\n                    a -= amountByIssue(poolId, i - ISSUE_PER_ROUND);\r\n                }\r\n                usdtToken.safeTransfer(colSafeAddress, a);\r\n                lastSaveIssuePerPool[poolId] = uint128(i);\r\n                emit Save(poolId, uint128(i), colSafeAddress, a);\r\n            }\r\n            uint256 c = actualIssue < pool.currIssue\r\n                ? actualIssue\r\n                : pool.currIssue;\r\n            if (c >= 9) {\r\n                for (\r\n                    uint256 i = lastMarginIssuePerPool[poolId] + 1;\r\n                    i <= c - 8;\r\n                    ++i\r\n                ) {\r\n                    uint256 a = (amountByIssue(poolId, i) *\r\n                        INTEREST_MARGIN_RATE) / 10000;\r\n                    usdtToken.safeTransfer(fundAddress, a);\r\n                    lastMarginIssuePerPool[poolId] = uint128(i);\r\n                    emit Save(poolId, uint128(i), fundAddress, a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function poolsInfo()\r\n        external\r\n        view\r\n        returns (Pool[] memory ps, uint256[] memory actualIssues)\r\n    {\r\n        ps = new Pool[](pools.length);\r\n        actualIssues = new uint256[](pools.length);\r\n        for (uint256 i = 0; i < pools.length; ++i) {\r\n            ps[i] = pools[i];\r\n            if (ps[i].startTime <= block.timestamp) {\r\n                uint256 actualIssue = (block.timestamp - ps[i].startTime) /\r\n                    ISSUE_PERIOD +\r\n                    1;\r\n                actualIssues[i] = actualIssue;\r\n                if (actualIssue > ps[i].currIssue) {\r\n                    ps[i].blowUp = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateLast(\r\n        address user,\r\n        uint256[] memory stakingAmount,\r\n        uint128[] memory lastUpdate\r\n    ) private {\r\n        for (uint256 i = 0; i < stakingAmount.length; ++i) {\r\n            stakingPerUser[user][i] = stakingAmount[i];\r\n        }\r\n        for (uint256 i = 0; i < lastUpdate.length; ++i) {\r\n            if (\r\n                lastUpdate[i] > 0 &&\r\n                lastIssueUpdatePerUser[user][i] != lastUpdate[i]\r\n            ) {\r\n                lastIssueUpdatePerUser[user][i] = lastUpdate[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateBalanceLuckyPoints(\r\n        address user,\r\n        uint256 balance,\r\n        uint256 points,\r\n        uint256 unwithdraw\r\n    ) private {\r\n        pointsPerUser[user] = points;\r\n        balancePerUser[user] = balance;\r\n        unwithdrawPerUser[user] = unwithdraw;\r\n    }\r\n\r\n    modifier onlyMinMachine() {\r\n        require(mintMachineAddress == msg.sender, \"not operator\");\r\n        _;\r\n    }\r\n\r\n    function mintMachine(address account, uint256 point) external onlyMinMachine {\r\n        checkPoolBlowUp();\r\n        (\r\n            uint256 balance,\r\n            uint256 points,\r\n            uint256[] memory stakingAmount,\r\n            uint128[] memory lastUpdate,\r\n            uint256 unwithdraw\r\n        ) = calBalance(account);\r\n        require(points >= point, \"Insufficient points\");\r\n        updateLast(account, stakingAmount, lastUpdate);\r\n        updateBalanceLuckyPoints(\r\n            account,\r\n            balance,\r\n            points.sub(point),\r\n            unwithdraw\r\n        );\r\n        emit MintMachine(account, point);\r\n    }\r\n\r\n    function getTotalDividentNumber() public view returns(uint256) {\r\n        return _dividentMapping.length;\r\n    }\r\n\r\n    function earnDivident(address account) public view returns(uint256) {\r\n        if(_dividentMappingIndex[account] <= 0) return 0;\r\n        return _rewardPerTokenStored.sub(_userRewardPerTokenPaid[account]);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctaTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receivedFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintMachineAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"BuyPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetDividentReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"MintMachine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"NetSubPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"issueNo\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issueCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"NewIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"issueNo\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Save\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"StakeSubPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"SwapPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"SwapPoints2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTEREST_MARGIN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUE_PERIOD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUE_PER_ROUND\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dividentMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dividentMappingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountAchievement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueNo\",\"type\":\"uint256\"}],\"name\":\"amountByIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"amountPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkLevelCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colSafeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnDivident\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividentReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividentNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"initBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"initPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"interest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastIssueUpdatePerUser\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastMarginIssuePerPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastSaveIssuePerPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"mintMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMachineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"netInterestPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"}],\"name\":\"newPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initCap\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"currIssue\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"blowUp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currIssueAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initCap\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"currIssue\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"blowUp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currIssueAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CTADaoFinanceV2.Pool[]\",\"name\":\"ps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"actualIssues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivedFeeAddressc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rel\",\"outputs\":[{\"internalType\":\"contract Rel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintMachineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctaTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receivedFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamAchievement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unwithdrawPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CTADaoFinanceV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000834f7c6e4992556c424ec8ef5eeb782ff3f21e5e000000000000000000000000b33b34cafb0172569a013a74edc0c70aa1844e15000000000000000000000000cc7a9b5e0b20f1363a79544c2ef84ce7bf50ab570000000000000000000000006b6ed9413f43158c60f0a02b2b4487c6e53df606000000000000000000000000752ac5a18a58cee99aea246cd1fcd9a903d7633e0000000000000000000000000960701a34295f0f58ff19c8c67da57c14356cd0000000000000000000000000764f22657910c70b6439403068923c9535326830000000000000000000000000916e47de04a84c22ce4f4c6026955774b6e0c8db", "EVMVersion": "Default", "Library": "Utility:6475e9b534ee354acbb5a7a0b4b3c670b6676ebe", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://486b592f211aefef88e07d98eb42fe83c2f2d9cec642942c5dda8d012454d31a"}