{"SourceCode": "// File: OpenerV2/Contracts/interfaces/IUniswapV2Router.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: OpenerV2/Contracts/interfaces/BundlesInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface BundlesInterface {\r\n    function getBundleDistribution(uint256 tokenId) external view returns(uint16[][] memory, address[][] memory, uint256);\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: OpenerV2/Contracts/interfaces/OpenerMintInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface OpenerMintInterface is IERC721 {\r\n\r\n    struct MarketplaceDistribution {\r\n        uint16[] marketplaceDistributionRates;\r\n        address[] marketplaceDistributionAddresses;\r\n    }\r\n\r\n    function mint(uint256 tokenId) external;\r\n    function getLastNFTID() external returns(uint256);\r\n    function setLastNFTID(uint256 newId) external;\r\n\r\n    function setRegisteredID(address _account, uint256 _id) external;\r\n    function pushRegisteredIDsArray(address _account, uint256 _id) external;\r\n    function exists(uint256 _tokenId) external view returns (bool);\r\n    function alreadyMinted(uint256 _tokenId) external view returns (bool);\r\n    function mintedCounts(address _account) external view returns (uint256);\r\n    function getRegisteredIDs(address _account) external view returns (uint256[] memory);\r\n    \r\n    function setMarketplaceDistribution(uint16[] memory distributionRates, address[] memory distributionAddresses, uint256 _id) external;\r\n    function getMarketplaceDistributionForERC721(uint256 _tokenId) external view returns(uint16[] memory, address[] memory);\r\n\r\n    function setAdmin(address admin_) external;\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: OpenerV2/Contracts/interfaces/IMarketplaceRealFevrV3.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IMarketplaceRealFevrV3 {\r\n    struct MarketplaceFees {\r\n        bool rightHolderFlag;\r\n        bool marketplaceFeeFlag;\r\n        uint256[] marketplaceFees;\r\n        address[] feeAddresses;\r\n        bool buybackTakeFee;\r\n        uint256 buybackFee;\r\n    }\r\n\r\n    struct Sale {\r\n        address collectionAddress;\r\n        address erc20payment; // if address = 0x0, accepted payment is eth\r\n        uint256 saleId;\r\n        uint256 tokenId;\r\n        //uint256 timesSold;\r\n        uint256 price;\r\n        address payable seller;\r\n        address buyer;\r\n        uint256 date;\r\n    }\r\n\r\n    struct Offer {\r\n        uint256 offerId;\r\n        address collectionAddress;\r\n        uint256 tokenId;\r\n        address payment;\r\n        uint256 price;\r\n        bool accepted;\r\n        bool cancelled;\r\n        address user;\r\n    }\r\n\r\n    struct dataType {\r\n        address collectionAddress;\r\n        address payment;\r\n        uint256 price;\r\n        uint256 tokenId;\r\n        bool _buyERC721;\r\n        address payable seller;\r\n    }\r\n\r\n    event SaleCreated(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        address erc20Payment,\r\n        uint256 price,\r\n        address indexed creator,\r\n        uint256 saleId\r\n    );\r\n    event SaleCanceled(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed creator,\r\n        uint256 saleId\r\n    );\r\n    event SaleCompleted(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed buyer,\r\n        uint256 price,\r\n        uint256 saleId\r\n    );\r\n\r\n    // offers\r\n    event OfferFulfilled(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed offerId\r\n    );\r\n    event OfferPlaced(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed offerId\r\n    );\r\n    event OfferCancelled(\r\n        address indexed collectionAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed offerId\r\n    );\r\n\r\n    event Buyback(uint256 indexed ethAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable2Step.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n\r\n// File: OpenerV2/Contracts/marketplaceV3.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MarketplaceRealFevrV3 is\r\n    Ownable2Step,\r\n    Pausable,\r\n    ReentrancyGuard,\r\n    IMarketplaceRealFevrV3\r\n{\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint256 public saleIncrementId;\r\n    uint256 public offerIndex;\r\n    address public immutable deadAddress;\r\n    address public fevr;\r\n\r\n    EnumerableSet.AddressSet private acceptableERC20s; // if erc20 is acceptable as form of payment, this is to display in frontend\r\n    EnumerableSet.AddressSet private acceptableCollectionAddresses; // if ecr20 is acceptable as form of payment\r\n    EnumerableSet.UintSet private availableSaleIds;\r\n    EnumerableSet.UintSet private availableOfferIds;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    bool public buybackEnabled;\r\n\r\n    mapping(address => bool) public salesClosedForCollection;\r\n    //buyback variables\r\n    mapping(address => uint256) minTokensBeforeSwap;\r\n    mapping(address => uint256) tokensHeld;\r\n    mapping(uint256 => Sale) public sales; // maps sale id with sales struct\r\n    mapping(address => mapping(uint256 => bool)) public rejectOffers;\r\n    mapping(address => bool) public isBundleAddress;\r\n    mapping(address => MarketplaceFees) public nftAddressToMarketplace;\r\n    mapping(uint256 => Offer) public offerIds;\r\n\r\n    constructor(address _fevrAddress) {\r\n        require(_fevrAddress != address(0), \"zero fevr token address\");\r\n\r\n        offerIndex = 1;\r\n        saleIncrementId = 1;\r\n        _setAcceptableERC20(address(0), true); // accept eth/bnb as payment\r\n        deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n        fevr = _fevrAddress;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function isNativeTransaction(address _erc20) public pure returns (bool) {\r\n        return _erc20 == address(0);\r\n    }\r\n\r\n    function getAcceptableCollectionAddresses()\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return acceptableCollectionAddresses.values();\r\n    }\r\n\r\n    function getMarketplaceFeesAndAddressesForCollection(\r\n        address collection\r\n    ) external view returns (uint256[] memory, address[] memory) {\r\n        return (\r\n            nftAddressToMarketplace[collection].marketplaceFees,\r\n            nftAddressToMarketplace[collection].feeAddresses\r\n        );\r\n    }\r\n\r\n    function getAcceptableERC20s() external view returns (address[] memory) {\r\n        return acceptableERC20s.values();\r\n    }\r\n\r\n    function getAvailableSaleIds() external view returns (uint256[] memory) {\r\n        return availableSaleIds.values();\r\n    }\r\n\r\n    function getAvailableOfferIds() external view returns (uint256[] memory) {\r\n        return availableOfferIds.values();\r\n    }\r\n\r\n    function setIsBundle(\r\n        address bundleAddress,\r\n        bool state\r\n    ) external onlyOwner whenNotPaused {\r\n        isBundleAddress[bundleAddress] = state;\r\n    }\r\n\r\n    function setSalesClosedForCollection(\r\n        address _collection,\r\n        bool _state\r\n    ) external onlyOwner whenNotPaused {\r\n        salesClosedForCollection[_collection] = _state;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _state) external onlyOwner whenNotPaused {\r\n        buybackEnabled = _state;\r\n    }\r\n\r\n    function setBuyBackTakeFee(\r\n        address _address,\r\n        bool _state\r\n    ) external onlyOwner whenNotPaused {\r\n        nftAddressToMarketplace[_address].buybackTakeFee = _state;\r\n    }\r\n\r\n    function editRejectOffers(\r\n        address collectionAddress,\r\n        uint256 _tokenId,\r\n        bool _state\r\n    ) external whenNotPaused {\r\n        require(\r\n            acceptableCollectionAddresses.contains(collectionAddress),\r\n            \"This collection address is not accepted\"\r\n        );\r\n        require(\r\n            IERC721(collectionAddress).ownerOf(_tokenId) == msg.sender,\r\n            \"Not the owner\"\r\n        );\r\n        rejectOffers[collectionAddress][_tokenId] = _state;\r\n    }\r\n\r\n    function addERC20AcceptablePayment(\r\n        address _token\r\n    ) external onlyOwner whenNotPaused {\r\n        _setAcceptableERC20(_token, true);\r\n    }\r\n\r\n    function removeERC20AcceptablePayment(\r\n        address _token\r\n    ) external onlyOwner whenNotPaused {\r\n        _setAcceptableERC20(_token, false);\r\n    }\r\n\r\n    function addAcceptableCollectionAddress(\r\n        address _collection\r\n    ) external onlyOwner whenNotPaused {\r\n        _setAcceptableCollection(_collection, true);\r\n    }\r\n\r\n    function removeAcceptableCollectionAddress(\r\n        address _collection\r\n    ) external onlyOwner whenNotPaused {\r\n        _setAcceptableCollection(_collection, false);\r\n    }\r\n\r\n    function putERC721OnSale(\r\n        address _collectionAddress,\r\n        uint256 _tokenId,\r\n        address _erc20payment,\r\n        uint256 _price\r\n    ) public whenNotPaused nonReentrant {\r\n        require(\r\n            checkCollectionAddressAccepted(_collectionAddress),\r\n            \"This collection address is not accepted\"\r\n        );\r\n        require(\r\n            checkERC20Payment(_erc20payment),\r\n            \"This token is not acceptable for payment\"\r\n        );\r\n        require(\r\n            IERC721(_collectionAddress).ownerOf(_tokenId) == msg.sender,\r\n            \"Not Owner of the NFT\"\r\n        );\r\n        require(\r\n            !salesClosedForCollection[address(_collectionAddress)],\r\n            \"Sales are closed for this collection\"\r\n        );\r\n\r\n        IERC721(_collectionAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n        // Create Sale Object\r\n        uint256 curSaleId = saleIncrementId;\r\n        sales[saleIncrementId++] = Sale(\r\n            _collectionAddress,\r\n            _erc20payment,\r\n            curSaleId,\r\n            _tokenId,\r\n            _price,\r\n            payable(msg.sender),\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n\r\n        availableSaleIds.add(curSaleId);\r\n        emit SaleCreated(\r\n            _collectionAddress,\r\n            _tokenId,\r\n            _erc20payment,\r\n            _price,\r\n            msg.sender,\r\n            curSaleId\r\n        );\r\n    }\r\n\r\n    function putMultipleERC721OnSale(\r\n        address[] memory _collectionAddress,\r\n        uint256[] memory _tokenId,\r\n        address[] memory _erc20payment,\r\n        uint256[] memory _price\r\n    ) external whenNotPaused {\r\n        for (uint256 i = 0; i < _collectionAddress.length; i++) {\r\n            putERC721OnSale(\r\n                _collectionAddress[i],\r\n                _tokenId[i],\r\n                _erc20payment[i],\r\n                _price[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeERC721FromSale(\r\n        uint256 _saleID\r\n    ) external whenNotPaused nonReentrant {\r\n        Sale memory sale = sales[_saleID];\r\n        address sender = msg.sender;\r\n\r\n        require(availableSaleIds.contains(_saleID), \"not exists saleID\");\r\n        require(sale.seller == sender, \"not sale creator\");\r\n\r\n        IERC721(sale.collectionAddress).transferFrom(\r\n            address(this),\r\n            sale.seller,\r\n            sale.tokenId\r\n        );\r\n        emit SaleCanceled(\r\n            sale.collectionAddress,\r\n            sale.tokenId,\r\n            sender,\r\n            _saleID\r\n        );\r\n\r\n        availableSaleIds.remove(_saleID);\r\n        delete sales[_saleID];\r\n    }\r\n\r\n    function setBuybackFee(\r\n        address _address,\r\n        uint256 _buybackFee\r\n    ) external onlyOwner whenNotPaused {\r\n        require(_buybackFee < 100, \"Fee Percentage has to be lower than 100\");\r\n        nftAddressToMarketplace[_address].buybackFee = _buybackFee;\r\n    }\r\n\r\n    function removeERC721FromSaleAdmin(\r\n        uint256 _saleID\r\n    ) external onlyOwner whenNotPaused {\r\n        Sale memory sale = sales[_saleID];\r\n\r\n        require(availableSaleIds.contains(_saleID), \"not exists saleID\");\r\n        IERC721(sale.collectionAddress).transferFrom(\r\n            address(this),\r\n            sale.seller,\r\n            sale.tokenId\r\n        );\r\n\r\n        emit SaleCanceled(\r\n            sale.collectionAddress,\r\n            sale.tokenId,\r\n            sale.seller,\r\n            _saleID\r\n        );\r\n        availableSaleIds.remove(_saleID);\r\n        delete sales[_saleID];\r\n    }\r\n\r\n    function buyERC721(\r\n        uint256 _saleId\r\n    ) public payable whenNotPaused nonReentrant {\r\n        Sale memory sale = sales[_saleId];\r\n        require(availableSaleIds.contains(_saleId), \"not exists saleID\");\r\n        require(\r\n            !salesClosedForCollection[address(sale.collectionAddress)],\r\n            \"Sales are closed for this collection\"\r\n        );\r\n\r\n        //processFeePayments();\r\n        processFeePayments(\r\n            dataType(\r\n                sale.collectionAddress,\r\n                sale.erc20payment,\r\n                sale.price,\r\n                sale.tokenId,\r\n                true,\r\n                sale.seller\r\n            )\r\n        );\r\n\r\n        //Transfer ERC721 to buyer\r\n        IERC721(sale.collectionAddress).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            sale.tokenId\r\n        );\r\n\r\n        emit SaleCompleted(\r\n            sale.collectionAddress,\r\n            sale.tokenId,\r\n            msg.sender,\r\n            sale.price,\r\n            _saleId\r\n        );\r\n        availableSaleIds.remove(_saleId);\r\n        delete sales[_saleId];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    //place bid\r\n    function placeOffer(\r\n        address _collectionAddress,\r\n        uint256 _tokenId,\r\n        address _erc20payment,\r\n        uint256 _price\r\n    ) external payable whenNotPaused nonReentrant {\r\n        address sender = msg.sender;\r\n\r\n        require(\r\n            !rejectOffers[_collectionAddress][_tokenId],\r\n            \"Owner has blocked offers\"\r\n        );\r\n        require(\r\n            checkCollectionAddressAccepted(_collectionAddress),\r\n            \"This collection address is not accepted\"\r\n        );\r\n        require(\r\n            IERC721(_collectionAddress).ownerOf(_tokenId) != address(this),\r\n            \"NFT is already on sale\"\r\n        );\r\n        require(\r\n            checkERC20Payment(_erc20payment),\r\n            \"This token is not acceptable for payment\"\r\n        );\r\n        require(\r\n            !salesClosedForCollection[address(_collectionAddress)],\r\n            \"Sales are closed for this collection\"\r\n        );\r\n        require(_price > 0, \"invalid offer price\");\r\n\r\n        uint256 curOfferId = offerIndex;\r\n        offerIds[curOfferId] = Offer(\r\n            curOfferId,\r\n            _collectionAddress,\r\n            _tokenId,\r\n            _erc20payment,\r\n            _price,\r\n            false,\r\n            false,\r\n            sender\r\n        );\r\n\r\n        if (isNativeTransaction(_erc20payment)) {\r\n            // if payment is eth/bnb\r\n            uint256 receivedAmount = msg.value;\r\n            require(\r\n                receivedAmount > 0 && receivedAmount == _price,\r\n                \"Price is not set correctly\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC20(_erc20payment).transferFrom(\r\n                    sender,\r\n                    address(this),\r\n                    _price\r\n                ),\r\n                \"ERC20 transfer failed\"\r\n            );\r\n        }\r\n\r\n        availableOfferIds.add(offerIndex);\r\n        emit OfferPlaced(_collectionAddress, _tokenId, offerIndex++);\r\n    }\r\n\r\n    function acceptOffer(uint256 _offerId) external whenNotPaused nonReentrant {\r\n        Offer memory offer = offerIds[_offerId];\r\n        require(!offer.accepted, \"Offer already accepted\");\r\n        require(!offer.cancelled, \"Offer is cancelled\");\r\n        require(availableOfferIds.contains(_offerId), \"not exists offerId\");\r\n        require(\r\n            !salesClosedForCollection[address(offer.collectionAddress)],\r\n            \"Sales are closed for this collection\"\r\n        );\r\n        require(\r\n            IERC721(offer.collectionAddress).ownerOf(offer.tokenId) ==\r\n                msg.sender,\r\n            \"Not offer maker\"\r\n        );\r\n\r\n        processFeePayments(\r\n            dataType(\r\n                offer.collectionAddress,\r\n                offer.payment,\r\n                offer.price,\r\n                offer.tokenId,\r\n                false,\r\n                payable(address(0))\r\n            )\r\n        );\r\n\r\n        //Transfer ERC721 to user who made the offer\r\n        IERC721(offer.collectionAddress).transferFrom(\r\n            msg.sender,\r\n            offer.user,\r\n            offer.tokenId\r\n        );\r\n\r\n        offerIds[_offerId].accepted = true;\r\n        availableOfferIds.remove(_offerId);\r\n        emit OfferFulfilled(offer.collectionAddress, offer.tokenId, _offerId);\r\n    }\r\n\r\n    function cancelOffer(uint256 _offerId) external whenNotPaused nonReentrant {\r\n        Offer storage offer = offerIds[_offerId];\r\n        address sender = msg.sender;\r\n\r\n        require(sender == offer.user, \"Not owner of this offer\");\r\n        require(!offer.cancelled, \"Already cancelled\");\r\n        require(!offer.accepted, \"Offer is already accepted\");\r\n        require(availableOfferIds.contains(_offerId), \"not exits offerId\");\r\n\r\n        if (isNativeTransaction(offer.payment)) {\r\n            payable(sender).transfer(offer.price);\r\n        } else {\r\n            require(\r\n                IERC20(offer.payment).transfer(sender, offer.price),\r\n                \"ERC20 transfer failed\"\r\n            );\r\n        }\r\n\r\n        offer.cancelled = true;\r\n        availableOfferIds.remove(_offerId);\r\n        emit OfferCancelled(offer.collectionAddress, offer.tokenId, _offerId);\r\n    }\r\n\r\n    function changeMinTokens(\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyOwner whenNotPaused {\r\n        minTokensBeforeSwap[_token] = _amount;\r\n    }\r\n\r\n    function setFevrAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"zero fevr token address\");\r\n        fevr = newAddress;\r\n    }\r\n\r\n    function setRightholderFlag(\r\n        address nftAddress,\r\n        bool state\r\n    ) external onlyOwner whenNotPaused {\r\n        nftAddressToMarketplace[nftAddress].rightHolderFlag = state;\r\n    }\r\n\r\n    function setMarketplaceFeeFlag(\r\n        address nftAddress,\r\n        bool state\r\n    ) external onlyOwner whenNotPaused {\r\n        nftAddressToMarketplace[nftAddress].marketplaceFeeFlag = state;\r\n    }\r\n\r\n    function setMarketplaceFeesAndAddressesForCollection(\r\n        address collection,\r\n        uint256[] memory fees,\r\n        address[] memory addresses\r\n    ) external onlyOwner whenNotPaused {\r\n        require(fees.length > 0, \"zero array length\");\r\n        require(fees.length == addresses.length, \"Wrong length\");\r\n        nftAddressToMarketplace[collection].marketplaceFees = fees;\r\n        nftAddressToMarketplace[collection].feeAddresses = addresses;\r\n    }\r\n\r\n    function checkERC20Payment(address _address) internal view returns (bool) {\r\n        return acceptableERC20s.contains(_address);\r\n    }\r\n\r\n    function checkCollectionAddressAccepted(\r\n        address _address\r\n    ) internal view returns (bool) {\r\n        return acceptableCollectionAddresses.contains(_address);\r\n    }\r\n\r\n    function buyback(uint256 _amount) internal {\r\n        swapETHForTokens(_amount);\r\n    }\r\n\r\n    function swapETHForTokens(uint256 _amount) internal {\r\n        // Generate the uniswap pair path of token -> WETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = fevr;\r\n\r\n        // Create the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: _amount\r\n        }(\r\n            0, // Accept any amount of Tokens\r\n            path,\r\n            deadAddress,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    // @parameter \"buyERC721\" if true it means function is called by buyERC721(), if false its called by acceptOffer()\r\n    function processFeePayments(dataType memory p) internal {\r\n        //Get Marketplace Sale Distibutions on the Smart Contract\r\n\r\n        // this block scope trick saves function from \"stack too deep\" error\r\n        {\r\n            uint256 buybackFee = 0;\r\n\r\n            if (nftAddressToMarketplace[p.collectionAddress].buybackTakeFee) {\r\n                buybackFee =\r\n                    (p.price *\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .buybackFee) /\r\n                    100;\r\n            }\r\n\r\n            if (isNativeTransaction(p.payment)) {\r\n                if (p._buyERC721) {\r\n                    require(\r\n                        p.price == msg.value,\r\n                        \"Require Amount of Native Currency to be correct\"\r\n                    );\r\n                }\r\n\r\n                uint256 totalFee = 0;\r\n                if (!isBundleAddress[p.collectionAddress]) {\r\n                    if (\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .rightHolderFlag\r\n                    ) {\r\n                        (\r\n                            uint16[] memory distributionRates,\r\n                            address[] memory distributionAddresses\r\n                        ) = OpenerMintInterface(p.collectionAddress)\r\n                                .getMarketplaceDistributionForERC721(p.tokenId);\r\n                        for (uint i = 0; i < distributionRates.length; i++) {\r\n                            if (distributionAddresses[i] != address(0)) {\r\n                                // Transfer fee to fee address\r\n                                uint256 feeAmount = (distributionRates[i] *\r\n                                    p.price) / 100;\r\n                                _transferETH(\r\n                                    distributionAddresses[i],\r\n                                    feeAmount\r\n                                );\r\n                                totalFee += feeAmount;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .rightHolderFlag\r\n                    ) {\r\n                        (\r\n                            uint16[][] memory distributionRates,\r\n                            address[][] memory distributionAddresses,\r\n                            uint256 sumNFTs\r\n                        ) = BundlesInterface(address(p.collectionAddress))\r\n                                .getBundleDistribution(p.tokenId);\r\n                        for (uint i = 0; i < distributionRates.length; i++) {\r\n                            for (\r\n                                uint j = 0;\r\n                                j < distributionRates[i].length;\r\n                                j++\r\n                            ) {\r\n                                if (distributionAddresses[i][j] != address(0)) {\r\n                                    // Transfer fee to fee address\r\n                                    uint256 feeAmount = (((\r\n                                        distributionRates[i][j]\r\n                                    ) * p.price) / sumNFTs) / 100;\r\n                                    _transferETH(\r\n                                        distributionAddresses[i][j],\r\n                                        feeAmount\r\n                                    );\r\n                                    totalFee += feeAmount;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                uint256 marketplaceFeeAmount = 0;\r\n                // take marketplace fee\r\n                if (\r\n                    nftAddressToMarketplace[p.collectionAddress]\r\n                        .marketplaceFeeFlag\r\n                ) {\r\n                    for (\r\n                        uint i = 0;\r\n                        i <\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .marketplaceFees\r\n                            .length;\r\n                        i++\r\n                    ) {\r\n                        if (\r\n                            nftAddressToMarketplace[p.collectionAddress]\r\n                                .feeAddresses[i] !=\r\n                            address(0) &&\r\n                            nftAddressToMarketplace[p.collectionAddress]\r\n                                .marketplaceFees[i] !=\r\n                            0\r\n                        ) {\r\n                            uint256 feeAmount = (nftAddressToMarketplace[\r\n                                p.collectionAddress\r\n                            ].marketplaceFees[i] * p.price) / 100;\r\n                            _transferETH(\r\n                                nftAddressToMarketplace[p.collectionAddress]\r\n                                    .feeAddresses[i],\r\n                                feeAmount\r\n                            );\r\n                            marketplaceFeeAmount += feeAmount;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (p._buyERC721) {\r\n                    //Transfer Native Currency to seller minus fees\r\n                    uint256 amountForSeller = p.price -\r\n                        marketplaceFeeAmount -\r\n                        totalFee -\r\n                        buybackFee;\r\n                    _transferETH(p.seller, amountForSeller);\r\n                } else {\r\n                    //Transfer Native Currency to seller minus fees\r\n                    uint256 amountForSeller = p.price -\r\n                        marketplaceFeeAmount -\r\n                        totalFee -\r\n                        buybackFee;\r\n                    _transferETH(msg.sender, amountForSeller);\r\n                }\r\n                tokensHeld[address(0)] += buybackFee;\r\n            } else {\r\n                if (p._buyERC721) {\r\n                    //Transfer ERC20 to contract\r\n                    require(\r\n                        IERC20(p.payment).transferFrom(\r\n                            msg.sender,\r\n                            address(this),\r\n                            p.price\r\n                        ),\r\n                        \"Contract was not allowed to do the transfer\"\r\n                    );\r\n                }\r\n\r\n                uint256 totalFee = 0;\r\n                if (!isBundleAddress[p.collectionAddress]) {\r\n                    if (\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .rightHolderFlag\r\n                    ) {\r\n                        (\r\n                            uint16[] memory distributionRates,\r\n                            address[] memory distributionAddresses\r\n                        ) = OpenerMintInterface(p.collectionAddress)\r\n                                .getMarketplaceDistributionForERC721(p.tokenId);\r\n                        for (uint i = 0; i < distributionRates.length; i++) {\r\n                            if (distributionAddresses[i] != address(0)) {\r\n                                // Transfer fee to fee address\r\n                                uint256 feeAmount = (distributionRates[i] *\r\n                                    p.price) / 100;\r\n                                require(\r\n                                    IERC20(p.payment).transfer(\r\n                                        distributionAddresses[i],\r\n                                        feeAmount\r\n                                    ),\r\n                                    \"Contract was not allowed to do the transfer\"\r\n                                );\r\n                                totalFee += feeAmount;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .rightHolderFlag\r\n                    ) {\r\n                        (\r\n                            uint16[][] memory distributionRates,\r\n                            address[][] memory distributionAddresses,\r\n                            uint256 sumNFTs\r\n                        ) = BundlesInterface(address(p.collectionAddress))\r\n                                .getBundleDistribution(p.tokenId);\r\n                        for (uint i = 0; i < distributionRates.length; i++) {\r\n                            for (\r\n                                uint j = 0;\r\n                                j < distributionRates[i].length;\r\n                                j++\r\n                            ) {\r\n                                if (distributionAddresses[i][j] != address(0)) {\r\n                                    // Transfer fee to fee address\r\n                                    uint256 multiplier = 10000;\r\n                                    // (5 / 10 * 1 / 100) = 0.5 / 100 = 0.005\r\n                                    uint256 feeAmount = (((multiplier *\r\n                                        distributionRates[i][j]) / sumNFTs) *\r\n                                        p.price) /\r\n                                        100 /\r\n                                        multiplier;\r\n                                    require(\r\n                                        IERC20(p.payment).transfer(\r\n                                            distributionAddresses[i][j],\r\n                                            feeAmount\r\n                                        ),\r\n                                        \"Contract was not allowed to do the transfer\"\r\n                                    );\r\n                                    totalFee += feeAmount;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                uint256 marketplaceFeeAmount;\r\n                // take marketplace fee\r\n                if (\r\n                    nftAddressToMarketplace[p.collectionAddress]\r\n                        .marketplaceFeeFlag\r\n                ) {\r\n                    // Transfer fee to fee address\r\n                    for (\r\n                        uint i = 0;\r\n                        i <\r\n                        nftAddressToMarketplace[p.collectionAddress]\r\n                            .marketplaceFees\r\n                            .length;\r\n                        i++\r\n                    ) {\r\n                        if (\r\n                            nftAddressToMarketplace[p.collectionAddress]\r\n                                .feeAddresses[i] !=\r\n                            address(0) &&\r\n                            nftAddressToMarketplace[p.collectionAddress]\r\n                                .marketplaceFees[i] !=\r\n                            0\r\n                        ) {\r\n                            uint256 feeAmount = (nftAddressToMarketplace[\r\n                                p.collectionAddress\r\n                            ].marketplaceFees[i] * p.price) / 100;\r\n                            require(\r\n                                IERC20(p.payment).transfer(\r\n                                    nftAddressToMarketplace[p.collectionAddress]\r\n                                        .feeAddresses[i],\r\n                                    feeAmount\r\n                                ),\r\n                                \"Contract was not allowed to do the transfer\"\r\n                            );\r\n                            marketplaceFeeAmount += feeAmount;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Transfer ERC20 to owner of nft\r\n                if (p._buyERC721) {\r\n                    uint256 amountForSeller = p.price -\r\n                        marketplaceFeeAmount -\r\n                        totalFee -\r\n                        buybackFee;\r\n                    require(\r\n                        IERC20(p.payment).transfer(p.seller, amountForSeller),\r\n                        \"Wasnt able to transfer the ERC20 to the seller\"\r\n                    );\r\n                } else {\r\n                    uint256 amountForSeller = p.price -\r\n                        marketplaceFeeAmount -\r\n                        totalFee -\r\n                        buybackFee;\r\n                    require(\r\n                        IERC20(p.payment).transfer(msg.sender, amountForSeller),\r\n                        \"Wasnt able to transfer the ERC20 to the seller\"\r\n                    );\r\n                }\r\n                tokensHeld[p.payment] += buybackFee;\r\n            }\r\n        }\r\n\r\n        //buyback\r\n        if (\r\n            tokensHeld[p.payment] >= minTokensBeforeSwap[p.payment] &&\r\n            buybackEnabled\r\n        ) {\r\n            uint256 newBalance;\r\n            bool success = false; // if payment is eth or if token has liquidity pool\r\n\r\n            if (address(p.payment) == address(0)) {\r\n                // if eth was payment\r\n                //do things in eth way\r\n                newBalance = minTokensBeforeSwap[p.payment];\r\n                success = true; // enable flag for buyback\r\n            } else {\r\n                if (address(p.payment) != fevr) {\r\n                    uint256 initialBalance = address(this).balance;\r\n\r\n                    // generate the uniswap pair path of token -> weth\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(p.payment);\r\n                    path[1] = uniswapV2Router.WETH();\r\n\r\n                    IERC20(p.payment).approve(\r\n                        address(uniswapV2Router),\r\n                        minTokensBeforeSwap[p.payment]\r\n                    );\r\n\r\n                    // try to swap token for eth (if pool doesnt exist or wrong amount dont revert)\r\n                    try\r\n                        uniswapV2Router\r\n                            .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                                minTokensBeforeSwap[p.payment],\r\n                                0, // accept any amount of ETH\r\n                                path,\r\n                                address(this),\r\n                                block.timestamp\r\n                            )\r\n                    {\r\n                        success = true;\r\n                        newBalance = address(this).balance - initialBalance;\r\n                    } catch {\r\n                        success = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (success && address(p.payment) != fevr) {\r\n                tokensHeld[p.payment] -= minTokensBeforeSwap[p.payment];\r\n                buyback(newBalance);\r\n                emit Buyback(newBalance);\r\n            }\r\n            if (address(p.payment) == fevr) {\r\n                // if fevr just burn\r\n                IERC20(fevr).transfer(\r\n                    deadAddress,\r\n                    minTokensBeforeSwap[p.payment]\r\n                );\r\n                tokensHeld[p.payment] -= minTokensBeforeSwap[p.payment];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferETH(address _recipient, uint256 _amount) internal {\r\n        (bool sent, ) = _recipient.call{value: _amount}(\"\");\r\n        require(sent, \"Contract was not alloed to do the transfer\");\r\n    }\r\n\r\n    function _setAcceptableERC20(address _token, bool _isAdd) internal {\r\n        if (_isAdd) {\r\n            require(!acceptableERC20s.contains(_token), \"already added\");\r\n            acceptableERC20s.add(_token);\r\n        } else {\r\n            require(acceptableERC20s.contains(_token), \"already removed\");\r\n            acceptableERC20s.remove(_token);\r\n        }\r\n    }\r\n\r\n    function _setAcceptableCollection(\r\n        address _collection,\r\n        bool _isAdd\r\n    ) internal {\r\n        if (_isAdd) {\r\n            require(\r\n                !acceptableCollectionAddresses.contains(_collection),\r\n                \"already added\"\r\n            );\r\n            acceptableCollectionAddresses.add(_collection);\r\n        } else {\r\n            require(\r\n                acceptableCollectionAddresses.contains(_collection),\r\n                \"already removed\"\r\n            );\r\n            acceptableCollectionAddresses.remove(_collection);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fevrAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Buyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Payment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"addAcceptableCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addERC20AcceptablePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"buyERC721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeMinTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"editRejectOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fevr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptableCollectionAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptableERC20s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableOfferIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableSaleIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getMarketplaceFeesAndAddressesForCollection\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBundleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"isNativeTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftAddressToMarketplace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rightHolderFlag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"marketplaceFeeFlag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"buybackTakeFee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"putERC721OnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collectionAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_erc20payment\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_price\",\"type\":\"uint256[]\"}],\"name\":\"putMultipleERC721OnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rejectOffers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"removeAcceptableCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeERC20AcceptablePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"}],\"name\":\"removeERC721FromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"}],\"name\":\"removeERC721FromSaleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIncrementId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"salesClosedForCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBuyBackTakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setFevrAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bundleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setIsBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMarketplaceFeeFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setMarketplaceFeesAndAddressesForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setRightholderFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSalesClosedForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketplaceRealFevrV3", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000082030cdbd9e4b7c5bb0b811a61da6360d69449cc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a33fa730279d1f1e21f6de2ac5a00e39743e0dd2a7d530826df7bdb798cd762a"}