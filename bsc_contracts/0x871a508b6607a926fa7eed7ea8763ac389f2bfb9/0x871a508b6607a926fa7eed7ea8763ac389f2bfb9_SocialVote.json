{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\ninterface ISocialStakeNft {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function mint(address to, uint256 id) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function setStakeContract(address _address) external;\r\n\r\n    function stakeContract() external view returns (address);\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IStakeV {\r\n    function increaseApr(uint256 tokenId, uint256 voteCountOrAvaragePoints)\r\n        external;\r\n}\r\n\r\ncontract SocialVote is Ownable {\r\n    error InvalidNft();\r\n    error LinkIsAlreadyUsed();\r\n    error InvalidPoint();\r\n    error VoterMustBeNftOwner();\r\n    error InvalidArrayLen();\r\n    error AlreadyVoted();\r\n    error NumberOfVotesMustBeAtLeast25PercentForPost();\r\n    error InvalidAvaragePoint();\r\n    error VoteDoesNotStarted();\r\n    error InvalidPost();\r\n    error PostAlreadyFinalized();\r\n\r\n    event AddVote(string link, uint256 indexed tokenId);\r\n    event LinkAdded(string link, uint256 indexed tokenId);\r\n    event PostFinalized(string link, uint256 indexed tokenId);\r\n\r\n    ISocialStakeNft public immutable nft;\r\n    IStakeV public immutable stake;\r\n\r\n    constructor(address _nft, address _stake) {\r\n        nft = ISocialStakeNft(_nft);\r\n        stake = IStakeV(_stake);\r\n    }\r\n\r\n    struct SocialPost {\r\n        string url;\r\n        uint256 totalNumberOfVotes;\r\n        uint256 totalVotePoints;\r\n        uint256 creationTimeStamp;\r\n    }\r\n\r\n    //link => post\r\n    mapping(string => SocialPost) public userPosts;\r\n    //link => tokenId\r\n    mapping(string => uint256) public linkToTokenId;\r\n    //tokenId => link => voted\r\n    mapping(uint256 => mapping(string => bool)) public isVoted;\r\n    //all links array\r\n    string[] public allLinks;\r\n\r\n    // min time between addLink and voteLink\r\n    uint256 public timeUntilVote = 24 hours;\r\n\r\n    // 25_000 / 100_000\r\n    uint256 public postFinalizePercantage = 25000;\r\n\r\n    mapping(string => bool) isFinalized;\r\n\r\n    function addLink(uint256 tokenId, string calldata socialPostUrl) external {\r\n        if (nft.ownerOf(tokenId) != msg.sender) revert InvalidNft();\r\n        if (linkToTokenId[socialPostUrl] != 0) revert LinkIsAlreadyUsed();\r\n\r\n        userPosts[socialPostUrl] = SocialPost(\r\n            socialPostUrl,\r\n            0,\r\n            0,\r\n            block.timestamp\r\n        );\r\n        linkToTokenId[socialPostUrl] = tokenId;\r\n        emit LinkAdded(socialPostUrl, tokenId);\r\n        allLinks.push(socialPostUrl);\r\n    }\r\n\r\n    function getAllLinks() external view returns (string[] memory) {\r\n        return allLinks;\r\n    }\r\n\r\n    function _voteLink(\r\n        uint256 tokenId,\r\n        string calldata socialPostUrl,\r\n        uint256 point\r\n    ) internal {\r\n        if (point > 10) revert InvalidPoint();\r\n\r\n        if (isVoted[tokenId][socialPostUrl]) revert AlreadyVoted();\r\n        SocialPost storage post = userPosts[socialPostUrl];\r\n\r\n        uint256 timestamp = post.creationTimeStamp;\r\n        if (timestamp == 0) revert InvalidPost();\r\n        if (block.timestamp < timestamp + timeUntilVote)\r\n            revert VoteDoesNotStarted();\r\n\r\n        post.totalVotePoints += point;\r\n        post.totalNumberOfVotes++;\r\n        isVoted[tokenId][socialPostUrl] = true;\r\n    }\r\n\r\n    function voteLinks(\r\n        uint256 tokenId,\r\n        string[] calldata urls,\r\n        uint256[] calldata points\r\n    ) external {\r\n        if (nft.ownerOf(tokenId) != msg.sender) revert VoterMustBeNftOwner();\r\n        if (urls.length != points.length) revert InvalidArrayLen();\r\n\r\n        uint256 len = urls.length;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _voteLink(tokenId, urls[i], points[i]);\r\n            SocialPost memory post = userPosts[urls[i]];\r\n            uint256 totalSupply = nft.totalSupply();\r\n            if (\r\n                post.totalNumberOfVotes >=\r\n                (totalSupply * postFinalizePercantage) / 100000 &&\r\n                !isFinalized[urls[i]]\r\n            ) {\r\n                uint256 postTokenId = linkToTokenId[urls[i]];\r\n\r\n                uint256 avaragePoint = (post.totalVotePoints * 10) /\r\n                    post.totalNumberOfVotes;\r\n\r\n                stake.increaseApr(postTokenId, avaragePoint);\r\n\r\n                isFinalized[urls[i]] = true;\r\n\r\n                emit PostFinalized(urls[i], postTokenId);\r\n            }\r\n            emit AddVote(urls[i], tokenId);\r\n        }\r\n\r\n        stake.increaseApr(tokenId, len);\r\n    }\r\n\r\n    function finalizeVotedPost(string calldata socialPostUrl) external {\r\n        uint256 tokenId = linkToTokenId[socialPostUrl];\r\n        uint256 totalSupply = nft.totalSupply();\r\n\r\n        SocialPost memory post = userPosts[socialPostUrl];\r\n\r\n        if (isFinalized[socialPostUrl]) revert PostAlreadyFinalized();\r\n\r\n        if (\r\n            post.totalNumberOfVotes <\r\n            (totalSupply * postFinalizePercantage) / 100000\r\n        ) revert NumberOfVotesMustBeAtLeast25PercentForPost();\r\n\r\n        uint256 avaragePoint = (post.totalVotePoints * 10) /\r\n            post.totalNumberOfVotes;\r\n        if (avaragePoint == 0 || avaragePoint > 100)\r\n            revert InvalidAvaragePoint();\r\n\r\n        stake.increaseApr(tokenId, avaragePoint);\r\n\r\n        emit PostFinalized(socialPostUrl, tokenId);\r\n    }\r\n\r\n    function setTimeUntilVote(uint256 time) external onlyOwner {\r\n        timeUntilVote = time;\r\n    }\r\n\r\n    function setPostFinalizePercantage(uint256 _postFinalizePercantage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        postFinalizePercantage = _postFinalizePercantage;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAvaragePoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkIsAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberOfVotesMustBeAtLeast25PercentForPost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PostAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteDoesNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterMustBeNftOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AddVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LinkAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PostFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"socialPostUrl\",\"type\":\"string\"}],\"name\":\"addLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLinks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"socialPostUrl\",\"type\":\"string\"}],\"name\":\"finalizeVotedPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLinks\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"linkToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ISocialStakeNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postFinalizePercantage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postFinalizePercantage\",\"type\":\"uint256\"}],\"name\":\"setPostFinalizePercantage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setTimeUntilVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"contract IStakeV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userPosts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNumberOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"name\":\"voteLinks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SocialVote", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d11c48df7b27b9fec92b72f510bd1f3a78c190f30000000000000000000000001ede4145aeb1e831f1ab74f7f2fcfb5c7863e5f1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://876594cf27fd67df6f071d14311c11a4a9173065c6421aa59eb9566c553ef1c5"}