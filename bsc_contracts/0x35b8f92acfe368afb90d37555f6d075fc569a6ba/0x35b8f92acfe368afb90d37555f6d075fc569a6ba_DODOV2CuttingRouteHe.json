{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-11\r\n*/\r\n\r\n// File: contracts/SmartRoute/intf/IDODOV2.sol\r\n\r\n/*\r\n\r\n    Copyright 2022 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IDODOV2 {\r\n\r\n    //========== Common ==================\r\n\r\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\r\n\r\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\r\n\r\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function _BASE_TOKEN_() external view returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external view returns (address);\r\n\r\n    function getPMMStateForCall() external view returns (\r\n            uint256 i,\r\n            uint256 K,\r\n            uint256 B,\r\n            uint256 Q,\r\n            uint256 B0,\r\n            uint256 Q0,\r\n            uint256 R\r\n    );\r\n\r\n    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\r\n\r\n    \r\n    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\r\n\r\n    //========== DODOVendingMachine ========\r\n    \r\n    function createDODOVendingMachine(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newVendingMachine);\r\n    \r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n\r\n\r\n    //========== DODOPrivatePool ===========\r\n\r\n    function createDODOPrivatePool() external returns (address newPrivatePool);\r\n\r\n    function initDODOPrivatePool(\r\n        address dppAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 k,\r\n        uint256 i,\r\n        bool isOpenTwap\r\n    ) external;\r\n\r\n    function reset(\r\n        address operator,\r\n        uint256 newLpFeeRate,\r\n        uint256 newI,\r\n        uint256 newK,\r\n        uint256 baseOutAmount,\r\n        uint256 quoteOutAmount,\r\n        uint256 minBaseReserve,\r\n        uint256 minQuoteReserve\r\n    ) external returns (bool); \r\n\r\n\r\n    function _OWNER_() external returns (address);\r\n    \r\n    //========== CrowdPooling ===========\r\n\r\n    function createCrowdPooling() external returns (address payable newCrowdPooling);\r\n\r\n    function initCrowdPooling(\r\n        address cpAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256[] memory timeLine,\r\n        uint256[] memory valueList,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function bid(address to) external;\r\n}\r\n\r\n// File: contracts/lib/InitializableOwnable.sol\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/SmartRoute/helper/DODOV2CuttingRouteHelper.sol\r\n\r\n\r\ncontract DODOV2CuttingRouteHelper is InitializableOwnable {\r\n    address public immutable _DVM_FACTORY_;\r\n    address public immutable _DPP_FACTORY_;\r\n    address public immutable _DSP_FACTORY_;\r\n\r\n    // base -> quote -> address list\r\n    mapping(address => mapping(address => address[])) public _FILTER_POOLS_;\r\n\r\n    struct PairDetail {\r\n        uint256 i;\r\n        uint256 K;\r\n        uint256 B;\r\n        uint256 Q;\r\n        uint256 B0;\r\n        uint256 Q0;\r\n        uint256 R;\r\n        uint256 lpFeeRate;\r\n        uint256 mtFeeRate;\r\n        address baseToken;\r\n        address quoteToken;\r\n        address curPair;\r\n        uint256 pairVersion;\r\n    }\r\n\r\n    constructor(address dvmFactory,address dppFactory,address dspFactory) public {\r\n        _DVM_FACTORY_ = dvmFactory;\r\n        _DPP_FACTORY_ = dppFactory;\r\n        _DSP_FACTORY_ = dspFactory;\r\n    }\r\n\r\n    function getPairDetail(address token0,address token1,address userAddr) external view returns (PairDetail[] memory res) {\r\n        address[] memory baseToken0DVM;\r\n        address[] memory baseToken1DVM;\r\n        address[] memory baseToken0DSP;\r\n        address[] memory baseToken1DSP;\r\n\r\n        if(_FILTER_POOLS_[token0][token1].length > 0) {\r\n            baseToken0DVM = _FILTER_POOLS_[token0][token1];\r\n        } \r\n\r\n        else if(_FILTER_POOLS_[token1][token0].length > 0) {\r\n            baseToken1DVM = _FILTER_POOLS_[token1][token0];\r\n        }\r\n        \r\n        else {\r\n            (baseToken0DVM, baseToken1DVM) = IDODOV2(_DVM_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n            (baseToken0DSP, baseToken1DSP) = IDODOV2(_DSP_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n        }\r\n\r\n        (address[] memory baseToken0DPP, address[] memory baseToken1DPP) = IDODOV2(_DPP_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n\r\n\r\n        uint256 len = baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length + baseToken0DSP.length + baseToken1DSP.length;\r\n        res = new PairDetail[](len);\r\n        for(uint8 i = 0; i < len; i++) {\r\n            PairDetail memory curRes = PairDetail(0,0,0,0,0,0,0,0,0,address(0),address(0),address(0),2);\r\n            address cur;\r\n            if(i < baseToken0DVM.length) {\r\n                cur = baseToken0DVM[i];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length) {\r\n                cur = baseToken1DVM[i - baseToken0DVM.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length) {\r\n                cur = baseToken0DPP[i - baseToken0DVM.length - baseToken1DVM.length];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length)  {\r\n                cur = baseToken1DPP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length + baseToken0DSP.length)  {\r\n                cur = baseToken0DSP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length - baseToken1DPP.length];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else {\r\n                cur = baseToken1DSP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length - baseToken1DPP.length - baseToken0DSP.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            }\r\n\r\n            try IDODOV2(cur).getPMMStateForCall() returns (uint256 _i, uint256 _K, uint256 _B, uint256 _Q, uint256 _B0, uint256 _Q0, uint256 _R){                  \r\n                curRes.i = _i;\r\n                curRes.K = _K;\r\n                curRes.B = _B;\r\n                curRes.Q = _Q;\r\n                curRes.B0 = _B0;\r\n                curRes.Q0 = _Q0;\r\n                curRes.R = _R;\r\n            } catch {\r\n                continue;\r\n            }\r\n            \r\n            try IDODOV2(cur).getUserFeeRate(userAddr) returns  (uint256 lpFeeRate, uint256 mtFeeRate) {\r\n                (curRes.lpFeeRate, curRes.mtFeeRate) = (lpFeeRate, mtFeeRate);\r\n            } catch {\r\n                (curRes.lpFeeRate, curRes.mtFeeRate) = (0, 1e18);\r\n            }  \r\n            curRes.curPair = cur;\r\n            res[i] = curRes;\r\n        }\r\n    }\r\n\r\n\r\n    function batchAddPoolByAdmin(\r\n        address[] memory baseTokens, \r\n        address[] memory quoteTokens,\r\n        address[] memory pools\r\n    ) external onlyOwner {\r\n        require(baseTokens.length == quoteTokens.length,\"PARAMS_INVALID\");\r\n        require(baseTokens.length == pools.length,\"PARAMS_INVALID\");\r\n        for(uint256 i = 0; i < baseTokens.length; i++) {\r\n            address baseToken = baseTokens[i];\r\n            address quoteToken = quoteTokens[i];\r\n            address pool = pools[i];\r\n            \r\n            _FILTER_POOLS_[baseToken][quoteToken].push(pool);\r\n        }\r\n    }\r\n\r\n    function removePoolByAdmin(\r\n        address baseToken, \r\n        address quoteToken,\r\n        address pool\r\n    ) external onlyOwner {\r\n        address[] memory pools = _FILTER_POOLS_[baseToken][quoteToken];\r\n        for (uint256 i = 0; i < pools.length; i++) {\r\n            if (pools[i] == pool) {\r\n                pools[i] = pools[pools.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        _FILTER_POOLS_[baseToken][quoteToken] = pools;\r\n        _FILTER_POOLS_[baseToken][quoteToken].pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dvmFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dspFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DPP_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DSP_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DVM_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_FILTER_POOLS_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"baseTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"quoteTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"batchAddPoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getPairDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DODOV2CuttingRouteHelper.PairDetail[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePoolByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODOV2CuttingRouteHelper", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000790b4a80fb1094589a3c0efc8740aa9b0c1733fb000000000000000000000000d9cac3d964327e47399aebd8e1e6dcc4c251daae0000000000000000000000000fb9815938ad069bf90e14fe6c596c514bede767", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d421b654350867b4015338883ffc911da830e04b271ceee71763690e868d2cf2"}