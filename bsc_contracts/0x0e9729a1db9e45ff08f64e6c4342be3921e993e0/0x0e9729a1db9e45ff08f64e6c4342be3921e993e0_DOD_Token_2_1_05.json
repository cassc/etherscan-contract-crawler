{"SourceCode": "/*\r\n * Day of Defeat (DOD)\r\n *\r\n * Radical Social Experiment token mathematically designed to give holders 10,000,000X PRICE INCREASE\r\n *\r\n * Website: https://dayofdefeat.app/\r\n * To buy: https://ref.dayofdefeat.app/\r\n * To stake: https://stake.dayofdefeat.app/\r\n * NFT: https://nft.dayofdefeat.app/\r\n * DAO: https://dao.dayofdefeat.app/\r\n * Twitter: https://twitter.com/dayofdefeatBSC\r\n * Telegram: https://t.me/DayOfDefeatBSC\r\n * BTok: https://titanservice.cn/dayofdefeatCN\r\n *\r\n * By Studio L, a Legacy Capital Division\r\n * https://legacycapital.cc/StudioL/\r\n*/\r\n// 999,999,999 Optimization Runs\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity = 0.8.19;\r\n\r\ninterface IDexRouterV2 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\npragma solidity = 0.8.19;\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n}\r\n\r\n\r\npragma solidity = 0.8.19;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity = 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity = 0.8.19;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity = 0.8.19;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n\r\n/*\r\n * Day of Defeat (DOD)\r\n *\r\n * Radical Social Experiment token mathematically designed to give holders 10,000,000X PRICE INCREASE\r\n *\r\n * Website: https://dayofdefeat.app/\r\n * To buy: https://ref.dayofdefeat.app/\r\n * To stake: https://stake.dayofdefeat.app/\r\n * NFT: https://nft.dayofdefeat.app/\r\n * DAO: https://dao.dayofdefeat.app/\r\n * Twitter: https://twitter.com/dayofdefeatBSC\r\n * Telegram: https://t.me/DayOfDefeatBSC\r\n * BTok: https://titanservice.cn/dayofdefeatCN\r\n *\r\n * By Studio L, a Legacy Capital Division\r\n * https://legacycapital.cc/StudioL/\r\n*/\r\n// 999,999,999 Optimization Runs\r\n\r\n\r\npragma solidity = 0.8.19;\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _operator, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n *  999,999,999 Optimization Runs\r\n */\r\ncontract DOD_Token_2_1_05 is IERC20, Ownable2Step {\r\n\r\n//Common Variables\r\n    uint16 constant public DIVISOR = 10000;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n//Token Variables\r\n    string constant private _name = \"Day of Defeat 2.0\";\r\n    string constant private _symbol = \"DOD\";\r\n\r\n    uint64 constant private startingSupply = 100_000_000_000_000; //100 Trillion, underscores aid readability\r\n    uint8 constant private _decimals = 18;\r\n\r\n    uint256 constant private genesisTotalSupply = startingSupply * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n//Router, LP Pair Variables\r\n    address private _poolCA;\r\n\r\n    address private v2Router;\r\n\r\n    address private nativeCoin;\r\n\r\n    event V2RouterAndNativeCoinSet(\r\n        address Setter,\r\n        address indexed OldV2Router,\r\n        address NewV2Router,\r\n        address indexed OldNativeCoin,\r\n        address NewNativeCoin\r\n    );\r\n\r\n\r\n    LPool[] private liqPoolList;\r\n    //LP Pairs\r\n    struct LPool {\r\n        address poolCA;\r\n        address pairedCoinCA;\r\n        bool tradingEnabled;\r\n        uint32 tradingEnabledBlock;\r\n        uint32 tradingEnabledTime;\r\n        uint32 tradingPauseTime;\r\n        uint32 tradingPausedTimestamp;\r\n    }\r\n    mapping (address => bool) private isLiqPool;\r\n    mapping (address => bool) private isPairedCoin;\r\n\r\n    event NewLPCreated(address DexRouterCA, address LPCA, address PairedCoinCA);\r\n\r\n    bool private contractSwapEnabled = false;\r\n    uint256 private swapThreshold = 2_000_000_000 * (10 ** _decimals);\r\n\r\n    uint32 constant private maxTradePauseTime = 28 days;\r\n    event TradeEnabled(address Setter, address PoolCA, uint256 EnabledBlock, uint256 EnabledTime);\r\n    event TradePaused(address Setter, address PoolCA, uint256 PausedBlock, uint32 PauseTime, uint256 DisabledTimestamp);\r\n    event ContractSwapSettingsUpdated(address Setter, bool Enabled, uint256 SwapThreshold);\r\n\r\n//Fee Variables\r\n\r\n    uint16 private stakingTax = 100;\r\n    uint16 private referralTax = 100;\r\n    uint16 private marketingTax = 400;\r\n    uint16 private prizeTax = 1300;\r\n    uint16 private totalTax = 1900;\r\n\r\n    uint16 constant public maxTotalTax = 2500;\r\n\r\n    event TaxesUpdated(\r\n        address Setter,\r\n        uint16 Staking,\r\n        uint16 Referral,\r\n        uint16 Marketing,\r\n        uint16 Prize,\r\n        uint256 Timestamp\r\n    );\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n\r\n    uint256 public launchedTime;\r\n    uint256 private sniperBlockTime;\r\n    mapping (address => bool) private _isSniper;\r\n    uint256 public sniperCount;\r\n\r\n    event SniperCaught(address Sniper, uint256 Timestamp);\r\n\r\n\r\n    address private stakingPool;\r\n    address private referralPool;\r\n    address private marketingWallet;\r\n    address private transitionCollector;\r\n\r\n    event StakingAndReferralPoolUpdated(\r\n        address Setter,\r\n        address indexed OldStakingPool,\r\n        address NewStakingPool,\r\n        address indexed OldReferralPool,\r\n        address NewReferralPool\r\n    );\r\n    event MarketingWalletAndTransitionCollectorUpdated(\r\n        address Setter,\r\n        address indexed OldMarketingWallet,\r\n        address NewMarketingWallet,\r\n        address indexed OldPrizeTaxCollector,\r\n        address NewPrizeTaxCollector\r\n    );\r\n\r\n    //Contract Swap\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    bool private inSwap;\r\n    address[] private contractSwapPath = [ address(this), nativeCoin ];\r\n\r\n//Operator\r\n\r\n    address private genesis; // genesis wallet address\r\n    address private prizeVault; // prize vault contract\r\n    address private migrationCA; // sacrifice migration contract\r\n    \r\n    event PrizeVaultSet(address Setter, address indexed OldPrizeVault, address NewPrizeVault);\r\n    event MigrationCASet(address Setter, address indexed OldMigrationCA, address NewMigrationCA);\r\n\r\n    // ============================================== Constructor ==============================================\r\n\r\n    constructor () {\r\n        stakingPool = _msgSender();\r\n        referralPool = _msgSender();\r\n\r\n        marketingWallet = _msgSender();\r\n\r\n        transitionCollector = _msgSender();\r\n\r\n        _isExcludedFromFees[ _msgSender() ] = true;\r\n        _isExcludedFromFees[ address(this) ] = true;\r\n        _isExcludedFromLimits[ _msgSender() ] = true;\r\n        _isExcludedFromLimits[ address(this) ] = true;\r\n\r\n        _tOwned[ _msgSender() ] = genesisTotalSupply;\r\n        emit Transfer(address(0), _msgSender(), genesisTotalSupply);\r\n    }\r\n\r\n    // ============================================== Modifiers ==============================================\r\n\r\n    modifier onlyVaultAuthorized() {\r\n        require(_msgSender() == owner() ||\r\n                _msgSender() == prizeVault,\r\n                \"StudioL: caller is not prize vault authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationAuthorized() {\r\n        require(_msgSender() == owner() ||\r\n                _msgSender() == migrationCA,\r\n                \"StudioL: caller is not migration contract authorized\");\r\n        _;\r\n    }\r\n\r\n//===============================================================================================================\r\n//Override Functions\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external pure override returns (uint256) { return genesisTotalSupply; }\r\n\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][_msgSender()] != type(uint256).max) {\r\n            require(_allowances[sender][ _msgSender() ] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            _approve(sender, _msgSender(), _allowances[sender][ _msgSender() ] - amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n//===============================================================================================================\r\n//Common Functions\r\n\r\n    function rescueStuckAssets(bool ethOrToken, address tokenCA, uint256 amt, address receivable) external onlyOwner {\r\n        require(amt <= contractBalanceInWei(ethOrToken, tokenCA));\r\n\r\n        if (ethOrToken){\r\n\r\n            TransferHelper.safeTransferETH(receivable, amt);\r\n\r\n        } else {\r\n            \r\n            TransferHelper.safeTransfer(tokenCA, receivable, amt);\r\n        }\r\n    }\r\n\r\n    function contractBalanceInWei(bool ethOrToken, address tokenCA) public view returns (uint256) {\r\n        if (ethOrToken){\r\n            return address(this).balance;\r\n        } else {\r\n            return IERC20(tokenCA).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    function multiSendTokens(address[] calldata accounts, uint256[] calldata amountsInWei) external onlyOwner {\r\n        require(accounts.length == amountsInWei.length, \"StudioL_Token: Lengths do not match.\");\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            require(_tOwned[ _msgSender() ] >= amountsInWei[i]);\r\n            _transfer(_msgSender(), accounts[i], amountsInWei[i]);\r\n        }\r\n    }\r\n\r\n//===============================================================================================================\r\n//Dex Router and LPool Manager Functions\r\n\r\n    function setNewLiquidityPool(address _LPTargetCoinCA) external onlyOwner {\r\n        require(_LPTargetCoinCA != address(0), \"StudioL: zero _LPTargetCoinCA address\");\r\n\r\n        address lpCA;\r\n\r\n        lpCA = IFactoryV2( IDexRouterV2(v2Router).factory() ).getPair( _LPTargetCoinCA, address(this) );\r\n        require(lpCA == address(0) && !isLiqPool[lpCA], \"StudioL_Token: Pair already exists!\");\r\n        lpCA = IFactoryV2( IDexRouterV2(v2Router).factory() ).createPair( _LPTargetCoinCA, address(this) );\r\n\r\n        liqPoolList.push( LPool( lpCA, _LPTargetCoinCA, false, 0, 0, 0, 0 ) );\r\n\r\n        isLiqPool[lpCA] = true;\r\n        isPairedCoin[_LPTargetCoinCA] = true;\r\n\r\n        _allowances[lpCA][v2Router] = type(uint256).max;\r\n        _allowances[v2Router][lpCA] = type(uint256).max;\r\n\r\n        emit NewLPCreated(v2Router, lpCA, _LPTargetCoinCA);\r\n    }\r\n\r\n    function searchLiqPool(address pool) private view returns (uint8) {\r\n        LPool[] memory poolInfo = liqPoolList;\r\n\r\n        for(uint8 i = 0; i < poolInfo.length; i++) {\r\n            \r\n            if(poolInfo[i].poolCA == pool) {return i;}\r\n        }\r\n        return type(uint8).max;\r\n    }\r\n\r\n    function getAllLiqPoolsData() external view returns (LPool[] memory) {\r\n        return liqPoolList;\r\n    }\r\n\r\n    function getLiqPoolsCount() external view returns (uint256) {\r\n        return liqPoolList.length;\r\n    }\r\n\r\n    function verifyLiqPool(address _ca) external view returns (bool) {\r\n        return isLiqPool[_ca];\r\n    }\r\n\r\n    function verifyPairedCoin(address tokenCA) external view returns (bool) {\r\n        return isPairedCoin[tokenCA];\r\n    }\r\n\r\n    /**\r\n     * @dev sets a CEX liquidity pool address properly. \r\n     * Do not use a regular setNewLiquidityPool function, as that function is designed only for dex LP.\r\n     */\r\n    function setNewCEXLiquidityPool(address lpCA) external onlyOwner {\r\n        require(lpCA != address(0), \"StudioL: zero lpCA address\");\r\n\r\n        liqPoolList.push( LPool( lpCA, address(0), false, 0, 0, 0, 0 ) );\r\n\r\n        isLiqPool[lpCA] = true;\r\n\r\n        emit NewLPCreated( address(0), lpCA, address(0) );\r\n    }\r\n\r\n    function enableTrading(address poolCA) external onlyOwner {\r\n\r\n        if(launchedTime == 0) {\r\n\r\n            launchedTime = block.timestamp;\r\n        }\r\n\r\n        LPool storage poolInfo = liqPoolList[ searchLiqPool(poolCA) ];\r\n\r\n        if(poolInfo.tradingPauseTime != 0) {\r\n\r\n            poolInfo.tradingEnabled = true;\r\n            poolInfo.tradingPauseTime = 0;\r\n\r\n        } else {\r\n\r\n            require(!poolInfo.tradingEnabled, \"StudioL_Token: trading already enabled.\");\r\n\r\n            poolInfo.tradingEnabled = true;\r\n            poolInfo.tradingEnabledBlock = uint32(block.number);\r\n            poolInfo.tradingEnabledTime = uint32(block.timestamp);\r\n\r\n            contractSwapEnabled = true;\r\n        }\r\n        emit TradeEnabled(_msgSender(), poolCA, block.number, block.timestamp);\r\n    }\r\n\r\n    function pauseTradeByPool(address[] calldata poolCA, bool pauseAllPools, uint32 pauseTimeInSecs) external onlyVaultAuthorized returns (bool) {\r\n        require(pauseTimeInSecs <= maxTradePauseTime, \"StudioL_Token: cannot pause longer than max trade pause time.\");\r\n        LPool[] storage poolInfo = liqPoolList;\r\n\r\n        if(pauseAllPools) {\r\n\r\n            for(uint8 i = 0; i < poolInfo.length; i++) {\r\n\r\n                require(block.timestamp > 1 days + poolInfo[i].tradingPausedTimestamp, \"StudioL_Token: can't pause again until cooldown is over.\");\r\n                poolInfo[i].tradingEnabled = false;\r\n                poolInfo[i].tradingPauseTime = pauseTimeInSecs;\r\n                poolInfo[i].tradingPausedTimestamp = uint32(block.timestamp);\r\n                emit TradePaused(_msgSender(), poolInfo[i].poolCA, block.number, pauseTimeInSecs, block.timestamp);\r\n            }\r\n\r\n        } else {\r\n\r\n            for(uint8 i = 0; i < poolCA.length; i++) {\r\n\r\n                uint8 index = searchLiqPool(poolCA[i]);\r\n                require(block.timestamp > 1 days + poolInfo[index].tradingPausedTimestamp, \"StudioL_Token: can't pause again until cooldown is over.\");\r\n                poolInfo[index].tradingEnabled = false;\r\n                poolInfo[index].tradingPauseTime = pauseTimeInSecs;\r\n                poolInfo[index].tradingPausedTimestamp = uint32(block.timestamp);\r\n                emit TradePaused(_msgSender(), poolCA[i], block.number, pauseTimeInSecs, block.timestamp);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getMaxTradePauseTimeInDays() external pure returns (uint32) {\r\n        return maxTradePauseTime / 1 days;\r\n    }\r\n\r\n    function getRemainingPauseTimeInSecs(address poolCA) public view returns (uint256) {\r\n\r\n        uint8 index = searchLiqPool(poolCA);\r\n\r\n        if(liqPoolList[index].tradingPauseTime + liqPoolList[index].tradingPausedTimestamp > block.timestamp) {\r\n\r\n            return liqPoolList[index].tradingPauseTime + liqPoolList[index].tradingPausedTimestamp - block.timestamp;\r\n\r\n        } else {\r\n\r\n            return 0;            \r\n        }\r\n    }\r\n\r\n//===============================================================================================================\r\n//Fee Settings\r\n\r\n    /**\r\n     * @dev Regulate fees within limits (maximum 25%)\r\n     */\r\n    function setTaxes(\r\n        uint16 _staking,\r\n        uint16 _referral,\r\n        uint16 _marketing,\r\n        uint16 _prize\r\n    ) external onlyOwner {\r\n\r\n        stakingTax = _staking;\r\n        referralTax = _referral;\r\n        marketingTax = _marketing;\r\n        prizeTax = _prize;\r\n\r\n        totalTax = _staking + _referral + _marketing + _prize;\r\n        require(totalTax <= maxTotalTax, \"StudioL_Token: total tax must be less than maxTotalTax\");\r\n\r\n        emit TaxesUpdated(_msgSender(), _staking, _referral, _marketing, _prize, block.timestamp);\r\n    }\r\n\r\n    function getTaxes() external view returns (uint16 staking_, uint16 referral_, uint16 marketing_, uint16 prize_, uint16 total_) {\r\n        return (stakingTax, referralTax, marketingTax, prizeTax, totalTax);\r\n    }\r\n\r\n//Contract Swap functions\r\n\r\n    function setContractSwapSettings(bool _switch, uint256 swapThresholdInWeiValue) external onlyOwner {\r\n\r\n        contractSwapEnabled = _switch;\r\n        swapThreshold = swapThresholdInWeiValue;\r\n\r\n        emit ContractSwapSettingsUpdated(_msgSender(), contractSwapEnabled, swapThreshold);\r\n    }\r\n\r\n    function getContractSwapSettings() external view returns (bool contractSwapEnabled_, uint256 swapThreshold_) {\r\n        return (contractSwapEnabled, swapThreshold);\r\n    }\r\n\r\n//Tax wallet functions\r\n\r\n    function setStakingAndReferralPool(address _staking, address _referral) external onlyOwner {\r\n        require(_staking != address(0), \"StudioL: zero staking address\");\r\n        require(_referral != address(0), \"StudioL: zero referral address\");\r\n\r\n        emit StakingAndReferralPoolUpdated(_msgSender(), stakingPool, _staking, referralPool, _referral);\r\n\r\n        _isExcludedFromFees[stakingPool] = false;\r\n        _isExcludedFromLimits[stakingPool] = false;\r\n        stakingPool = _staking;\r\n        _isExcludedFromFees[_staking] = true;\r\n        _isExcludedFromLimits[_staking] = true;\r\n\r\n        _isExcludedFromFees[referralPool] = false;\r\n        _isExcludedFromLimits[referralPool] = false;\r\n        referralPool = _referral;\r\n        _isExcludedFromFees[_referral] = true;\r\n        _isExcludedFromLimits[_referral] = true;\r\n    }\r\n\r\n    function setMarketingWalletAndTransitionCollector(address _marketing, address _collector) external onlyOwner {\r\n        require(_marketing != address(0), \"StudioL: zero marketing address\");\r\n        require(_collector != address(0), \"StudioL: zero transition collector address\");\r\n\r\n        emit MarketingWalletAndTransitionCollectorUpdated(_msgSender(), marketingWallet, _marketing, transitionCollector, _collector);\r\n\r\n        _isExcludedFromFees[marketingWallet] = false;\r\n        _isExcludedFromLimits[marketingWallet] = false;\r\n        marketingWallet = _marketing;\r\n        _isExcludedFromFees[_marketing] = true;\r\n        _isExcludedFromLimits[_marketing] = true;\r\n\r\n        _isExcludedFromFees[transitionCollector] = false;\r\n        _isExcludedFromLimits[transitionCollector] = false;\r\n        transitionCollector = _collector;\r\n        _isExcludedFromFees[_collector] = true;\r\n        _isExcludedFromLimits[_collector] = true;\r\n    }\r\n\r\n    function getFeeWallets() external view returns (address staking_, address referral_, address marketing_, address transition_) {\r\n        return (stakingPool, referralPool, marketingWallet, transitionCollector);\r\n    }\r\n\r\n//===============================================================================================================\r\n//Tx Settings\r\n\r\n\r\n    function setExcludedFromFees(address account, bool _switch) external onlyMigrationAuthorized returns (bool) {\r\n        _isExcludedFromFees[account] = _switch;\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool _switch) external onlyOwner {\r\n        _isExcludedFromLimits[account] = _switch;\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) external view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function releaseSniper(address account) external onlyOwner {\r\n        require(_isSniper[account], \"StudioL_Token: target account is not a sniper\");\r\n        _isSniper[account] = false;\r\n\r\n        sniperCount--;\r\n    }\r\n\r\n    function isSniper(address account) external view returns (bool) {\r\n        return _isSniper[account];\r\n    }\r\n\r\n//======================================================================================\r\n//Transfer Functions\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"StudioL_Token: Transfer amount must be greater than zero\");\r\n        bool buy = false;\r\n        bool sell = false;\r\n        bool other = false;\r\n\r\n        if (isLiqPool[from]) {\r\n            buy = true;\r\n            _poolCA = from;\r\n        } else if (isLiqPool[to]) {\r\n            sell = true;\r\n            _poolCA = to;\r\n        } else {\r\n            other = true;\r\n        }\r\n\r\n        if( !_isExcludedFromLimits[from] && !_isExcludedFromLimits[to] ) {\r\n\r\n            require(to != DEAD, \"StudioL_Token: can only burn via contract swap.\");\r\n\r\n            if(!buy) {\r\n\r\n                require(!_isSniper[from], \"StudioL_Token: Sniper Rejected\");\r\n            }\r\n        }\r\n\r\n        if(!other) {\r\n\r\n            uint8 index = searchLiqPool(_poolCA);\r\n            LPool memory poolInfo = liqPoolList[index];\r\n\r\n\r\n            if( !_isExcludedFromLimits[from] && !_isExcludedFromLimits[to] ) {\r\n\r\n                if(buy) {\r\n\r\n                    if( block.timestamp <= ( launchedTime + sniperBlockTime ) ) {\r\n\r\n                        if( !_isSniper[to] ) {\r\n\r\n                            _isSniper[to] = true;\r\n\r\n                            sniperCount++;\r\n\r\n                            emit SniperCaught(to, block.timestamp);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(poolInfo.tradingPauseTime != 0) {\r\n\r\n                    if( getRemainingPauseTimeInSecs(poolInfo.poolCA) == 0 ) {\r\n\r\n                        liqPoolList[index].tradingEnabled = true;\r\n                        liqPoolList[index].tradingPauseTime = 0;\r\n                    }\r\n                }\r\n                require(poolInfo.tradingEnabled, \"StudioL_Token: Trading not enabled!\");\r\n            }\r\n        }\r\n\r\n        if(!inSwap) {\r\n\r\n            if(contractSwapEnabled) {\r\n\r\n                if(!buy) {\r\n\r\n                    if(_tOwned[ address(this) ] >= swapThreshold) {\r\n\r\n                        contractSwap( _tOwned[ address(this) ]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 _feeAmount = amount * totalTax / DIVISOR;\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || other) {\r\n\r\n            _feeAmount = 0;\r\n        }\r\n\r\n        uint256 _transferAmount = amount;\r\n\r\n        if(_feeAmount > 0) {\r\n\r\n            _transferAmount = amount - _feeAmount;\r\n            _tOwned[from] -= _feeAmount;\r\n            _tOwned[ address(this) ] += _feeAmount;\r\n\r\n            emit Transfer(from, address(this), _feeAmount);\r\n        }\r\n\r\n        _tOwned[from] -= _transferAmount;\r\n        _tOwned[to] += _transferAmount;\r\n\r\n        emit Transfer(from, to, _transferAmount);\r\n    }\r\n\r\n    function triggerContractSwap(uint256 swapAmount) external onlyOwner {\r\n        contractSwap(swapAmount);\r\n    }\r\n\r\n    function contractSwap(uint256 swapAmount) private lockTheSwap {\r\n\r\n        if (totalTax == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 origSwapAmount = swapAmount;\r\n        uint256 transferBalance;\r\n\r\n        if(stakingTax > 0) {\r\n            transferBalance = ( ( origSwapAmount * stakingTax ) / totalTax );\r\n            _tOwned[ stakingPool ] += transferBalance;\r\n            _tOwned[ address(this) ] -= transferBalance;\r\n            emit Transfer( address(this), stakingPool, transferBalance );\r\n\r\n            swapAmount -= transferBalance;\r\n            transferBalance = 0;\r\n        }\r\n\r\n        if(referralTax > 0) {\r\n            transferBalance = ( ( origSwapAmount * referralTax ) / totalTax );\r\n            _tOwned[ referralPool ] += transferBalance;\r\n            _tOwned[ address(this) ] -= transferBalance;\r\n            emit Transfer( address(this), referralPool, transferBalance );\r\n\r\n            swapAmount -= transferBalance;\r\n            transferBalance = 0;\r\n        }\r\n\r\n        if(prizeTax > 0) {\r\n            transferBalance = ( (origSwapAmount * prizeTax) / totalTax );\r\n            uint256 transferBalanceHalf = transferBalance / 2;\r\n            _tOwned[ DEAD ] += transferBalanceHalf; // half of the prize tax gets burned to DEAD\r\n            _tOwned[ transitionCollector ] += (transferBalance - transferBalanceHalf); // half of the prize tax goes to LStable treasury\r\n            _tOwned[ address(this) ] -= transferBalance;\r\n            emit Transfer( address(this), DEAD, (transferBalanceHalf) );\r\n            emit Transfer( address(this), transitionCollector, (transferBalance - transferBalanceHalf) );\r\n\r\n            swapAmount -= transferBalance;\r\n        }\r\n\r\n        IDexRouterV2(v2Router)\r\n            .swapExactTokensForETH(\r\n                swapAmount,\r\n                0,\r\n                contractSwapPath,\r\n                marketingWallet,\r\n                block.timestamp + 60\r\n        );\r\n    }\r\n\r\n//===============================================================================================================\r\n//Operator Settings\r\n\r\n    function setSniperBlockTime(uint256 _sniperBlockTime) external onlyOwner {\r\n        require(sniperBlockTime != _sniperBlockTime, \"StudioL_Token: already set to the desired value.\");\r\n\r\n        sniperBlockTime = _sniperBlockTime;\r\n    }\r\n\r\n    function getSniperBlockTime() external view onlyOwner returns (uint256) {\r\n        return sniperBlockTime;\r\n    }\r\n\r\n    function setV2RouterANDNativeCoin(address _v2Router, address _nativeCoin) external onlyOwner {\r\n        require(_v2Router != address(0), \"StudioL_Token: zero router address.\");\r\n        require(_nativeCoin != address(0), \"StudioL_Token: zero native coin address.\");\r\n\r\n        emit V2RouterAndNativeCoinSet( _msgSender(), v2Router, _v2Router, nativeCoin, _nativeCoin);\r\n        v2Router = _v2Router;\r\n\r\n        _isExcludedFromFees[v2Router] = true;\r\n        _isExcludedFromLimits[v2Router] = true;\r\n\r\n        _allowances[ _msgSender() ][v2Router] = type(uint256).max;\r\n        _allowances[v2Router][ _msgSender() ] = type(uint256).max;\r\n        _allowances[ address(this) ][v2Router] = type(uint256).max;\r\n        _allowances[v2Router][ address(this) ] = type(uint256).max;\r\n\r\n        nativeCoin = _nativeCoin;\r\n\r\n        contractSwapPath = [ address(this), _nativeCoin ];\r\n    }\r\n\r\n    function getV2Router() external view returns (address) {\r\n        return v2Router;\r\n    }\r\n\r\n    function getNativeCoin() external view returns (address) {\r\n        return nativeCoin;\r\n    }\r\n\r\n    function setPrizeVault(address _prizeVault) external onlyOwner {\r\n        require(_prizeVault != address(0), \"StudioL_Token: zero vault address.\");\r\n        require(prizeVault != _prizeVault, \"StudioL_Token: already set to the desired address\");\r\n        emit PrizeVaultSet( _msgSender(), prizeVault, _prizeVault);\r\n        prizeVault = _prizeVault;\r\n    }\r\n\r\n    function getPrizeVault() external view returns (address) {\r\n        return prizeVault;\r\n    }\r\n\r\n    function setMigrationCA(address _migrationCA) external onlyOwner {\r\n        require(_migrationCA != address(0), \"StudioL: zero migration contract address\");\r\n        require(migrationCA != _migrationCA, \"StudioL: already set to the desired address\");\r\n        emit MigrationCASet( _msgSender(), migrationCA, _migrationCA);\r\n        migrationCA = _migrationCA;\r\n    }\r\n\r\n    function getMigrationCA() external view onlyOwner returns (address) {\r\n        return migrationCA;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SwapThreshold\",\"type\":\"uint256\"}],\"name\":\"ContractSwapSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldPrizeTaxCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewPrizeTaxCollector\",\"type\":\"address\"}],\"name\":\"MarketingWalletAndTransitionCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldMigrationCA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMigrationCA\",\"type\":\"address\"}],\"name\":\"MigrationCASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DexRouterCA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"LPCA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PairedCoinCA\",\"type\":\"address\"}],\"name\":\"NewLPCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldPrizeVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewPrizeVault\",\"type\":\"address\"}],\"name\":\"PrizeVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Sniper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldStakingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewStakingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldReferralPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewReferralPool\",\"type\":\"address\"}],\"name\":\"StakingAndReferralPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"Staking\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"Referral\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"Marketing\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"Prize\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"TaxesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PoolCA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EnabledBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EnabledTime\",\"type\":\"uint256\"}],\"name\":\"TradeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PoolCA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PausedBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"PauseTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DisabledTimestamp\",\"type\":\"uint256\"}],\"name\":\"TradePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldV2Router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewV2Router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldNativeCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewNativeCoin\",\"type\":\"address\"}],\"name\":\"V2RouterAndNativeCoinSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIVISOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ethOrToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenCA\",\"type\":\"address\"}],\"name\":\"contractBalanceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolCA\",\"type\":\"address\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLiqPoolsData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairedCoinCA\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"tradingEnabledBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingEnabledTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingPauseTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingPausedTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct DOD_Token_2_1_05.LPool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractSwapSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"contractSwapEnabled_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transition_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiqPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTradePauseTimeInDays\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMigrationCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolCA\",\"type\":\"address\"}],\"name\":\"getRemainingPauseTimeInSecs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSniperBlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"staking_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referral_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"prize_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total_\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInWei\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolCA\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"pauseAllPools\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"pauseTimeInSecs\",\"type\":\"uint32\"}],\"name\":\"pauseTradeByPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ethOrToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenCA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receivable\",\"type\":\"address\"}],\"name\":\"rescueStuckAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapThresholdInWeiValue\",\"type\":\"uint256\"}],\"name\":\"setContractSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAndTransitionCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationCA\",\"type\":\"address\"}],\"name\":\"setMigrationCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpCA\",\"type\":\"address\"}],\"name\":\"setNewCEXLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPTargetCoinCA\",\"type\":\"address\"}],\"name\":\"setNewLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeVault\",\"type\":\"address\"}],\"name\":\"setPrizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sniperBlockTime\",\"type\":\"uint256\"}],\"name\":\"setSniperBlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setStakingAndReferralPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_staking\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_referral\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_prize\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeCoin\",\"type\":\"address\"}],\"name\":\"setV2RouterANDNativeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"triggerContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ca\",\"type\":\"address\"}],\"name\":\"verifyLiqPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenCA\",\"type\":\"address\"}],\"name\":\"verifyPairedCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DOD_Token_2_1_05", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee70d0a808f3b907c71c0bdd6af476a0b2a0a65c5d782f915e14bde4130c4289"}