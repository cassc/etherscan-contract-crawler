{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nabstract contract Ownable {\\n\\n    error Unauthorized();\\n    error ZeroAddress();\\n\\n    event OwnerSet(address indexed newOwner_);\\n    event PendingOwnerSet(address indexed pendingOwner_);\\n\\n    address public owner;\\n    address public pendingOwner;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n\\n        _;\\n    }\\n\\n    function setPendingOwner(address pendingOwner_) external onlyOwner {\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    function acceptOwnership() external {\\n        if (msg.sender != pendingOwner) revert Unauthorized();\\n\\n        _setPendingOwner(address(0));\\n        _setOwner(msg.sender);\\n    }\\n\\n    function _setOwner(address owner_) internal {\\n        if (owner_ == address(0)) revert ZeroAddress();\\n\\n        emit OwnerSet(owner = owner_);\\n    }\\n\\n    function _setPendingOwner(address pendingOwner_) internal {\\n        emit PendingOwnerSet(pendingOwner = pendingOwner_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/SwapFeeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n// NOTE: There is no non-arbitrary upper-limit for the `feeBasisPoints`, and setting it above 10_000 just pauses the swap functions.\\n\\ncontract SwapFeeRouter is Ownable {\\n\\n    error ETHTransferFailed(bytes errorData);\\n    error FeeBasisPointsNotRespected(uint256 expectedFeeBasisPoints_, uint256 actualFeeBasisPoints_);\\n    error ContractNotWhitelisted(address callee);\\n    error RenterAttempted();\\n    error SwapCallFailed(bytes errorData);\\n\\n    event ContractAddedToWhitelist(address indexed contract_);\\n    event ContractRemovedFromWhitelist(address indexed contract_);\\n    event ETHPulled(address indexed destination_, uint256 amount_);\\n    event FeeSet(uint256 feeBasisPoints_);\\n    event TokensPulled(address indexed token_, address indexed destination_, uint256 amount_);\\n\\n    uint256 internal _locked = 1;\\n\\n    uint256 public feeBasisPoints;  // 1 = 0.01%, 100 = 1%, 10_000 = 100%\\n\\n    mapping(address => bool) public isWhitelisted;\\n\\n    constructor(address owner_, uint256 feeBasisPoints_, address[] memory whitelist_) {\\n        _setOwner(owner_);\\n        _setFees(feeBasisPoints_);\\n        _addToWhitelist(whitelist_);\\n    }\\n\\n    modifier noRenter() {\\n        if (_locked == 2) revert RenterAttempted();\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n\\n    modifier feeBasisPointsRespected(uint256 feeBasisPoints_) {\\n        // Revert if the expected fee is less than the current fee.\\n        if (feeBasisPoints_ < feeBasisPoints) revert FeeBasisPointsNotRespected(feeBasisPoints_, feeBasisPoints);\\n\\n        _;\\n    }\\n\\n    function swapWithFeesOnInput(\\n        address inAsset_,\\n        uint256 swapAmount_,\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        address tokenPuller_,\\n        bytes calldata swapCallData_\\n    ) public noRenter feeBasisPointsRespected(feeBasisPoints_) {\\n        // Pull funds plus fees from caller.\\n        // NOTE: Assuming `swapCallData_` is correct, fees will remain in this contract.\\n        // NOTE: Worst case, assuming `swapCallData_` is incorrect/malicious, this contract loses nothing, but gains nothing.\\n        SafeERC20.safeTransferFrom(IERC20(inAsset_), msg.sender, address(this), getAmountWithFees(swapAmount_, feeBasisPoints_));\\n\\n        // Perform the swap (set allowance, swap, unset allowance).\\n        // NOTE: This assume that the `swapCallData_` instructs the swapContract to send outAsset to correct destination.\\n        _performSwap(inAsset_, swapAmount_, swapContract_, tokenPuller_, swapCallData_);\\n    }\\n\\n    function swapWithFeesOnOutput(\\n        address inAsset_,\\n        uint256 swapAmount_,\\n        address outAsset_,\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        address tokenPuller_,\\n        bytes calldata swapCallData_\\n    ) external noRenter feeBasisPointsRespected(feeBasisPoints_) {\\n        // Track this contract's starting outAsset balance to determine its increase later.\\n        uint256 startingOutAssetBalance = IERC20(outAsset_).balanceOf(address(this));\\n\\n        // Pull funds from caller.\\n        SafeERC20.safeTransferFrom(IERC20(inAsset_), msg.sender, address(this), swapAmount_);\\n\\n        // Perform the swap (set allowance, swap, unset allowance).\\n        // NOTE: This assume that the `swapCallData_` instructs the swapContract to send outAsset to this contract.\\n        _performSwap(inAsset_, swapAmount_, swapContract_, tokenPuller_, swapCallData_);\\n\\n        // Send the amount of outAsset the swap produced, minus fees, to the destination.\\n        SafeERC20.safeTransfer(\\n            IERC20(outAsset_),\\n            msg.sender,\\n            getAmountWithoutFees(\\n                IERC20(outAsset_).balanceOf(address(this)) - startingOutAssetBalance,\\n                feeBasisPoints\\n            )\\n        );\\n    }\\n\\n    function swapFromEthWithFeesOnInput(\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        bytes calldata swapCallData_\\n    ) external payable noRenter feeBasisPointsRespected(feeBasisPoints_) {\\n        // Perform the swap (attaching ETH minus fees to call).\\n        // NOTE: This assume that the `swapCallData_` instructs the swapContract to send outAsset to correct destination.\\n        _performSwap(getAmountWithoutFees(msg.value, feeBasisPoints_), swapContract_, swapCallData_);\\n    }\\n\\n    function swapFromEthWithFeesOnOutput(\\n        address outAsset_,\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        bytes calldata swapCallData_\\n    ) external payable noRenter feeBasisPointsRespected(feeBasisPoints_) {\\n        // Track this contract's starting outAsset balance to determine its increase later.\\n        uint256 startingOutAssetBalance = IERC20(outAsset_).balanceOf(address(this));\\n\\n        // Perform the swap (attaching ETH to call).\\n        // NOTE: This assume that the `swapCallData_` instructs the swapContract to send outAsset to this contract.\\n        _performSwap(msg.value, swapContract_, swapCallData_);\\n\\n        // Send the amount of outAsset the swap produced, minus fees, to the destination.\\n        SafeERC20.safeTransfer(\\n            IERC20(outAsset_),\\n            msg.sender,\\n            getAmountWithoutFees(\\n                IERC20(outAsset_).balanceOf(address(this)) - startingOutAssetBalance,\\n                feeBasisPoints\\n            )\\n        );\\n    }\\n\\n    function swapToEthWithFeesOnInput(\\n        address inAsset_,\\n        uint256 swapAmount_,\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        address tokenPuller_,\\n        bytes calldata swapCallData_\\n    ) external feeBasisPointsRespected(feeBasisPoints_) {\\n        // NOTE: Ths is functionally the same as `swapWithFeesOnInput` since the output is irrelevant.\\n        // NOTE: No `noRenter` needed since `swapWithFeesOnInput` will check that.\\n        swapWithFeesOnInput(inAsset_, swapAmount_, feeBasisPoints_, swapContract_, tokenPuller_, swapCallData_);\\n    }\\n\\n    function swapToEthWithFeesOnOutput(\\n        address inAsset_,\\n        uint256 swapAmount_,\\n        uint256 feeBasisPoints_,\\n        address swapContract_,\\n        address tokenPuller_,\\n        bytes calldata swapCallData_\\n    ) external noRenter feeBasisPointsRespected(feeBasisPoints_) {\\n        // Track this contract's starting ETH balance to determine its increase later.\\n        uint256 startingETHBalance = address(this).balance;\\n\\n        // Pull funds from caller.\\n        SafeERC20.safeTransferFrom(IERC20(inAsset_), msg.sender, address(this), swapAmount_);\\n\\n        // Perform the swap (set allowance, swap, unset allowance).\\n        // NOTE: This assume that the `swapCallData_` instructs the swapContract to send ETH to this contract.\\n        _performSwap(inAsset_, swapAmount_, swapContract_, tokenPuller_, swapCallData_);\\n\\n        // Send the amount of ETH the swap produced, minus fees, to the destination, and revert if it fails.\\n        _transferETH(\\n            msg.sender,\\n            getAmountWithoutFees(\\n                address(this).balance - startingETHBalance,\\n                feeBasisPoints_\\n            )\\n        );\\n    }\\n\\n    function addToWhitelist(address[] calldata whitelist_) external onlyOwner {\\n        _addToWhitelist(whitelist_);\\n    }\\n\\n    function removeFromWhitelist(address[] calldata whitelist_) external onlyOwner {\\n        _removeFromWhitelist(whitelist_);\\n    }\\n\\n    function setFee(uint256 feeBasisPoints_) external onlyOwner {\\n        _setFees(feeBasisPoints_);\\n    }\\n\\n    function pullToken(address token_, address destination_) public onlyOwner {\\n        if (destination_ == address(0)) revert ZeroAddress();\\n\\n        uint256 amount = IERC20(token_).balanceOf(address(this));\\n\\n        emit TokensPulled(token_, destination_, amount);\\n\\n        SafeERC20.safeTransfer(IERC20(token_), destination_, amount);\\n    }\\n\\n    function pullTokens(address[] calldata tokens_, address destination_) external onlyOwner {\\n        for (uint256 i; i < tokens_.length; ++i) {\\n            pullToken(tokens_[i], destination_);\\n        }\\n    }\\n\\n    function pullETH(address destination_) external onlyOwner {\\n        if (destination_ == address(0)) revert ZeroAddress();\\n\\n        uint256 amount = address(this).balance;\\n\\n        emit ETHPulled(destination_, amount);\\n\\n        _transferETH(destination_, amount);\\n    }\\n\\n    function getAmountWithFees(uint256 amountWithoutFees_, uint256 feeBasisPoints_) public pure returns (uint256 amountWithFees_) {\\n        amountWithFees_ = (amountWithoutFees_ * (10_000 + feeBasisPoints_)) / 10_000;\\n    }\\n\\n    function getAmountWithoutFees(uint256 amountWithFees_, uint256 feeBasisPoints_) public pure returns (uint256 amountWithoutFees_) {\\n        amountWithoutFees_ = (10_000 * amountWithFees_) / (10_000 + feeBasisPoints_);\\n    }\\n\\n    function _addToWhitelist(address[] memory whitelist_) internal {\\n        for (uint256 i; i < whitelist_.length; ++i) {\\n            address account = whitelist_[i];\\n            isWhitelisted[whitelist_[i]] = true;\\n            emit ContractAddedToWhitelist(account);\\n        }\\n    }\\n\\n    function _performSwap(address inAsset_, uint256 swapAmount_, address swapContract_, address tokenPuller_, bytes calldata swapCallData_) internal {\\n        // Prevent calling contracts that are not whitelisted.\\n        if (!isWhitelisted[swapContract_]) revert ContractNotWhitelisted(swapContract_);\\n\\n        // Approve the contract that will pull inAsset.\\n        IERC20(inAsset_).approve(tokenPuller_, swapAmount_);\\n\\n        // Call the swap contract as defined by `swapCallData_`, and revert if it fails.\\n        ( bool success, bytes memory errorData ) = swapContract_.call(swapCallData_);\\n        if (!success) revert SwapCallFailed(errorData);\\n\\n        // Un-approve the contract that pulled inAsset.\\n        // NOTE: This is important to prevent exploits that rely on allowances to arbitrary swapContracts to be non-zero after swap calls.\\n        IERC20(inAsset_).approve(tokenPuller_, 0);\\n    }\\n\\n    function _performSwap(uint256 swapAmount_, address swapContract_, bytes calldata swapCallData_) internal {\\n        // Prevent calling contracts that are not whitelisted.\\n        if (!isWhitelisted[swapContract_]) revert ContractNotWhitelisted(swapContract_);\\n\\n        // Call the swap contract as defined by `swapCallData_`, and revert if it fails.\\n        ( bool success, bytes memory errorData ) = swapContract_.call{ value: swapAmount_ }(swapCallData_);\\n        if (!success) revert SwapCallFailed(errorData);\\n    }\\n\\n    function _removeFromWhitelist(address[] memory whitelist_) internal {\\n        for (uint256 i; i < whitelist_.length; ++i) {\\n            address account = whitelist_[i];\\n            isWhitelisted[whitelist_[i]] = false;\\n            emit ContractRemovedFromWhitelist(account);\\n        }\\n    }\\n\\n    function _setFees(uint256 feeBasisPoints_) internal {\\n        emit FeeSet(feeBasisPoints = feeBasisPoints_);\\n    }\\n\\n    function _transferETH(address destination_, uint256 amount_) internal {\\n        // NOTE: callers of this function are validating `destination_` to not be zero.\\n        ( bool success, bytes memory errorData ) = destination_.call{ value: amount_ }(\\\"\\\");\\n        if (!success) revert ETHTransferFailed(errorData);\\n    }\\n\\n    receive() external payable {}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"peephole\": true,\r\n        \"inliner\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"}],\"name\":\"ContractNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedFeeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualFeeBasisPoints_\",\"type\":\"uint256\"}],\"name\":\"FeeBasisPointsNotRespected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenterAttempted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"SwapCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"ContractAddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"ContractRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"ETHPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TokensPulled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithoutFees_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"}],\"name\":\"getAmountWithFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithFees_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithFees_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"}],\"name\":\"getAmountWithoutFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithoutFees_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"pullETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"pullToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"pullTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelist_\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapFromEthWithFeesOnInput\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapFromEthWithFeesOnOutput\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPuller_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapToEthWithFeesOnInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPuller_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapToEthWithFeesOnOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPuller_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapWithFeesOnInput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBasisPoints_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPuller_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData_\",\"type\":\"bytes\"}],\"name\":\"swapWithFeesOnOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapFeeRouter", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000251a2f29d2b2b87736553ca140baf3b45a32cdbc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000050000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000006352a56caadc4f1e25cd6c75970fa768a3304e64000000000000000000000000c30141b657f4216252dc59af2e7cdb9d8792e1b0000000000000000000000000ce16f69375520ab01377ce7b88f5ba8c48f8d666", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}