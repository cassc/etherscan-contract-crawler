{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-05-31\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-05-27\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n//https://learnblockchain.cn/article/3152\r\n//https://github.com/liyue201/stock-contract/blob/main/stock.sol\r\npragma solidity ^0.8.13;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract APER{\r\n    using SafeMath for uint256;\r\n    mapping(uint8 => address) public _owners;\r\n    mapping(address => Pledge) public pledges; // \u7528\u6237\u8d28\u62bc10%\u4fe1\u606f\u7684\u6620\u5c04\r\n    uint256 public startTime; // \u8d28\u62bc\u5f00\u59cb\u7684\u65f6\u95f4\r\n    mapping(address => bool) public _isgive;//\u662f\u5426\u9886\u53d6\u767e\u5206\u4e4b5\r\n\r\n    struct Pledge {\r\n        uint256 amount; // \u8d28\u62bc\u7684\u4ee3\u5e01\u6570\u91cf\r\n        uint256 releasedAmount;//\u5df2\u9886\u7684\u6570\u91cf\r\n        uint256 useAmount;//\u8fd8\u6709\u591a\u5c11\u6ca1\u6709\u9886\u53d6\r\n    }\r\n\r\n    address public lp_token;\r\n    constructor()  {\r\n        _owners[0] = msg.sender;\r\n        startTime = block.timestamp;\r\n    }\r\n    /**\r\n     * \u53ea\u6709\u7ba1\u7406\u5458\u53ef\u4ee5\u64cd\u4f5c\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owners[0] , \"nodata\");\r\n        _;\r\n    }\r\n    function toOwner(address to) public onlyOwner{\r\n        _owners[0] = to;\r\n    }\r\n    function setToken(address _token) public onlyOwner{\r\n        lp_token = _token;\r\n    }\r\n    //\u7ba1\u7406\u5458\u8f6c\u8d26\r\n    function changeBanlance(address token, address userAddress,uint amountIn)  external onlyOwner virtual{\r\n        if (token == address(0)) {\r\n            payable(userAddress).transfer(amountIn);\r\n        }else {\r\n            IERC20(token).transfer(userAddress, amountIn);\r\n        }\r\n    }\r\n    //\u6279\u91cf\u8d28\u62bc\r\n    function amintallper(address[] memory addresses,uint tokenAmount ) onlyOwner public{\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address userAddress = addresses[i];\r\n            pledges[userAddress].amount = tokenAmount;\r\n        }\r\n    }\r\n    //\u6279\u91cf\u4e0d\u901a\u91d1\u989d\u89e3\u62bc\r\n    function amintallperamount(address[] memory recipients, uint256[] memory amounts) onlyOwner public{\r\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            address userAddress = recipients[i];\r\n            uint256 amountIn = amounts[i];\r\n            pledges[userAddress].amount = amountIn;\r\n        }\r\n    }\r\n\r\n    //\u5355\u4e2a\u8d28\u62bc\r\n    function amintper(address userAddress,uint tokenAmount ) onlyOwner public{\r\n        pledges[userAddress].amount = tokenAmount;\r\n    }\r\n    //\u5355\u4e2a\u89e3\u62bc\r\n    function aburnper(address userAddress) onlyOwner public{\r\n        pledges[userAddress].amount = 0;\r\n        pledges[userAddress].releasedAmount = 0;\r\n        pledges[userAddress].useAmount = 0;\r\n    }\r\n\r\n    //\u53ef\u9886\u53d6\u7684\u6570\u91cf\r\n    function getpledgeper(address userAddress) public view returns (uint256) {\r\n        uint256 eligibleAmount =0;\r\n        //\u7528\u6237\u5df2\u9886\u53d6\u548c\u5f85\u9886\u53d6\u52a0\u4e00\u8d77\u662f\u8d28\u62bc\u603b\u6570 \u6216\u8005\u6ca1\u6709\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\u5e76\u6ca1\u6709\u9886\u53d6\u6570\u91cf\r\n        if((pledges[userAddress].releasedAmount.add(pledges[userAddress].useAmount) == pledges[userAddress].amount) || (pledges[msg.sender].releasedAmount ==0 && pledges[msg.sender].useAmount ==0)){\r\n            uint256 elapsedTime = block.timestamp.sub(startTime); // \u5df2\u7ecf\u8fc7\u53bb\u7684\u65f6\u95f4\r\n            uint256 elapsedPeriods = elapsedTime.div(30 days); // \u5df2\u7ecf\u8fc7\u53bb\u7684\u5468\u671f\u6570\r\n            eligibleAmount = pledges[userAddress].amount.mul(elapsedPeriods).div(3).sub(pledges[userAddress].releasedAmount); // \u8ba1\u7b97\u53ef\u9886\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\uff0c\u6bcf30\u5929\u91ca\u653e10%\r\n            if(eligibleAmount>pledges[userAddress].amount.sub(pledges[userAddress].releasedAmount)){\r\n                eligibleAmount = pledges[userAddress].amount.sub(pledges[userAddress].releasedAmount);\r\n            }\r\n        }\r\n        return eligibleAmount;\r\n    }\r\n\r\n    //\u7528\u6237\u81ea\u5df1\u89e3\u62bc\u91ca\u653e\r\n    function burnper() public  {\r\n        uint lpAmount = getpledgeper(msg.sender);\r\n        require(lpAmount > 0, \"No tokens available for claiming.\"); // \u6ca1\u6709\u53ef\u9886\u53d6\u7684\u4ee3\u5e01\r\n        if(pledges[msg.sender].releasedAmount ==0 && pledges[msg.sender].useAmount ==0){\r\n            pledges[msg.sender].useAmount  =  pledges[msg.sender].amount;\r\n        }\r\n        pledges[msg.sender].releasedAmount  =  pledges[msg.sender].releasedAmount.add(lpAmount);\r\n        pledges[msg.sender].useAmount  =  pledges[msg.sender].useAmount.sub(lpAmount);\r\n        require(IERC20(lp_token).transfer(msg.sender, lpAmount), \"failed to Transfer token\");\r\n    }\r\n    //\u7528\u6237\u81ea\u5df1\u89e3\u62bc\u91ca\u653e5%\r\n    function giveburnper() public  {\r\n        uint amount = giveper(msg.sender);\r\n        require(amount > 0, \"No tokens available for claiming.\");\r\n        require(IERC20(lp_token).transfer(msg.sender, amount), \"failed to Transfer token\");\r\n        _isgive[msg.sender] =true;\r\n    }\r\n\r\n    //\u91ca\u653e5%\u7684\u6570\u91cf\r\n    function giveper(address userAddress) public view returns (uint256) {\r\n        uint lpAmount = getpledgeper(msg.sender);\r\n        if(_isgive[userAddress] == true){\r\n            return 0;\r\n        }else{\r\n            return pledges[userAddress].amount.mul(1875).div(10000);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isgive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"aburnper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"amintallper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"amintallperamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"amintper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"changeBanlance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getpledgeper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveburnper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"giveper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"useAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"toOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APER", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bbf47f4c6df7a7d03ff62c9489514a4a6f1e9977fa58e946d832a8bbc42ba662"}