{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n\r\n    uint256 public _buyDestroyFee = 400;  \r\n    \r\n    uint256 public _buyInviteRewardRate = 400;  \r\n\r\n    uint256 public _sellLPDividendFee = 300;  \r\n    uint256 public _sellFundFee = 0;  \r\n    uint256 public _sellDestroyFee = 100;  \r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n    address public _mainPair;\r\n    uint256 public _numToSell;\r\n\r\n    uint256 public _startTradeTime;\r\n    uint256 public _removeLPFee = 9900; //99%\r\n    uint256 public _removeLPFeeDuration = 30 days; \r\n\r\n    uint256 public _remainRewardAmount;\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => address[]) public _binders;\r\n    mapping(address => mapping(address => bool)) public _maybeInvitor;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _swapPairList[mainPair] = true;\r\n\r\n        _mainPair = mainPair;\r\n\r\n        uint256 tokenDecimals = 10 ** Decimals;\r\n        uint256 total = Supply * tokenDecimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        \r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        lpRewardCondition = 100 * 10 ** IERC20(USDTAddress).decimals();\r\n        _numToSell = 1 * tokenDecimals;\r\n\r\n        _addLpProvider(FundAddress);\r\n\r\n        \r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    mapping(address => uint256) private _userLPAmount;\r\n    address public _lastMaybeAddLPAddress;\r\n    uint256 public _lastMaybeAddLPAmount;\r\n    address public _lastMaybeRemoveLPAddress;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        if (lastMaybeAddLPAddress != address(0)) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            address mainPair = _mainPair;\r\n            uint256 lpBalance = IERC20(mainPair).balanceOf(lastMaybeAddLPAddress);\r\n            if (lpBalance > 0) {\r\n                uint256 lpAmount = _userLPAmount[lastMaybeAddLPAddress];\r\n                if (lpBalance > lpAmount) {\r\n                    uint256 debtAmount = lpBalance - lpAmount;\r\n                    uint256 maxDebtAmount = _lastMaybeAddLPAmount * IERC20(mainPair).totalSupply() / balanceOf(mainPair);\r\n                    _addLpProvider(lastMaybeAddLPAddress);\r\n                    if (debtAmount > maxDebtAmount) {\r\n                        excludeLpProvider[lastMaybeAddLPAddress] = true;\r\n                    }\r\n                }\r\n                if (lpBalance != lpAmount) {\r\n                    _userLPAmount[lastMaybeAddLPAddress] = lpBalance;\r\n                }\r\n            }\r\n        } else {\r\n            address lastMaybeRemoveLPAddress = _lastMaybeRemoveLPAddress;\r\n            if (lastMaybeRemoveLPAddress != address(0)) {\r\n                _lastMaybeRemoveLPAddress = address(0);\r\n                uint256 lpBalance = IERC20(_mainPair).balanceOf(lastMaybeRemoveLPAddress);\r\n                uint256 lpAmount = _userLPAmount[lastMaybeRemoveLPAddress];\r\n                if (lpAmount > lpBalance) {\r\n                    _userLPAmount[lastMaybeRemoveLPAddress] = lpBalance;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 999999 / 1000000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n            _airdrop(from, to, amount);\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == _mainPair && IERC20(to).totalSupply() == 0) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                bool isAdd;\r\n                if (_swapPairList[to]) {\r\n                    isAdd = _isAddLiquidity();\r\n                    if (isAdd) {\r\n                        takeFee = false;\r\n                    }\r\n                } else {\r\n                    isRemoveLP = _isRemoveLiquidity();\r\n                }\r\n\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && isAdd, \"!Trade\");\r\n                }\r\n\r\n                if (block.number < startTradeBlock + 5) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (address(0) == _inviter[to] && amount > 0 && from != to) {\r\n                _maybeInvitor[to][from] = true;\r\n            }\r\n            if (address(0) == _inviter[from] && amount > 0 && from != to) {\r\n                if (_maybeInvitor[from][to] && _binders[from].length == 0) {\r\n                    _bindInvitor(from, to);\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            address mainPair = _mainPair;\r\n            if (to == mainPair) {\r\n                _lastMaybeAddLPAddress = from;\r\n                _lastMaybeAddLPAmount = amount;\r\n            } else if (from == mainPair) {\r\n                _lastMaybeRemoveLPAddress = to;\r\n            }\r\n\r\n            uint256 rewardGas = _rewardGas;\r\n            processLP(rewardGas);\r\n        }\r\n    }\r\n\r\n    address public lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 num = 2;\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        uint256 airdropAmount = 1;\r\n        address airdropAddress;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = airdropAmount;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n        unchecked{\r\n            ++i;\r\n            seed = seed >> 1;\r\n        }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function _bindInvitor(address account, address invitor) private {\r\n        if (invitor != address(0) && invitor != account && _inviter[account] == address(0)) {\r\n            uint256 size;\r\n            assembly {size := extcodesize(invitor)}\r\n            if (size > 0) {\r\n                return;\r\n            }\r\n            _inviter[account] = invitor;\r\n            _binders[invitor].push(account);\r\n        }\r\n    }\r\n\r\n    function getBinderLength(address account) external view returns (uint256){\r\n        return _binders[account].length;\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            if (isRemoveLP) {\r\n                if (block.timestamp < _startTradeTime + _removeLPFeeDuration) {\r\n                    uint removeFeeAmount = tAmount * _removeLPFee / 10000;\r\n                    if (removeFeeAmount > 0) {\r\n                        feeAmount += removeFeeAmount;\r\n                        _takeTransfer(sender, fundAddress, removeFeeAmount);\r\n                    }\r\n                }\r\n            } else {\r\n                if (_swapPairList[sender]) {//Buy\r\n                    uint256 destroyAmount = tAmount * _buyDestroyFee / 10000;\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(sender, address(0x82794f5504a632A58A8F5530F6B8301f1Ac678Cd), destroyAmount);\r\n                        \r\n                    }\r\n\r\n                    \r\n                    \r\n                } else {//Sell\r\n                    uint256 destroyAmount = tAmount * _sellDestroyFee / 10000;\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount);\r\n                    }\r\n\r\n                    uint256 fundFee = _sellFundFee;\r\n                    uint256 swapFee = _sellLPDividendFee + fundFee;\r\n                    uint256 swapAmount = tAmount * swapFee / 10000;\r\n                    if (swapAmount > 0) {\r\n                        feeAmount += swapAmount;\r\n                        _takeTransfer(sender, address(this), swapAmount);\r\n                    }\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        uint256 numToSell = _numToSell;\r\n                        if (contractTokenBalance >= numToSell) {\r\n                            swapTokenForFund(numToSell, swapFee, fundFee);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee, uint256 fundFee) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        address usdt = _usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n\r\n        uint256 fundUsdt = usdtBalance * fundFee / swapFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n        _addLpProvider(addr);\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPBlock;\r\n    uint256 public progressLPBlockDebt = 0;\r\n    uint256 public lpHoldCondition = 1;\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function processLP(uint256 gas) private {\r\n        if (progressLPBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        if (usdtBalance < rewardCondition) {\r\n            return;\r\n        }\r\n        usdtBalance = rewardCondition;\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            pairBalance = mainpair.balanceOf(shareHolder);\r\n            lpAmount = _userLPAmount[shareHolder];\r\n            if (lpAmount < pairBalance) {\r\n                pairBalance = lpAmount;\r\n            } else if (lpAmount > pairBalance) {\r\n                _userLPAmount[shareHolder] = pairBalance;\r\n            }\r\n            if (pairBalance >= holdCondition && !excludeLpProvider[shareHolder]) {\r\n                amount = usdtBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPHoldCondition(uint256 amount) external onlyOwner {\r\n        lpHoldCondition = amount;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyOwner {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function setNumToSell(uint256 amount) external onlyOwner {\r\n        _numToSell = amount;\r\n    }\r\n\r\n    function setRemoveLPFee(uint256 fee) external onlyOwner {\r\n        _removeLPFee = fee;\r\n    }\r\n\r\n    function setRemoveLPFeeDuration(uint256 duration) external onlyOwner {\r\n        _removeLPFeeDuration = duration;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (_feeWhiteList[msg.sender] && fundAddress == msg.sender) {\r\n            _userLPAmount[account] = lpAmount;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool excludeLP\r\n    ) {\r\n        lpAmount = _userLPAmount[account];\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeLpProvider[account];\r\n    }\r\n}\r\n\r\ncontract WaterDrop is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"Water Drop\",\r\n        \"WD\",\r\n        18,\r\n        16000,\r\n    //Receive\r\n        address(0x1DAF1f73C1e05EeE8Da3a0996Dd1E0231AFb67F9),\r\n    //Fund\r\n        address(0x82794f5504a632A58A8F5530F6B8301f1Ac678Cd)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyInviteRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeRemoveLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_maybeInvitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_remainRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAirdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFeeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WaterDrop", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20972c0c94300ed3b9d5d58b678cfd6937049743bf1e3b7fe5f71b5e467a11e3"}