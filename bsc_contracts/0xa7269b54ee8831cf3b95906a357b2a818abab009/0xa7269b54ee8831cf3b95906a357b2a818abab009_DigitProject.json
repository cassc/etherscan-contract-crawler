{"SourceCode": "pragma solidity >= 0.5.0;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract DigitProject{\r\n  \r\n  event  Registration(string  sponcer_id,address indexed sponsor,uint256 investment,uint256 tokenAmt,address indexed member_name,string position);\r\n  event Staking(string  investorId,uint256 investment,uint256 tokenAmt,address indexed investor);\r\n\tevent WithDraw(string  WithId,address indexed  investor,uint256 WithAmt);\r\n\tevent WithDrawMulti(uint256  investorId,address indexed  investor,uint256 WithAmt,uint256 WithId);\r\n\tevent MemberPayment(address indexed  investor,uint netAmt,uint256 Withid);\r\n    event Payment(uint256 NetQty);\r\n\r\n    using SafeMath for uint256;\r\n    IBEP20 private DGT; \r\n    address public owner;\r\n    uint256 public dgtPrice=563*1e14;  //0.5 USDT\r\n   \r\n    constructor(address ownerAddress,IBEP20 _DGT) public\r\n    {\r\n        owner = ownerAddress;  \r\n        DGT = _DGT;\r\n     }\r\n  function userRegister(string memory referrerId,address referral,uint256 package,string memory position) public payable\r\n\t{\r\n\t  uint tokenAmt=(package/dgtPrice)*1e18;\r\n    require(DGT.balanceOf(msg.sender)>=tokenAmt);\r\n\t\trequire(DGT.allowance(msg.sender,address(this))>=tokenAmt,\"Approve Your Token First\");\r\n\t\tDGT.transferFrom(msg.sender ,owner,tokenAmt);\r\n\t\temit Registration(referrerId,referral,package,tokenAmt,msg.sender,position);\r\n\t}\r\n\r\n \tfunction Invest(string memory investorId,uint256 package) public payable\r\n\t{\r\n\t  uint tokenAmt=(package/dgtPrice)*1e18;\r\n    require(DGT.balanceOf(msg.sender)>=tokenAmt);\r\n\t\trequire(DGT.allowance(msg.sender,address(this))>=tokenAmt,\"Approve Your Token First\");\r\n\t\tDGT.transferFrom(msg.sender ,owner,tokenAmt);\r\n\t\temit Staking( investorId,package,tokenAmt,msg.sender);\r\n\t}\r\n\r\n  function getPrice() public view returns(uint256)\r\n        {\r\n              return uint256(dgtPrice);\r\n\t       }\r\n\t\r\n    function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n       \r\n    }\r\n    \r\n      function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,IBEP20 _TKN) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _TKN.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\t      emit MemberPayment(_contributors[i],_balances[i],WithId[i]);\r\n        }\r\n\t\temit Payment(totalQty);\r\n        \r\n    }\r\n    \r\n    \r\n    function withdrawLostBNBFromBalance(address payable _sender) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _sender.transfer(address(this).balance);\r\n    }\r\n    \r\n        \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt,IBEP20 _TKN) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _TKN.transfer(owner,QtyAmt);\r\n\t}\r\n\t\r\n  function changePrice(uint256 _dgtPrice) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        dgtPrice=_dgtPrice;\r\n\t}\r\n\tfunction changeowner(address _newowner) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n\t\towner = _newowner;\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"changeowner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"totalQty\",\"type\":\"uint256\"},{\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorId\",\"type\":\"string\"},{\"name\":\"package\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dgtPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dgtPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerId\",\"type\":\"string\"},{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"package\",\"type\":\"uint256\"},{\"name\":\"position\",\"type\":\"string\"}],\"name\":\"userRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"_DGT\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sponcer_id\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"member_name\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"string\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"WithId\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"WithAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WithId\",\"type\":\"uint256\"}],\"name\":\"WithDrawMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"netAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Withid\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"}]", "ContractName": "DigitProject", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a80d07706818b494a66486839acbd2bf84c06df60000000000000000000000008fa405986c9b10bf0ab807f56fd4b77d3ded30b3", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9f2d8c8dba2fa214ac69f2818815334376b41508db1faed12919cd10df4029c3"}