{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burn/IBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../data/StructData.sol\\\";\\n\\ninterface IBurn {\\n    function setStakingContract(address _stakingContract) external;\\n\\n    function setMarketplaceContract(address _stakingContract) external;\\n\\n    function setOracleContract(address _oracleContract) external;\\n\\n    function burnToken(uint256 _totalAmountUsdDecimal) external;\\n\\n    function getPercentBurn() external returns (uint16);\\n\\n    function setPercentBurn(uint16 _percentBurn) external;\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) external;\\n\\n    function recoverLostBNB() external;\\n}\\n\"\r\n    },\r\n    \"contracts/data/StructData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary StructData {\\n    // struct to store staked NFT information\\n    struct StakedNFT {\\n        address stakerAddress;\\n        uint256 startTime;\\n        uint256 unlockTime;\\n        uint256[] nftIds;\\n        uint256 totalValueStakeUsdWithDecimal;\\n        uint16 apr;\\n        uint256 totalClaimedAmountUsdWithDecimal;\\n        uint256 totalRewardAmountUsdWithDecimal;\\n        bool isUnstaked;\\n    }\\n\\n    struct ChildListData {\\n        address[] childList;\\n        uint256 memberCounter;\\n    }\\n\\n    struct ListBuyData {\\n        StructData.InfoBuyData[] childList;\\n    }\\n\\n    struct InfoBuyData {\\n        uint256 timeBuy;\\n        uint256 valueUsd;\\n    }\\n\\n    struct ListSwapData {\\n        StructData.InfoSwapData[] childList;\\n    }\\n\\n    struct InfoSwapData {\\n        uint256 timeSwap;\\n        uint256 valueSwap;\\n    }\\n\\n    struct ListMaintenance {\\n        StructData.InfoMaintenanceNft[] childList;\\n    }\\n\\n    struct InfoMaintenanceNft {\\n        uint256 startTimeRepair;\\n        uint256 endTimeRepair;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/market/DistributionCommission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IMarketplace.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../token/FitZenERC20.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\n\\ncontract DistributionCommission is Ownable {\\n    address public currency;\\n    address public marketplaceContract;\\n    address public oracleContract;\\n    uint256 private maxNumberDistributionCommission = 250; // 2,5 lan earned hoa hong phan bo\\n    uint256 private maxDayDistributionCommissionEarn = 180; //day nhan hoa hong phan bo\\n    uint256 private totalLevelEarn = 8; //day nhan hoa hong phan bo\\n\\n    mapping(address => StructData.ListBuyData) nftBuyByTimestamp;\\n    mapping(uint8 => uint16) public commissionPercent;\\n    mapping(uint8 => uint8) public conditionF1Commission;\\n    mapping(uint8 => uint16) public orConditionF1Commission;\\n\\n    constructor(address _currency, address _marketplaceAddress) {\\n        currency = _currency;\\n        marketplaceContract = _marketplaceAddress;\\n        oracleContract = address(0);\\n        initCommissionPercent();\\n        initConditionF1Commission();\\n        initOrConditionF1Commission();\\n    }\\n\\n    function initCommissionPercent() internal {\\n        commissionPercent[1] = 480;\\n        commissionPercent[2] = 360;\\n        commissionPercent[3] = 300;\\n        commissionPercent[4] = 180;\\n        commissionPercent[5] = 180;\\n        commissionPercent[6] = 120;\\n        commissionPercent[7] = 120;\\n        commissionPercent[8] = 60;\\n    }\\n\\n    function initConditionF1Commission() internal {\\n        conditionF1Commission[1] = 0;\\n        conditionF1Commission[2] = 0;\\n        conditionF1Commission[3] = 2;\\n        conditionF1Commission[4] = 3;\\n        conditionF1Commission[5] = 4;\\n        conditionF1Commission[6] = 5;\\n        conditionF1Commission[7] = 6;\\n        conditionF1Commission[8] = 8;\\n    }\\n\\n    function initOrConditionF1Commission() internal {\\n        orConditionF1Commission[1] = 0;\\n        orConditionF1Commission[2] = 0;\\n        orConditionF1Commission[3] = 500;\\n        orConditionF1Commission[4] = 500;\\n        orConditionF1Commission[5] = 500;\\n        orConditionF1Commission[6] = 1000;\\n        orConditionF1Commission[7] = 1000;\\n        orConditionF1Commission[8] = 5000;\\n    }\\n\\n    function getCommissionPercent(uint8 _level) external view returns (uint16) {\\n        return commissionPercent[_level];\\n    }\\n\\n    function setCommissionPercent(uint8 _level, uint16 _percent) external onlyOwner {\\n        commissionPercent[_level] = _percent;\\n    }\\n\\n    function getConditionF1Commission(uint8 _level) external view returns (uint8) {\\n        return conditionF1Commission[_level];\\n    }\\n\\n    function setConditionF1Commission(uint8 _level, uint8 _value) external onlyOwner {\\n        conditionF1Commission[_level] = _value;\\n    }\\n\\n    function getOrConditionF1Commission(uint8 _level) external view returns (uint16) {\\n        return orConditionF1Commission[_level];\\n    }\\n\\n    function setOrConditionF1Commission(uint8 _level, uint16 _value) external onlyOwner {\\n        orConditionF1Commission[_level] = _value;\\n    }\\n\\n    function setMaxDayDistributionCommissionEarn(uint256 _value) external onlyOwner {\\n        require(_value > 0, \\\"DISTRIBUTE COMMISSION: INVALID VALUE\\\");\\n        maxDayDistributionCommissionEarn = _value;\\n    }\\n\\n    function setMaxNumberDistributionCommission(uint256 _value) external onlyOwner {\\n        require(_value >= 100, \\\"DISTRIBUTE COMMISSION: INVALID VALUE\\\");\\n        maxNumberDistributionCommission = _value;\\n    }\\n\\n    function setMarketplaceContract(address _marketplaceAddress) external onlyOwner {\\n        require(_marketplaceAddress != address(0), \\\"DISTRIBUTE COMMISSION: INVALID MARKETPLACE ADDRESS\\\");\\n        marketplaceContract = _marketplaceAddress;\\n    }\\n\\n    function setOracleContract(address _oracleContract) external onlyOwner {\\n        require(_oracleContract != address(0), \\\"DISTRIBUTE COMMISSION: INVALID ORACLE ADDRESS\\\");\\n        oracleContract = _oracleContract;\\n    }\\n\\n    function setValueBuyAddress(address _wallet, uint256 _totalValue, uint256 timestamp) external {\\n        require(\\n            marketplaceContract != address(0) && msg.sender == marketplaceContract,\\n            \\\"NFT: INVALID CALLER TO SET VALUE BUY DATA\\\"\\n        );\\n        StructData.InfoBuyData memory item;\\n        item.timeBuy = timestamp;\\n        item.valueUsd = _totalValue;\\n        nftBuyByTimestamp[_wallet].childList.push(item);\\n    }\\n\\n    function setValueBuyAddressByAdmin(address _wallet, uint256 _totalValue, uint256 timestamp) external onlyOwner {\\n        uint256 totalValue = _totalValue * (10 ** FitZenERC20(currency).decimals());\\n        StructData.InfoBuyData memory item;\\n        item.timeBuy = timestamp;\\n        item.valueUsd = totalValue;\\n        nftBuyByTimestamp[_wallet].childList.push(item);\\n    }\\n\\n    function getNftBuyByTimestamp(address _wallet) external view returns (StructData.InfoBuyData memory) {\\n        return nftBuyByTimestamp[_wallet].childList[0];\\n    }\\n\\n    function calculateEarnMoney(uint256 _valueUsd, uint16 percent, uint256 timeClaim) internal view returns (uint256) {\\n        uint256 valueClaim = (_valueUsd * percent * timeClaim) /\\n            (maxDayDistributionCommissionEarn * 100 * 100) /\\n            (60 * 60 * 24);\\n        return valueClaim;\\n    }\\n\\n    function getClaimDistributeByAddress(address _wallet) external view returns (uint256) {\\n        uint256 realMaxCommission = getRealMaxCommission(_wallet);\\n        uint256 maxValueCommission = IMarketplace(marketplaceContract).getMaxCommissionByAddressInUsd(_wallet);\\n        if (realMaxCommission == 0) {\\n            return 0;\\n        }\\n        uint256 nftCommissionEarned = IMarketplace(marketplaceContract).getNftCommissionEarnedForAccount(_wallet);\\n        uint256 nftStakeCommissionEarned = IMarketplace(marketplaceContract).getTotalCommissionStakeByAddressInUsd(\\n            _wallet\\n        );\\n        uint256 distributeCommissionEarned = IMarketplace(marketplaceContract)\\n            .getNftDistributeCommissionEarnedForAccount(_wallet);\\n        uint256 totalReceived = nftCommissionEarned + nftStakeCommissionEarned + distributeCommissionEarned;\\n        uint256 canReceive = maxValueCommission - nftCommissionEarned - nftStakeCommissionEarned;\\n        if (realMaxCommission > canReceive) {\\n            realMaxCommission = canReceive;\\n        }\\n        uint256 maxReceive = realMaxCommission - distributeCommissionEarned;\\n        if (totalReceived >= maxValueCommission) {\\n            return 0;\\n        }\\n        if (distributeCommissionEarned >= realMaxCommission) {\\n            return 0;\\n        }\\n        address[] memory allF1s = IMarketplace(marketplaceContract).getF1ListForAccount(_wallet);\\n        uint countF1Meaning = getCountF1BuyMin(allF1s);\\n        uint256 total = getTotalClaim(allF1s, _wallet, countF1Meaning);\\n        uint256 totalCanReceive = total - distributeCommissionEarned;\\n        uint256 realReceive = totalCanReceive;\\n        if (totalCanReceive > maxReceive) {\\n            realReceive = maxReceive;\\n        }\\n        return realReceive;\\n    }\\n\\n    function getF1Next(address[] memory allF1s) internal view returns (address[] memory) {\\n        uint256 totalFNext = 0;\\n        address[] memory allF1Result;\\n        for (uint i = 0; i < allF1s.length; i++) {\\n            address[] memory allF1Index = IMarketplace(marketplaceContract).getF1ListForAccount(allF1s[i]);\\n            totalFNext = totalFNext + allF1Index.length;\\n        }\\n        if (totalFNext == 0) {\\n            allF1Result = new address[](0);\\n        } else {\\n            uint256 counter = 0;\\n            address[] memory allFNext = new address[](totalFNext);\\n            for (uint i = 0; i < allF1s.length; i++) {\\n                address[] memory allF1Index = IMarketplace(marketplaceContract).getF1ListForAccount(allF1s[i]);\\n                for (uint j = 0; j < allF1Index.length; j++) {\\n                    allFNext[counter] = allF1Index[j];\\n                    counter++;\\n                }\\n            }\\n            allF1Result = allFNext;\\n        }\\n        return allF1Result;\\n    }\\n\\n    function getCountF1BuyMin(address[] memory allF1s) internal view returns (uint256) {\\n        uint countF1Meaning = 0;\\n        for (uint i = 0; i < allF1s.length; i++) {\\n            bool isCheckBuyMin = IMarketplace(marketplaceContract).checkIsBuyMinValuePackage(allF1s[i]);\\n            if (isCheckBuyMin) {\\n                countF1Meaning++;\\n            }\\n        }\\n        return countF1Meaning;\\n    }\\n\\n    function getTotalClaim(\\n        address[] memory allF1s,\\n        address _wallet,\\n        uint countF1Meaning\\n    ) internal view returns (uint256) {\\n        uint8 index = 1;\\n        uint256 total = 0;\\n        uint256 timeCheck = block.timestamp;\\n        uint256 totalSale = IMarketplace(marketplaceContract).getNftSaleValueForAccountInUsdDecimal(_wallet);\\n        while (allF1s.length != 0 && index <= totalLevelEarn) {\\n            uint256 totalClaimByLevel = getClaimableData(allF1s, timeCheck, index, totalSale, countF1Meaning);\\n            total = total + totalClaimByLevel;\\n            address[] memory addressNext = getF1Next(allF1s);\\n            allF1s = addressNext;\\n            index++;\\n        }\\n        return total;\\n    }\\n\\n    function getRealMaxCommission(address _wallet) internal view returns (uint256) {\\n        uint256 currentNftSaleValue = IMarketplace(marketplaceContract).getNftSaleValueForAccountInUsdDecimal(_wallet);\\n        uint256 maxCommission = (currentNftSaleValue * maxNumberDistributionCommission) / 100;\\n        uint256 realMaxCommission = maxCommission;\\n        uint256 maxValueDistributionCommission = IMarketplace(marketplaceContract).getMaxCommissionByAddressInUsd(\\n            _wallet\\n        );\\n        if (realMaxCommission == 0) {\\n            realMaxCommission = maxValueDistributionCommission;\\n        }\\n        return realMaxCommission;\\n    }\\n\\n    function getClaimableData(\\n        address[] memory allF1s,\\n        uint256 _timeCheck,\\n        uint8 _level,\\n        uint256 _totalBuy,\\n        uint _countF1Meaning\\n    ) internal view returns (uint256) {\\n        uint256 total = 0;\\n        uint256 timeCheck = _timeCheck;\\n        uint256 totalBuy = _totalBuy;\\n        uint256 countF1Meaning = _countF1Meaning;\\n        uint8 level = _level;\\n        for (uint i = 0; i < allF1s.length; i++) {\\n            StructData.InfoBuyData[] memory listBuyNft = nftBuyByTimestamp[allF1s[i]].childList;\\n            if (listBuyNft.length == 0) {\\n                continue;\\n            }\\n            uint256 totalF1 = 0;\\n            for (uint j = 0; j < listBuyNft.length; j++) {\\n                uint256 timeBuy = listBuyNft[j].timeBuy;\\n                uint256 valueUsd = listBuyNft[j].valueUsd;\\n                uint256 endCheckTime = timeBuy + maxDayDistributionCommissionEarn * 24 * 60 * 60;\\n                uint256 timeClaim = (timeCheck - timeBuy);\\n                if (timeCheck <= endCheckTime) {\\n                    uint16 percent = commissionPercent[level];\\n                    uint8 condition1 = conditionF1Commission[level];\\n                    uint256 condition2 = orConditionF1Commission[level] * (10 ** FitZenERC20(currency).decimals());\\n                    if (condition1 == 0 || condition2 == 0) {\\n                        uint256 claimUsd = calculateEarnMoney(valueUsd, percent, timeClaim);\\n                        totalF1 = totalF1 + claimUsd;\\n                    } else {\\n                        if (totalBuy >= condition2 || countF1Meaning >= condition1) {\\n                            uint256 claimUsd = calculateEarnMoney(valueUsd, percent, timeClaim);\\n                            totalF1 = totalF1 + claimUsd;\\n                        }\\n                    }\\n                }\\n            }\\n            total = total + totalF1;\\n        }\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/market/IMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IMarketplace {\\n    event Buy(address seller, address buyer, uint256 nftId, address refAddress);\\n\\n    event Sell(address seller, address buyer, uint256 nftId);\\n\\n    event PayCommission(address buyer, address refAccount, uint256 commissionAmount);\\n\\n    event ErrorLog(bytes message);\\n\\n    function buyByCurrency(uint256[] memory _nftIds, address _refAddress) external;\\n\\n    function buyByToken(uint256[] memory _nftIds, address _refAddress) external;\\n\\n    function buyByTokenAndCurrency(uint256 _nftId, address _refAddress) external;\\n\\n    function setSaleWalletAddress(address _saleAddress) external;\\n\\n    function setStakingContractAddress(address _stakingAddress) external;\\n\\n    function setRankingContractAddress(address _stakingAddress) external;\\n\\n    function setDistributeWalletAddress(address _distributeAddress) external;\\n\\n    function setNetworkWalletAddress(address _networkWallet) external;\\n\\n    function setMaxNumberStakeValue(uint8 _percent) external;\\n\\n    function setDefaultMaxCommission(uint256 _value) external;\\n\\n    function setSaleStrategyOnlyCurrencyStart(uint256 _newSaleStart) external;\\n\\n    function setSaleStrategyOnlyCurrencyEnd(uint256 _newSaleEnd) external;\\n\\n    function setSalePercent(uint256 _newSalePercent) external;\\n\\n    function setOracleAddress(address _oracleAddress) external;\\n\\n    function setNftAddress(address _nftAddress) external;\\n\\n    function allowBuyNftByCurrency(bool _activePayByCurrency) external;\\n\\n    function allowBuyNftByToken(bool _activePayByToken) external;\\n\\n    function allowBuyNftByCurrencyAndToken(bool _activePayByCurrencyAndToken) external;\\n\\n    function setToken(address _address) external;\\n\\n    function setTypePayCommission(uint256 _typePayCommission) external;\\n\\n    function claimDistributeByAddress() external;\\n\\n    function checkIsBuyMinValuePackage(address _wallet) external view returns (bool);\\n\\n    function getClaimDistributeByAddress(address _wallet) external returns (uint256);\\n\\n    function getTotalCommission(address _wallet) external view returns (uint256);\\n\\n    function getReferredNftValueForAccount(address _wallet) external returns (uint256);\\n\\n    function getNftCommissionEarnedForAccount(address _wallet) external view returns (uint256);\\n\\n    function getNftDistributeCommissionEarnedForAccount(address _wallet) external view returns (uint256);\\n\\n    function getNftDistributeCommissionEarnedByTokenForAccount(address _wallet) external view returns (uint256);\\n\\n    function getNftSaleValueForAccountInUsdDecimal(address _wallet) external view returns (uint256);\\n\\n    function getTotalCommissionStakeByAddressInUsd(address _wallet) external view returns (uint256);\\n\\n    function getMaxCommissionByAddressInUsd(address _wallet) external view returns (uint256);\\n\\n    function updateCommissionStakeValueData(address _user, uint256 _valueInUsdWithDecimal) external;\\n\\n    function updateReferralData(address _user, address _refAddress) external;\\n\\n    function getReferralAccountForAccount(address _user) external view returns (address);\\n\\n    function getReferralAccountForAccountExternal(address _user) external view returns (address);\\n\\n    function getF1ListForAccount(address _wallet) external view returns (address[] memory);\\n\\n    function getTeamNftSaleValueForAccountInUsdDecimal(address _wallet) external returns (uint256);\\n\\n    function possibleChangeReferralData(address _wallet) external returns (bool);\\n\\n    function lockedReferralDataForAccount(address _user) external;\\n\\n    function setSystemWallet(address _newSystemWallet) external;\\n\\n    function setCurrencyAddress(address _currency) external;\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) external;\\n\\n    function withdrawTokenEmergencyFrom(address _from, address _to, address _currency, uint256 _amount) external;\\n\\n    function transferNftEmergency(\\n        address _receiver,\\n        uint256 _nftId,\\n        bool _isEquip,\\n        bool _isToken,\\n        bool _isPay\\n    ) external;\\n\\n    function transferMultiNftsEmergency(\\n        address[] memory _receivers,\\n        uint256[] memory _nftIds,\\n        bool _isEquip,\\n        bool _isToken,\\n        bool _isPay\\n    ) external;\\n\\n    function checkValidRefCodeAdvance(address _user, address _refAddress) external returns (bool);\\n\\n    function getCommissionPercent(uint8 _level) external returns (uint16);\\n\\n    function setTierPriceUsdPercent(uint16 _tier, uint256 _percent) external;\\n\\n    function getTierUsdPercent(uint16 _tier) external view returns (uint256);\\n\\n    function setCommissionPercent(uint8 _level, uint16 _percent) external;\\n\\n    function turnOffMaxOut(bool _turnOffMaxOutWithNetwork) external;\\n\\n    function getConditionF1Commission(uint8 _level) external returns (uint8);\\n\\n    function setConditionF1Commission(uint8 _level, uint8 _value) external;\\n\\n    function setIsEnableBurnToken(bool _isEnableBurnToken) external;\\n\\n    function setBurnAddress(address _burnAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/market/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../token/FitZenERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./IMarketplace.sol\\\";\\nimport \\\"./DistributionCommission.sol\\\";\\nimport \\\"../nft/FitZenNFT.sol\\\";\\nimport \\\"../ranking/Ranking.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\nimport \\\"../burn/IBurn.sol\\\";\\nimport \\\"../network/Network.sol\\\";\\n\\ncontract Marketplace is IMarketplace, Ownable, ERC721Holder {\\n    uint256 public maxValueCommission = 500;\\n    uint8 public numberMaxStakeValue = 5;\\n    uint8 private maxLevelCommission = 6;\\n    uint16 private packageValueMin = 150;\\n    address public nft;\\n    address public token;\\n    address public currency;\\n    address private oracleContract;\\n    address public systemWallet;\\n    address public distributeWallet;\\n    address public networkWallet;\\n    address public saleWallet = 0x208416E8e4b4Ae1cEdb0C3e2f7F50F5ebb0e1FeE;\\n    bool private reentrancyGuardForBuying = false;\\n    bool private reentrancyGuardForClaim = false;\\n    bool private turnOffBuyNetworkMaxOut = true;\\n    address private contractOwner;\\n\\n    // for network stats\\n    mapping(address => uint256) referredNftValue;\\n    mapping(address => uint256) nftCommissionEarned;\\n    mapping(address => uint256) nftSaleValue;\\n    mapping(uint16 => uint256) percentUsdtPrice;\\n    // Mapping from token ID to token\\n    mapping(uint256 => bool) private tokenBuyTokens;\\n    mapping(address => StructData.ChildListData) userChildListData;\\n    mapping(address => StructData.ChildListData) userF1ListData;\\n\\n    mapping(address => address) private userRef;\\n    mapping(address => bool) private lockedReferralData;\\n    mapping(address => bool) private buyMinValuePackage;\\n\\n    uint256 private saleStrategyOnlyCurrencyStart = 1680393600; // 2023-04-02 00:00:00\\n    uint256 private saleStrategyOnlyCurrencyEnd = 1681343999; // 2023-04-12 23:59:59\\n    uint256 private salePercent = 150;\\n    bool private allowBuyByCurrency = true; //default allow\\n    bool private allowBuyByToken = false; //default disable\\n    bool private allowBuyFlex = true; //default disable\\n    bool public isEnableBurnToken = true;\\n    uint256 private typePayCom = 0; //0: usdt 1: token 2:flex\\n\\n    address public stakingContractAddress;\\n    address public rankingContractAddress;\\n    address public burnContract;\\n    mapping(address => uint256) totalCommissionStake;\\n    mapping(uint8 => uint16) public commissionPercent;\\n    mapping(uint8 => uint8) public conditionF1Commission;\\n    mapping(address => uint256) nftDistributeCommissionUsdEarned; //da earn by usdt\\n    mapping(address => uint256) nftDistributeCommissionEarned; //da earn by token\\n\\n    constructor(address _nft, address _token, address _oracle, address _systemWallet, address _currency) {\\n        nft = _nft;\\n        token = _token;\\n        oracleContract = _oracle;\\n        systemWallet = _systemWallet;\\n        currency = _currency;\\n        distributeWallet = address(0);\\n        networkWallet = address(0);\\n        contractOwner = _msgSender();\\n        initCommissionPercent();\\n        initConditionF1Commission();\\n    }\\n\\n    modifier isAcceptBuyByCurrency() {\\n        require(allowBuyByCurrency, \\\"M\\\");\\n        _;\\n    }\\n\\n    modifier isAcceptBuyByToken() {\\n        require(allowBuyByToken, \\\"M\\\");\\n        _;\\n    }\\n\\n    modifier isAcceptBuyByFlex() {\\n        require(allowBuyFlex, \\\"M\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier checkOwner() {\\n        require(owner() == _msgSender() || contractOwner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initCommissionPercent() internal {\\n        commissionPercent[1] = 600;\\n        commissionPercent[2] = 100;\\n        commissionPercent[3] = 100;\\n        commissionPercent[4] = 100;\\n        commissionPercent[5] = 50;\\n        commissionPercent[6] = 50;\\n    }\\n\\n    function initConditionF1Commission() internal {\\n        conditionF1Commission[1] = 0;\\n        conditionF1Commission[2] = 0;\\n        conditionF1Commission[3] = 2;\\n        conditionF1Commission[4] = 3;\\n        conditionF1Commission[5] = 4;\\n        conditionF1Commission[6] = 5;\\n    }\\n\\n    function setTierPriceUsdPercent(uint16 _tier, uint256 _percent) external override checkOwner {\\n        require(_percent >= 0 && _percent <= 1000, \\\"M\\\");\\n        percentUsdtPrice[_tier] = _percent;\\n    }\\n\\n    function getTierUsdPercent(uint16 _tier) external view override returns (uint256) {\\n        return percentUsdtPrice[_tier];\\n    }\\n\\n    function getCommissionPercent(uint8 _level) external view override returns (uint16) {\\n        return commissionPercent[_level];\\n    }\\n\\n    function setCommissionPercent(uint8 _level, uint16 _percent) external override checkOwner {\\n        commissionPercent[_level] = _percent;\\n    }\\n\\n    function turnOffMaxOut(bool _turnOffMaxOutWithNetwork) external override checkOwner {\\n        turnOffBuyNetworkMaxOut = _turnOffMaxOutWithNetwork;\\n    }\\n\\n    function getConditionF1Commission(uint8 _level) external view override returns (uint8) {\\n        return conditionF1Commission[_level];\\n    }\\n\\n    function setConditionF1Commission(uint8 _level, uint8 _value) external override checkOwner {\\n        conditionF1Commission[_level] = _value;\\n    }\\n\\n    /**\\n     * @dev set sale wallet to receive token\\n     */\\n    function setSaleWalletAddress(address _saleAddress) external override checkOwner {\\n        require(_saleAddress != address(0), \\\"M\\\");\\n        saleWallet = _saleAddress;\\n    }\\n\\n    function setIsEnableBurnToken(bool _isEnableBurnToken) external override checkOwner {\\n        isEnableBurnToken = _isEnableBurnToken;\\n    }\\n\\n    function setBurnAddress(address _burnAddress) external override checkOwner {\\n        burnContract = _burnAddress;\\n    }\\n\\n    /**\\n     * @dev set staking contract address\\n     */\\n    function setStakingContractAddress(address _stakingAddress) external override checkOwner {\\n        require(_stakingAddress != address(0), \\\"M\\\");\\n        stakingContractAddress = _stakingAddress;\\n    }\\n\\n    /**\\n     * @dev set staking contract address\\n     */\\n    function setRankingContractAddress(address _rankingAddress) external override checkOwner {\\n        require(_rankingAddress != address(0), \\\"M\\\");\\n        rankingContractAddress = _rankingAddress;\\n    }\\n\\n    function setDistributeWalletAddress(address _distributeAddress) external override checkOwner {\\n        require(_distributeAddress != address(0), \\\"M\\\");\\n        distributeWallet = _distributeAddress;\\n    }\\n\\n    function setNetworkWalletAddress(address _networkWallet) external override checkOwner {\\n        require(_networkWallet != address(0), \\\"M\\\");\\n        networkWallet = _networkWallet;\\n    }\\n\\n    function setMaxNumberStakeValue(uint8 _value) external override checkOwner {\\n        numberMaxStakeValue = _value;\\n    }\\n\\n    function setDefaultMaxCommission(uint256 _value) external override checkOwner {\\n        maxValueCommission = _value;\\n    }\\n\\n    /**\\n     * @dev set sale StrategyOnlyCurrency time starting\\n     */\\n    function setSaleStrategyOnlyCurrencyStart(uint256 _newSaleStart) external override checkOwner {\\n        saleStrategyOnlyCurrencyStart = _newSaleStart;\\n    }\\n\\n    /**\\n     * @dev get discount in sale period\\n     */\\n    function setSaleStrategyOnlyCurrencyEnd(uint256 _newSaleEnd) external override checkOwner {\\n        require(_newSaleEnd > saleStrategyOnlyCurrencyStart, \\\"M\\\");\\n        saleStrategyOnlyCurrencyEnd = _newSaleEnd;\\n    }\\n\\n    /**\\n     * @dev allow buy NFT by currency\\n     */\\n    function allowBuyNftByCurrency(bool _activePayByCurrency) external override checkOwner {\\n        allowBuyByCurrency = _activePayByCurrency;\\n    }\\n\\n    /**\\n     * @dev allow buy NFT by token\\n     */\\n    function allowBuyNftByToken(bool _activePayByToken) external override checkOwner {\\n        allowBuyByToken = _activePayByToken;\\n    }\\n\\n    function allowBuyNftByCurrencyAndToken(bool _activePayByCurrencyAndToken) public override checkOwner {\\n        allowBuyFlex = _activePayByCurrencyAndToken;\\n    }\\n\\n    /**\\n     * @dev set Token buy by token\\n     */\\n    function setToken(address _address) external override checkOwner {\\n        require(_address != address(0), \\\"M\\\");\\n        token = _address;\\n    }\\n\\n    /**\\n     * @dev set type pay com(token or currency)\\n     */\\n    function setTypePayCommission(uint256 _typePayCommission) external override checkOwner {\\n        require(_typePayCommission >= 0 && _typePayCommission < 3, \\\"M\\\");\\n        // false is pay com by token\\n        // true is pay com by usdt\\n        typePayCom = _typePayCommission;\\n    }\\n\\n    /**\\n     * @dev set sale percent\\n     */\\n    function setSalePercent(uint256 _newSalePercent) public override checkOwner {\\n        require(_newSalePercent >= 0 && _newSalePercent <= 1000, \\\"M\\\");\\n        salePercent = _newSalePercent;\\n    }\\n\\n    /**\\n     * @dev set oracle address\\n     */\\n    function setOracleAddress(address _oracleAddress) external override checkOwner {\\n        require(_oracleAddress != address(0), \\\"M\\\");\\n        oracleContract = _oracleAddress;\\n    }\\n\\n    function setNftAddress(address _nftAddress) external override checkOwner {\\n        require(_nftAddress != address(0), \\\"M\\\");\\n        nft = _nftAddress;\\n    }\\n\\n    /**\\n     * @dev get discount percent if possible\\n     */\\n    function getCurrentSalePercent() internal view returns (uint) {\\n        uint currentSalePercent = 0;\\n        if (block.timestamp >= saleStrategyOnlyCurrencyStart && block.timestamp < saleStrategyOnlyCurrencyEnd) {\\n            currentSalePercent = salePercent;\\n        }\\n        return currentSalePercent;\\n    }\\n\\n    function getClaimDistributeByAddress(address _wallet) public view override returns (uint256) {\\n        uint256 time = block.timestamp;\\n        if (time < saleStrategyOnlyCurrencyEnd) {\\n            return 0;\\n        } else {\\n            uint256 valueClaim = DistributionCommission(distributeWallet).getClaimDistributeByAddress(_wallet);\\n            return valueClaim;\\n        }\\n    }\\n\\n    function getTotalCommission(address _wallet) public view override returns (uint256) {\\n        uint256 currentNftDistributeCommissionUsdEarned = nftDistributeCommissionUsdEarned[_wallet];\\n        uint256 currentCommissionEarned = nftCommissionEarned[_wallet];\\n        uint256 stakeCommissionUserInUsd = totalCommissionStake[_wallet];\\n        return currentNftDistributeCommissionUsdEarned + currentCommissionEarned + stakeCommissionUserInUsd;\\n    }\\n\\n    function claimDistributeByAddress() external override {\\n        uint256 valueReceive = getClaimDistributeByAddress(msg.sender);\\n        if (valueReceive > 0) {\\n            require(!reentrancyGuardForClaim, \\\"M\\\");\\n            reentrancyGuardForClaim = true;\\n            uint256 valueClaimToken = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(valueReceive);\\n            updateDistributeData(msg.sender, valueReceive, valueClaimToken);\\n            require(FitZenERC20(token).balanceOf(address(this)) >= valueClaimToken, \\\"M\\\");\\n            require(FitZenERC20(token).transfer(msg.sender, valueClaimToken), \\\"M\\\");\\n            reentrancyGuardForClaim = false;\\n        }\\n    }\\n\\n    function updateDistributeData(address _wallet, uint256 valueUsd, uint256 valueToken) internal {\\n        uint256 currentNftDistributeCommissionUsdEarned = nftDistributeCommissionUsdEarned[_wallet];\\n        uint256 currentNftDistributeCommissionEarned = nftDistributeCommissionEarned[_wallet];\\n        nftDistributeCommissionUsdEarned[_wallet] = currentNftDistributeCommissionUsdEarned + valueUsd;\\n        nftDistributeCommissionEarned[_wallet] = currentNftDistributeCommissionEarned + valueToken;\\n    }\\n\\n    function checkIsBuyMinValuePackage(address _wallet) external view override returns (bool) {\\n        return buyMinValuePackage[_wallet];\\n    }\\n\\n    function getReferredNftValueForAccount(address _wallet) external view override returns (uint256) {\\n        return referredNftValue[_wallet];\\n    }\\n\\n    function getNftCommissionEarnedForAccount(address _wallet) external view override returns (uint256) {\\n        return nftCommissionEarned[_wallet];\\n    }\\n\\n    function getNftDistributeCommissionEarnedForAccount(address _wallet) external view override returns (uint256) {\\n        return nftDistributeCommissionUsdEarned[_wallet];\\n    }\\n\\n    function getNftDistributeCommissionEarnedByTokenForAccount(\\n        address _wallet\\n    ) external view override returns (uint256) {\\n        return nftDistributeCommissionEarned[_wallet];\\n    }\\n\\n    function updateNetworkData(address _refWallet, uint256 _totalValueUsdWithDecimal, uint16 _commissionBuy) internal {\\n        uint256 currentNftValueInUsdWithDecimal = referredNftValue[_refWallet];\\n        referredNftValue[_refWallet] = currentNftValueInUsdWithDecimal + _totalValueUsdWithDecimal;\\n        // Update NFT Commission Earned\\n        uint256 currentCommissionEarned = nftCommissionEarned[_refWallet];\\n        uint256 commissionBuy = _commissionBuy;\\n        uint256 commissionAmountInUsdWithDecimal = (_totalValueUsdWithDecimal * commissionBuy) / 10000;\\n        uint256 stakeCommissionUserInUsd = totalCommissionStake[_refWallet];\\n        uint256 currentNftDistributeCommissionUsdEarned = nftDistributeCommissionUsdEarned[_refWallet];\\n        uint256 maxCommissionWithDecimal = getMaxCommissionByAddressInUsd(_refWallet);\\n        uint256 totalCommission = currentCommissionEarned + commissionAmountInUsdWithDecimal;\\n        uint256 totalCommissionWithStake = totalCommission +\\n            stakeCommissionUserInUsd +\\n            currentNftDistributeCommissionUsdEarned;\\n        if (_refWallet != systemWallet) {\\n            if (totalCommissionWithStake >= maxCommissionWithDecimal) {\\n                totalCommission =\\n                    maxCommissionWithDecimal -\\n                    stakeCommissionUserInUsd -\\n                    currentNftDistributeCommissionUsdEarned;\\n            }\\n        }\\n        nftCommissionEarned[_refWallet] = totalCommission;\\n    }\\n\\n    function getCommissionRef(\\n        address _refWallet,\\n        uint256 _totalValueUsdWithDecimal,\\n        uint256 _totalCommission,\\n        uint16 _commissionBuy\\n    ) public view returns (uint256) {\\n        uint256 commissionBuy = _commissionBuy;\\n        uint256 commissionAmountInUsdWithDecimal = (_totalValueUsdWithDecimal * commissionBuy) / 10000;\\n        uint256 maxCommissionWithDecimal = getMaxCommissionByAddressInUsd(_refWallet);\\n        uint256 totalCommission = _totalCommission;\\n        uint256 totalCommissionAfterBuy = commissionAmountInUsdWithDecimal + totalCommission;\\n        if (_refWallet != systemWallet) {\\n            if (totalCommissionAfterBuy >= maxCommissionWithDecimal) {\\n                commissionAmountInUsdWithDecimal = maxCommissionWithDecimal - totalCommission;\\n            }\\n        }\\n        return commissionAmountInUsdWithDecimal;\\n    }\\n\\n    function checkValidRefCodeAdvance(address _user, address _refAddress) public view override returns (bool) {\\n        bool isValid = true;\\n        address currentRefUser = _refAddress;\\n        address[] memory refTree = new address[](101);\\n        refTree[0] = _user;\\n        uint i = 1;\\n        while (i < 101 && currentRefUser != systemWallet) {\\n            for (uint j = 0; j < refTree.length; j++) {\\n                if (currentRefUser == refTree[j]) {\\n                    isValid = false;\\n                    break;\\n                }\\n            }\\n            refTree[i] = currentRefUser;\\n            currentRefUser = getReferralAccountForAccount(currentRefUser);\\n            ++i;\\n        }\\n        return isValid;\\n    }\\n\\n    /**\\n     * @dev buyByCurrency function\\n     * @param _nftIds list NFT ID want to buy\\n     * @param _refAddress ref of address for account\\n     */\\n    function buyByCurrency(uint256[] memory _nftIds, address _refAddress) public override isAcceptBuyByCurrency {\\n        require(_refAddress != msg.sender, \\\"M\\\");\\n        require(_nftIds.length > 0, \\\"M\\\");\\n        require(_nftIds.length <= 100, \\\"M\\\");\\n        // Prevent reentrancy\\n        require(!reentrancyGuardForBuying, \\\"M\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refAddress), \\\"M\\\");\\n        reentrancyGuardForBuying = true;\\n        // Start processing\\n        uint index;\\n        uint256 totalValueUsdWithDecimal = getTotalValue(_nftIds);\\n        //check sale and update total value\\n        uint currentSale = getCurrentSalePercent();\\n        uint256 saleValueUsdWithDecimal = 0;\\n        if (currentSale > 0) {\\n            saleValueUsdWithDecimal = (currentSale * totalValueUsdWithDecimal) / 1000;\\n        }\\n        uint256 payValueTokenWithDecimal = totalValueUsdWithDecimal - saleValueUsdWithDecimal;\\n        pay(currency, payValueTokenWithDecimal);\\n        // Get ref info\\n        address payable refAddress = payable(_refAddress);\\n        require(refAddress != address(0), \\\"M\\\");\\n        // Transfer nft from marketplace to buyer\\n        for (index = 0; index < _nftIds.length; index++) {\\n            try FitZenNFT(nft).safeTransferFrom(address(this), msg.sender, _nftIds[index]) {\\n                emit Buy(address(this), msg.sender, _nftIds[index], refAddress);\\n            } catch (bytes memory _error) {\\n                reentrancyGuardForBuying = false;\\n                emit ErrorLog(_error);\\n                revert(\\\"M\\\");\\n            }\\n            //lock transfer nft 1 year\\n            FitZenNFT(nft).setLockTimeTransfer(_nftIds[index], block.timestamp);\\n        }\\n        updateDataBuy(msg.sender, _refAddress, totalValueUsdWithDecimal, false);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    function pay(address payToken, uint256 payValueTokenWithDecimal) internal {\\n        require(FitZenERC20(payToken).balanceOf(msg.sender) >= payValueTokenWithDecimal, \\\"M\\\");\\n        require(FitZenERC20(payToken).allowance(msg.sender, address(this)) >= payValueTokenWithDecimal, \\\"M\\\");\\n        require(FitZenERC20(payToken).transferFrom(msg.sender, saleWallet, payValueTokenWithDecimal), \\\"M\\\");\\n    }\\n\\n    function getTotalValue(uint256[] memory _nftIds) internal returns (uint256) {\\n        uint256 totalValueUsd;\\n        bool isBuyMinPackage = buyMinValuePackage[msg.sender];\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            uint256 priceNftUsd = FitZenNFT(nft).getNftPriceUsd(_nftIds[index]);\\n            require(priceNftUsd > 0, \\\"M\\\");\\n            require(FitZenNFT(nft).ownerOf(_nftIds[index]) == address(this), \\\"M\\\");\\n            totalValueUsd += priceNftUsd;\\n            if (priceNftUsd >= packageValueMin && !isBuyMinPackage) {\\n                buyMinValuePackage[msg.sender] = true;\\n            }\\n        }\\n        uint256 totalValueUsdWithDecimal = totalValueUsd * (10 ** FitZenERC20(currency).decimals());\\n        return totalValueUsdWithDecimal;\\n    }\\n\\n    /**\\n     * @dev buyByToken function\\n     * @param _nftIds list NFT ID want to buy\\n     * @param _refAddress ref of address for account\\n     */\\n    function buyByToken(uint256[] memory _nftIds, address _refAddress) public override isAcceptBuyByToken {\\n        require(_refAddress != msg.sender, \\\"M\\\");\\n        require(_nftIds.length > 0, \\\"M\\\");\\n        require(_nftIds.length <= 100, \\\"M\\\");\\n        // Prevent reentrancy\\n        require(!reentrancyGuardForBuying, \\\"M\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refAddress), \\\"M\\\");\\n        reentrancyGuardForBuying = true;\\n        // Start processing\\n        uint index;\\n        uint256 totalValueUsdWithDecimal = getTotalValue(_nftIds);\\n        uint256 totalValueInTokenWithDecimal = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n            totalValueUsdWithDecimal\\n        );\\n        require(totalValueInTokenWithDecimal > 0, \\\"M\\\");\\n        //check sale and update total value\\n        uint currentSale = getCurrentSalePercent();\\n        uint256 saleValueInTokenWithDecimal = 0;\\n        if (currentSale > 0) {\\n            saleValueInTokenWithDecimal = (currentSale * totalValueInTokenWithDecimal) / 1000;\\n        }\\n        uint256 payValueTokenWithDecimal = totalValueInTokenWithDecimal - saleValueInTokenWithDecimal;\\n        pay(token, payValueTokenWithDecimal);\\n        // Transfer nft from marketplace to buyer\\n        // Get ref info\\n        address payable refAddress = payable(_refAddress);\\n        require(refAddress != address(0), \\\"M\\\");\\n        // transfer\\n        for (index = 0; index < _nftIds.length; index++) {\\n            try FitZenNFT(nft).safeTransferFrom(address(this), msg.sender, _nftIds[index]) {\\n                emit Buy(address(this), msg.sender, _nftIds[index], refAddress);\\n            } catch (bytes memory _error) {\\n                reentrancyGuardForBuying = false;\\n                emit ErrorLog(_error);\\n                revert(\\\"M\\\");\\n            }\\n            //lock transfer nft 1 year\\n            FitZenNFT(nft).setLockTimeTransfer(_nftIds[index], block.timestamp);\\n        }\\n        updateDataBuy(msg.sender, _refAddress, totalValueUsdWithDecimal, true);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    function buyByTokenAndCurrency(uint256 _nftId, address _refAddress) public override isAcceptBuyByFlex {\\n        require(_refAddress != msg.sender, \\\"M\\\");\\n        // Prevent reentrancy\\n        require(!reentrancyGuardForBuying, \\\"M\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refAddress), \\\"M\\\");\\n        reentrancyGuardForBuying = true;\\n        bool isBuyMinPackage = buyMinValuePackage[msg.sender];\\n        uint256 totalValueUsd = FitZenNFT(nft).getNftPriceUsd(_nftId);\\n        if (totalValueUsd >= packageValueMin && !isBuyMinPackage) {\\n            buyMinValuePackage[msg.sender] = true;\\n        }\\n        uint256 totalValueUsdWithDecimal = totalValueUsd * (10 ** FitZenERC20(currency).decimals());\\n        uint16 nftTier = FitZenNFT(nft).getNftTier(_nftId);\\n        uint256 percentUsd = percentUsdtPrice[nftTier];\\n        if (percentUsd == 0) {\\n            percentUsd = 500;\\n        }\\n        uint256 percentToken = 1000 - percentUsd;\\n        uint256 valueUsd = (totalValueUsdWithDecimal * percentUsd) / 1000;\\n        uint256 valueUsdToken = (totalValueUsdWithDecimal * percentToken) / 1000;\\n        uint256 valueToken = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(valueUsdToken);\\n        uint256 nftId = _nftId;\\n        address refAddress = _refAddress;\\n        //check sale and update total value\\n        uint256 saleValueInTokenWithDecimal = 0;\\n        uint256 saleValueInUsdWithDecimal = 0;\\n        {\\n            uint256 currentSale = getCurrentSalePercent();\\n            if (currentSale > 0) {\\n                saleValueInTokenWithDecimal = (currentSale * valueToken) / 1000;\\n                saleValueInUsdWithDecimal = (currentSale * valueUsd) / 1000;\\n            }\\n        }\\n\\n        uint256 payValueUsdWithDecimal = valueUsd - saleValueInUsdWithDecimal;\\n        uint256 payValueTokenWithDecimal = valueToken - saleValueInTokenWithDecimal;\\n        pay(currency, payValueUsdWithDecimal);\\n        pay(token, payValueTokenWithDecimal);\\n        // Transfer nft from marketplace to buyer\\n        FitZenNFT(nft).safeTransferFrom(address(this), msg.sender, nftId);\\n        emit Buy(address(this), msg.sender, nftId, refAddress);\\n        //lock transfer nft 1 year\\n        FitZenNFT(nft).setLockTimeTransfer(nftId, block.timestamp);\\n        updateDataBuy(msg.sender, refAddress, totalValueUsdWithDecimal, true);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    function updateCommissionStakeValueData(address _user, uint256 _valueInUsdWithDecimal) public override {\\n        require(msg.sender == stakingContractAddress, \\\"M\\\");\\n        uint256 currentCommissionStakeValue = totalCommissionStake[_user];\\n        totalCommissionStake[_user] = currentCommissionStakeValue + _valueInUsdWithDecimal;\\n    }\\n\\n    /**\\n     * @dev update referral data function\\n     * @param _user user wallet address\\n     * @param _refAddress referral address of ref account\\n     */\\n    function updateReferralData(address _user, address _refAddress) public override {\\n        address refAddress = _refAddress;\\n        address refOfRefUser = getReferralAccountForAccountExternal(refAddress);\\n        require(\\n            (stakingContractAddress != address(0) && msg.sender == stakingContractAddress) || msg.sender == _user,\\n            \\\"M\\\"\\n        );\\n        require(refOfRefUser != _user, \\\"M\\\");\\n        require(_refAddress != _user, \\\"M\\\");\\n        require(_refAddress != msg.sender, \\\"M\\\");\\n        require(checkValidRefCodeAdvance(msg.sender, _refAddress), \\\"M\\\");\\n        if (possibleChangeReferralData(_user)) {\\n            userRef[_user] = refAddress;\\n            lockedReferralDataForAccount(_user);\\n            updateF1ListForRefAccount(refAddress, _user);\\n            updateChildListForRefAccountMultiLevels(refAddress, _user);\\n        }\\n    }\\n\\n    /**\\n     * @dev get NFT sale value\\n     */\\n    function getNftSaleValueForAccountInUsdDecimal(address _wallet) public view override returns (uint256) {\\n        return nftSaleValue[_wallet];\\n    }\\n\\n    /**\\n     * @dev getTotalCommissionStakeByAddressInUsd\\n     */\\n    function getTotalCommissionStakeByAddressInUsd(address _wallet) public view override returns (uint256) {\\n        return totalCommissionStake[_wallet];\\n    }\\n\\n    /**\\n     * @dev getMaxCommissionByAddressInUsd\\n     */\\n    function getMaxCommissionByAddressInUsd(address _wallet) public view override returns (uint256) {\\n        uint256 nftSaleUser = nftSaleValue[_wallet];\\n        uint256 maxOutUser = maxValueCommission * (10 ** FitZenERC20(currency).decimals());\\n        if (nftSaleUser > 0) {\\n            uint256 maxOut = numberMaxStakeValue * nftSaleUser;\\n            uint256 maxOutNoDecimal = maxOut / (10 ** FitZenERC20(currency).decimals());\\n            if (maxOutNoDecimal < maxValueCommission) {\\n                return maxOutUser;\\n            } else {\\n                return maxOut;\\n            }\\n        } else {\\n            if (networkWallet != address(0)) {\\n                bool isBuyNetwork = Network(networkWallet).checkCanBuyPackage(_wallet);\\n                if (!isBuyNetwork) {\\n                    return maxOutUser;\\n                }\\n            }\\n            if (turnOffBuyNetworkMaxOut) {\\n                return maxOutUser;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount\\n     */\\n    function updateF1ListForRefAccount(address _refAccount, address _newChild) internal {\\n        userF1ListData[_refAccount].childList.push(_newChild);\\n        userF1ListData[_refAccount].memberCounter += 1;\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount\\n     */\\n    function updateChildListForRefAccount(address _refAccount, address _newChild) internal {\\n        userChildListData[_refAccount].childList.push(_newChild);\\n        userChildListData[_refAccount].memberCounter += 1;\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount with 200 levels\\n     */\\n    function updateChildListForRefAccountMultiLevels(address _refAccount, address _newChild) internal {\\n        address currentRef;\\n        address nextRef = _refAccount;\\n        uint8 index = 1;\\n        while (currentRef != nextRef && nextRef != address(0) && index <= 200) {\\n            currentRef = nextRef;\\n            updateChildListForRefAccount(currentRef, _newChild);\\n            index++;\\n            nextRef = getReferralAccountForAccountExternal(currentRef);\\n        }\\n    }\\n\\n    /**\\n     * @dev get child list of an address\\n     */\\n    function getF1ListForAccount(address _wallet) public view override returns (address[] memory) {\\n        return userF1ListData[_wallet].childList;\\n    }\\n\\n    /**\\n     * @dev get Team NFT sale value\\n     */\\n    function getTeamNftSaleValueForAccountInUsdDecimal(address _wallet) public view override returns (uint256) {\\n        uint256 countTeamMember = userChildListData[_wallet].memberCounter;\\n        address currentMember;\\n        uint256 teamNftValue = 0;\\n        for (uint i = 0; i < countTeamMember; i++) {\\n            currentMember = userChildListData[_wallet].childList[i];\\n            teamNftValue += getNftSaleValueForAccountInUsdDecimal(currentMember);\\n        }\\n        return teamNftValue;\\n    }\\n\\n    /**\\n     * @dev the function return referral address for specified address\\n     */\\n    function getReferralAccountForAccount(address _user) public view override returns (address) {\\n        address refWallet = address(0);\\n        refWallet = userRef[_user];\\n        if (refWallet == address(0)) {\\n            refWallet = systemWallet;\\n        }\\n        return refWallet;\\n    }\\n\\n    /**\\n     * @dev the function return referral address for specified address (without system)\\n     */\\n    function getReferralAccountForAccountExternal(address _user) public view override returns (address) {\\n        return userRef[_user];\\n    }\\n\\n    /**\\n     * @dev check possible to change referral data for a user\\n     * @param _user user wallet address\\n     */\\n    function possibleChangeReferralData(address _user) public view override returns (bool) {\\n        return !lockedReferralData[_user];\\n    }\\n\\n    /**\\n     * @dev only update the referral data 1 time. After set cannot change the data again.\\n     */\\n    function lockedReferralDataForAccount(address _user) public override {\\n        require(lockedReferralData[_user] == false, \\\"M\\\");\\n        lockedReferralData[_user] = true;\\n    }\\n\\n    /**\\n     * @dev the function pay commission(default 3%) to referral account\\n     */\\n    function payReferralCommissions(\\n        address _buyer,\\n        address payable _receiver,\\n        uint256 commissionAmountInUsdDecimal,\\n        bool _isBuyByToken\\n    ) internal {\\n        bool _payComByUsd = true;\\n        if (typePayCom == 0) {\\n            _payComByUsd = true;\\n        } else if (typePayCom == 1) {\\n            _payComByUsd = false;\\n        } else {\\n            _payComByUsd = !_isBuyByToken;\\n        }\\n        if (commissionAmountInUsdDecimal > 0) {\\n            if (_payComByUsd) {\\n                //true is pay com by usdt(currency)\\n                require(FitZenERC20(currency).balanceOf(address(this)) >= commissionAmountInUsdDecimal, \\\"M\\\");\\n                require(FitZenERC20(currency).transfer(_receiver, commissionAmountInUsdDecimal), \\\"M\\\");\\n                emit PayCommission(_buyer, _receiver, commissionAmountInUsdDecimal);\\n            } else {\\n                uint256 commissionAmountInTokenDecimal = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n                    commissionAmountInUsdDecimal\\n                );\\n                require(FitZenERC20(token).balanceOf(address(this)) >= commissionAmountInTokenDecimal, \\\"M\\\");\\n                require(FitZenERC20(token).transfer(_receiver, commissionAmountInTokenDecimal), \\\"M\\\");\\n                emit PayCommission(_buyer, _receiver, commissionAmountInTokenDecimal);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev the function to update system wallet. Only owner can do this action\\n     */\\n    function setSystemWallet(address _newSystemWallet) external override checkOwner {\\n        require(_newSystemWallet != address(0) && _newSystemWallet != systemWallet, \\\"M\\\");\\n        systemWallet = _newSystemWallet;\\n    }\\n\\n    /**\\n     * @dev function to pay commissions in 6 level\\n     * @param _firstRef direct referral account wallet address\\n     * @param _totalAmountUsdWithDecimal total amount stake in usd with decimal for this\\n     */\\n    function payCommissionMultiLevels(\\n        address _buyer,\\n        address payable _firstRef,\\n        uint256 _totalAmountUsdWithDecimal,\\n        bool _payByToken\\n    ) internal returns (bool) {\\n        address payable currentRef = _firstRef;\\n        uint8 idx = 1;\\n        while (currentRef != address(0) && idx <= maxLevelCommission) {\\n            // Check if ref account is eligible to staked amount enough for commission\\n            uint16 commissionPercentRef = getCommissionPercentForAddress(currentRef, idx);\\n            uint256 totalCommission = getTotalCommission(currentRef);\\n            updateNetworkData(currentRef, _totalAmountUsdWithDecimal, commissionPercentRef);\\n            if (commissionPercentRef != 0) {\\n                uint256 commissionByUsd = getCommissionRef(\\n                    currentRef,\\n                    _totalAmountUsdWithDecimal,\\n                    totalCommission,\\n                    commissionPercentRef\\n                );\\n                // Transfer referral commissions & update data\\n                payReferralCommissions(_buyer, currentRef, commissionByUsd, _payByToken);\\n            }\\n            if (currentRef == systemWallet) {\\n                currentRef = payable(address(0));\\n            } else {\\n                address currentParent = userRef[currentRef];\\n                currentRef = payable(currentParent);\\n            }\\n            idx = idx + 1;\\n        }\\n        return true;\\n    }\\n\\n    function getCommissionPercentForAddress(address _wallet, uint8 _level) internal view returns (uint16) {\\n        uint8 condition = conditionF1Commission[_level];\\n        uint16 percent = commissionPercent[_level];\\n        if (condition == 0) {\\n            return percent;\\n        } else {\\n            address[] memory allF1s = getF1ListForAccount(_wallet);\\n            if (allF1s.length >= condition) {\\n                uint countF1Meaning = 0;\\n                for (uint i = 0; i < allF1s.length; i++) {\\n                    if (buyMinValuePackage[allF1s[i]]) {\\n                        countF1Meaning++;\\n                    }\\n                }\\n                if (countF1Meaning >= condition) {\\n                    return percent;\\n                } else {\\n                    return 0;\\n                }\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev set currency address only for owner\\n     */\\n    function setCurrencyAddress(address _currency) public override checkOwner {\\n        require(_currency != address(0), \\\"M\\\");\\n        require(_currency != currency, \\\"M\\\");\\n        currency = _currency;\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public override checkOwner {\\n        require(_amount > 0, \\\"M\\\");\\n        require(FitZenERC20(_token).balanceOf(address(this)) >= _amount, \\\"M\\\");\\n        require(FitZenERC20(_token).transfer(msg.sender, _amount), \\\"M\\\");\\n    }\\n\\n    /**\\n     * @dev withdraw some currency balance from contract to owner account\\n     */\\n    function withdrawTokenEmergencyFrom(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) public override checkOwner {\\n        require(_amount > 0, \\\"M\\\");\\n        require(FitZenERC20(_token).balanceOf(_from) >= _amount, \\\"M\\\");\\n        require(FitZenERC20(_token).transferFrom(_from, _to, _amount), \\\"M\\\");\\n    }\\n\\n    /**\\n     * @dev transfer a NFT from this contract to an account, only owner\\n     */\\n    function transferNftEmergency(\\n        address _receiver,\\n        uint256 _nftId,\\n        bool _isEquip,\\n        bool _isToken,\\n        bool _isPay\\n    ) public override checkOwner {\\n        if (_isPay) {\\n            uint256[] memory _nftIds = new uint256[](1);\\n            _nftIds[0] = _nftId;\\n            uint256 totalValueUsdWithDecimal = getTotalValue(_nftIds);\\n            // Update network data\\n            address _refAddress = getReferralAccountForAccount(_receiver);\\n            updateDataBuy(_receiver, _refAddress, totalValueUsdWithDecimal, _isToken);\\n        }\\n        require(FitZenNFT(nft).ownerOf(_nftId) == address(this), \\\"M\\\");\\n        try FitZenNFT(nft).safeTransferFrom(address(this), _receiver, _nftId, \\\"\\\") {} catch (bytes memory _error) {\\n            emit ErrorLog(_error);\\n            revert(\\\"M\\\");\\n        }\\n        if (_isEquip) {\\n            FitZenNFT(nft).setLockTimeTransfer(_nftId, block.timestamp);\\n        }\\n    }\\n\\n    function updateDataBuy(\\n        address _receiver,\\n        address _refAddress,\\n        uint256 totalValueUsdWithDecimal,\\n        bool _isToken\\n    ) internal {\\n        uint256 currentNftSaleValue = nftSaleValue[_receiver];\\n        nftSaleValue[_receiver] = currentNftSaleValue + totalValueUsdWithDecimal;\\n        address payable refAddress = payable(_refAddress);\\n        payCommissionMultiLevels(_receiver, refAddress, totalValueUsdWithDecimal, _isToken);\\n        DistributionCommission(distributeWallet).setValueBuyAddress(\\n            _receiver,\\n            totalValueUsdWithDecimal,\\n            block.timestamp\\n        );\\n        // Fixed the ref data of buyer\\n        if (possibleChangeReferralData(_receiver)) {\\n            updateReferralData(msg.sender, _refAddress);\\n        }\\n        // burn token\\n        if (isEnableBurnToken && burnContract != address(0) && oracleContract != address(0) && token != address(0)) {\\n            IBurn(burnContract).burnToken(totalValueUsdWithDecimal);\\n        }\\n        //update ranking\\n        if (rankingContractAddress != address(0)) {\\n            Ranking(rankingContractAddress).updateUserRanking(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfer a list of NFT from this contract to a list of account, only owner\\n     */\\n    function transferMultiNftsEmergency(\\n        address[] memory _receivers,\\n        uint256[] memory _nftIds,\\n        bool _isEquip,\\n        bool _isToken,\\n        bool _isPay\\n    ) public override checkOwner {\\n        require(_receivers.length == _nftIds.length, \\\"M\\\");\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            transferNftEmergency(_receivers[index], _nftIds[index], _isEquip, _isToken, _isPay);\\n        }\\n    }\\n\\n    function updateWalletInformation(\\n        address _wallet,\\n        uint256 _referredNftValue,\\n        uint256 _nftCommissionEarned,\\n        uint256 _nftSaleValue,\\n        uint256 _totalCommissionStake,\\n        uint256 _nftDistributeCommissionUsdEarned,\\n        uint256 _nftDistributeCommissionEarned,\\n        bool _isBuyMinPackage\\n    ) external checkOwner {\\n        referredNftValue[_wallet] = _referredNftValue;\\n        nftCommissionEarned[_wallet] = _nftCommissionEarned;\\n        nftSaleValue[_wallet] = _nftSaleValue;\\n        totalCommissionStake[_wallet] = _totalCommissionStake;\\n        buyMinValuePackage[_wallet] = _isBuyMinPackage;\\n        nftDistributeCommissionUsdEarned[_wallet] = _nftDistributeCommissionUsdEarned;\\n        nftDistributeCommissionEarned[_wallet] = _nftDistributeCommissionEarned;\\n    }\\n\\n    function updateChildListForRefAccount(address _wallet, address[] memory _childLists) external checkOwner {\\n        userChildListData[_wallet].childList = _childLists;\\n        userChildListData[_wallet].memberCounter = _childLists.length;\\n    }\\n\\n    function updateF1ListForRefAccount(address _wallet, address[] memory _f1Lists) external checkOwner {\\n        userF1ListData[_wallet].childList = _f1Lists;\\n        userF1ListData[_wallet].memberCounter = _f1Lists.length;\\n        uint index;\\n        for (index = 0; index < _f1Lists.length; index++) {\\n            userRef[_f1Lists[index]] = _wallet;\\n            lockedReferralData[_f1Lists[index]] = true;\\n        }\\n    }\\n\\n    function updateLockedReferralDataByAdmin(\\n        address[] calldata _wallets,\\n        bool[] calldata _lockedReferralDatas\\n    ) external checkOwner {\\n        require(_wallets.length == _lockedReferralDatas.length, \\\"M\\\");\\n        for (uint32 index = 0; index < _wallets.length; index++) {\\n            lockedReferralData[_wallets[index]] = _lockedReferralDatas[index];\\n        }\\n    }\\n\\n    function setContractOwner(address newContractOwner) external checkOwner {\\n        contractOwner = newContractOwner;\\n    }\\n\\n    function updateUserRankingOnlyOwner(address[] calldata _wallets) external checkOwner {\\n        for (uint32 index = 0; index < _wallets.length; index++) {\\n            Ranking(rankingContractAddress).updateUserRanking(_wallets[index]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/network/Network.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../market/IMarketplace.sol\\\";\\nimport \\\"../token/FitZenERC20.sol\\\";\\n\\ncontract Network is Ownable {\\n    address public marketplaceContractAddress;\\n    uint256 public valuePackage;\\n    uint8 private maxLevelCommission = 3;\\n    address public currency;\\n    address public saleWallet = 0x208416E8e4b4Ae1cEdb0C3e2f7F50F5ebb0e1FeE;\\n    address public systemWallet;\\n    bool private reentrancyGuardForBuy = false;\\n    mapping(address => bool) isBuyNetwork;\\n    mapping(address => uint256) commissionNetwork;\\n    mapping(uint8 => uint16) public commissionPercent;\\n\\n    constructor(address _currency, address _marketplaceAddress, address _systemWallet) {\\n        valuePackage = 29;\\n        marketplaceContractAddress = _marketplaceAddress;\\n        currency = _currency;\\n        systemWallet = _systemWallet;\\n        initCommissionPercent();\\n    }\\n\\n    modifier lock() {\\n        require(!reentrancyGuardForBuy, \\\"NETWORK: LOCKED\\\");\\n        reentrancyGuardForBuy = true;\\n        _;\\n        reentrancyGuardForBuy = false;\\n    }\\n\\n    function initCommissionPercent() internal {\\n        commissionPercent[1] = 800;\\n        commissionPercent[2] = 100;\\n        commissionPercent[3] = 50;\\n    }\\n\\n    function setSaleWalletAddress(address _saleAddress) external onlyOwner {\\n        require(_saleAddress != address(0), \\\"MARKETPLACE: INVALID SALE ADDRESS\\\");\\n        saleWallet = _saleAddress;\\n    }\\n\\n    /**\\n     * @dev the function to update system wallet. Only owner can do this action\\n     */\\n    function setSystemWallet(address _newSystemWallet) external onlyOwner {\\n        require(\\n            _newSystemWallet != address(0) && _newSystemWallet != systemWallet,\\n            \\\"MARKETPLACE: INVALID SYSTEM WALLET\\\"\\n        );\\n        systemWallet = _newSystemWallet;\\n    }\\n\\n    function getCommissionPercent(uint8 _level) external view returns (uint16) {\\n        return commissionPercent[_level];\\n    }\\n\\n    function setCommissionPercent(uint8 _level, uint16 _percent) external onlyOwner {\\n        commissionPercent[_level] = _percent;\\n    }\\n\\n    function setMarketplaceContract(address _marketplaceAddress) external onlyOwner {\\n        require(_marketplaceAddress != address(0), \\\"NFT: INVALID MARKETPLACE ADDRESS\\\");\\n        marketplaceContractAddress = _marketplaceAddress;\\n    }\\n\\n    function setPackageValue(uint256 _valuePackage) external onlyOwner {\\n        require(_valuePackage != 0, \\\"NETWORK: INVALID PACKAGE VALUE\\\");\\n        valuePackage = _valuePackage;\\n    }\\n\\n    function isBuyNetWorkAddress(address _wallet) public view returns (bool) {\\n        return isBuyNetwork[_wallet];\\n    }\\n\\n    function checkCanBuyPackage(address _wallet) public view returns (bool) {\\n        bool isBuy = isBuyNetwork[_wallet];\\n        uint256 nftSaleUser = IMarketplace(marketplaceContractAddress).getNftSaleValueForAccountInUsdDecimal(_wallet);\\n        if (isBuy || nftSaleUser > 0) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function buyPackage() external lock {\\n        bool canBuy = checkCanBuyPackage(msg.sender);\\n        require(canBuy, \\\"NETWORK: CANNOT BUY PACKAGE\\\");\\n        uint256 totalValueUsdWithDecimal = valuePackage * (10 ** FitZenERC20(currency).decimals());\\n        require(\\n            FitZenERC20(currency).balanceOf(msg.sender) >= totalValueUsdWithDecimal,\\n            \\\"NETWORK: NOT ENOUGH BALANCE CURRENCY TO BUY NFTs\\\"\\n        );\\n        require(\\n            FitZenERC20(currency).allowance(msg.sender, address(this)) >= totalValueUsdWithDecimal,\\n            \\\"NETWORK: MUST APPROVE FIRST\\\"\\n        );\\n        // Transfer currency from buyer to sale wallet\\n        require(\\n            FitZenERC20(currency).transferFrom(msg.sender, saleWallet, totalValueUsdWithDecimal),\\n            \\\"NETWORK: FAILED IN TRANSFER CURRENCY TO NETWORK\\\"\\n        );\\n        isBuyNetwork[msg.sender] = true;\\n        address payable firstRef = payable(\\n            IMarketplace(marketplaceContractAddress).getReferralAccountForAccountExternal(msg.sender)\\n        );\\n        payCommissionNetwork(totalValueUsdWithDecimal, firstRef);\\n    }\\n\\n    function getCommissionNetWork(address _address) external view returns (uint256) {\\n        return commissionNetwork[_address];\\n    }\\n\\n    function payCommissionNetwork(uint256 _totalValueUsdWithDecimal, address payable _firstRef) internal {\\n        address payable currentRef = _firstRef;\\n        uint8 idx = 1;\\n        while (currentRef != address(0) && idx <= maxLevelCommission) {\\n            // Check if ref account is eligible to staked amount enough for commission\\n            uint16 commissionPercentRef = commissionPercent[idx];\\n            if (commissionPercentRef != 0) {\\n                uint256 commissionByUsd = (_totalValueUsdWithDecimal * commissionPercentRef) / 1000;\\n                uint256 currentCommission = commissionNetwork[currentRef];\\n                commissionNetwork[currentRef] = currentCommission + commissionByUsd;\\n                // Transfer referral commissions & update data\\n                payReferralCommissions(currentRef, commissionByUsd);\\n            }\\n            if (currentRef == systemWallet) {\\n                currentRef = payable(address(0));\\n            } else {\\n                address currentParent = IMarketplace(marketplaceContractAddress).getReferralAccountForAccountExternal(\\n                    currentRef\\n                );\\n                currentRef = payable(currentParent);\\n            }\\n            idx = idx + 1;\\n        }\\n    }\\n\\n    function payReferralCommissions(address payable _receiver, uint256 commissionAmountInUsdDecimal) internal {\\n        if (commissionAmountInUsdDecimal > 0) {\\n            //true is pay com by usdt(currency)\\n            require(\\n                FitZenERC20(currency).balanceOf(address(this)) >= commissionAmountInUsdDecimal,\\n                \\\"MARKETPLACE: CURRENCY BALANCE NOT ENOUGH\\\"\\n            );\\n            require(\\n                FitZenERC20(currency).transfer(_receiver, commissionAmountInUsdDecimal),\\n                \\\"MARKETPLACE: UNABLE TO TRANSFER COMMISSION PAYMENT TO RECIPIENT\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() public onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public onlyOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(FitZenERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/FitZenNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\ncontract FitZenNFT is ERC721, Ownable, Pausable, ERC721Burnable {\\n    uint256 public tokenCount;\\n\\n    uint256 private lockDay;\\n    //staking address\\n    address private stakingContractAddress;\\n    //marketplace address\\n    address private marketplaceContractAddress;\\n    // Mapping from token ID to token URI\\n    mapping(uint256 => string) private tokenURIs;\\n    // Mapping from tier to price\\n    mapping(uint16 => uint256) public tierPrices;\\n    // Mapping from tier ID to apr percent\\n    mapping(uint16 => uint16) public aprPercentValues;\\n    // Mapping from token ID to tier\\n    mapping(uint256 => uint16) private tokenTiers;\\n    // Mapping from token ID to time lock transfer\\n    mapping(uint256 => uint256) private lockTimeTransfer;\\n    mapping(uint256 => uint256) private buyTime;\\n    // Mapping from token ID to equip pool\\n    mapping(uint256 => bool) private equipPool;\\n\\n    constructor(string memory _name, string memory _symbol, address _manager) ERC721(_name, _symbol) {\\n        marketplaceContractAddress = address(0);\\n        stakingContractAddress = address(0);\\n        lockDay = 365;\\n        transferOwnership(_manager);\\n        initTierPrices();\\n        initAprPercentValues();\\n    }\\n\\n    modifier validId(uint256 _nftId) {\\n        require(ownerOf(_nftId) != address(0), \\\"INVALID NFT ID\\\");\\n        _;\\n    }\\n\\n    function initTierPrices() public onlyOwner {\\n        tierPrices[1] = 50000;\\n        tierPrices[2] = 30000;\\n        tierPrices[3] = 10000;\\n        tierPrices[4] = 5000;\\n        tierPrices[5] = 2500;\\n        tierPrices[6] = 1000;\\n        tierPrices[7] = 500;\\n        tierPrices[8] = 300;\\n        tierPrices[9] = 150;\\n        tierPrices[10] = 60;\\n    }\\n\\n    function initAprPercentValues() public onlyOwner {\\n        aprPercentValues[10] = 48;\\n        aprPercentValues[9] = 54;\\n        aprPercentValues[8] = 60;\\n        aprPercentValues[7] = 66;\\n        aprPercentValues[6] = 72;\\n        aprPercentValues[5] = 78;\\n        aprPercentValues[4] = 84;\\n        aprPercentValues[3] = 96;\\n        aprPercentValues[2] = 108;\\n        aprPercentValues[1] = 120;\\n    }\\n\\n    /**\\n     * @dev set staking contract address\\n     */\\n    function setStakingContractAddress(address _stakingAddress) external onlyOwner {\\n        require(_stakingAddress != address(0), \\\"NFT: INVALID STAKING ADDRESS\\\");\\n        stakingContractAddress = _stakingAddress;\\n    }\\n\\n    function setMarketplaceContract(address _marketplaceAddress) external onlyOwner {\\n        require(_marketplaceAddress != address(0), \\\"NFT: INVALID MARKETPLACE ADDRESS\\\");\\n        marketplaceContractAddress = _marketplaceAddress;\\n    }\\n\\n    function setTierPriceUsd(uint16 _tier, uint256 _price) external onlyOwner {\\n        tierPrices[_tier] = _price;\\n    }\\n\\n    function setAprPercentValues(uint16 _tier, uint16 _percent) external onlyOwner {\\n        aprPercentValues[_tier] = _percent;\\n    }\\n\\n    function setLockTransferDay(uint256 _lockDay) external onlyOwner {\\n        lockDay = _lockDay;\\n    }\\n\\n    function setLockTimeTransfer(uint256 _nftId, uint256 timeLockNft) external {\\n        require(\\n            marketplaceContractAddress != address(0) && msg.sender == marketplaceContractAddress,\\n            \\\"NFT: INVALID CALLER TO UPDATE LOCK TIME NFT DATA\\\"\\n        );\\n        equipPool[_nftId] = true;\\n        lockTimeTransfer[_nftId] = timeLockNft;\\n        buyTime[_nftId] = timeLockNft;\\n    }\\n\\n    function equipNFT(uint256 _nftId) external {\\n        address owner = super.ownerOf(_nftId);\\n        require(owner == msg.sender, \\\"NFT: ONLY OWNER OF NFT CAN REMOVE NFT FROM EQUIP POOL\\\");\\n        bool isEquipped = equipPool[_nftId];\\n        uint256 buyTimeNft = buyTime[_nftId];\\n        if (!isEquipped) {\\n            equipPool[_nftId] = true;\\n            if (buyTimeNft == 0) {\\n                buyTime[_nftId] = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    function getIsEquipNft(uint256 _nftId) external view validId(_nftId) returns (bool) {\\n        bool isEquipped = equipPool[_nftId];\\n        return isEquipped;\\n    }\\n\\n    function removeNftFromPool(uint256 _nftId) external {\\n        address owner = super.ownerOf(_nftId);\\n        require(owner == msg.sender, \\\"NFT: ONLY OWNER OF NFT CAN REMOVE NFT FROM EQUIP POOL\\\");\\n        uint256 timeTransfer = lockTimeTransfer[_nftId];\\n        uint256 lockTimeDay = timeTransfer + 3600 * 24 * lockDay;\\n        require(\\n            timeTransfer == 0 || (timeTransfer != 0 && block.timestamp >= lockTimeDay),\\n            \\\"NFT: CANNOT REMOVE NFT FROM EQUIP POOL\\\"\\n        );\\n        bool isEquipped = equipPool[_nftId];\\n        if (isEquipped) {\\n            equipPool[_nftId] = false;\\n        }\\n    }\\n\\n    function getLockTime(uint256 _nftId) external view validId(_nftId) returns (uint256) {\\n        return buyTime[_nftId];\\n    }\\n\\n    function getLockTimeTransfer(uint256 _nftId) external view validId(_nftId) returns (uint256) {\\n        return lockTimeTransfer[_nftId];\\n    }\\n\\n    function setEquipNftByAdmin(uint256 _nftId, bool _isEquip) external onlyOwner {\\n        equipPool[_nftId] = _isEquip;\\n    }\\n\\n    function setLockTimeNftByAdmin(uint256 _nftId, uint256 timeLockNft) external onlyOwner {\\n        lockTimeTransfer[_nftId] = timeLockNft;\\n        buyTime[_nftId] = timeLockNft;\\n    }\\n\\n    //for external call\\n    function getNftPriceUsd(uint256 _nftId) external view validId(_nftId) returns (uint256) {\\n        uint16 nftTier = tokenTiers[_nftId];\\n        return tierPrices[nftTier];\\n    }\\n\\n    function getNftAprPercentValues(uint256 _nftId) external view validId(_nftId) returns (uint16) {\\n        uint16 nftTier = tokenTiers[_nftId];\\n        return aprPercentValues[nftTier];\\n    }\\n\\n    //for external call\\n    function getNftTier(uint256 _nftId) external view validId(_nftId) returns (uint16) {\\n        return tokenTiers[_nftId];\\n    }\\n\\n    function setNftTier(uint256 _nftId, uint16 _tier) public onlyOwner {\\n        tokenTiers[_nftId] = _tier;\\n    }\\n\\n    function tokenURI(uint256 _nftId) public view virtual override returns (string memory) {\\n        require(ownerOf(_nftId) != address(0), \\\"NFT ID NOT EXIST\\\");\\n        return tokenURIs[_nftId];\\n    }\\n\\n    function setTokenURI(uint256 _nftId, string memory _tokenURI) public onlyOwner {\\n        require(ownerOf(_nftId) != address(0), \\\"NFT ID NOT EXIST\\\");\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenURIs[_nftId] = _tokenURI;\\n    }\\n\\n    function mint(string memory _tokenURI, uint8 _tier) public onlyOwner {\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenCount++;\\n        tokenURIs[tokenCount] = _tokenURI;\\n        tokenTiers[tokenCount] = _tier;\\n        _safeMint(msg.sender, tokenCount);\\n    }\\n\\n    function batchMint(string[] memory _tokenURI, uint8 _tier) public onlyOwner {\\n        require(_tokenURI.length > 0, \\\"SIZE LIST URI MUST NOT BE ZERO\\\");\\n        uint256 index;\\n        for (index = 0; index < _tokenURI.length; ++index) {\\n            mint(_tokenURI[index], _tier);\\n        }\\n    }\\n\\n    function mintTo(string memory _tokenURI, uint8 _tier, address _to) public onlyOwner {\\n        require(_to != address(0), \\\"NOT ACCEPT ZERO ADDRESS\\\");\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenCount++;\\n        tokenURIs[tokenCount] = _tokenURI;\\n        tokenTiers[tokenCount] = _tier;\\n        _safeMint(_to, tokenCount);\\n    }\\n\\n    function batchMintTo(string[] memory _tokenURI, uint8 _tier, address _to) public onlyOwner {\\n        require(_tokenURI.length > 0, \\\"SIZE LIST URI MUST NOT BE ZERO\\\");\\n        uint256 index;\\n        for (index = 0; index < _tokenURI.length; ++index) {\\n            mintTo(_tokenURI[index], _tier, _to);\\n        }\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return tokenCount;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return interfaceID == 0x80ac58cd || interfaceID == 0x5b5e139f;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n        bool isEquipped = equipPool[firstTokenId];\\n        uint256 timeTransfer = lockTimeTransfer[firstTokenId];\\n        uint256 lockTimeDay = timeTransfer + 3600 * 24 * lockDay;\\n        require(!isEquipped || (to == stakingContractAddress), \\\"NFT: CANNOT TRANSFER TOKEN\\\");\\n        require(\\n            timeTransfer == 0 ||\\n                (timeTransfer != 0 && block.timestamp >= lockTimeDay) ||\\n                (to == stakingContractAddress),\\n            \\\"NFT: CANNOT TRANSFER TOKEN\\\"\\n        );\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, firstTokenId, batchSize);\\n        bool isEquipped = equipPool[firstTokenId];\\n        if (isEquipped && to == stakingContractAddress) {\\n            equipPool[firstTokenId] = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../swap/InternalSwap.sol\\\";\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\\ncontract Oracle is Ownable {\\n    uint256 private minTokenAmount = 0;\\n    uint256 private maxTokenAmount = 0;\\n\\n    address public pairAddress;\\n    address public stableToken;\\n    address public tokenAddress;\\n    address public swapAddress;\\n    uint8 private typeConvert = 1; // 0: average, 1: only swap, 2: only pancake\\n\\n    constructor(address _swapAddress, address _stableToken, address _tokenAddress) {\\n        swapAddress = _swapAddress;\\n        stableToken = _stableToken;\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function convertInternalSwap(uint256 _value, bool toToken) public view returns (uint256) {\\n        uint256 usdtAmount = InternalSwap(swapAddress).getUsdtAmount();\\n        uint256 tokenAmount = InternalSwap(swapAddress).getTokenAmount();\\n        if (tokenAmount > 0 && usdtAmount > 0) {\\n            uint256 amountTokenDecimal;\\n            if (toToken) {\\n                amountTokenDecimal = (_value * tokenAmount) / usdtAmount;\\n            } else {\\n                amountTokenDecimal = (_value * usdtAmount) / tokenAmount;\\n            }\\n\\n            return amountTokenDecimal;\\n        }\\n        return 0;\\n    }\\n\\n    function convertUsdBalanceDecimalToTokenDecimal(uint256 _balanceUsdDecimal) public view returns (uint256) {\\n        uint256 tokenInternalSwap = convertInternalSwap(_balanceUsdDecimal, true);\\n        uint256 tokenPairConvert;\\n        if (pairAddress != address(0)) {\\n            (uint256 _reserve0, uint256 _reserve1, ) = IPancakePair(pairAddress).getReserves();\\n            (uint256 _tokenBalance, uint256 _stableBalance) = address(tokenAddress) < address(stableToken)\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n\\n            uint256 _minTokenAmount = (_balanceUsdDecimal * minTokenAmount) / 1000000;\\n            uint256 _maxTokenAmount = (_balanceUsdDecimal * maxTokenAmount) / 1000000;\\n            uint256 _tokenAmount = (_balanceUsdDecimal * _tokenBalance) / _stableBalance;\\n\\n            if (_tokenAmount < _minTokenAmount) {\\n                tokenPairConvert = _minTokenAmount;\\n            }\\n\\n            if (_tokenAmount > _maxTokenAmount) {\\n                tokenPairConvert = _maxTokenAmount;\\n            }\\n\\n            tokenPairConvert = _tokenAmount;\\n        }\\n        if (typeConvert == 1) {\\n            return tokenInternalSwap;\\n        } else if (typeConvert == 2) {\\n            return tokenPairConvert;\\n        } else {\\n            if (tokenPairConvert == 0 || tokenInternalSwap == 0) {\\n                return tokenPairConvert + tokenInternalSwap;\\n            } else {\\n                return (tokenPairConvert + tokenInternalSwap) / 2;\\n            }\\n        }\\n    }\\n\\n    function setPairAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"ORACLE: INVALID PAIR ADDRESS\\\");\\n        pairAddress = _address;\\n    }\\n\\n    function setSwapAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"ORACLE: INVALID SWAP ADDRESS\\\");\\n        swapAddress = _address;\\n    }\\n\\n    function setTypeConvertPrice(uint8 _type) external onlyOwner {\\n        require(_type <= 2, \\\"ORACLE: INVALID TYPE CONVERT\\\");\\n        typeConvert = _type;\\n    }\\n\\n    function getTypeConvert() external view returns (uint8) {\\n        return typeConvert;\\n    }\\n\\n    function setMinTokenAmount(uint256 _tokenAmount) external onlyOwner {\\n        minTokenAmount = _tokenAmount;\\n    }\\n\\n    function setMaxTokenAmount(uint256 _tokenAmount) external onlyOwner {\\n        maxTokenAmount = _tokenAmount;\\n    }\\n\\n    /**\\n     * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() public onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public onlyOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ranking/IRanking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../data/StructData.sol\\\";\\n\\ninterface IRanking {\\n    event PayCommission(address staker, address refAccount, uint256 commissionAmount);\\n\\n    function setStakingContract(address _stakingContract) external;\\n\\n    function setMarketContract(address _marketContract) external;\\n\\n    function setEarnContract(address _earnContract) external;\\n\\n    function updateUserRanking(address _user) external;\\n\\n    function payRankingCommission(address _currentRef, uint256 _commissionRewardUsdWithDecimal) external;\\n\\n    function setUserRefNfts(uint256 _nftId, address _user) external;\\n\\n    function getUserRefNfts(address _user) external view returns (uint256[] memory);\\n\\n    function getUserRanking(address _user) external view returns (uint8);\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) external;\\n\\n    function withdrawTokenEmergencyFrom(address _from, address _to, address _currency, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ranking/Ranking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\nimport \\\"../market/IMarketplace.sol\\\";\\nimport \\\"../stake/IStaking.sol\\\";\\nimport \\\"./IRanking.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Ranking is IRanking, Ownable, ERC721Holder {\\n    address public fitzenToken;\\n    address public marketplaceContract;\\n    address public stakingContract;\\n    address public earnContract;\\n    address public oracleContract;\\n    address public nft;\\n    uint64 public constant TOKEN_DECIMAL = 1000000000000000000;\\n\\n    mapping(uint32 => uint16) public rankingPercents;\\n    mapping(address => uint8) userRankings;\\n    mapping(address => uint256) usdClaimed; // usd claimed with decimal\\n    mapping(address => uint256[]) userRefNfts; // nft of Team staking\\n    mapping(uint256 => uint256) private requirePersonValue;\\n    mapping(uint256 => uint256) private requireTeamValue;\\n\\n    constructor(\\n        address _fitzenToken,\\n        address _marketplace,\\n        address _nft,\\n        address _stakingContract,\\n        address _oracleContract\\n    ) {\\n        fitzenToken = _fitzenToken;\\n        marketplaceContract = _marketplace;\\n        nft = _nft;\\n        stakingContract = _stakingContract;\\n        oracleContract = _oracleContract;\\n        initRankingPercents();\\n        initRequirePersonValue();\\n        initRequireTeamValue();\\n    }\\n\\n    modifier onlyMarketContract() {\\n        require(marketplaceContract == msg.sender, \\\"RANKING: CALLER IS NOT MARKET CONTRACT\\\");\\n        _;\\n    }\\n\\n    modifier onlyStakingContract() {\\n        require(\\n            stakingContract == msg.sender || msg.sender == earnContract,\\n            \\\"RANKING: CALLER IS NOT STAKING CONTRACT OR EARN CONTRACT\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev init commission percent when ref claim staking token\\n     */\\n    function initRankingPercents() internal {\\n        rankingPercents[0] = 0;\\n        rankingPercents[1] = 500;\\n        rankingPercents[2] = 1000;\\n        rankingPercents[3] = 1500;\\n        rankingPercents[4] = 1700;\\n        rankingPercents[5] = 2000;\\n        rankingPercents[6] = 2200;\\n        rankingPercents[7] = 2400;\\n        rankingPercents[8] = 2600;\\n        rankingPercents[9] = 2800;\\n    }\\n\\n    /**\\n     * @dev require nft value user buy to get ranking\\n     */\\n    function initRequirePersonValue() internal {\\n        requirePersonValue[0] = 0;\\n        requirePersonValue[1] = 500;\\n        requirePersonValue[2] = 1000;\\n        requirePersonValue[3] = 2500;\\n        requirePersonValue[4] = 5000;\\n        requirePersonValue[5] = 7000;\\n        requirePersonValue[6] = 10000;\\n        requirePersonValue[7] = 10000;\\n        requirePersonValue[8] = 30000;\\n        requirePersonValue[9] = 30000;\\n    }\\n\\n    /**\\n     * @dev require nft value user's team buy to get ranking\\n     */\\n    function initRequireTeamValue() internal {\\n        requireTeamValue[0] = 0;\\n        requireTeamValue[1] = 10000;\\n        requireTeamValue[2] = 30000;\\n        requireTeamValue[3] = 100000;\\n        requireTeamValue[4] = 450000;\\n        requireTeamValue[5] = 1500000;\\n        requireTeamValue[6] = 6000000;\\n        requireTeamValue[7] = 20000000;\\n        requireTeamValue[8] = 50000000;\\n        requireTeamValue[9] = 100000000;\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\n        fitzenToken = _tokenAddress;\\n    }\\n\\n    function setMarketContract(address _marketContract) external override onlyOwner {\\n        marketplaceContract = _marketContract;\\n    }\\n\\n    function setStakingContract(address _stakingContract) external override onlyOwner {\\n        stakingContract = _stakingContract;\\n    }\\n\\n    function setEarnContract(address _earnContract) external override onlyOwner {\\n        earnContract = _earnContract;\\n    }\\n\\n    function setOracleContract(address _oracleContract) external onlyOwner {\\n        oracleContract = _oracleContract;\\n    }\\n\\n    function setNftAddress(address _nftAddress) external onlyOwner {\\n        nft = _nftAddress;\\n    }\\n\\n    function setUserRanking(address _user, uint8 _rank) external {\\n        userRankings[_user] = _rank;\\n    }\\n\\n    function getUserRanking(address _user) external view override returns (uint8) {\\n        return userRankings[_user];\\n    }\\n\\n    function updateUserRanking(address _user) public override onlyMarketContract {\\n        updateRank(_user);\\n        updateTeamRankingValue(_user);\\n    }\\n\\n    /**\\n     * @dev update team ranking\\n     * @param _user user buying\\n     */\\n    function updateTeamRankingValue(address _user) internal {\\n        address currentRef;\\n        address nextRef = IMarketplace(marketplaceContract).getReferralAccountForAccount(_user);\\n        while (currentRef != nextRef && nextRef != address(0)) {\\n            // Update Team Staking Value\\n            currentRef = nextRef;\\n            updateRank(currentRef);\\n            nextRef = IMarketplace(marketplaceContract).getReferralAccountForAccount(currentRef);\\n        }\\n    }\\n\\n    function updateRank(address _user) internal {\\n        uint8 userRanking = userRankings[_user];\\n        // max rank buy\\n        uint256 userBuyValueUsdDecimal = IMarketplace(marketplaceContract).getNftSaleValueForAccountInUsdDecimal(_user);\\n        uint256 userBuyValueUsd = userBuyValueUsdDecimal / TOKEN_DECIMAL;\\n        uint8 maxRankByPersonal = getMaximumRankingByUser(userBuyValueUsd);\\n        // max rank team\\n        uint256 teamBuyValueUsdDecimal = IMarketplace(marketplaceContract).getTeamNftSaleValueForAccountInUsdDecimal(\\n            _user\\n        );\\n        uint256 teamBuyValueUsd = teamBuyValueUsdDecimal / TOKEN_DECIMAL;\\n        uint8 maxRankByTeam = getMaximumRankingByTeam(teamBuyValueUsd);\\n\\n        if (maxRankByPersonal > userRanking && maxRankByTeam > userRanking) {\\n            uint8 rankingMaxCondition = maxRankByPersonal < maxRankByTeam ? maxRankByPersonal : maxRankByTeam;\\n            uint8 currentRank = rankingMaxCondition;\\n            bool checkConditionChildren = false;\\n            while (currentRank >= userRanking && currentRank > 0) {\\n                if (currentRank == 1) {\\n                    checkConditionChildren = true;\\n                    break;\\n                }\\n                checkConditionChildren = checkRankAllMemberAddress(_user, currentRank - 1);\\n                if (checkConditionChildren) {\\n                    break;\\n                }\\n                currentRank = currentRank - 1;\\n            }\\n            if (currentRank >= userRankings[_user] && checkConditionChildren) {\\n                userRankings[_user] = currentRank;\\n            }\\n        }\\n    }\\n\\n    function checkRankAllMemberAddress(address _address, uint8 _rank) internal view returns (bool) {\\n        address[] memory allF1s = IMarketplace(marketplaceContract).getF1ListForAccount(_address);\\n        uint count = 0;\\n        for (uint index = 0; index < allF1s.length; index++) {\\n            address f1Address = allF1s[index];\\n            bool checkRankF1 = checkRankMemberGreater(f1Address, _rank);\\n            if (checkRankF1) {\\n                count++;\\n                continue;\\n            }\\n            address[] memory f2s = IMarketplace(marketplaceContract).getF1ListForAccount(f1Address);\\n            for (uint i = 0; i < f2s.length; i++) {\\n                address currentMember = f2s[i];\\n                bool checkRankCurrentMember = checkRankMemberGreater(currentMember, _rank);\\n                if (checkRankCurrentMember) {\\n                    count++;\\n                    break;\\n                }\\n            }\\n            continue;\\n        }\\n        return count > 1;\\n    }\\n\\n    function checkRankMemberGreater(address _address, uint256 _rank) internal view returns (bool) {\\n        return userRankings[_address] >= _rank;\\n    }\\n\\n    function getMaximumRankingByUser(uint256 _price) internal view returns (uint8) {\\n        uint8 ranking = 0;\\n        if (_price == 0) {\\n            return ranking;\\n        }\\n        for (uint8 rank = 1; rank < 9; rank++) {\\n            if (_price >= requirePersonValue[rank]) {\\n                ranking = rank;\\n            } else {\\n                break;\\n            }\\n        }\\n        return ranking;\\n    }\\n\\n    function getMaximumRankingByTeam(uint256 _price) internal view returns (uint8) {\\n        uint8 ranking = 0;\\n        if (_price == 0) {\\n            return ranking;\\n        }\\n        for (uint8 rank = 1; rank < 9; rank++) {\\n            if (_price >= requireTeamValue[rank]) {\\n                ranking = rank;\\n            } else {\\n                break;\\n            }\\n        }\\n        return ranking;\\n    }\\n\\n    function payRankingCommission(\\n        address _currentRef,\\n        uint256 _commissionRewardUsdWithDecimal\\n    ) public override onlyStakingContract {\\n        uint16 earnedCommissionPercents = 0;\\n        address currentRef = _currentRef;\\n        address nextRef = IMarketplace(marketplaceContract).getReferralAccountForAccount(_currentRef);\\n        uint256 _commissionUsdWithDecimal = 0;\\n        uint256 _commissionCanEarnTokenWithDecimal = 0;\\n        uint256 commissionCanEarnUsdWithDecimal = 0;\\n        while (currentRef != nextRef && nextRef != address(0)) {\\n            // get ref staking\\n            uint8 userRank = userRankings[currentRef];\\n            uint16 rankingRefPercent = rankingPercents[userRank];\\n            if (rankingRefPercent > earnedCommissionPercents) {\\n                uint16 canEarnCommissionPercents = rankingRefPercent - earnedCommissionPercents;\\n                _commissionUsdWithDecimal = (canEarnCommissionPercents * _commissionRewardUsdWithDecimal) / 10000;\\n                commissionCanEarnUsdWithDecimal = IStaking(stakingContract).getUserCommissionCanEarnUsdWithDecimal(\\n                    currentRef,\\n                    _commissionUsdWithDecimal\\n                );\\n                if (commissionCanEarnUsdWithDecimal > 0) {\\n                    _commissionCanEarnTokenWithDecimal = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n                        commissionCanEarnUsdWithDecimal\\n                    );\\n                    require(\\n                        ERC20(fitzenToken).balanceOf(address(this)) >= _commissionCanEarnTokenWithDecimal,\\n                        \\\"RANKING: NOT ENOUGH TOKEN BALANCE TO PAY RANK COMMISSION\\\"\\n                    );\\n                    require(\\n                        ERC20(fitzenToken).transfer(currentRef, _commissionCanEarnTokenWithDecimal),\\n                        \\\"RANKING: UNABLE TO TRANSFER COMMISSION PAYMENT TO RECIPIENT\\\"\\n                    );\\n\\n                    // update market contract\\n                    IStaking(stakingContract).setMarketCommission(currentRef, _commissionUsdWithDecimal);\\n                    // update usd claimed\\n                    usdClaimed[currentRef] = usdClaimed[currentRef] + _commissionUsdWithDecimal;\\n                }\\n                earnedCommissionPercents = earnedCommissionPercents + canEarnCommissionPercents;\\n            }\\n            currentRef = nextRef;\\n            nextRef = IMarketplace(marketplaceContract).getReferralAccountForAccount(currentRef);\\n        }\\n    }\\n\\n    /**\\n     * @dev estimate value in USD for a list of NFT\\n     * @param _nftId nft id staking\\n     * @param _user user ref\\n     */\\n    function setUserRefNfts(uint256 _nftId, address _user) external override onlyStakingContract {\\n        userRefNfts[_user].push(_nftId);\\n    }\\n\\n    function getUserRefNfts(address _user) external view override returns (uint256[] memory) {\\n        return userRefNfts[_user];\\n    }\\n\\n    /**\\n     * @dev get unclaim usd ranking\\n     * @param _user user wallet address\\n     */\\n    function getUnClaimedRankingUsd(address _user) external view returns (uint256) {\\n        uint256 totalClaimableUsdWithDecimal = getTotalClaimableOfUser(_user);\\n        address[] memory allF1s = IMarketplace(marketplaceContract).getF1ListForAccount(_user);\\n        if (allF1s.length > 0) {\\n            totalClaimableUsdWithDecimal = intervalUnClaimedRankingUsdWithDecimal(allF1s, totalClaimableUsdWithDecimal);\\n        }\\n        uint256 _commissionCanEarnUsdWithDecimal = IStaking(stakingContract).getUserCommissionCanEarnUsdWithDecimal(\\n            _user,\\n            totalClaimableUsdWithDecimal\\n        );\\n\\n        return _commissionCanEarnUsdWithDecimal;\\n    }\\n\\n    function intervalUnClaimedRankingUsdWithDecimal(\\n        address[] memory allF1s,\\n        uint256 totalClaimableUsdWithDecimal\\n    ) internal view returns (uint256) {\\n        for (uint index = 0; index < allF1s.length; index++) {\\n            address f1 = allF1s[index];\\n            uint256 refClaimableUsdWithDecimal = getTotalClaimableOfUser(f1);\\n            if (totalClaimableUsdWithDecimal > refClaimableUsdWithDecimal) {\\n                totalClaimableUsdWithDecimal = totalClaimableUsdWithDecimal - refClaimableUsdWithDecimal;\\n                address[] memory allF2s = IMarketplace(marketplaceContract).getF1ListForAccount(f1);\\n                if (allF2s.length > 0) {\\n                    intervalUnClaimedRankingUsdWithDecimal(allF2s, totalClaimableUsdWithDecimal);\\n                }\\n            } else {\\n                return 0;\\n            }\\n        }\\n        return totalClaimableUsdWithDecimal;\\n    }\\n\\n    function getTotalClaimableOfUser(address _user) internal view returns (uint256) {\\n        uint256[] memory refstakedNfts = userRefNfts[_user];\\n        uint256 totalClaimableUsdWithDecimal = 0;\\n        uint8 userRank = userRankings[_user];\\n        for (uint index = 0; index < refstakedNfts.length; index++) {\\n            totalClaimableUsdWithDecimal =\\n                totalClaimableUsdWithDecimal +\\n                IStaking(stakingContract).claimableForStakeInUsdWithDecimal(refstakedNfts[index]);\\n        }\\n        uint16 _rankingPercent = rankingPercents[userRank];\\n\\n        return (totalClaimableUsdWithDecimal * _rankingPercent) / 10000;\\n    }\\n\\n    /**\\n     * @dev get claimed usd ranking\\n     * @param _user user wallet address\\n     */\\n    function getClaimedRankingUsd(address _user) external view returns (uint256) {\\n        return usdClaimed[_user];\\n    }\\n\\n    /**\\n     * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() external onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public override onlyOwner {\\n        require(_amount > 0, \\\"RANKING: INVALID AMOUNT\\\");\\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \\\"RANKING: TOKEN BALANCE NOT ENOUGH\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"RANKING: CANNOT WITHDRAW TOKEN\\\");\\n    }\\n\\n    /**\\n     * @dev withdraw some currency balance from contract to owner account\\n     */\\n    function withdrawTokenEmergencyFrom(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) public override onlyOwner {\\n        require(_amount > 0, \\\"RANKING: INVALID AMOUNT\\\");\\n        require(IERC20(_token).balanceOf(_from) >= _amount, \\\"RANKING: CURRENCY BALANCE NOT ENOUGH\\\");\\n        require(IERC20(_token).transferFrom(_from, _to, _amount), \\\"RANKING: CANNOT WITHDRAW CURRENCY\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../data/StructData.sol\\\";\\n\\ninterface IStaking {\\n    event Staked(uint256 id, address indexed staker, uint256 indexed nftID, uint256 unlockTime, uint16 apy);\\n    event Unstaked(uint256 id, address indexed staker, uint256 indexed nftID);\\n\\n    event Claimed(uint256 id, address indexed staker, uint256 claimAmount);\\n\\n    event ErrorLog(bytes message);\\n\\n    function setTimeOpenStaking(uint256 _timeOpening) external;\\n\\n    function getStakeAprForTier(uint32 _nftTier) external view returns (uint16);\\n\\n    function setStakeAprForTier(uint32 _nftTier, uint16 _apy) external;\\n\\n    function getRequireQuantityUserCondition(uint8 _level) external view returns (uint32);\\n\\n    function setRequireQuantityUserCondition(uint8 _level, uint32 _conditionInUsd) external;\\n\\n    function getCommissionCondition(uint8 _level) external view returns (uint32);\\n\\n    function setCommissionCondition(uint8 _level, uint32 _conditionInUsd) external;\\n\\n    function getCommissionPercent(uint8 _level) external view returns (uint16);\\n\\n    function setCommissionPercent(uint8 _level, uint16 _percent) external;\\n\\n    function getTotalTeamInvestment(address _wallet) external view returns (uint256);\\n\\n    function getRefStakingValue(address _wallet) external view returns (uint256);\\n\\n    function setTokenDecimal(uint256 _decimal) external;\\n\\n    function setStakingPeriod(uint16 _stakingPeriod) external;\\n\\n    function getTeamStakingValue(address _wallet) external view returns (uint256);\\n\\n    function getStakingCommissionEarned(address _wallet) external view returns (uint256);\\n\\n    function forceUpdateTotalCrewInvestment(address _user, uint256 _value) external;\\n\\n    function forceUpdateTeamStakingValue(address _user, uint256 _value) external;\\n\\n    function forceUpdateStakingCommissionEarned(address _user, uint256 _value) external;\\n\\n    function stake(uint256 _nftId, bytes memory _data) external;\\n\\n    function unstake(uint256 _stakeId, bytes memory data) external;\\n\\n    function claim(uint256 _stakeId) external;\\n\\n    function claimAll(uint256[] memory _stakeIds) external;\\n\\n    function getDetailOfStake(uint256 _stakeId) external view returns (StructData.StakedNFT memory);\\n\\n    function calculateRewardInUsd(uint256 _totalValueStake, uint16 _apy) external view returns (uint256);\\n\\n    function possibleUnstake(uint256 _stakeId) external view returns (bool);\\n\\n    function claimableForStakeInUsdWithDecimal(uint256 _nftId) external view returns (uint256);\\n\\n    function rewardUnstakeInTokenWithDecimal(uint256 _nftId) external view returns (uint256);\\n\\n    function getTotalStakeAmountUSD(address _staker) external view returns (uint256);\\n\\n    function possibleForCommission(address _staker, uint8 _level) external view returns (bool);\\n\\n    function getMaxFloorProfit(address _user) external view returns (uint8);\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) external;\\n\\n    function withdrawTokenEmergencyFrom(address _from, address _to, address _currency, uint256 _amount) external;\\n\\n    function getUserCommissionCanEarnUsdWithDecimal(\\n        address _user,\\n        uint256 _totalCommissionInUsdDecimal\\n    ) external view returns (uint256);\\n\\n    function transferNftEmergency(address _receiver, uint256 _nftId) external;\\n\\n    function transferMultiNftsEmergency(address[] memory _receivers, uint256[] memory _nftIds) external;\\n\\n    function setOracleAddress(address _oracleAddress) external;\\n\\n    function setRankingAddress(address _rankingAddress) external;\\n\\n    function setEarnContract(address _earnContract) external;\\n\\n    function setMarketContract(address _marketContract) external;\\n\\n    function setMaintenanceContract(address _maintenanceContract) external;\\n\\n    function updateStakeAprEmergency(address _user, uint256[] memory _stakeIds, uint16[] memory _newAprs) external;\\n\\n    function removeStakeEmergency(address _user, uint256[] memory _stakeIds) external;\\n\\n    function earnableForStakeInUsdWithDecimal(uint256 _nftId) external view returns (uint256);\\n\\n    function setMarketCommission(address _currentRef, uint256 _commissionUsdWithDecimal) external;\\n\\n    function getIsEnablePayRankingCommission() external returns (bool);\\n\\n    function setIsEnablePayRankingCommission(bool _isEnablePayRakingCommission) external;\\n\\n    function getCommissionProfitUnclaim(address _user) external view returns (uint256);\\n\\n    function getSaleAddresses() external view returns (address[] memory);\\n\\n    function setSaleAddress(address[] memory _saleAddress) external;\\n\\n    function checkUserIsSaleAddress(address _user) external view returns (bool);\\n\\n    function setStakingLimit(uint256 _monthLimit) external;\\n}\\n\"\r\n    },\r\n    \"contracts/swap/InternalSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMarketplaceSmall {\\n    function getNftSaleValueForAccountInUsdDecimal(address _wallet) external view returns (uint256);\\n}\\n\\ncontract InternalSwap is Ownable {\\n    uint256 public constant SECONDS_PER_DAY = 86400;\\n\\n    uint256 private usdtAmount = 1310000;\\n    uint256 private tokenAmount = 10000000;\\n    address public currency;\\n    address public tokenAddress;\\n    address public marketContract = 0x850957c7057937AF66cc58881Fcc7Ef6c7c594B4;\\n    uint8 private typeSwap = 2; //0: all, 1: usdt -> token only, 2: token -> usdt only\\n    bool public onlyBuyerCanSwap = true;\\n\\n    uint256 private limitDay = 1;\\n    uint256 private limitValue = 0;\\n    uint256 private _taxSellFee = 500;\\n    uint256 private _taxBuyFee = 100;\\n    address private _taxAddress = 0x43B96743a2135b1f0cd40dfC77F35c5798AbabcD;\\n\\n    mapping(address => bool) private _addressBuyExcludeTaxFee;\\n    mapping(address => bool) private _addressSellExcludeHasTaxFee;\\n    mapping(address => bool) public swapWhiteList;\\n\\n    // wallet -> date buy -> total amount\\n    mapping(address => mapping(uint256 => uint256)) private _sellAmounts;\\n\\n    address private contractOwner;\\n    uint256 private unlocked = 1;\\n\\n    event ChangeRate(uint256 _usdtAmount, uint256 _tokenAmount, uint256 _time);\\n\\n    constructor(address _stableToken, address _tokenAddress) {\\n        currency = _stableToken;\\n        tokenAddress = _tokenAddress;\\n        contractOwner = _msgSender();\\n    }\\n\\n    modifier checkOwner() {\\n        require(owner() == _msgSender() || contractOwner == _msgSender(), \\\"SWAP: CALLER IS NOT THE OWNER\\\");\\n        _;\\n    }\\n\\n    modifier canSwap() {\\n        require(!onlyBuyerCanSwap || swapWhiteList[msg.sender] || isBuyer(msg.sender), \\\"SWAP: CALLER CAN NOT SWAP\\\");\\n        _;\\n    }\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"SWAP: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function isBuyer(address _wallet) public view returns (bool) {\\n        require(marketContract != address(0), \\\"SWAP: MARKETPLACE CONTRACT IS ZERO ADDRESS\\\");\\n        return IMarketplaceSmall(marketContract).getNftSaleValueForAccountInUsdDecimal(_wallet) > 0;\\n    }\\n\\n    function getLimitDay() external view returns (uint256) {\\n        return limitDay;\\n    }\\n\\n    function getUsdtAmount() external view returns (uint256) {\\n        return usdtAmount;\\n    }\\n\\n    function getTokenAmount() external view returns (uint256) {\\n        return tokenAmount;\\n    }\\n\\n    function getLimitValue() external view returns (uint256) {\\n        return limitValue;\\n    }\\n\\n    function getTaxSellFee() external view returns (uint256) {\\n        return _taxSellFee;\\n    }\\n\\n    function getTaxBuyFee() external view returns (uint256) {\\n        return _taxBuyFee;\\n    }\\n\\n    function getTaxAddress() external view returns (address) {\\n        return _taxAddress;\\n    }\\n\\n    function getTypeSwap() external view returns (uint8) {\\n        return typeSwap;\\n    }\\n\\n    function setCurrency(address _currency) external checkOwner {\\n        currency = _currency;\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) external checkOwner {\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function setMarketContract(address _marketContract) external checkOwner {\\n        marketContract = _marketContract;\\n    }\\n\\n    function setLimitDay(uint256 _limitDay) external checkOwner {\\n        limitDay = _limitDay;\\n    }\\n\\n    function setLimitValue(uint256 _limitValue) external checkOwner {\\n        limitValue = _limitValue;\\n    }\\n\\n    function setOnlyBuyerCanSwap(bool _onlyBuyerCanSwap) external checkOwner {\\n        onlyBuyerCanSwap = _onlyBuyerCanSwap;\\n    }\\n\\n    function setSwapWhiteList(address _walletAddress, bool _isSwapWhiteList) external checkOwner {\\n        swapWhiteList[_walletAddress] = _isSwapWhiteList;\\n    }\\n\\n    function setTaxSellFeePercent(uint256 taxFeeBps) external checkOwner {\\n        _taxSellFee = taxFeeBps;\\n    }\\n\\n    function setTaxBuyFeePercent(uint256 taxFeeBps) external checkOwner {\\n        _taxBuyFee = taxFeeBps;\\n    }\\n\\n    function setTaxAddress(address taxAddress) external checkOwner {\\n        _taxAddress = taxAddress;\\n    }\\n\\n    function setAddressBuyExcludeTaxFee(address account, bool excludeFee) external checkOwner {\\n        _addressBuyExcludeTaxFee[account] = excludeFee;\\n    }\\n\\n    function setAddressSellExcludeTaxFee(address account, bool excludeFee) external checkOwner {\\n        _addressSellExcludeHasTaxFee[account] = excludeFee;\\n    }\\n\\n    function setPriceData(uint256 _usdtAmount, uint256 _tokenAmount) external checkOwner {\\n        require(_usdtAmount > 0 && _tokenAmount > 0, \\\"SWAP: INVALID DATA\\\");\\n        usdtAmount = _usdtAmount;\\n        tokenAmount = _tokenAmount;\\n        emit ChangeRate(_usdtAmount, _tokenAmount, block.timestamp);\\n    }\\n\\n    function setPriceType(uint8 _type) external checkOwner {\\n        require(_type <= 2, \\\"SWAP: INVALID TYPE SWAP (0, 1, 2)\\\");\\n        typeSwap = _type;\\n    }\\n\\n    function checkCanSellToken(address _wallet, uint256 _tokenValue) internal view returns (bool) {\\n        if (limitValue == 0 || limitDay == 0) {\\n            return true;\\n        }\\n\\n        uint256 currentDate = block.timestamp / (limitDay * SECONDS_PER_DAY);\\n        uint256 valueAfterSell = _sellAmounts[_wallet][currentDate] + _tokenValue;\\n        uint256 maxValue = (limitValue * (10 ** ERC20(tokenAddress).decimals()) * tokenAmount) / usdtAmount;\\n\\n        if (valueAfterSell > maxValue) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function buyToken(uint256 _usdtValue) external lock canSwap {\\n        require(typeSwap == 1 || typeSwap == 0, \\\"SWAP: CANNOT BUY TOKEN NOW\\\");\\n        require(_usdtValue > 0, \\\"SWAP: INVALID VALUE\\\");\\n\\n        uint256 buyFee = 0;\\n        uint256 amountTokenDecimal = (_usdtValue * tokenAmount) / usdtAmount;\\n        if (_taxBuyFee != 0 && !_addressBuyExcludeTaxFee[msg.sender]) {\\n            buyFee = (amountTokenDecimal * _taxBuyFee) / 10000;\\n            amountTokenDecimal = amountTokenDecimal - buyFee;\\n        }\\n\\n        if (amountTokenDecimal != 0) {\\n            require(ERC20(currency).balanceOf(msg.sender) >= _usdtValue, \\\"SWAP: NOT ENOUGH BALANCE CURRENCY TO BUY\\\");\\n            require(ERC20(currency).allowance(msg.sender, address(this)) >= _usdtValue, \\\"SWAP: MUST APPROVE FIRST\\\");\\n            require(ERC20(currency).transferFrom(msg.sender, address(this), _usdtValue), \\\"SWAP: FAIL TO SWAP\\\");\\n\\n            require(ERC20(tokenAddress).transfer(msg.sender, amountTokenDecimal), \\\"SWAP: FAIL TO SWAP\\\");\\n            if (buyFee != 0) {\\n                require(ERC20(tokenAddress).transfer(_taxAddress, buyFee), \\\"SWAP: FAIL TO SWAP\\\");\\n            }\\n        }\\n    }\\n\\n    function sellToken(uint256 _tokenValue) external lock canSwap {\\n        require(typeSwap == 2 || typeSwap == 0, \\\"SWAP: CANNOT SELL TOKEN NOW\\\");\\n        require(_tokenValue > 0, \\\"SWAP: INVALID VALUE\\\");\\n        require(checkCanSellToken(msg.sender, _tokenValue), \\\"SWAP: MAXIMUM SWAP TODAY\\\");\\n\\n        uint256 sellFee = 0;\\n        if (_taxSellFee != 0 && !_addressSellExcludeHasTaxFee[msg.sender]) {\\n            sellFee = (_tokenValue * _taxSellFee) / 10000;\\n        }\\n        uint256 amountUsdtDecimal = ((_tokenValue - sellFee) * usdtAmount) / tokenAmount;\\n\\n        if (amountUsdtDecimal != 0) {\\n            require(ERC20(tokenAddress).balanceOf(msg.sender) >= _tokenValue, \\\"SWAP: NOT ENOUGH BALANCE TOKEN TO SELL\\\");\\n            require(\\n                ERC20(tokenAddress).allowance(msg.sender, address(this)) >= _tokenValue,\\n                \\\"SWAP: MUST APPROVE FIRST\\\"\\n            );\\n            require(ERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokenValue), \\\"SWAP: FAIL TO SWAP\\\");\\n            require(ERC20(currency).transfer(msg.sender, amountUsdtDecimal), \\\"SWAP: FAIL TO SWAP\\\");\\n\\n            if (sellFee != 0) {\\n                require(ERC20(tokenAddress).transfer(_taxAddress, sellFee), \\\"SWAP: FAIL TO SWAP\\\");\\n            }\\n\\n            if (limitDay > 0) {\\n                uint256 currentDate = block.timestamp / (limitDay * SECONDS_PER_DAY);\\n                _sellAmounts[msg.sender][currentDate] = _sellAmounts[msg.sender][currentDate] + _tokenValue;\\n            }\\n        }\\n    }\\n\\n    function setContractOwner(address _newContractOwner) external checkOwner {\\n        contractOwner = _newContractOwner;\\n    }\\n\\n    function recoverBNB(uint256 _amount) public checkOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(_amount);\\n    }\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public checkOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/FitZenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/FitZenERC20.sol.sol/FitZenERC20.sol.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of FitZenERC20.sol.sol\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract FitZenERC20 is Context, IERC20, IERC20Metadata, Ownable {\\n    using SafeMath for uint256;\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    address private _taxAddress;\\n    uint256 private _taxSellFee;\\n    uint256 private _taxBuyFee;\\n    mapping(address => bool) private _addressSellHasTaxFee;\\n    mapping(address => bool) private _addressBuyHasTaxFee;\\n    mapping(address => bool) private _addressBuyExcludeTaxFee;\\n    mapping(address => bool) private _addressSellExcludeHasTaxFee;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_, address taxAddress_, uint16 taxFeeBps_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _taxSellFee = taxFeeBps_;\\n        _taxAddress = taxAddress_;\\n        _taxBuyFee = 0;\\n    }\\n\\n    function getTaxSellFee() public view returns (uint256) {\\n        return _taxSellFee;\\n    }\\n\\n    function getTaxBuyFee() public view returns (uint256) {\\n        return _taxBuyFee;\\n    }\\n\\n    function getTaxAddress() public view returns (address) {\\n        return _taxAddress;\\n    }\\n\\n    function setTaxSellFeePercent(uint256 taxFeeBps) public onlyOwner {\\n        _taxSellFee = taxFeeBps;\\n    }\\n\\n    function setTaxBuyFeePercent(uint256 taxFeeBps) public onlyOwner {\\n        _taxBuyFee = taxFeeBps;\\n    }\\n\\n    function setTaxAddress(address taxAddress_) public onlyOwner {\\n        _taxAddress = taxAddress_;\\n    }\\n\\n    function setAddressSellHasTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressSellHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressSellHasTaxFee(address account) public view returns (bool) {\\n        return _addressSellHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyHasTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressBuyHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressBuyHasTaxFee(address account) public view returns (bool) {\\n        return _addressBuyHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyExcludeTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressBuyExcludeTaxFee[account] = hasFee;\\n    }\\n\\n    function setAddressSellExcludeTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressSellExcludeHasTaxFee[account] = hasFee;\\n    }\\n\\n    function calculateSellTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxSellFee).div(10000);\\n    }\\n\\n    function calculateBuyTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxBuyFee).div(10000);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {FitZenERC20.sol}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        uint256 amountToReceive = amount;\\n        uint256 amountToTax = 0;\\n        bool _isHasTaxSellFeeTransfer = _addressSellHasTaxFee[to];\\n        bool _isExcludeUserSell = _addressSellExcludeHasTaxFee[from];\\n        bool _isHasTaxBuyFeeTransfer = _addressBuyHasTaxFee[from];\\n        bool _isExcludeUserBuy = _addressBuyExcludeTaxFee[to];\\n        if (_taxAddress != address(0) && _isHasTaxSellFeeTransfer && _taxSellFee != 0 && !_isExcludeUserSell) {\\n            uint256 amountSellFee = calculateSellTaxFee(amount);\\n            amountToReceive = amount - amountSellFee;\\n            amountToTax = amountToTax + amountSellFee;\\n        }\\n        if (_taxAddress != address(0) && _isHasTaxBuyFeeTransfer && _taxBuyFee != 0 && !_isExcludeUserBuy) {\\n            uint256 amountBuyFee = calculateBuyTaxFee(amount);\\n            amountToReceive = amount - amountBuyFee;\\n            amountToTax = amountToTax + amountBuyFee;\\n        }\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[_taxAddress] += amountToTax; //increase tax Address tax Fee\\n            _balances[to] += amountToReceive;\\n        }\\n        emit Transfer(from, to, amountToReceive);\\n        if (amountToTax != 0) {\\n            emit Transfer(from, _taxAddress, amountToTax);\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ErrorLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"PayCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByCurrency\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByCurrencyAndToken\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByCurrencyAndToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByToken\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"buyByCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"buyByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"buyByTokenAndCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkIsBuyMinValuePackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"checkValidRefCodeAdvance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDistributeByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"commissionPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"conditionF1Commission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getClaimDistributeByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getCommissionPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalValueUsdWithDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_commissionBuy\",\"type\":\"uint16\"}],\"name\":\"getCommissionRef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getConditionF1Commission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getF1ListForAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getMaxCommissionByAddressInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftCommissionEarnedForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftDistributeCommissionEarnedByTokenForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftDistributeCommissionEarnedForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftSaleValueForAccountInUsdDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralAccountForAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralAccountForAccountExternal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getReferredNftValueForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTeamNftSaleValueForAccountInUsdDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tier\",\"type\":\"uint16\"}],\"name\":\"getTierUsdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTotalCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTotalCommissionStakeByAddressInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnableBurnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedReferralDataForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValueCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberMaxStakeValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"possibleChangeReferralData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rankingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"setCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setConditionF1Commission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"setContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"setCurrencyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributeAddress\",\"type\":\"address\"}],\"name\":\"setDistributeWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnableBurnToken\",\"type\":\"bool\"}],\"name\":\"setIsEnableBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setMaxNumberStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_networkWallet\",\"type\":\"address\"}],\"name\":\"setNetworkWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rankingAddress\",\"type\":\"address\"}],\"name\":\"setRankingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSalePercent\",\"type\":\"uint256\"}],\"name\":\"setSalePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleEnd\",\"type\":\"uint256\"}],\"name\":\"setSaleStrategyOnlyCurrencyEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleStart\",\"type\":\"uint256\"}],\"name\":\"setSaleStrategyOnlyCurrencyStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleAddress\",\"type\":\"address\"}],\"name\":\"setSaleWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSystemWallet\",\"type\":\"address\"}],\"name\":\"setSystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tier\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTierPriceUsdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typePayCommission\",\"type\":\"uint256\"}],\"name\":\"setTypePayCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isEquip\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPay\",\"type\":\"bool\"}],\"name\":\"transferMultiNftsEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEquip\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPay\",\"type\":\"bool\"}],\"name\":\"transferNftEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_turnOffMaxOutWithNetwork\",\"type\":\"bool\"}],\"name\":\"turnOffMaxOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_childLists\",\"type\":\"address[]\"}],\"name\":\"updateChildListForRefAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueInUsdWithDecimal\",\"type\":\"uint256\"}],\"name\":\"updateCommissionStakeValueData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_f1Lists\",\"type\":\"address[]\"}],\"name\":\"updateF1ListForRefAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_lockedReferralDatas\",\"type\":\"bool[]\"}],\"name\":\"updateLockedReferralDataByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"updateReferralData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"updateUserRankingOnlyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referredNftValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftCommissionEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftSaleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftDistributeCommissionUsdEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftDistributeCommissionEarned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBuyMinPackage\",\"type\":\"bool\"}],\"name\":\"updateWalletInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEmergencyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fef0bad7a3cc61b7bcc6699094461fb7ffd914500000000000000000000000002af97c7199c42df83278cbea98ed2a957796dc7f0000000000000000000000008b6c9f6605870610780f219685bdf675045e4a68000000000000000000000000e4c94904a48cc1775d6fcdfdc835391299d33bd000000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}