{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CRSSv311.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ICRSS is IERC20 {\\r\\n    function changeAccountantAddress(address _address) external;\\r\\n\\r\\n    function changeControlCenter(address _address) external;\\r\\n\\r\\n    function changeTransferFeeExclusionStatus(\\r\\n        address target,\\r\\n        bool value\\r\\n    ) external;\\r\\n\\r\\n    function setBotWhitelist(address _target, bool _value) external;\\r\\n\\r\\n    function bulkTransferExclusionStatusChange(\\r\\n        address[] memory targets,\\r\\n        bool value\\r\\n    ) external;\\r\\n\\r\\n    function killswitch() external;\\r\\n\\r\\n    function controlledMint(uint256 _amount) external;\\r\\n\\r\\n    function controlledMintTo(address _to, uint256 _amount) external;\\r\\n\\r\\n    function addEmissionReceiver(\\r\\n        address _address,\\r\\n        uint256 _crssPerBlock,\\r\\n        string memory _identifier\\r\\n    ) external;\\r\\n\\r\\n    function setEmissionReceiver(\\r\\n        address _receiverAddress,\\r\\n        uint256 _crssPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    event TradingHalted(uint256 blockNumber);\\r\\n    event TradingResumed(uint256 blockNumber);\\r\\n    event TransferFeeExclusionStatusUpdated(address target, bool value);\\r\\n    event BulkTransferFeeExclusionStatusUpdated(address[] targets, bool value);\\r\\n}\\r\\n\\r\\n// CrssToken with Governance.\\r\\ncontract CrssTokenV2 is Ownable, ICRSS {\\r\\n    //==================== ERC20 core data ====================\\r\\n    string private constant _name = \\\"Crosswise Token\\\";\\r\\n    string private constant _symbol = \\\"CRSS\\\";\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    //==================== Constants ====================\\r\\n    string private constant sForbidden = \\\"CRSS:Restricted access\\\";\\r\\n    string private constant sSameValue = \\\"CRSS:Already set value\\\";\\r\\n\\r\\n    uint256 private constant maxSupply = 50 * 1e6 * (10 ** 18);\\r\\n    uint256 private constant maxCRSSEmission = 5 * (10 ** 18);\\r\\n    uint8 private constant _decimals = 18;\\r\\n\\r\\n    //==================== Contract addresses  ====================\\r\\n    address private accountant;\\r\\n    address private adminSetter;\\r\\n\\r\\n    //==================== Transfer control attributes and anti-bot ====================\\r\\n    bool public tradingHalted;\\r\\n    bool public antiBotActive;\\r\\n    mapping(address => uint256) public prevTransfer;\\r\\n    //must whitelist pairs in order for this to work properly\\r\\n    mapping(address => bool) public botWhitelisted;\\r\\n    uint256 public constant rateDenominator = 1000; // 0.1% tax on every CRSS transfer\\r\\n    mapping(address => bool) private t_whitelisted;\\r\\n\\r\\n    //==================== Decentralized emission functionality ====================\\r\\n    mapping(address => bool) private emissionReceiver;\\r\\n\\r\\n    struct s_Emission {\\r\\n        uint256 paidOut;\\r\\n        uint256 fromBlock;\\r\\n        uint256 crssPerBlock;\\r\\n        address receiver;\\r\\n    }\\r\\n    s_Emission[] public emissions;\\r\\n    uint256 private totalEmission;\\r\\n    // uint private totalEmissionMinted;\\r\\n    mapping(address => uint256) public paidOutPreviously;\\r\\n    mapping(address => uint256) public addressToIndex;\\r\\n    mapping(address => string) public receiverIdentifier;\\r\\n    event AddEmissionReceiver(\\r\\n        address receiver,\\r\\n        string identifier,\\r\\n        uint256 crssPerBlockNew,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    event DisableEmissionReceiver(\\r\\n        address receiver,\\r\\n        uint256 crssPerBlock,\\r\\n        uint256 index\\r\\n    );\\r\\n    event SetEmissionReceiver(\\r\\n        address receiver,\\r\\n        uint256 crssPerBlock,\\r\\n        uint256 crssPerBlockNew,\\r\\n        uint paidOut,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor( address _accountant, address _adminSetter) {\\r\\n        // Mint 1e6 Crss to the caller for testing - MUST BE REMOVED BEFORE DEPLOY\\r\\n        accountant = _accountant;\\r\\n        adminSetter = _adminSetter;\\r\\n         addEmissionReceiver(_accountant, 4 * 10 ** 17, \\\"ProjectTokens\\\");\\r\\n\\r\\n        _mint(0xb96235f423Fb407b5f9c3A227de86B2A5057A656, 1091189 * 10 ** _decimals);\\r\\n        _mint(0x4eF4893cB96120EE5FD0CcCFcE2dd1f7a66ed84B,21909*10**_decimals);\\r\\n    }\\r\\n\\r\\n    // 0.1% constant fee on transfer, has an adjustable, in-built anti-frontrunning and anti-arbitrage bot that can be turned off/on\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(amount > 0, \\\"CRSS:Zero value transfer\\\");\\r\\n        require(tradingHalted != true, \\\"CRSS:Trading halted\\\");\\r\\n        require(\\r\\n            sender != address(0) && recipient != address(0),\\r\\n            \\\"CRSS:Zero address\\\"\\r\\n        );\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"CRSS:Exceeds balance\\\");\\r\\n        uint256 transferAmount = amount;\\r\\n        if (antiBotActive == true) {\\r\\n            if (!botWhitelisted[sender]) {\\r\\n                \\r\\n                    require(\\r\\n                        prevTransfer[sender] + 1 <= block.timestamp,\\r\\n                        \\\"CRSS:Antibot:Can't buy and sell CRSS in same block\\\"\\r\\n                    );\\r\\n                    if (amount >= 5 * 10 ** 18) {\\r\\n                    prevTransfer[recipient] = block.timestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (t_whitelisted[sender] != true) {\\r\\n            uint256 taxAmount = amount / rateDenominator;\\r\\n            _balances[accountant] += taxAmount;\\r\\n            transferAmount -= taxAmount;\\r\\n        }\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += transferAmount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function changeTransferFeeExclusionStatus(\\r\\n        address target,\\r\\n        bool value\\r\\n    ) public override onlyOwner {\\r\\n        require(t_whitelisted[target] != value, sSameValue);\\r\\n        t_whitelisted[target] = value;\\r\\n        emit TransferFeeExclusionStatusUpdated(target, value);\\r\\n    }\\r\\n\\r\\n    function bulkTransferExclusionStatusChange(\\r\\n        address[] memory targets,\\r\\n        bool value\\r\\n    ) public override onlyOwner {\\r\\n        for (uint256 i = 0; i < targets.length; i++) {\\r\\n            t_whitelisted[targets[i]] = value;\\r\\n        }\\r\\n\\r\\n        emit BulkTransferFeeExclusionStatusUpdated(targets, value);\\r\\n    }\\r\\n\\r\\n    function changeAccountantAddress(\\r\\n        address _address\\r\\n    ) public override onlyOwner {\\r\\n        require(accountant != _address, sSameValue);\\r\\n        accountant = _address;\\r\\n    }\\r\\n\\r\\n    function changeControlCenter(address _address) public override {\\r\\n        require(\\r\\n            _msgSender() == adminSetter || _msgSender() == owner(),\\r\\n            \\\"CRSS:Only admin setter and CC\\\"\\r\\n        );\\r\\n        \\r\\n        require(owner() != _address, sSameValue);\\r\\n        _transferOwnership(_address);\\r\\n    }\\r\\n\\r\\n    function changeAdminSetter(address _address)public {\\r\\n        require(_msgSender() == adminSetter,\\\"CRSS:Only admin setter\\\");\\r\\n        require(adminSetter != _address, \\\"CRSS:Already set value\\\");\\r\\n        adminSetter = _address;\\r\\n    }\\r\\n\\r\\n    //works for sCRSS transfer and DEX swaps in addition to CRSS transfer\\r\\n    //cannot be bypassed by admin\\r\\n    function killswitch() public override onlyOwner {\\r\\n        bool isHalted = tradingHalted;\\r\\n        if (isHalted == false) {\\r\\n            isHalted = true;\\r\\n            emit TradingHalted(block.number);\\r\\n        } else {\\r\\n            isHalted = false;\\r\\n            emit TradingResumed(block.number);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBotWhitelist(\\r\\n        address _target,\\r\\n        bool _value\\r\\n    ) public override onlyOwner {\\r\\n        botWhitelisted[_target] = _value;\\r\\n    }\\r\\n\\r\\n    //==================== Decentralized emissions ====================\\r\\n\\r\\n    // this will mint new tokens for allowed receiver every block, as long as the emission doesn't exceed receivers emission rate or total emission\\r\\n    function controlledMint(uint256 _amount) external override {\\r\\n        uint256 receiverIndex = addressToIndex[msg.sender];\\r\\n        s_Emission storage emissionObject = emissions[receiverIndex];\\r\\n        require(msg.sender == emissionObject.receiver, sForbidden);\\r\\n        require(emissionObject.crssPerBlock > 0, sForbidden);\\r\\n        require(\\r\\n            _amount + emissionObject.paidOut <=\\r\\n                emissionObject.crssPerBlock *\\r\\n                    (block.number - emissionObject.fromBlock),\\r\\n            \\\"CRSS:Minting over allowed amount\\\"\\r\\n        );\\r\\n        emissionObject.paidOut += _amount;\\r\\n        _mint(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function controlledMintTo(address _to, uint256 _amount) external override {\\r\\n        uint256 receiverIndex = addressToIndex[msg.sender];\\r\\n        s_Emission storage emissionObject = emissions[receiverIndex];\\r\\n        require(msg.sender == emissionObject.receiver, sForbidden);\\r\\n        require(emissionObject.crssPerBlock > 0, sForbidden);\\r\\n        require(\\r\\n            _amount + emissionObject.paidOut <=\\r\\n                emissionObject.crssPerBlock *\\r\\n                    (block.number - emissionObject.fromBlock),\\r\\n            \\\"CRSS:Minting over allowed amount\\\"\\r\\n        );\\r\\n        emissionObject.paidOut += _amount;\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function addEmissionReceiver(\\r\\n        address _address,\\r\\n        uint256 _crssPerBlock,\\r\\n        string memory _identifier\\r\\n    ) public override {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == address(this),\\r\\n            sForbidden\\r\\n        );\\r\\n        require(addressToIndex[_address] == 0, \\\"CRSS:Receiver already exists\\\");\\r\\n        //prevents going over pre-set maxEmission value (this should always be constant value)\\r\\n        require(\\r\\n            _crssPerBlock + totalEmission <= maxCRSSEmission,\\r\\n            \\\"CRSS:Total max emission is 5 CRSS per block\\\"\\r\\n        );\\r\\n        emissions.push(\\r\\n            s_Emission({\\r\\n                paidOut: 0,\\r\\n                fromBlock: block.number,\\r\\n                crssPerBlock: _crssPerBlock,\\r\\n                receiver: _address\\r\\n            })\\r\\n        );\\r\\n        receiverIdentifier[_address] = _identifier;\\r\\n        // activeEmissionReceiver[_address] = true;\\r\\n        addressToIndex[_address] = emissions.length - 1;\\r\\n        totalEmission += _crssPerBlock;\\r\\n\\r\\n        emit AddEmissionReceiver(\\r\\n            _address,\\r\\n            _identifier,\\r\\n            _crssPerBlock,\\r\\n            emissions.length - 1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setEmissionReceiver(\\r\\n        address _receiverAddress,\\r\\n        uint256 _crssPerBlock\\r\\n    ) public override onlyOwner {\\r\\n        uint _index = getReceiverIndex(_receiverAddress);\\r\\n        s_Emission storage emissionObject = emissions[_index];\\r\\n        require(_crssPerBlock != emissionObject.crssPerBlock, sSameValue);\\r\\n        require(\\r\\n            emissionObject.receiver == _receiverAddress,\\r\\n            \\\"CRSS:Receiver doesn't exists\\\"\\r\\n        );\\r\\n\\r\\n        if (_index == 0) {\\r\\n            //this limits the amount protocol receiver (emissions[0]) is allowed to obtain\\r\\n            if (_crssPerBlock > emissionObject.crssPerBlock) {\\r\\n                require(\\r\\n                    (_crssPerBlock * 40) / 100 <=\\r\\n                        totalEmission +\\r\\n                            _crssPerBlock -\\r\\n                            emissionObject.crssPerBlock,\\r\\n                    \\\"CRSS:Max emission percent for protocol is 30%\\\"\\r\\n                );\\r\\n            } else {\\r\\n                require(\\r\\n                    _crssPerBlock >=\\r\\n                        ((totalEmission -\\r\\n                            (emissionObject.crssPerBlock - _crssPerBlock)) *\\r\\n                            5) /\\r\\n                            100,\\r\\n                    \\\"CRSS:Min emission percent for protocol is 5%\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint paidOut = emissionObject.paidOut;\\r\\n        // all historic and current emissions are publicly recorded in perpetuity\\r\\n        paidOutPreviously[emissionObject.receiver] += paidOut;\\r\\n        if (_crssPerBlock > emissionObject.crssPerBlock) {\\r\\n            uint256 emissionIncrease = _crssPerBlock -\\r\\n                emissionObject.crssPerBlock;\\r\\n\\r\\n            require(\\r\\n                emissionIncrease + totalEmission <= 5 * (10 ** 18),\\r\\n                \\\"CRSS:Max per-block emission is 5 CRSS\\\"\\r\\n            );\\r\\n            totalEmission += emissionIncrease;\\r\\n        } else {\\r\\n            totalEmission -= (emissionObject.crssPerBlock - _crssPerBlock);\\r\\n            if (_crssPerBlock == 0) {\\r\\n                emissionObject.paidOut = 0;\\r\\n                emissionObject.fromBlock = block.number;\\r\\n                emissionObject.crssPerBlock = 0;\\r\\n\\r\\n                emit DisableEmissionReceiver(\\r\\n                    emissionObject.receiver,\\r\\n                    emissionObject.crssPerBlock,\\r\\n                    _index\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        emissionObject.paidOut = 0;\\r\\n        emissionObject.fromBlock = block.number;\\r\\n        emissionObject.crssPerBlock = _crssPerBlock;\\r\\n\\r\\n        emit SetEmissionReceiver(\\r\\n            emissionObject.receiver,\\r\\n            emissionObject.crssPerBlock,\\r\\n            _crssPerBlock,\\r\\n            paidOut,\\r\\n            _index\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getEmissionReceiverAmount() public view returns (uint) {\\r\\n        return emissions.length;\\r\\n    }\\r\\n\\r\\n    function getAllEmissions() public view returns (s_Emission[] memory) {\\r\\n        return emissions;\\r\\n    }\\r\\n\\r\\n    function getActiveReceiverAmount()\\r\\n        public\\r\\n        view\\r\\n        returns (uint receiverAmount)\\r\\n    {\\r\\n        for (uint i = 0; i < emissions.length; i++) {\\r\\n            if (emissions[i].crssPerBlock > 0) receiverAmount++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getEmissionCRSSReceived(\\r\\n        address _receiver\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 receiverIndex = addressToIndex[_receiver];\\r\\n        return emissions[receiverIndex].paidOut + paidOutPreviously[_receiver];\\r\\n    }\\r\\n\\r\\n    function getEmissionByReceiver(\\r\\n        address _receiver\\r\\n    ) public view returns (s_Emission memory) {\\r\\n        uint256 receiverIndex = addressToIndex[_receiver];\\r\\n        return emissions[receiverIndex];\\r\\n    }\\r\\n\\r\\n    function getEmissionByIndex(\\r\\n        uint _index\\r\\n    ) public view returns (s_Emission memory emissionObj) {\\r\\n        emissionObj = emissions[_index];\\r\\n    }\\r\\n\\r\\n    function getReceiverIndex(\\r\\n        address _receiver\\r\\n    ) public view returns (uint index) {\\r\\n        index = addressToIndex[_receiver];\\r\\n    }\\r\\n\\r\\n    function getTotalEmission() public view returns (uint256) {\\r\\n        return totalEmission;\\r\\n    }\\r\\n\\r\\n    function getEmissionInfo(\\r\\n        uint index\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory identifier,\\r\\n            address contractAddress,\\r\\n            uint crssPerBlock,\\r\\n            uint totalCRSSReceived,\\r\\n            uint lastUpdated\\r\\n        )\\r\\n    {\\r\\n        s_Emission memory emissionObject = emissions[index];\\r\\n        contractAddress = emissionObject.receiver;\\r\\n        identifier = receiverIdentifier[emissionObject.receiver];\\r\\n        crssPerBlock = emissionObject.crssPerBlock;\\r\\n        lastUpdated = emissionObject.fromBlock;\\r\\n        totalCRSSReceived =\\r\\n            emissionObject.paidOut +\\r\\n            paidOutPreviously[emissionObject.receiver];\\r\\n    }\\r\\n\\r\\n    function getGlobalEmissionInfo()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint totalCrssEmitted,\\r\\n            uint activeReceivers,\\r\\n            uint emissionPerBlock,\\r\\n            uint teamEmissionPercent\\r\\n        )\\r\\n    {\\r\\n        for (uint i = 0; i < emissions.length; i++) {\\r\\n            if (emissions[i].crssPerBlock > 0) {\\r\\n                totalCrssEmitted += emissions[i].paidOut;\\r\\n                activeReceivers++;\\r\\n            }\\r\\n            if (i == 0) {\\r\\n                teamEmissionPercent =\\r\\n                    (emissions[i].crssPerBlock * 100) /\\r\\n                    totalEmission;\\r\\n            }\\r\\n            totalCrssEmitted += paidOutPreviously[emissions[i].receiver];\\r\\n        }\\r\\n        emissionPerBlock = totalEmission;\\r\\n    }\\r\\n\\r\\n    //====================Standard ERC20 functions ====================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"CRSS:Decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"CRSS:Mint to zero address\\\");\\r\\n        _totalSupply += amount;\\r\\n        require(_totalSupply <= maxSupply, \\\"CRSS:Max supply reached\\\");\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"CRSS:Burn from zero address\\\");\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"CRSS:Burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"CRSS:Approve from zero address\\\");\\r\\n        require(spender != address(0), \\\"CRSS:Approve to zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"CRSS:Insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n    function getAccountant() public view returns (address) {\\r\\n        return accountant;\\r\\n    }\\r\\n\\r\\n    function getAdminSetter() public view returns (address) {\\r\\n        return adminSetter;\\r\\n    }\\r\\n\\r\\n    function getMaxSupply() public pure returns (uint256) {\\r\\n        return maxSupply;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crssPerBlockNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AddEmissionReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BulkTransferFeeExclusionStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DisableEmissionReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crssPerBlockNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SetEmissionReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"TradingHalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"TradingResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"TransferFeeExclusionStatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_identifier\",\"type\":\"string\"}],\"name\":\"addEmissionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"bulkTransferExclusionStatusChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAccountantAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAdminSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeControlCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"changeTransferFeeExclusionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controlledMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controlledMintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveReceiverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEmissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct CrssTokenV2.s_Emission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEmissionByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct CrssTokenV2.s_Emission\",\"name\":\"emissionObj\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getEmissionByReceiver\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct CrssTokenV2.s_Emission\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getEmissionCRSSReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEmissionInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crssPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCRSSReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmissionReceiverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalEmissionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCrssEmitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeReceivers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamEmissionPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"getReceiverIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killswitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOutPreviously\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prevTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBotWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crssPerBlock\",\"type\":\"uint256\"}],\"name\":\"setEmissionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingHalted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrssTokenV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ecdb621dc5a26203b6bcd9c074c2b56a7b66b2d000000000000000000000000b96235f423fb407b5f9c3a227de86b2a5057a656", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}