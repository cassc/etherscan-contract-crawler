{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ncontract ClassicMiner {\r\n\r\n    uint256 private LAUNCH_DATE = 1689955200; //TESTNET VALUE\r\n    uint256 public RENOUNCE_FEE_DATE = 1692633600; //30 days from launch TESTNET VALUE\r\n    uint256 _dumpingfactor;\r\n    uint256 private EGGS_TO_HATCH_1MINERS = 2592000;\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 public JACKPOT = 0.5 ether;\r\n    address public WINNER;\r\n    uint256 public TIME_JACK = LAUNCH_DATE;\r\n    uint256 public LIMIT_ROI = 350; //limit to 3.5% daily\r\n\r\n    uint256 public MIN_DEPOSIT_TO_WIN = 0.1 ether;\r\n\r\n    address payable private recAdd;\r\n    address payable private rec2Add;\r\n    address payable private mktAdd;\r\n    address payable private mktAdd2;\r\n\r\n    mapping (address => uint256) private hatcheryMiners;\r\n    mapping (address => uint256) private claimedEggs;\r\n    mapping (address => uint256) private lastHatch;\r\n    mapping (address => address) private referrals;\r\n    mapping (address => uint256) public totalDeposited;\r\n    mapping (address => uint256) public totalWithdraws;\r\n    uint256 public marketEggs = 108000000000;\r\n    uint256 public dumpedEggs;\r\n    \r\n    constructor(address _rec2 , address _mkt , address _mkt2) {\r\n        require(!isContract(msg.sender) && !isContract(_rec2) && !isContract(_mkt));\r\n        recAdd = payable(msg.sender);\r\n        rec2Add = payable(_rec2);\r\n        mktAdd = payable(_mkt);\r\n\t\tmktAdd2 = payable(_mkt2);\r\n    }\r\n    \r\n    function hatchEggs() public {\r\n        require(isLaunched() && !isContract(msg.sender));\r\n        sendPot();\r\n        uint256 _ROI = returnROI(msg.sender);\r\n        uint256 eggsUsed = getMyEggs(msg.sender);\r\n        uint256 newMiners = eggsUsed / EGGS_TO_HATCH_1MINERS;\r\n\r\n        //if ROI is below 1 or 2% daily gives a bonus\r\n        if (_ROI <= 100){\r\n            hatcheryMiners[msg.sender] = hatcheryMiners[msg.sender] + newMiners + (newMiners * 10 / 100);\r\n        } else if (_ROI >= LIMIT_ROI){\r\n            eggsUsed = eggsUsed * LIMIT_ROI / _ROI;\r\n            newMiners = newMiners * LIMIT_ROI / _ROI;\r\n            hatcheryMiners[msg.sender] = hatcheryMiners[msg.sender] + newMiners;\r\n        } else {\r\n            hatcheryMiners[msg.sender] = hatcheryMiners[msg.sender] + newMiners;\r\n        }\r\n\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        marketEggs = marketEggs + (eggsUsed / 5);\r\n    }\r\n\r\n    \r\n    function sellEggs() public {\r\n        require(isLaunched() && !isContract(msg.sender));\r\n\r\n        sendPot();\r\n        uint256 _ROI = returnROI(msg.sender);\r\n\r\n        uint256 hasEggs = getMyEggs(msg.sender);\r\n        \r\n        //if ROI is above 3.5% only the same proportion of the eggs is dumped\r\n        if (_ROI >= LIMIT_ROI) {\r\n            hasEggs = hasEggs * LIMIT_ROI / _ROI;\r\n            //hatcheryMiners[msg.sender] -= hatcheryMiners[msg.sender] * 10 * (block.timestamp - lastHatch[msg.sender]) / 1 days / 1000; //lost 0.5% of the miners daily\r\n            hatcheryMiners[msg.sender] -= hasEggs / EGGS_TO_HATCH_1MINERS / 3; // 1/3 of miners are burnt\r\n        }\r\n\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        totalWithdraws[msg.sender] = totalWithdraws[msg.sender] + eggValue;\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n\r\n        marketEggs = marketEggs + hasEggs;\r\n        dumpedEggs += hasEggs;\r\n        _dumpingfactor = 100000 + (200000 * dumpedEggs / marketEggs);\r\n        payable(msg.sender).transfer(eggValue);\r\n    }\r\n    \r\n    function beanRewards(address adr) public view returns(uint256) {\r\n        uint256 hasEggs = getMyEggs(adr);\r\n        if (hasEggs == 0){\r\n            return 0;\r\n        }\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        return eggValue;\r\n    }\r\n\r\n    //if more than 1 days has passed send the jackpot to the winner\r\n    function sendPot() internal {\r\n        uint256 NOW = block.timestamp;\r\n        if(NOW >= TIME_JACK + 1 days) {\r\n\t\t\tTIME_JACK = block.timestamp;\r\n            uint256 _balance = getBalance();\r\n            _balance > 50 ether ? JACKPOT = _balance / 100 : JACKPOT = 0.5 ether;\r\n            payable(WINNER).transfer(JACKPOT);\r\n        } \r\n    }\r\n    \r\n    function buyEggs(address ref) public payable {\r\n        require(isLaunched() && !isContract(msg.sender));\r\n        require(msg.value > 0.01 ether);\r\n\r\n        sendPot();\r\n\r\n        referrals[msg.sender] != address(0) && referrals[msg.sender] != msg.sender ? referrals[msg.sender] = ref : address(0);\r\n        //Keep track of a users total deposits in BNB\r\n        totalDeposited[msg.sender] = totalDeposited[msg.sender] + msg.value;\r\n\r\n        uint256 eggsBought = calculateEggBuy(msg.value, (address(this).balance - msg.value));\r\n        if (dumpedEggs > 0){\r\n            uint256 _dumped;\r\n            eggsBought = eggsBought * _dumpingfactor / 100000;\r\n            eggsBought >= dumpedEggs ? _dumped = eggsBought : _dumped = dumpedEggs;\r\n            dumpedEggs > eggsBought ? dumpedEggs -= eggsBought : dumpedEggs = 0;\r\n        }\r\n        //if more than 30 days have passed taxes are erased\r\n        if (block.timestamp <= RENOUNCE_FEE_DATE){\r\n            eggsBought = eggsBought - (eggsBought * 5 / 100);\r\n            payFee(msg.value);\r\n        } \r\n        claimedEggs[msg.sender] = claimedEggs[msg.sender] + eggsBought;\r\n\r\n        //If referral exist and value is 0.1 BNB or more then referrer gets more miners.\r\n\r\n        if (msg.value >= 0.1 ether){\r\n            WINNER = msg.sender;\r\n            TIME_JACK = block.timestamp;\r\n            if (ref != address(0) && !isContract(ref)){\r\n            //hatcheryMiners[ref] = hatcheryMiners[ref] + (eggsBought * 3 / EGGS_TO_HATCH_1MINERS / 100);\r\n            payable(ref).transfer(msg.value * 3 / 100);\r\n            }\r\n        }\r\n        hatchEggs();\r\n        } \r\n\r\n    function getWinnerInfo() public view returns(address,uint256){\r\n        return (WINNER,TIME_JACK);\r\n    }\r\n\r\n    function isLaunched() public view returns(bool) {\r\n        return block.timestamp >= LAUNCH_DATE;\r\n    }\r\n\r\n    function isContract(address _user) public view returns(bool) {\r\n        return address(_user).code.length != 0;\r\n    }\r\n    \r\n    function calculateTrade(uint256 _eggs,uint256 _mkteggs, uint256 _crrbalance) private view returns(uint256) {\r\n        return (PSN * _crrbalance) / (PSNH + (((PSN * _mkteggs) + (PSNH * _eggs)) / _eggs));\r\n    }\r\n    \r\n    function calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n        uint256 _calcTrade = calculateTrade(eggs,marketEggs,address(this).balance);\r\n        uint256 _limitdaily = totalDeposited[msg.sender] * LIMIT_ROI / 10000;\r\n        uint256 _realcap = (block.timestamp - lastHatch[msg.sender]) * _limitdaily / 1 days;\r\n        if (_calcTrade > _realcap){\r\n        return _realcap;\r\n        } else {\r\n        return _calcTrade;\r\n        } \r\n    }\r\n\r\n    function returnROI(address user) public view returns(uint256) {\r\n        uint256 hasEggs = getMyEggs(user);\r\n        uint256 _calcTrade = calculateTrade(hasEggs,marketEggs,address(this).balance);\r\n        uint256 _daily =  _calcTrade / (block.timestamp - lastHatch[user]) * 1 days ;\r\n        uint256 _dailyROI = 10000 * _daily / totalDeposited[user] ;\r\n        return _dailyROI;\r\n    }\r\n    \r\n    function dumpingFact() public view returns(uint256) {\r\n        return _dumpingfactor;\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    \r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateEggBuy(eth,address(this).balance);\r\n    }\r\n    \r\n    function payFee(uint256 amount) private {\r\n        uint256 fee = amount / 100;\r\n        recAdd.transfer(fee); //1%\r\n        rec2Add.transfer(fee); //1%\r\n        mktAdd.transfer(fee * 25 / 10); //2.5%\r\n\t\tmktAdd2.transfer(fee / 2); //0.5%\r\n    }\r\n\r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getMyMiners(address adr) public view returns(uint256) {\r\n        return hatcheryMiners[adr];\r\n    }\r\n    \r\n    function getMyEggs(address adr) public view returns(uint256) {\r\n        return claimedEggs[adr] + getEggsSinceLastHatch(adr);\r\n    }\r\n    \r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1MINERS , (block.timestamp - lastHatch[adr]));\r\n        return secondsPassed * hatcheryMiners[adr];\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rec2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mkt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mkt2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"JACKPOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_TO_WIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RENOUNCE_FEE_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_JACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beanRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpedEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpingFact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"returnROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClassicMiner", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002da512742e746d6fe6d81f9d3e22510109484e38000000000000000000000000532a7a8a7d9d248b6f1759d952268a46888486ee0000000000000000000000009b97f10e328f8c40470ecf8ef95547076faa1879", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfed39fc0490aec414d6398f96090f587b9d29a53e401770d6a3817a0c8f27bf"}