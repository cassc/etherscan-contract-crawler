{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/DCBTiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IDCBMasterChef.sol\\\";\\nimport \\\"./interfaces/IDCBTierBoost.sol\\\";\\nimport \\\"./interfaces/IDCBStaking.sol\\\";\\nimport \\\"./interfaces/IDCBVault.sol\\\";\\nimport \\\"./interfaces/IDCBLiqLocker.sol\\\";\\nimport \\\"./interfaces/IDCBLegacyMasterChef.sol\\\";\\n\\ncontract DCBTiers is Initializable, OwnableUpgradeable {\\n    /**\\n     *\\n     * @dev Tier struct\\n     *\\n     *\\n     * @param {minLimit} Minimum amount of dcb to be staked to join tier\\n     * @param {maxLimit} Maximum amount of dcb to be staked to join tier\\n     * @param {refundFee} Refund fee % for this tier\\n     *\\n     */\\n    struct Tier {\\n        uint256 minLimit;\\n        uint256 maxLimit;\\n        uint256 refundFee;\\n    }\\n\\n    Tier[] public tierInfo; //Tier storage\\n\\n    address public dcbTokenAddress; //DCB token instance\\n\\n    IDCBLegacyMasterChef public legacyStakingContract; //Legacy staking contract instance\\n    IDCBStaking public legacyMultiAssetStakingContract; //Old Multi asset Staking contract instance\\n    IDCBVault public legacyCompounderContract; //Old vault contract instance\\n    IDCBLiqLocker public legacyLiquidityLocker; //Old Liquidity locker contract\\n    IDCBTierBoost public tierBoostContract; //Tier boost contract instance\\n    IDCBStaking public multiAssetStakingContract; //Multi asset staking contract instance\\n    IDCBVault public compounderContract; //Vault contract instance\\n    IDCBLiqLocker public liquidityLocker; //Liquidity locker contract instance\\n\\n    mapping(address => mapping(uint256 => uint256)) public boostValues; //Boost %, /1000\\n\\n    uint256 internal constant DIVISOR = 1000;\\n\\n    event TierAdded(uint256 _minLimit, uint256 _maxLimit, uint256 _refundFee);\\n    event TierSet(uint256 tierId, uint256 _minLimit, uint256 _maxLimit, uint256 _refundFee);\\n    event LegacyContractSet(\\n        address _legacyStakingContract,\\n        address _legacyMultiAssetStakingContract,\\n        address _tierBoostContract,\\n        address _legacyCompounder,\\n        address _legacyLiqContract,\\n        address _token\\n    );\\n    event NewContractSet(address _multiAssetStakingContract, address _compounderContract, address _liquidityLocker);\\n\\n    /**\\n     *\\n     * @dev add new tier, only available for owner\\n     *\\n     */\\n    function addTier(uint256 _minLimit, uint256 _maxLimit, uint256 _refundFee) external onlyOwner returns (bool) {\\n        tierInfo.push(Tier({ minLimit: _minLimit, maxLimit: _maxLimit, refundFee: _refundFee }));\\n        emit TierAdded(_minLimit, _maxLimit, _refundFee);\\n        return true;\\n    }\\n\\n    /**\\n     *\\n     * @dev update a given tier\\n     *\\n     */\\n    function setTier(\\n        uint256 tierId,\\n        uint256 _minLimit,\\n        uint256 _maxLimit,\\n        uint256 _refundFee\\n    )\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(tierId < tierInfo.length, \\\"Invalid tier Id\\\");\\n\\n        tierInfo[tierId].minLimit = _minLimit;\\n        tierInfo[tierId].maxLimit = _maxLimit;\\n        tierInfo[tierId].refundFee = _refundFee;\\n        emit TierSet(tierId, _minLimit, _maxLimit, _refundFee);\\n\\n        return true;\\n    }\\n\\n    function setBoostValues(\\n        address[] calldata _contract,\\n        uint256[] calldata _poolId,\\n        uint256[] calldata _value\\n    )\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _contract.length; i++) {\\n            boostValues[_contract[i]][_poolId[i]] = _value[i];\\n        }\\n    }\\n\\n    function setLegacyContracts(\\n        address _legacyStakingContract,\\n        address _legacyMultiAssetStakingContract,\\n        address _tierBoostContract,\\n        address _legacyCompounder,\\n        address _legacyLiqContract,\\n        address _token\\n    )\\n        external\\n        onlyOwner\\n    {\\n        legacyStakingContract = IDCBLegacyMasterChef(_legacyStakingContract);\\n        legacyMultiAssetStakingContract = IDCBStaking(_legacyMultiAssetStakingContract);\\n        tierBoostContract = IDCBTierBoost(_tierBoostContract);\\n        legacyCompounderContract = IDCBVault(_legacyCompounder);\\n        legacyLiquidityLocker = IDCBLiqLocker(_legacyLiqContract);\\n        dcbTokenAddress = _token;\\n\\n        emit LegacyContractSet(\\n            _legacyStakingContract,\\n            _legacyMultiAssetStakingContract,\\n            _tierBoostContract,\\n            _legacyCompounder,\\n            _legacyLiqContract,\\n            _token\\n        );\\n    }\\n\\n    function setNewContracts(\\n        address _multiAssetStakingContract,\\n        address _compounderContract,\\n        address _liquidityLocker\\n    )\\n        external\\n        onlyOwner\\n    {\\n        multiAssetStakingContract = IDCBStaking(_multiAssetStakingContract);\\n        compounderContract = IDCBVault(_compounderContract);\\n        liquidityLocker = IDCBLiqLocker(_liquidityLocker);\\n\\n        emit NewContractSet(_multiAssetStakingContract, _compounderContract, _liquidityLocker);\\n    }\\n\\n    /**\\n     *\\n     * @dev get total number of the tiers\\n     *\\n     * @return len length of the pools\\n     *\\n     */\\n    function getTiersLength() external view returns (uint256) {\\n        return tierInfo.length;\\n    }\\n\\n    /**\\n     *\\n     * @dev get info of all tiers\\n     *\\n     * @return {Tier[]} tier info struct\\n     *\\n     */\\n    function getTiers() external view returns (Tier[] memory) {\\n        return tierInfo;\\n    }\\n\\n    /**\\n     *\\n     * @dev Get tier of a user\\n     * Total deposit should be greater than or equal to minimum limit or\\n     * less than maximum limit. If equal to max limit, user will be given\\n     * next tier\\n     *\\n     * @param addr Address of the user\\n     *\\n     * @return flag Whether user belongs to any bracket or not\\n     * @return pos To which bracket does the user belong\\n     *\\n     */\\n\\n    function getTierOfUser(address addr) external view returns (bool flag, uint256 pos, uint256 multiplier) {\\n        uint256 len = tierInfo.length;\\n        (uint256 totalDeposit,) = getTotalDeposit(addr);\\n        multiplier = 1;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            if (totalDeposit >= tierInfo[i].minLimit && totalDeposit < tierInfo[i].maxLimit) {\\n                pos = i;\\n                flag = true;\\n                break;\\n            }\\n        }\\n\\n        // compounding effect for final bracket\\n        if (!flag && totalDeposit > tierInfo[len - 1].maxLimit) {\\n            pos = len - 1;\\n            flag = true;\\n            // multiplier is the users total deposit divided by the\\n            // minimum limit in the tier. For example Diamond tier is\\n            // 80,0000+ DCB. The max limit of the tier should be set\\n            // 159,999 DCB and when the limit is passed the compounding\\n            // effect will be used to find the number of tickets e.g 2\\n            // for 160,000\\n            multiplier = totalDeposit / (tierInfo[len - 1].minLimit);\\n        }\\n\\n        return (flag, pos, multiplier);\\n    }\\n\\n    function initialize(\\n        address _legacyStakingContract,\\n        address _legacyMultiAssetStakingContract,\\n        address _tierBoostContract,\\n        address _legacyCompounderContract,\\n        address _legacyLiquidityLocker,\\n        address _multiAssetStakingContract,\\n        address _compounderContract,\\n        address _liquidityLocker,\\n        address _token\\n    )\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n\\n        legacyStakingContract = IDCBLegacyMasterChef(_legacyStakingContract);\\n        legacyMultiAssetStakingContract = IDCBStaking(_legacyMultiAssetStakingContract);\\n        tierBoostContract = IDCBTierBoost(_tierBoostContract);\\n        legacyCompounderContract = IDCBVault(_legacyCompounderContract);\\n        legacyLiquidityLocker = IDCBLiqLocker(_legacyLiquidityLocker);\\n        multiAssetStakingContract = IDCBStaking(_multiAssetStakingContract);\\n        compounderContract = IDCBVault(_compounderContract);\\n        liquidityLocker = IDCBLiqLocker(_liquidityLocker);\\n        dcbTokenAddress = _token;\\n    }\\n\\n    /**\\n     *\\n     * @dev Get total amount of dcb staked by a user\\n     *\\n     * @param addr Address of the user\\n     *\\n     * @return effectiveAmount Total amount of dcb staked with boost\\n     * @return actualAmount Total amount of dcb staked without boost\\n     */\\n\\n    function getTotalDeposit(address addr) public view returns (uint256 effectiveAmount, uint256 actualAmount) {\\n        (effectiveAmount, actualAmount) = getTotalDepositLegacy(addr);\\n        (uint256 tempEffective, uint256 tempActual) = getTotalDepositCurrent(addr);\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n    }\\n\\n    function getTotalDepositMultiAsset(\\n        address addr,\\n        address _contract\\n    )\\n        public\\n        view\\n        returns (uint256 effectiveAmount, uint256 actualAmount)\\n    {\\n        if (_contract != address(0)) {\\n            uint256 len;\\n            uint256 tempAmt;\\n            IDCBStaking _stakingContract = IDCBStaking(_contract);\\n            len = _stakingContract.poolLength();\\n            IDecubateStaking.PoolToken memory inputToken;\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                (,,,,, inputToken,,,,,) = _stakingContract.poolInfo(i);\\n\\n                if (inputToken.addr == dcbTokenAddress) {\\n                    (tempAmt,,,,) = _stakingContract.users(i, addr);\\n                    actualAmount += tempAmt;\\n                    if (tempAmt > 0 && boostValues[address(_stakingContract)][i] > 0) {\\n                        tempAmt += tempAmt * boostValues[address(_stakingContract)][i] / DIVISOR;\\n                    }\\n                    effectiveAmount += tempAmt;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTotalDepositLiquidityLocker(\\n        address addr,\\n        address _contract\\n    )\\n        public\\n        view\\n        returns (uint256 effectiveAmount, uint256 actualAmount)\\n    {\\n        if (_contract != address(0)) {\\n            uint256 len;\\n            uint256 tempAmt;\\n            IDCBLiqLocker _liquidityLocker = IDCBLiqLocker(_contract);\\n            len = _liquidityLocker.poolLength();\\n            address _pair;\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                (,,,,,,,, _pair,) = _liquidityLocker.pools(i);\\n                IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n                (uint256 lpTokens,,,,) = _liquidityLocker.users(i, addr);\\n                if (pair.token0() == dcbTokenAddress) {\\n                    (tempAmt,) = getTokenAmounts(lpTokens, pair);\\n                } else if (pair.token1() == dcbTokenAddress) {\\n                    (, tempAmt) = getTokenAmounts(lpTokens, pair);\\n                }\\n                actualAmount += (tempAmt * 2);\\n                if (tempAmt > 0 && boostValues[address(_liquidityLocker)][i] > 0) {\\n                    tempAmt += (tempAmt * boostValues[address(_liquidityLocker)][i]) / DIVISOR;\\n                }\\n                effectiveAmount += (tempAmt * 2);\\n            }\\n        }\\n    }\\n\\n    function getTotalDepositVault(\\n        address addr,\\n        address _contract,\\n        bool _isLegacy\\n    )\\n        public\\n        view\\n        returns (uint256 effectiveAmount, uint256 actualAmount)\\n    {\\n        if (_contract != address(0)) {\\n            uint256 len;\\n            uint256 tempAmt;\\n            address token;\\n            IDCBVault _vault = IDCBVault(_contract);\\n            IDCBMasterChef compoundStakingContract = IDCBMasterChef(_vault.masterchef());\\n            len = compoundStakingContract.poolLength();\\n            for (uint256 i = 0; i < len; i++) {\\n                if (_isLegacy) {\\n                    IDCBLegacyMasterChef legacyMasterChef = IDCBLegacyMasterChef(_vault.masterchef());\\n                    (,,,,,,,,, token) = legacyMasterChef.poolInfo(i);\\n                } else {\\n                    IDCBMasterChef masterChef = IDCBMasterChef(_vault.masterchef());\\n                    (,,,,,, token) = masterChef.poolInfo(i);\\n                }\\n\\n                if (token == dcbTokenAddress) {\\n                    (,, tempAmt,) = legacyCompounderContract.users(i, addr);\\n                    actualAmount += tempAmt;\\n                    if (tempAmt > 0 && boostValues[address(legacyCompounderContract)][i] > 0) {\\n                        tempAmt += tempAmt * boostValues[address(legacyCompounderContract)][i] / DIVISOR;\\n                    }\\n                    effectiveAmount += tempAmt;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTotalDepositLegacy(address addr) public view returns (uint256 effectiveAmount, uint256 actualAmount) {\\n        uint256 len;\\n        uint256 tempAmt;\\n        uint256 tempEffective;\\n        uint256 tempActual;\\n\\n        if (address(legacyStakingContract) != address(0)) {\\n            len = legacyStakingContract.poolLength();\\n            for (uint256 i = 0; i < len; i++) {\\n                (tempAmt,,,,) = legacyStakingContract.users(i, addr);\\n                actualAmount += tempAmt;\\n                if (tempAmt > 0 && boostValues[address(legacyStakingContract)][i] > 0) {\\n                    tempAmt += tempAmt * boostValues[address(legacyStakingContract)][i] / DIVISOR;\\n                }\\n                effectiveAmount += tempAmt;\\n            }\\n        }\\n\\n        if (address(tierBoostContract) != address(0)) {\\n            tempAmt = tierBoostContract.getDepositedAmount(addr);\\n            effectiveAmount += tempAmt;\\n            actualAmount += tempAmt;\\n        }\\n\\n        (tempEffective, tempActual) = getTotalDepositVault(addr, address(legacyCompounderContract), true);\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n\\n        (tempEffective, tempActual) = getTotalDepositMultiAsset(addr, address(legacyMultiAssetStakingContract));\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n\\n        (tempEffective, tempActual) = getTotalDepositLiquidityLocker(addr, address(legacyLiquidityLocker));\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n    }\\n\\n    function getTotalDepositCurrent(address addr) public view returns (uint256 effectiveAmount, uint256 actualAmount) {\\n        uint256 tempEffective;\\n        uint256 tempActual;\\n\\n        (tempEffective, tempActual) = getTotalDepositVault(addr, address(compounderContract), false);\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n\\n        (tempEffective, tempActual) = getTotalDepositMultiAsset(addr, address(multiAssetStakingContract));\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n\\n        (tempEffective, tempActual) = getTotalDepositLiquidityLocker(addr, address(liquidityLocker));\\n        effectiveAmount += tempEffective;\\n        actualAmount += tempActual;\\n    }\\n\\n    function getTokenAmounts(\\n        uint256 _amount,\\n        IUniswapV2Pair _pair\\n    )\\n        public\\n        view\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint256 reserve0, uint256 reserve1,) = _pair.getReserves();\\n\\n        amount0 = _amount * reserve0 / _pair.totalSupply();\\n        amount1 = _amount * reserve1 / _pair.totalSupply();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBLegacyMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDCBLegacyMasterChef {\\n    struct NFTMultiplier {\\n        bool active;\\n        uint16 multiplier;\\n        uint16 startIdx;\\n        uint16 endIdx;\\n    }\\n\\n    /**\\n     *\\n     * @dev User reflects the info of each user\\n     *\\n     *\\n     * @param {totalInvested} how many tokens the user staked\\n     * @param {totalWithdrawn} how many tokens withdrawn so far\\n     * @param {lastPayout} time at which last claim was done\\n     * @param {depositTime} Time of last deposit\\n     * @param {totalClaimed} Total claimed by the user\\n     *\\n     */\\n    struct User {\\n        uint256 totalInvested;\\n        uint256 totalWithdrawn;\\n        uint256 lastPayout;\\n        uint256 depositTime;\\n        uint256 totalClaimed;\\n    }\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 apy,\\n            NFTMultiplier memory nft,\\n            uint256 lockPeriodInDays,\\n            uint256 totalDeposit,\\n            uint256 startDate,\\n            uint256 endDate,\\n            uint256 minContrib,\\n            uint256 maxContrib,\\n            uint256 hardCap,\\n            address token\\n        );\\n\\n    function users(\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalInvested,\\n            uint256 totalWithdrawn,\\n            uint256 lastPayout,\\n            uint256 depositTime,\\n            uint256 totalClaimed\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function add(\\n        uint256 _apy,\\n        uint16 _multiplier,\\n        uint16 startIdx,\\n        uint16 endIdx,\\n        uint256 _lockPeriodInDays,\\n        bool _isUsed,\\n        uint256 _endDate,\\n        uint256 _minContrib,\\n        uint256 _maxContrib,\\n        uint256 _hardCap,\\n        address token\\n    )\\n        external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _apy,\\n        uint16 _multiplier,\\n        uint16 startIdx,\\n        uint16 endIdx,\\n        uint256 _lockPeriodInDays,\\n        bool _isUsed,\\n        uint256 _endDate,\\n        uint256 _minContrib,\\n        uint256 _maxContrib,\\n        uint256 _hardCap,\\n        address token\\n    )\\n        external;\\n\\n    function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function claim(uint256 _pid) external returns (bool);\\n\\n    function reinvest(uint256 _pid) external returns (bool);\\n\\n    function reinvestAll() external returns (bool);\\n\\n    function claimAll() external returns (bool);\\n\\n    function canClaim(uint256 _pid, address _addr) external view returns (bool);\\n\\n    function calcMultiplier(uint256 _pid, address _addr) external view returns (uint16);\\n\\n    function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function handleNFTMultiplier(uint256 _pid, address _user, uint256 _rewardAmount) external returns (uint256);\\n\\n    function updateCompounder(address _compounder) external;\\n\\n    function payout(uint256 _pid, address _addr) external view returns (uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBLiqLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDCBLiqLocker {\\n    function multis(uint256)\\n        external\\n        view\\n        returns (string memory name, address contractAdd, bool active, uint16 multi, uint128 start, uint128 end);\\n\\n    function owner() external view returns (address);\\n\\n    function pools(uint256)\\n        external\\n        view\\n        returns (\\n            bool isWithdrawLocked,\\n            uint16 lockPeriodInDays,\\n            uint32 totalInvestors,\\n            uint32 startDate,\\n            uint32 endDate,\\n            uint128 rewardRate,\\n            uint256 totalInvested,\\n            uint256 hardCap,\\n            address input,\\n            address reward\\n        );\\n\\n    function router() external view returns (address);\\n\\n    function users(\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalInvested,\\n            uint256 totalWithdrawn,\\n            uint32 lastPayout,\\n            uint32 depositTime,\\n            uint256 totalClaimed\\n        );\\n\\n    function transferToken(address _token) external returns (bool);\\n\\n    function add(\\n        bool _isWithdrawLocked,\\n        uint128 _rewardRate,\\n        uint16 _lockPeriodInDays,\\n        uint32 _endDate,\\n        uint256,\\n        address _inputToken,\\n        address _rewardToken\\n    )\\n        external;\\n\\n    function set(\\n        uint16 _pid,\\n        bool _isWithdrawLocked,\\n        uint128 _rewardRate,\\n        uint16 _lockPeriodInDays,\\n        uint32 _endDate,\\n        uint256,\\n        address,\\n        address\\n    )\\n        external;\\n\\n    function setMultiplier(\\n        uint16 _pid,\\n        string memory _name,\\n        address _contractAdd,\\n        bool _isUsed,\\n        uint16 _multi,\\n        uint128 _start,\\n        uint128 _end\\n    )\\n        external;\\n\\n    function transferStuckToken(address _token) external returns (bool);\\n\\n    function transferStuckNFT(address _nft, uint256 _id) external returns (bool);\\n\\n    function addLiquidityAndLock(uint8 _pid, uint256 _token0Amt, uint256 _token1Amt) external payable returns (bool);\\n\\n    function unlockAndRemoveLP(uint16 _pid, uint256 _amount) external returns (bool);\\n\\n    function claim(uint16 _pid) external returns (bool);\\n\\n    function claimAll() external returns (bool);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function getPools() external view returns (IStaking.Pool[] memory);\\n\\n    function initialize(address _router) external;\\n\\n    function payout(uint16 _pid, address _addr) external view returns (uint256 rewardAmount);\\n\\n    function canClaim(uint16 _pid, address _addr) external view returns (bool);\\n\\n    function ownsCorrectMulti(uint16 _pid, address _addr) external view returns (bool);\\n\\n    function calcMultiplier(uint16 _pid, address _addr) external view returns (uint16 multi);\\n\\n    function isWrappedNative(address _pair) external view returns (uint8 pos);\\n\\n    function getTokenAmounts(uint256 _amount, address _pair) external view returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface IStaking {\\n    struct Pool {\\n        bool isWithdrawLocked;\\n        uint16 lockPeriodInDays;\\n        uint32 totalInvestors;\\n        uint32 startDate;\\n        uint32 endDate;\\n        uint128 rewardRate;\\n        uint256 totalInvested;\\n        uint256 hardCap;\\n        address input;\\n        address reward;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDCBMasterChef {\\n    function accrueInterest(uint256 _principal, uint256 _rate, uint256 _age) external pure returns (uint256);\\n\\n    function compounderContract() external view returns (address);\\n\\n    function maxTransferAmount(address) external view returns (uint256);\\n\\n    function nftInfo(uint256)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            string memory name,\\n            address contractAdd,\\n            uint16 multiplier,\\n            uint16 startIdx,\\n            uint16 endIdx\\n        );\\n\\n    function owner() external view returns (address);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 apy,\\n            uint256 lockPeriodInDays,\\n            uint256 totalDeposit,\\n            uint256 startDate,\\n            uint256 endDate,\\n            uint256 hardCap,\\n            address token\\n        );\\n\\n    function users(\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalInvested,\\n            uint256 totalWithdrawn,\\n            uint256 lastPayout,\\n            uint256 depositTime,\\n            uint256 totalClaimed\\n        );\\n\\n    function yearlyRateToRay(uint256 _rateWad) external pure returns (uint256);\\n\\n    function initialize() external;\\n\\n    function updateFeeValues(uint8 _feePercent, address _feeWallet) external;\\n\\n    function updateCompounder(address _compounder) external;\\n\\n    function transferToken(address _addr, uint256 _amount) external returns (bool);\\n\\n    function add(\\n        uint256 _apy,\\n        uint256 _lockPeriodInDays,\\n        uint256 _endDate,\\n        uint256 _hardCap,\\n        address _token\\n    )\\n        external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _apy,\\n        uint256 _lockPeriodInDays,\\n        uint256 _endDate,\\n        uint256 _hardCap,\\n        uint256 _maxTransfer,\\n        address _token\\n    )\\n        external;\\n\\n    function setNFT(\\n        uint256 _pid,\\n        string memory _name,\\n        address _contractAdd,\\n        bool _isUsed,\\n        uint16 _multiplier,\\n        uint16 _startIdx,\\n        uint16 _endIdx\\n    )\\n        external;\\n\\n    function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function handleNFTMultiplier(uint256 _pid, address _user, uint256 _rewardAmount) external returns (uint256);\\n\\n    function claim(uint256 _pid) external returns (bool);\\n\\n    function reinvest(uint256 _pid) external returns (bool);\\n\\n    function reinvestAll() external returns (bool);\\n\\n    function claimAll() external returns (bool);\\n\\n    function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function canClaim(uint256 _pid, address _addr) external view returns (bool);\\n\\n    function calcMultiplier(uint256 _pid, address _addr) external view returns (uint16 multi);\\n\\n    function ownsCorrectNFT(address _addr, uint256 _pid) external view returns (bool);\\n\\n    function payout(uint256 _pid, address _addr) external view returns (uint256 value);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function getPools() external view returns (DecubateMasterChef.Pool[] memory);\\n}\\n\\ninterface DecubateMasterChef {\\n    struct Pool {\\n        uint256 apy;\\n        uint256 lockPeriodInDays;\\n        uint256 totalDeposit;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 hardCap;\\n        address token;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDCBStaking {\\n    function accrueInterest(uint256 _principal, uint256 _rate, uint256 _age) external pure returns (uint256);\\n\\n    function maxTransferAmount(address) external view returns (uint256);\\n\\n    function nftInfo(uint256)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            string memory name,\\n            address contractAdd,\\n            uint16 multiplier,\\n            uint16 startIdx,\\n            uint16 endIdx\\n        );\\n\\n    function owner() external view returns (address);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 apy,\\n            uint256 lockPeriodInDays,\\n            uint256 totalDeposit,\\n            uint256 hardCap,\\n            uint256 endDate,\\n            IDecubateStaking.PoolToken memory inputToken,\\n            IDecubateStaking.PoolToken memory rewardToken,\\n            uint256 ratio,\\n            address tradesAgainst,\\n            uint32 lastUpdatedTime,\\n            bool isRewardAboveInput\\n        );\\n\\n    function priceBuffer(uint256, uint256) external view returns (uint256);\\n\\n    function users(\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalInvested,\\n            uint256 totalWithdrawn,\\n            uint256 lastPayout,\\n            uint256 depositTime,\\n            uint256 totalClaimed\\n        );\\n\\n    function yearlyRateToRay(uint256 _rateWad) external pure returns (uint256);\\n\\n    function initialize() external;\\n\\n    function add(\\n        uint256 _apy,\\n        uint256 _lockPeriodInDays,\\n        uint256 _endDate,\\n        address _tradesAgainst,\\n        IDecubateStaking.PoolToken memory _inputToken,\\n        IDecubateStaking.PoolToken memory _rewardToken,\\n        uint256 _hardCap\\n    )\\n        external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _apy,\\n        uint256 _lockPeriodInDays,\\n        uint256 _endDate,\\n        address _tradesAgainst,\\n        uint256 _hardCap\\n    )\\n        external;\\n\\n    function setTokens(\\n        uint256 _pid,\\n        IDecubateStaking.PoolToken memory _inputToken,\\n        IDecubateStaking.PoolToken memory _rewardToken,\\n        uint256 _maxTransferInput,\\n        uint256 _maxTransferReward\\n    )\\n        external;\\n\\n    function setNFT(\\n        uint256 _pid,\\n        string memory _name,\\n        address _contractAdd,\\n        bool _isUsed,\\n        uint16 _multiplier,\\n        uint16 _startIdx,\\n        uint16 _endIdx\\n    )\\n        external;\\n\\n    function transferToken(address _addr, uint256 _amount) external returns (bool);\\n\\n    function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function updateFeeValues(uint8 _feePercent, address _feeWallet) external;\\n\\n    function updateTimeGap(uint32 newValue) external;\\n\\n    function claim(uint256 _pid) external returns (bool);\\n\\n    function claimAll() external returns (bool);\\n\\n    function updateRatio(uint256 _pid) external returns (bool);\\n\\n    function updateRatioAll() external returns (bool);\\n\\n    function canUnstake(uint256 _pid, address _addr) external view returns (bool);\\n\\n    function calcMultiplier(uint256 _pid, address _addr) external view returns (uint16 multi);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function getPools() external view returns (IDecubateStaking.Pool[] memory);\\n\\n    function payout(uint256 _pid, address _addr) external view returns (uint256 value);\\n\\n    function ownsCorrectNFT(address _addr, uint256 _pid) external view returns (bool);\\n}\\n\\ninterface IDecubateStaking {\\n    struct PoolToken {\\n        address addr;\\n        address router;\\n    }\\n\\n    struct Pool {\\n        uint256 apy;\\n        uint256 lockPeriodInDays;\\n        uint256 totalDeposit;\\n        uint256 hardCap;\\n        uint256 endDate;\\n        PoolToken inputToken;\\n        PoolToken rewardToken;\\n        uint256 ratio;\\n        address tradesAgainst;\\n        uint32 lastUpdatedTime;\\n        bool isRewardAboveInput;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBTierBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IDCBTierBoost {\\n    function getDepositedAmount(address _address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDCBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDCBVault {\\n    function callFee() external view returns (uint256);\\n\\n    function masterchef() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function pools(uint256)\\n        external\\n        view\\n        returns (uint256 totalShares, uint256 pendingClaim, uint256 lastHarvestedTime);\\n\\n    function users(\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        returns (uint256 shares, uint256 lastDepositedTime, uint256 totalInvested, uint256 totalClaimed);\\n\\n    function initialize(address _masterchef) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdrawAll(uint256 _pid) external;\\n\\n    function harvestAll() external;\\n\\n    function setCallFee(uint256 _callFee) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function transferToken(address _addr, uint256 _amount) external returns (bool);\\n\\n    function calculateTotalPendingRewards(uint256 _pid) external view returns (uint256);\\n\\n    function calculateHarvestDcbRewards(uint256 _pid) external view returns (uint256);\\n\\n    function getRewardOfUser(address _user, uint256 _pid) external view returns (uint256);\\n\\n    function withdraw(uint256 _pid, uint256 _shares) external;\\n\\n    function harvest(uint256 _pid) external;\\n\\n    function getPricePerFullShare(uint256 _pid) external view returns (uint256);\\n\\n    function canUnstake(address _user, uint256 _pid) external view returns (bool);\\n\\n    function balanceOf(uint256 _pid) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/* solhint-disable */\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\",\r\n      \"layerzero/=lib/LayerZero/contracts/\",\r\n      \"LayerZero/=lib/LayerZero/contracts/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-test/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_legacyStakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_legacyMultiAssetStakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tierBoostContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_legacyCompounder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_legacyLiqContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"LegacyContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_multiAssetStakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_compounderContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityLocker\",\"type\":\"address\"}],\"name\":\"NewContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"}],\"name\":\"TierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"}],\"name\":\"TierSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounderContract\",\"outputs\":[{\"internalType\":\"contract IDCBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcbTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTierOfUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"}],\"internalType\":\"struct DCBTiers.Tier[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTokenAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalDepositCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalDepositLegacy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getTotalDepositLiquidityLocker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getTotalDepositMultiAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLegacy\",\"type\":\"bool\"}],\"name\":\"getTotalDepositVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legacyStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyMultiAssetStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tierBoostContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyCompounderContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyLiquidityLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiAssetStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compounderContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyCompounderContract\",\"outputs\":[{\"internalType\":\"contract IDCBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyLiquidityLocker\",\"outputs\":[{\"internalType\":\"contract IDCBLiqLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyMultiAssetStakingContract\",\"outputs\":[{\"internalType\":\"contract IDCBStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyStakingContract\",\"outputs\":[{\"internalType\":\"contract IDCBLegacyMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLocker\",\"outputs\":[{\"internalType\":\"contract IDCBLiqLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiAssetStakingContract\",\"outputs\":[{\"internalType\":\"contract IDCBStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"setBoostValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legacyStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyMultiAssetStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tierBoostContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyCompounder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyLiqContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setLegacyContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiAssetStakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compounderContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityLocker\",\"type\":\"address\"}],\"name\":\"setNewContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierBoostContract\",\"outputs\":[{\"internalType\":\"contract IDCBTierBoost\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DCBTiers", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}