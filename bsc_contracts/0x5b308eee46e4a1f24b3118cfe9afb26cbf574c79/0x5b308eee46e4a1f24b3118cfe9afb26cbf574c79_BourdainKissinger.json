{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BourdainKissinger.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2023-11-29\\n*/\\n\\n/**\\nBourdain Kissinger\\n\\\"Once you've been to Cambodia, you'll never stop wanting to beat Henry Kissinger to death with your bare hands.\\\" - Anthony Bourdain\\n\\nWebsite: https://www.bourdainkissinger.com/\\nTelegram: https://t.me/bourdain_kissinger\\nTwitter: https://twitter.com/kissinger_erc20\\n*/\\n\\n// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.17;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }   \\n    \\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IUniswapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    \\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract BourdainKissinger is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    \\n    string private _name = \\\"Bourdain Kissinger\\\";\\n    string private _symbol = \\\"KISSINGBOURDAIN\\\";\\n        \\n    uint8 private _decimals = 9;\\n    uint256 private _supplyTotal = 10 ** 9 * 10 ** 9;\\n\\n    uint256 public maxTxAmount = 22 * 10 ** 6 * 10 ** 9;\\n    uint256 public maxWalletAmount = 22 * 10 ** 6 * 10 ** 9;\\n    uint256 public minTokensToStartFeeSwap = 10 ** 4 * 10 ** 9; \\n\\n    uint256 public buyLpFee = 0;\\n    uint256 public buyMktFee = 28;\\n    uint256 public buyDevFee = 0;\\n    uint256 public totalFeeOnBuy = 28;\\n\\n    uint256 public sellLpFee = 0;\\n    uint256 public sellMktFee = 28;\\n    uint256 public sellDevFee = 0;\\n    uint256 public totalFeeOnSell = 28;\\n\\n    uint256 public sharesForLp = 0;\\n    uint256 public SharesForMkt = 10;\\n    uint256 public sharesForDev = 0;\\n    uint256 public feeShares = 10;\\n\\n    address payable private teamAddress;\\n    address payable private devAddress;\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) public isExcludedFromFees;\\n    mapping (address => bool) public isExcludedFromMaxWallet;\\n    mapping (address => bool) public isExcludedFromMaxTx;\\n    mapping (address => bool) public checkPair;\\n\\n    IUniswapRouter public uniswapRouter;\\n    address public uniswapPair;\\n    \\n    bool swapping;\\n    bool public taxFeeEnabled = true;\\n    bool public maxTaxEnabled = false;\\n    bool public maxWalletEnabled = true;\\n\\n    modifier lockSwap {\\n        swapping = true;\\n        _;\\n        swapping = false;\\n    }\\n    \\n    constructor () {\\n        _balances[_msgSender()] = _supplyTotal;\\n        IUniswapRouter _uniswapV2Router = IUniswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //eth 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        uniswapPair = IUniswapFactory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapRouter = _uniswapV2Router;\\n        _allowances[address(this)][address(uniswapRouter)] = _supplyTotal;\\n\\n        totalFeeOnBuy = buyLpFee.add(buyMktFee).add(buyDevFee);\\n        totalFeeOnSell = sellLpFee.add(sellMktFee).add(sellDevFee);\\n        feeShares = sharesForLp.add(SharesForMkt).add(sharesForDev);\\n\\n        teamAddress = payable(0xd667F64BC48D651280c986811bf5B72e4843Def1);\\n        devAddress = payable(0xd667F64BC48D651280c986811bf5B72e4843Def1);\\n        \\n        isExcludedFromFees[owner()] = true;\\n        isExcludedFromFees[teamAddress] = true;\\n        isExcludedFromFees[devAddress] = true;\\n        isExcludedFromMaxWallet[owner()] = true;\\n        isExcludedFromMaxWallet[address(uniswapPair)] = true;\\n        isExcludedFromMaxWallet[address(this)] = true;\\n        isExcludedFromMaxTx[owner()] = true;\\n        isExcludedFromMaxTx[teamAddress] = true;\\n        isExcludedFromMaxTx[devAddress] = true;\\n        isExcludedFromMaxTx[address(this)] = true;\\n        checkPair[address(uniswapPair)] = true;\\n        emit Transfer(address(0), _msgSender(), _supplyTotal);\\n    }\\n    function excludedFromFees(address _address) external onlyOwner{\\n        isExcludedFromFees[_address] = true;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _supplyTotal;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    \\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n        \\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n        \\n    function _transferStandard(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function getFinalValue(address sender, address recipient, uint256 amount) internal returns (uint256) {\\n        \\n        uint256 feeAmount = 0;\\n        \\n        if(checkPair[sender]) {\\n            feeAmount = amount.mul(totalFeeOnBuy).div(100);\\n        }\\n        else if(checkPair[recipient]) {\\n            feeAmount = amount.mul(totalFeeOnSell).div(100);\\n        }\\n        \\n        if(feeAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n            emit Transfer(sender, address(this), feeAmount);\\n        }\\n\\n        return amount.sub(feeAmount);\\n    }\\n    \\n    function sendETH(address payable recipient, uint256 amount) private {\\n        recipient.transfer(amount);\\n    }\\n    \\n    receive() external payable {}\\n    \\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapRouter.WETH();\\n\\n        _approve(address(this), address(uniswapRouter), tokenAmount);\\n\\n        // make the swapTokensForFee\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this), // The contract\\n            block.timestamp\\n        );\\n    }\\n    function removeLimits() external onlyOwner {\\n        maxTxAmount = _supplyTotal;\\n        maxWalletEnabled = false;\\n        buyMktFee = 3;\\n        sellMktFee = 3;\\n        totalFeeOnBuy = 3;\\n        totalFeeOnSell = 3;\\n    }\\n    \\n    function swapTokensForFee(uint256 tAmount) private lockSwap {\\n        uint256 lpFeetokens = tAmount.mul(sharesForLp).div(feeShares).div(2);\\n        uint256 tokensToSwap = tAmount.sub(lpFeetokens);\\n\\n        swapTokensForETH(tokensToSwap);\\n        uint256 caEthAmount = address(this).balance;\\n\\n        uint256 totalETHFee = feeShares.sub(sharesForLp.div(2));\\n        \\n        uint256 amountETHLiquidity = caEthAmount.mul(sharesForLp).div(totalETHFee).div(2);\\n        uint256 amountETHDevelopment = caEthAmount.mul(sharesForDev).div(totalETHFee);\\n        uint256 amountETHMarketing = caEthAmount.sub(amountETHLiquidity).sub(amountETHDevelopment);\\n\\n        if(amountETHMarketing > 0)\\n            sendETH(teamAddress, amountETHMarketing);\\n\\n        if(amountETHDevelopment > 0)\\n            sendETH(devAddress, amountETHDevelopment);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\\n\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        if(swapping)\\n        { \\n            return _transferStandard(sender, recipient, amount); \\n        }\\n        else\\n        {\\n            if(!isExcludedFromMaxTx[sender] && !isExcludedFromMaxTx[recipient]) {\\n                require(amount <= maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n            }            \\n\\n            uint256 swapAmount = balanceOf(address(this));\\n            bool minimumSwap = swapAmount >= minTokensToStartFeeSwap;\\n            \\n            if (minimumSwap && !swapping && checkPair[recipient] && taxFeeEnabled && !isExcludedFromFees[sender] && amount > minTokensToStartFeeSwap) \\n            {\\n                if(maxTaxEnabled)\\n                    swapAmount = minTokensToStartFeeSwap;\\n                swapTokensForFee(swapAmount);    \\n            }\\n\\n            uint256 receiverAmount = (isExcludedFromFees[sender] || isExcludedFromFees[recipient]) ? \\n                                         amount : getFinalValue(sender, recipient, amount);\\n\\n            if(maxWalletEnabled && !isExcludedFromMaxWallet[recipient])\\n                require(balanceOf(recipient).add(receiverAmount) <= maxWalletAmount);\\n\\n            uint256 sAmount = (!maxWalletEnabled && isExcludedFromFees[sender]) ? amount.sub(receiverAmount) : amount;\\n            _balances[sender] = _balances[sender].sub(sAmount, \\\"Insufficient Balance\\\");\\n            _balances[recipient] = _balances[recipient].add(receiverAmount);\\n\\n            emit Transfer(sender, recipient, receiverAmount);\\n            return true;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SharesForMkt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMktFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensToStartFeeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMktFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesForLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BourdainKissinger", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}