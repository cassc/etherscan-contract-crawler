{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// safe transfer\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        // (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// ILinkedin.\r\ninterface ILinkedin {\r\n    function mySuper(address user) external view returns (address);\r\n    function myJuniors(address user) external view returns (address[] memory);\r\n    function getSuperList(address user, uint256 list) external view returns (address[] memory);\r\n}\r\n\r\n\r\n// owner\r\nabstract contract Ownable {\r\n    address public owner;\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'owner error');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// non reentrant\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// non contract\r\nabstract contract ContractGuard {\r\n\r\n    constructor() {}\r\n\r\n    modifier nonContract() {\r\n        require(!isContract(msg.sender), \"ContractGuard: not user1 error\");\r\n        require(tx.origin == msg.sender, \"ContractGuard: not user2 error\");\r\n        _;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\n\r\n// BLQ Locked V1.\r\ncontract BLQLockedV1 is Ownable, ReentrancyGuard, ContractGuard {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // sign address.\r\n    address public signer;\r\n    // nonce only one.\r\n    mapping(uint256 => bool) public nonceUsed;\r\n\r\n    mapping(address => bool) public isBurnToken;    // is burn token.\r\n    address[] public burnTokens;\r\n    \r\n    uint256[2] public superEarnRatio = [1000, 500]; // 10%% and 5%%.\r\n    address public linkedin;                        // linkedin.\r\n    bool public isSuperEarn = true;                 // is super earn.\r\n    uint256 constant private DENOMINATOR = 10000;   // denominator.\r\n    \r\n\r\n    constructor(address signer_, address linkedin_) {\r\n        signer = signer_;\r\n        linkedin = linkedin_;\r\n    }\r\n\r\n\r\n    event UserLockPay(uint256 indexed nonce, address user, uint256 ID, address token, uint256 amount, uint256 time);\r\n    event UserEarnGain(uint256 indexed nonce, address user, address token, uint256 amount, uint256 time, \r\n    address superAddress, uint256 superAmount, address superSuperAddress, uint256 superSuperAmount);\r\n    event TakeMoneyGain(uint256 indexed nonce, address user, uint256 ID, address token, uint256 amount, uint256 time);\r\n    event TeamEarnGain(uint256 indexed nonce, address user, address token, uint256 amount, uint256 time);\r\n\r\n\r\n    // take eth.\r\n    function takeETH(address to, uint256 value) external onlyOwner {\r\n        require(to != address(0), \"zero address error\");\r\n        require(value > 0, \"value zero error\");\r\n        TransferHelper.safeTransferETH(to, value);\r\n    }\r\n\r\n    // take token.\r\n    function takeToken(address token, address to , uint256 value) external onlyOwner {\r\n        require(to != address(0), \"zero address error\");\r\n        require(value > 0, \"value zero error\");\r\n        TransferHelper.safeTransfer(token, to, value);\r\n    }\r\n\r\n    // set signer.\r\n    function setSigner(address newSigner) external onlyOwner {\r\n        require(newSigner != address(0), \"address error\");\r\n        signer = newSigner;\r\n    }\r\n\r\n    // set is burn token.\r\n    function setIsBurnToken(address newBurnToken, bool newStatus) external onlyOwner {\r\n        isBurnToken[newBurnToken] = newStatus;\r\n        burnTokens.push(newBurnToken);\r\n    }\r\n\r\n    // get burn tokens.\r\n    function getBurnTokens() external view returns(address[] memory) {\r\n        return burnTokens;\r\n    }\r\n\r\n    // set superEarnRatio.\r\n    function setSuperEarnRatio(uint256 superRatio, uint256 superSuperRatio) external onlyOwner {\r\n        superEarnRatio[0] = superRatio;\r\n        superEarnRatio[1] = superSuperRatio;\r\n    }\r\n\r\n    // set linkedin.\r\n    function setLinkedin(address newLinkedin) external onlyOwner {\r\n        require(newLinkedin != address(0), \"address error\");\r\n        linkedin = newLinkedin;\r\n    }\r\n\r\n    // set is super earn.\r\n    function setIsSuperEarn(bool newStatus) external onlyOwner {\r\n        isSuperEarn = newStatus;\r\n    }\r\n    \r\n\r\n    // user lock pay.\r\n    function userLockPay(\r\n        address _user,\r\n        uint256 _ID,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _time,\r\n        uint256 _deadline,\r\n        bytes memory _signature\r\n    ) external nonReentrant nonContract {\r\n        require(msg.sender == _user, \"not you\");\r\n        require(_amount > 0, \"amount is zero\");\r\n        require(_deadline > block.timestamp, \"have expired\");\r\n\r\n        // verify sginer.\r\n        bytes32 hashData = keccak256(abi.encodePacked(\"userLockPay\",address(this),_user,_ID,_token,_amount,_nonce,_time,_deadline));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hashData));\r\n        address signerAddress = recoverSigner(messageHash, _signature);\r\n        require(signerAddress != address(0), \"Signer address is zero address\");\r\n        require(signerAddress == signer, \"Signer is error\");\r\n        require(!nonceUsed[_nonce], \"nonce used\");\r\n        nonceUsed[_nonce] = true;\r\n        \r\n        // ok.\r\n        require(isContract(_token), \"token error\");\r\n        if(isBurnToken[_token]) {\r\n            uint256 _balancesOfBefore = IERC20(_token).balanceOf(address(this));\r\n            TransferHelper.safeTransferFrom(_token, _user, address(this), _amount);\r\n            uint256 _balancesOfLast = IERC20(_token).balanceOf(address(this));\r\n\r\n            uint256 _amount2 = _balancesOfLast.sub(_balancesOfBefore);\r\n            IERC20(_token).burn(_amount2);\r\n        }else {\r\n            TransferHelper.safeTransferFrom(_token, _user, address(this), _amount);\r\n        }\r\n\r\n        emit UserLockPay(_nonce, _user, _ID, _token, _amount, _time);\r\n    }\r\n\r\n    // user gain.\r\n    function userEarnGain(\r\n        address _user,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _time,\r\n        uint256 _deadline,\r\n        bytes memory _signature\r\n    ) external nonReentrant nonContract {\r\n        require(msg.sender == _user, \"not you\");\r\n        require(_amount > 0, \"amount is zero\");\r\n        require(_deadline > block.timestamp, \"have expired\");\r\n\r\n        // verify sginer.\r\n        bytes32 hashData = keccak256(abi.encodePacked(\"userEarnGain\",address(this),_user,_token,_amount,_nonce,_time,_deadline));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hashData));\r\n        address signerAddress = recoverSigner(messageHash, _signature);\r\n        require(signerAddress != address(0), \"Signer address is zero address\");\r\n        require(signerAddress == signer, \"Signer is error\");\r\n        require(!nonceUsed[_nonce], \"nonce used\");\r\n        nonceUsed[_nonce] = true;\r\n        \r\n        // ok.\r\n        require(isContract(_token), \"token error\");\r\n        TransferHelper.safeTransfer(_token, _user, _amount);\r\n\r\n        // super.\r\n        address _superAddress = ILinkedin(linkedin).mySuper(_user);\r\n        address _superSuperAddress = ILinkedin(linkedin).mySuper(_superAddress);\r\n        uint256 _superAmount = _superAddress == address(0) ? 0 : _amount.mul(superEarnRatio[0]).div(DENOMINATOR);\r\n        uint256 _superSuperAmount = _superSuperAddress == address(0) ? 0 :_amount.mul(superEarnRatio[1]).div(DENOMINATOR);\r\n        if(isSuperEarn) {\r\n            if(_superAddress != address(0) && _superAmount > 0) TransferHelper.safeTransfer(_token, _superAddress, _superAmount);\r\n            if(_superSuperAddress != address(0) && _superSuperAmount > 0) TransferHelper.safeTransfer(_token, _superSuperAddress, _superSuperAmount);\r\n            emit UserEarnGain(_nonce, _user, _token, _amount, _time, _superAddress, _superAmount, _superSuperAddress, _superSuperAmount);\r\n        }else {\r\n            emit UserEarnGain(_nonce, _user, _token, _amount, _time, _superAddress, 0, _superSuperAddress, 0);\r\n        }\r\n\r\n    }\r\n\r\n    // take money gain.\r\n    function takeMoneyGain(\r\n        address _user,\r\n        uint256 _ID,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _time,\r\n        uint256 _deadline,\r\n        bytes memory _signature\r\n    ) external nonReentrant nonContract {\r\n        require(msg.sender == _user, \"not you\");\r\n        require(_amount > 0, \"amount is zero\");\r\n        require(_deadline > block.timestamp, \"have expired\");\r\n\r\n        // verify sginer.\r\n        bytes32 hashData = keccak256(abi.encodePacked(\"takeMoneyGain\",address(this),_user,_ID,_token,_amount,_nonce,_time,_deadline));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hashData));\r\n        address signerAddress = recoverSigner(messageHash, _signature);\r\n        require(signerAddress != address(0), \"Signer address is zero address\");\r\n        require(signerAddress == signer, \"Signer is error\");\r\n        require(!nonceUsed[_nonce], \"nonce used\");\r\n        nonceUsed[_nonce] = true;\r\n        \r\n        // ok.\r\n        require(isContract(_token), \"token error\");\r\n        TransferHelper.safeTransfer(_token, _user, _amount);\r\n\r\n        emit TakeMoneyGain(_nonce, _user, _ID, _token, _amount, _time);\r\n    }\r\n\r\n    // team earn gain.\r\n    function teamEarnGain(\r\n        address _user,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _time,\r\n        uint256 _deadline,\r\n        bytes memory _signature\r\n    ) external nonReentrant nonContract {\r\n        require(msg.sender == _user, \"not you\");\r\n        require(_amount > 0, \"amount is zero\");\r\n        require(_deadline > block.timestamp, \"have expired\");\r\n\r\n        // verify sginer.\r\n        bytes32 hashData = keccak256(abi.encodePacked(\"teamEarnGain\",address(this),_user,_token,_amount,_nonce,_time,_deadline));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hashData));\r\n        address signerAddress = recoverSigner(messageHash, _signature);\r\n        require(signerAddress != address(0), \"Signer address is zero address\");\r\n        require(signerAddress == signer, \"Signer is error\");\r\n        require(!nonceUsed[_nonce], \"nonce used\");\r\n        nonceUsed[_nonce] = true;\r\n        \r\n        // ok.\r\n        require(isContract(_token), \"token error\");\r\n        TransferHelper.safeTransfer(_token, _user, _amount);\r\n        emit TeamEarnGain(_nonce, _user, _token, _amount, _time);\r\n    }\r\n\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkedin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TakeMoneyGain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TeamEarnGain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"superAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superSuperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"superSuperAmount\",\"type\":\"uint256\"}],\"name\":\"UserEarnGain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UserLockPay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBurnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSuperEarn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkedin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurnToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setIsBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setIsSuperEarn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLinkedin\",\"type\":\"address\"}],\"name\":\"setLinkedin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"superRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"superSuperRatio\",\"type\":\"uint256\"}],\"name\":\"setSuperEarnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"superEarnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"takeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"takeMoneyGain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"teamEarnGain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"userEarnGain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"userLockPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BLQLockedV1", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e3126afbaef0ce296633e9c0bcbc09f0822c36b20000000000000000000000008e7503dbac958deb9d43e40ad426962ba4cf5c04", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f7f05031ba5425157b31d0c9f4121a339c170aee80c29c49b9aaa86c8fcf333"}