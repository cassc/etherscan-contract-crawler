{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/utils/ArrayUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ArrayUtils {\\n    error EmptyArray();\\n\\n    error NotSubarray();\\n\\n    error UnsortedArray(uint256 id);\\n\\n    error DuplicateId(uint256 id, uint256 index);\\n\\n    error NotInArray(uint256 id);\\n\\n    /**\\n     * @param tokenIds Array of token ids to be zipped\\n     */\\n    function revertIfArrayIsEmpty(uint256[] memory tokenIds) internal pure {\\n        if (tokenIds.length == 0) {\\n            revert EmptyArray();\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param tokenIds Array of token ids to be zipped\\n     */\\n    function revertIfArrayIsNotSorted(uint256[] memory tokenIds) internal pure {\\n        for (uint256 i = 0; i < tokenIds.length - 1; i++) {\\n            if (tokenIds[i] >= tokenIds[i + 1]) {\\n                revert UnsortedArray(i);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if lead token id is not in the array of token ids\\n     * @param leadId Lead token id\\n     * @param tokenIds Array of token ids to be zipped\\n     */\\n    function revertIfDuplicatedIdInArray(uint256 leadId, uint256[] memory tokenIds) internal pure {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (tokenIds[i] == leadId) {\\n                revert DuplicateId(leadId, i);\\n            }\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param mainArray Main array\\n     * @param subArray Sub array to be checked\\n     */\\n    function revertIfNotSubarray(uint256[] memory mainArray, uint256[] memory subArray) internal pure {\\n        uint256 mainArrayLength = mainArray.length;\\n        uint256 subArrayLength = subArray.length;\\n\\n        if (subArrayLength > mainArrayLength) {\\n            revert NotSubarray();\\n        }\\n\\n        uint256 mainArrayCounter;\\n        uint256 subArrayCounter;\\n\\n        while (mainArrayCounter < mainArrayLength && subArrayCounter < subArrayLength) {\\n            if (mainArray[mainArrayCounter] == subArray[subArrayCounter]) {\\n                subArrayCounter++;\\n            }\\n            mainArrayCounter++;\\n        }\\n\\n        if (subArrayCounter != subArrayLength) {\\n            revert NotSubarray();\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if there are any entries of subArray in mainArray\\n     * @param mainArray Main array\\n     * @param subArray Sub array to be checked\\n     */\\n    function revertIfDuplicatesFound(uint256[] memory mainArray, uint256[] memory subArray) internal pure {\\n        uint256 mainArrayLength = mainArray.length;\\n        uint256 subArrayLength = subArray.length;\\n\\n        uint256 mainArrayCounter;\\n        uint256 subArrayCounter;\\n\\n        while (mainArrayCounter < mainArrayLength && subArrayCounter < subArrayLength) {\\n            while (mainArray[mainArrayCounter] < subArray[subArrayCounter]) {\\n                mainArrayCounter++;\\n                if (mainArrayCounter == mainArrayLength) {\\n                    return;\\n                }\\n            }\\n            if (mainArray[mainArrayCounter] == subArray[subArrayCounter]) {\\n                revert DuplicateId(subArray[subArrayCounter], subArrayCounter);\\n            }\\n            subArrayCounter++;\\n            mainArrayCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove subArray from mainArray\\n     * @param mainArray Main array\\n     * @param arrayToSubstract Sub array\\n     */\\n    function substractArray(\\n        uint256[] memory mainArray,\\n        uint256[] memory arrayToSubstract\\n    ) internal pure returns (uint256[] memory result) {\\n        uint256 mainArrayLength = mainArray.length;\\n        uint256 subArrayLength = arrayToSubstract.length;\\n\\n        result = new uint256[](mainArrayLength - subArrayLength);\\n\\n        uint256 mainArrayCounter;\\n        uint256 subArrayCounter;\\n\\n        while (mainArrayCounter < mainArrayLength) {\\n            if (subArrayCounter < subArrayLength && mainArray[mainArrayCounter] == arrayToSubstract[subArrayCounter]) {\\n                subArrayCounter++;\\n            } else {\\n                result[mainArrayCounter - subArrayCounter] = mainArray[mainArrayCounter];\\n            }\\n            mainArrayCounter++;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Merge two arrays\\n     * @param mainArray Main array\\n     * @param subArray Sub array\\n     */\\n    function mergeArrays(\\n        uint256[] memory mainArray,\\n        uint256[] memory subArray\\n    ) internal pure returns (uint256[] memory result) {\\n        uint256 mainArrayLength = mainArray.length;\\n        uint256 subArrayLength = subArray.length;\\n\\n        result = new uint256[](mainArrayLength + subArrayLength);\\n\\n        uint256 mainArrayCounter;\\n        uint256 subArrayCounter;\\n        uint256 resultCounter;\\n\\n        while (mainArrayCounter < mainArrayLength && subArrayCounter < subArrayLength) {\\n            if (mainArray[mainArrayCounter] < subArray[subArrayCounter]) {\\n                result[resultCounter] = mainArray[mainArrayCounter];\\n                mainArrayCounter++;\\n            } else {\\n                result[resultCounter] = subArray[subArrayCounter];\\n                subArrayCounter++;\\n            }\\n            resultCounter++;\\n        }\\n\\n        if (mainArrayCounter < mainArrayLength) {\\n            for (; mainArrayCounter < mainArrayLength; mainArrayCounter++) {\\n                result[resultCounter] = mainArray[mainArrayCounter];\\n                resultCounter++;\\n            }\\n        } else {\\n            for (; subArrayCounter < subArrayLength; subArrayCounter++) {\\n                result[resultCounter] = subArray[subArrayCounter];\\n                resultCounter++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/utils/DefaultRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract DefaultRoles is AccessControl {\\n    error OnlyOwner(address sender);\\n    error OnlyAdmin(address sender);\\n    error OnlyExecutor(address sender);\\n\\n    error CannotRemoveSelf(address owner);\\n\\n    error FunctionDisabled(bytes4 functionId);\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n    /**\\n     *\\n     * @param owner Address of the owner\\n     * @param admin Address of the admin\\n     * @param executors Addresses of the executors\\n     */\\n    constructor(address owner, address admin, address[] memory executors) AccessControl() {\\n        _grantRole(OWNER_ROLE, owner);\\n        _grantRole(ADMIN_ROLE, admin);\\n        _addExecutors(executors);\\n    }\\n\\n    /**\\n     *\\n     * @param owner Address of the owner to add\\n     */\\n    function addOwner(address owner) external virtual onlyOwner {\\n        _addOwner(owner);\\n    }\\n\\n    function _addOwner(address owner) internal virtual {\\n        _grantRole(OWNER_ROLE, owner);\\n    }\\n\\n    /**\\n     *\\n     * @param owner Address of the owner ro revoke\\n     */\\n    function revokeOwner(address owner) external virtual onlyOwner {\\n        if (owner == _msgSender()) {\\n            revert CannotRemoveSelf(owner);\\n        }\\n        _revokeOwner(owner);\\n    }\\n\\n    function _revokeOwner(address owner) internal virtual {\\n        _revokeRole(OWNER_ROLE, owner);\\n    }\\n\\n    /**\\n     *\\n     * @param admin Address of the admin to add\\n     */\\n    function addAdmin(address admin) external virtual onlyOwner {\\n        _addAdmin(admin);\\n    }\\n\\n    function _addAdmin(address admin) internal virtual {\\n        _grantRole(ADMIN_ROLE, admin);\\n    }\\n\\n    /**\\n     *\\n     * @param admin Address of the admin to revoke\\n     */\\n    function revokeAdmin(address admin) external virtual onlyOwner {\\n        _revokeAdmin(admin);\\n    }\\n\\n    function _revokeAdmin(address admin) internal virtual {\\n        _revokeRole(ADMIN_ROLE, admin);\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to add\\n     */\\n    function addExecutors(address[] calldata executors) external virtual onlyAdmin {\\n        _addExecutors(executors);\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to revoke\\n     */\\n    function revokeExecutors(address[] calldata executors) external virtual onlyAdmin {\\n        for (uint256 i = 0; i < executors.length; i++) {\\n            _revokeRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to add\\n     */\\n    function _addExecutors(address[] memory executors) internal virtual {\\n        for (uint256 i = 0; i < executors.length; i++) {\\n            _addExecutor(executors[i]);\\n        }\\n    }\\n\\n    function _addExecutor(address executor) internal virtual {\\n        _grantRole(EXECUTOR_ROLE, executor);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function grantRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.grantRole.selector);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function revokeRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.revokeRole.selector);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function renounceRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.renounceRole.selector);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (!hasRole(OWNER_ROLE, _msgSender())) {\\n            revert OnlyOwner(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(ADMIN_ROLE, _msgSender())) {\\n            revert OnlyAdmin(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        if (!hasRole(EXECUTOR_ROLE, _msgSender())) {\\n            revert OnlyExecutor(_msgSender());\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/kale-cashier/interfaces/IKaleCashier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IKaleCashier {\\n    struct WithdrawSignature {\\n        uint256 deadline;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    /**\\n     *\\n     * @param user Address of user that receives tokens (claim can be done by third parties)\\n     * @param amount Amount of tokens to claim\\n     */\\n    event TokenWithdrawal(address indexed user, uint256 indexed amount);\\n\\n    /**\\n     * @notice Withdraw tokens for user\\n     * @param user Address of user to withdraw tokens to\\n     * @param targetTotalBalance Target total balance of user\\n     * @param ws Signatures for withdrawal\\n     */\\n    function withdrawTokens(address user, uint256 targetTotalBalance, WithdrawSignature[] calldata ws) external;\\n}\\n\"\r\n    },\r\n    \"contracts/shop/interfaces/IPaymentGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IKaleCashier } from \\\"../../kale-cashier/interfaces/IKaleCashier.sol\\\";\\n\\ninterface IPaymentGateway {\\n    /**\\n     * @param itemId Shop item id for the item\\n     * @param amount Amount of items to buy\\n     * @param kalePerItem Cost of a single item\\n     */\\n    struct OffchainItem {\\n        string itemId;\\n        uint256 amount;\\n        uint256 kalePerItem;\\n    }\\n\\n    /**\\n     * @dev OnchainItems are grouped by token contract to use batch mint functionality\\n     * @dev itemIds must be in ascending order\\n     * @param itemContract Target NFT/SFT contract that will be minting tokens\\n     * @param itemIds Array ot tokenIds that user will receive\\n     * @param itemAmounts Amount of items user will receive, always 1 for NFT, 1+ for SFT\\n     * @param kalePerItem Cost of a single item\\n     */\\n    struct OnchainItems {\\n        address itemContract;\\n        uint256[] itemIds;\\n        uint256[] itemAmounts;\\n        uint256[] kalePerItem;\\n    }\\n\\n    /**\\n     * @param deadline When the signature will expire\\n     * @param r Signature r value\\n     * @param s Signature s value\\n     * @param v Signature v value\\n     */\\n    struct Signature {\\n        uint256 deadline;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    /**\\n     * @param buyer Address of the buyer\\n     * @param nonce User's purchase nonce\\n     * @param itemId Shop item id for the item\\n     * @param amount Amount of items to buy\\n     * @param kalePerItem Cost of a single item\\n     */\\n    event OffchainPurchase(\\n        address indexed buyer,\\n        uint256 indexed nonce,\\n        string itemId,\\n        uint256 amount,\\n        uint256 kalePerItem\\n    );\\n\\n    /**\\n     * @param buyer Address of the buyer\\n     * @param nonce User's purchase nonce\\n     * @param itemContract Target NFT/SFT contract that will be minting tokens\\n     * @param itemIds Array ot tokenIds that user will receive\\n     * @param itemAmounts Amount of items user will receive, always 1 for NFT, 1+ for SFT\\n     * @param kalePerItem Cost of a single item\\n     */\\n    event OnchainPurchase(\\n        address indexed buyer,\\n        uint256 indexed nonce,\\n        address itemContract,\\n        uint256[] itemIds,\\n        uint256[] itemAmounts,\\n        uint256[] kalePerItem\\n    );\\n\\n    /**\\n     * Buy items onchain\\n     * @param offchainItems Array of offchain items that user wants to buy\\n     * @param onchainItems Array of onchain items (NFT/SFT) that user wants to buy\\n     * @param signatures Signatures that proove that user can buy these items\\n     */\\n    function buyItems(\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems,\\n        Signature[] calldata signatures\\n    ) external;\\n\\n    /**\\n     * Withdraw tokens from cashier and then buy items\\n     * @param targetTotalBalance Check IKaleCashier.withdrawTokens\\n     * @param ws Check IKaleCashier.withdrawTokens\\n     * @param offchainItems Array of offchain items that user wants to buy\\n     * @param onchainItems Array of onchain items (NFT/SFT) that user wants to buy\\n     * @param signatures Signatures that proove that user can buy these items\\n     */\\n    function buyItemsAndWithdrawTokens(\\n        uint256 targetTotalBalance,\\n        IKaleCashier.WithdrawSignature[] calldata ws,\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems,\\n        Signature[] calldata signatures\\n    ) external;\\n\\n    error InvalidDeadline(uint256 signatureId, uint256 signatureDeadline);\\n    error InvalidArrayLength(uint256 id);\\n    error NotEnoughKale(address user, uint256 delta);\\n    error ZeroOffchainItemAmount(uint256 id);\\n    error ZeroOffchainItemCost(uint256 id);\\n    error ZeroOnchainItemAmount(uint256 id, uint256 itemId);\\n    error ZeroOnchainItemCost(uint256 id, uint256 itemId);\\n    error NoItems();\\n}\\n\"\r\n    },\r\n    \"contracts/shop/PaymentGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\nimport { IMinter } from \\\"../token-minter/interfaces/IMinter.sol\\\";\\nimport { DefaultRoles } from \\\"../common/utils/DefaultRoles.sol\\\";\\nimport {\\n    ISignatureVerification,\\n    SignatureVerificationExt\\n} from \\\"../signature-verifier/extensions/SignatureVerificationExt.sol\\\";\\nimport { ArrayUtils } from \\\"../common/utils/ArrayUtils.sol\\\";\\nimport { IKaleCashier } from \\\"../kale-cashier/interfaces/IKaleCashier.sol\\\";\\n\\nimport { IPaymentGateway } from \\\"./interfaces/IPaymentGateway.sol\\\";\\n\\ncontract PaymentGateway is IPaymentGateway, Pausable, EIP712, SignatureVerificationExt {\\n    bytes32 internal constant PURCHASE_TYPEHASH =\\n        keccak256(\\n            \\\"Purchase(address buyer,uint256 nonce,uint256 totalAmount,uint256 deadline,OffchainItem[] offchainItems,OnchainItems[] onchainItems)OffchainItem(string itemId,uint256 amount,uint256 kalePerItem)OnchainItems(address itemContract,uint256[] itemIds,uint256[] itemAmounts,uint256[] kalePerItem)\\\"\\n        );\\n\\n    bytes32 internal constant OFFCHAIN_ITEM_TYPEHASH =\\n        keccak256(\\\"OffchainItem(string itemId,uint256 amount,uint256 kalePerItem)\\\");\\n\\n    bytes32 internal constant ONCHAIN_ITEM_TYPEHASH =\\n        keccak256(\\\"OnchainItems(address itemContract,uint256[] itemIds,uint256[] itemAmounts,uint256[] kalePerItem)\\\");\\n\\n    /**\\n     * @param oldMinter Address of the old minter contract\\n     * @param newMinter Address of the new minter contract\\n     */\\n    event MinterChanged(address oldMinter, address newMinter);\\n\\n    /**\\n     * @param oldCashier Address of the old Kale cashier contract\\n     * @param newCashier Address of the new Kale cashier contract\\n     */\\n    event KaleCashierChanged(address oldCashier, address newCashier);\\n\\n    /**\\n     * @notice Address of the payment token\\n     */\\n    IERC20 public immutable kaleToken;\\n    /**\\n     * @notice Address of the minter contract that is responsible for minting\\n     */\\n    IMinter public minterContract;\\n    /**\\n     * @notice Address of the cashier contract that allows users to withdraw tokens from Vault\\n     */\\n    IKaleCashier public kaleCashier;\\n\\n    /**\\n     * @notice To mitigate replays with the same signatures\\n     */\\n    mapping(address => uint256) public userNonces;\\n\\n    constructor(\\n        IERC20 kaleToken_,\\n        address owner,\\n        address admin,\\n        address signatureVerifier_,\\n        IMinter minterContract_,\\n        IKaleCashier kaleCashier_\\n    )\\n        Pausable()\\n        EIP712(\\\"PaymentGateway\\\", \\\"1\\\")\\n        DefaultRoles(owner, admin, new address[](0))\\n        SignatureVerificationExt(signatureVerifier_)\\n    {\\n        kaleToken = kaleToken_;\\n        minterContract = IMinter(minterContract_);\\n        kaleCashier = kaleCashier_;\\n    }\\n\\n    // Disable receiving eth by plain transfers\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    fallback() external payable {\\n        revert();\\n    }\\n\\n    /**\\n     * @param newMinter Address of the new minter contract\\n     */\\n    function setMinter(IMinter newMinter) external onlyAdmin {\\n        emit MinterChanged(address(minterContract), address(newMinter));\\n        minterContract = newMinter;\\n    }\\n\\n    /**\\n     * @param newKaleCashier Address of the new kale cashier contract\\n     */\\n    function setKaleCashier(IKaleCashier newKaleCashier) external onlyAdmin {\\n        emit KaleCashierChanged(address(kaleCashier), address(newKaleCashier));\\n        kaleCashier = newKaleCashier;\\n    }\\n\\n    /**\\n     * @inheritdoc IPaymentGateway\\n     */\\n    function buyItems(\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems,\\n        Signature[] calldata signatures\\n    ) external override whenNotPaused {\\n        uint256 totalCost = _calculateTotalCostAndCheckZeroCost(offchainItems, onchainItems);\\n        _buyItems(offchainItems, onchainItems, signatures, totalCost);\\n    }\\n\\n    /**\\n     * @inheritdoc IPaymentGateway\\n     */\\n    function buyItemsAndWithdrawTokens(\\n        uint256 targetTotalBalance,\\n        IKaleCashier.WithdrawSignature[] calldata ws,\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems,\\n        Signature[] calldata signatures\\n    ) external override whenNotPaused {\\n        uint256 totalCost = _calculateTotalCostAndCheckZeroCost(offchainItems, onchainItems);\\n\\n        kaleCashier.withdrawTokens(msg.sender, targetTotalBalance, ws);\\n\\n        uint256 balance = kaleToken.balanceOf(msg.sender);\\n        if (balance < totalCost) {\\n            revert NotEnoughKale(msg.sender, balance);\\n        }\\n\\n        _buyItems(offchainItems, onchainItems, signatures, totalCost);\\n    }\\n\\n    /**\\n     * @dev Calculates total cost of the purchase and ensures that no items are sold for 0 kale\\n     * @param offchainItems All of the offchain items in the purchase\\n     * @param onchainItems All of the onchain items in the purchase\\n     */\\n    function _calculateTotalCostAndCheckZeroCost(\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems\\n    ) internal pure returns (uint256 totalCost) {\\n        for (uint256 id = 0; id < offchainItems.length; id++) {\\n            if (offchainItems[id].kalePerItem == 0) {\\n                revert ZeroOffchainItemCost(id);\\n            }\\n            totalCost += offchainItems[id].amount * offchainItems[id].kalePerItem;\\n        }\\n\\n        for (uint256 id = 0; id < onchainItems.length; id++) {\\n            OnchainItems memory oci = onchainItems[id];\\n            for (uint256 itemId = 0; itemId < oci.itemIds.length; itemId++) {\\n                if (oci.kalePerItem[itemId] == 0) {\\n                    revert ZeroOnchainItemCost(id, itemId);\\n                }\\n                totalCost += oci.itemAmounts[itemId] * oci.kalePerItem[itemId];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param offchainItems All of the offchain items in the purchase\\n     * @param onchainItems All of the onchain items in the purchase\\n     * @param signatures Array of signatures validating the transaction\\n     * @param totalCost Total calculated cost of the purchase\\n     */\\n    function _buyItems(\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems,\\n        Signature[] calldata signatures,\\n        uint256 totalCost\\n    ) internal {\\n        if (offchainItems.length == 0 && onchainItems.length == 0) {\\n            revert NoItems();\\n        }\\n\\n        uint256 currentUserNonce = userNonces[msg.sender];\\n        userNonces[msg.sender] = currentUserNonce + 1;\\n\\n        for (uint256 id = 0; id < onchainItems.length; id++) {\\n            OnchainItems memory oci = onchainItems[id];\\n            if (\\n                oci.itemIds.length != oci.itemAmounts.length ||\\n                oci.itemAmounts.length != oci.kalePerItem.length ||\\n                oci.itemIds.length != oci.kalePerItem.length\\n            ) {\\n                revert InvalidArrayLength(id);\\n            }\\n\\n            for (uint256 itemId = 0; itemId < oci.itemAmounts.length; itemId++) {\\n                if (oci.itemAmounts[itemId] == 0) {\\n                    revert ZeroOnchainItemAmount(id, itemId);\\n                }\\n            }\\n\\n            ArrayUtils.revertIfArrayIsNotSorted(oci.itemIds);\\n        }\\n\\n        for (uint256 id = 0; id < offchainItems.length; id++) {\\n            if (offchainItems[id].amount == 0) {\\n                revert ZeroOffchainItemAmount(id);\\n            }\\n            emit OffchainPurchase(\\n                msg.sender,\\n                currentUserNonce,\\n                offchainItems[id].itemId,\\n                offchainItems[id].amount,\\n                offchainItems[id].kalePerItem\\n            );\\n        }\\n\\n        for (uint256 id = 0; id < onchainItems.length; id++) {\\n            OnchainItems memory oci = onchainItems[id];\\n\\n            emit OnchainPurchase(\\n                msg.sender,\\n                currentUserNonce,\\n                oci.itemContract,\\n                oci.itemIds,\\n                oci.itemAmounts,\\n                oci.kalePerItem\\n            );\\n        }\\n\\n        bytes32[] memory hashedTypedData = new bytes32[](signatures.length);\\n        ISignatureVerification.Signature[] memory verificationSignatures = new ISignatureVerification.Signature[](\\n            signatures.length\\n        );\\n\\n        for (uint256 sigId = 0; sigId < signatures.length; sigId++) {\\n            if (signatures[sigId].deadline < block.timestamp) {\\n                revert InvalidDeadline(sigId, signatures[sigId].deadline);\\n            }\\n\\n            hashedTypedData[sigId] = _getTypehash(\\n                currentUserNonce,\\n                totalCost,\\n                signatures[sigId].deadline,\\n                offchainItems,\\n                onchainItems\\n            );\\n            verificationSignatures[sigId] = ISignatureVerification.Signature({\\n                r: signatures[sigId].r,\\n                s: signatures[sigId].s,\\n                v: signatures[sigId].v\\n            });\\n        }\\n\\n        _verifySignatures(verificationSignatures, hashedTypedData);\\n\\n        kaleToken.transferFrom(msg.sender, address(this), totalCost);\\n\\n        if (onchainItems.length != 0) {\\n            address[] memory buyers = new address[](onchainItems.length);\\n            address[] memory tokenAddresses = new address[](onchainItems.length);\\n            uint256[][] memory tokenIds = new uint256[][](onchainItems.length);\\n            uint256[][] memory tokenAmounts = new uint256[][](onchainItems.length);\\n            bytes[] memory datas = new bytes[](onchainItems.length);\\n\\n            for (uint256 id = 0; id < onchainItems.length; id++) {\\n                // Minting without grouping by same item contract\\n                buyers[id] = msg.sender;\\n                tokenAddresses[id] = onchainItems[id].itemContract;\\n                tokenIds[id] = onchainItems[id].itemIds;\\n                tokenAmounts[id] = onchainItems[id].itemAmounts;\\n            }\\n\\n            minterContract.batchMint(tokenAddresses, buyers, tokenIds, tokenAmounts, datas);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get hash of the typed data\\n     * @param nonce User's nonce\\n     * @param totalAmount total cost of the purchase\\n     * @param deadline When the signatures will expire\\n     * @param offchainItems All of the offchain items\\n     * @param onchainItems All of the onchain items\\n     */\\n    function _getTypehash(\\n        uint256 nonce,\\n        uint256 totalAmount,\\n        uint256 deadline,\\n        OffchainItem[] calldata offchainItems,\\n        OnchainItems[] calldata onchainItems\\n    ) internal view returns (bytes32) {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                PURCHASE_TYPEHASH,\\n                msg.sender,\\n                nonce,\\n                totalAmount,\\n                deadline,\\n                _encodeOffchainItems(offchainItems),\\n                _encodeOnchainItems(onchainItems)\\n            )\\n        );\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        return digest;\\n    }\\n\\n    /**\\n     * @dev Get typed hash for offchain items\\n     * @param offchainItems Array of the offchain items\\n     */\\n    function _encodeOffchainItems(OffchainItem[] calldata offchainItems) internal pure returns (bytes32) {\\n        bytes32[] memory offchainItemsEncoding = new bytes32[](offchainItems.length);\\n\\n        for (uint256 id = 0; id < offchainItems.length; id++) {\\n            offchainItemsEncoding[id] = keccak256(\\n                abi.encode(\\n                    OFFCHAIN_ITEM_TYPEHASH,\\n                    keccak256(abi.encodePacked(offchainItems[id].itemId)),\\n                    offchainItems[id].amount,\\n                    offchainItems[id].kalePerItem\\n                )\\n            );\\n        }\\n\\n        return keccak256(abi.encodePacked(offchainItemsEncoding));\\n    }\\n\\n    /**\\n     * @dev Get typed hash for onchain items\\n     * @param onchainItems Array of the onchain items\\n     */\\n    function _encodeOnchainItems(OnchainItems[] calldata onchainItems) internal pure returns (bytes32) {\\n        bytes32[] memory onchainItemsEncoding = new bytes32[](onchainItems.length);\\n\\n        for (uint256 id = 0; id < onchainItems.length; id++) {\\n            onchainItemsEncoding[id] = keccak256(\\n                abi.encode(\\n                    ONCHAIN_ITEM_TYPEHASH,\\n                    onchainItems[id].itemContract,\\n                    keccak256(abi.encodePacked(onchainItems[id].itemIds)),\\n                    keccak256(abi.encodePacked(onchainItems[id].itemAmounts)),\\n                    keccak256(abi.encodePacked(onchainItems[id].kalePerItem))\\n                )\\n            );\\n        }\\n\\n        return keccak256(abi.encodePacked(onchainItemsEncoding));\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the contract\\n     * @dev only callable by the owner\\n     * @param token Address of erc20 token to withdraw\\n     */\\n    function withdrawTokens(address token) external whenNotPaused onlyOwner {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Withdraw ether from the contract\\n     * @dev Plain transfers are fobidden, but this function is left just in case\\n     */\\n    function withdrawEther() external whenPaused onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @notice Pause smart contract\\n    function pause() external whenNotPaused onlyAdmin {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause smart contract\\n    function unpause() external whenPaused onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/signature-verifier/extensions/SignatureVerificationExt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { DefaultRoles } from \\\"../../common/utils/DefaultRoles.sol\\\";\\nimport { ISignatureVerification } from \\\"../interfaces/ISignatureVerification.sol\\\";\\n\\nabstract contract SignatureVerificationExt is DefaultRoles {\\n    event SignatureVerifierChanged(address indexed newSignatureVerifier, address indexed oldSignatureVerifier);\\n    error SignatureVerifierZeroAddress();\\n\\n    ISignatureVerification public signatureVerifier;\\n\\n    /**\\n     *\\n     * @param signatureVerifier_ The address of the signature verifier.\\n     */\\n    constructor(address signatureVerifier_) {\\n        _setSignatureVerifier(signatureVerifier_);\\n    }\\n\\n    function _verifySignatures(\\n        ISignatureVerification.Signature[] memory signerInfo,\\n        bytes32[] memory digests\\n    ) internal {\\n        signatureVerifier.verifySignatures(signerInfo, digests);\\n    }\\n\\n    /**\\n     *\\n     * @param signatureVerifier_ The address of the new signature verifier.\\n     */\\n    function _setSignatureVerifier(address signatureVerifier_) internal {\\n        if (signatureVerifier_ == address(0)) {\\n            revert SignatureVerifierZeroAddress();\\n        }\\n        if (signatureVerifier_ == address(signatureVerifier)) {\\n            return;\\n        }\\n        emit SignatureVerifierChanged(signatureVerifier_, address(signatureVerifier));\\n        signatureVerifier = ISignatureVerification(signatureVerifier_);\\n    }\\n\\n    /**\\n     *\\n     * @param signatureVerifier_ The address of the new signature verifier.\\n     */\\n    function setSignatureVerifier(address signatureVerifier_) external onlyAdmin {\\n        _setSignatureVerifier(signatureVerifier_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/signature-verifier/interfaces/ISignatureVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ISignatureVerification {\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    /**\\n     * @dev Checks if signatures are valid. If some kind of error is detected, it will revert.\\n     * @param signerInfo The signatures of the backend signers.\\n     * @param digests Hashed typed data.\\n     */\\n    function verifySignatures(Signature[] memory signerInfo, bytes32[] memory digests) external returns (bool);\\n\\n    /**\\n     * @dev Returns true if the account is a signer.\\n     * @param account The address to check.\\n     */\\n    function isSigner(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the amount of required signatures.\\n     */\\n    function requiredSignatures() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IMinter {\\n    /******************************************************************************/\\n    /*                   Multiple tokens for multiple receivers                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint multiple tokens for multiple receivers\\n     * @param token address of the token to mint\\n     * @param to Addresses of the receivers\\n     * @param tokenId Array of arrays of token ids to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint multiple tokens for multiple receivers\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][][] calldata tokenId,\\n        uint256[][][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                      Multiple tokens for one receiver                      */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint multiple tokens for a single receiver\\n     * @param token address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Array of token ids to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint multiple tokens for a single receiver\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                        One token for each receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint a single token for multiple receivers\\n     * @param token address of the token to mint\\n     * @param to Addresses of the receivers\\n     * @param tokenId Id of the token to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint a single token for multiple receivers\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                         One token for one receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint a single token for a single receiver\\n     * @param token address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Id of the token to mint\\n     * @param amount Amount of tokens to mint, 0 for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(address token, address to, uint256 tokenId, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev batch mint a single token for a single receiver\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"kaleToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"contract IMinter\",\"name\":\"minterContract_\",\"type\":\"address\"},{\"internalType\":\"contract IKaleCashier\",\"name\":\"kaleCashier_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CannotRemoveSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"}],\"name\":\"FunctionDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signatureDeadline\",\"type\":\"uint256\"}],\"name\":\"InvalidDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoItems\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"NotEnoughKale\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyExecutor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureVerifierZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnsortedArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ZeroOffchainItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ZeroOffchainItemCost\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ZeroOnchainItemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ZeroOnchainItemCost\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCashier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCashier\",\"type\":\"address\"}],\"name\":\"KaleCashierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kalePerItem\",\"type\":\"uint256\"}],\"name\":\"OffchainPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"kalePerItem\",\"type\":\"uint256[]\"}],\"name\":\"OnchainPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSignatureVerifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSignatureVerifier\",\"type\":\"address\"}],\"name\":\"SignatureVerifierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"name\":\"addExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kalePerItem\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymentGateway.OffchainItem[]\",\"name\":\"offchainItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"itemContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"kalePerItem\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPaymentGateway.OnchainItems[]\",\"name\":\"onchainItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct IPaymentGateway.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"buyItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetTotalBalance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct IKaleCashier.WithdrawSignature[]\",\"name\":\"ws\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kalePerItem\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymentGateway.OffchainItem[]\",\"name\":\"offchainItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"itemContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"kalePerItem\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPaymentGateway.OnchainItems[]\",\"name\":\"onchainItems\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct IPaymentGateway.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"buyItemsAndWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kaleCashier\",\"outputs\":[{\"internalType\":\"contract IKaleCashier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kaleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterContract\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"name\":\"revokeExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"revokeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKaleCashier\",\"name\":\"newKaleCashier\",\"type\":\"address\"}],\"name\":\"setKaleCashier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"}],\"name\":\"setSignatureVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureVerifier\",\"outputs\":[{\"internalType\":\"contract ISignatureVerification\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentGateway", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000054013320bf0084479a23fcbcaa40cc04dc30b82000000000000000000000000380ffa08f13a8537192a49b5e2b6ab908b4b121800000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf183500000000000000000000000047dfc29b12b92ab3f36d7abfc0337483324f3bab000000000000000000000000f0a3620368d179b49475928e4602326e870d8b250000000000000000000000008e4f74d19a6488946ce56790f6fbf7e06ae5f4f6", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}