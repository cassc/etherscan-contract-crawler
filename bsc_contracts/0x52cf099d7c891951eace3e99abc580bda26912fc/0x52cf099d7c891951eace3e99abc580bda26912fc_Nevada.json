{"SourceCode": "{\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n  function totalSupply() external view returns (uint256);\\n  function decimals() external view returns (uint8);\\n  function symbol() external view returns (string memory);\\n  function name() external view returns (string memory);\\n  function getOwner() external view returns (address);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IDex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDexFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDexRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\"},\"ISelmaNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISelmaNFT {\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n}\\n\"},\"Nevada.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * .------..------..------..------..------..------.\\n * |N.--. ||E.--. ||V.--. ||A.--. ||D.--. ||A.--. |\\n * | :(): || (\\\\/) || :(): || (\\\\/) || :/\\\\: || (\\\\/) |\\n * | ()() || :\\\\/: || ()() || :\\\\/: || (__) || :\\\\/: |\\n * | \\u0027--\\u0027N|| \\u0027--\\u0027E|| \\u0027--\\u0027V|| \\u0027--\\u0027A|| \\u0027--\\u0027D|| \\u0027--\\u0027A|\\n * `------\\u0027`------\\u0027`------\\u0027`------\\u0027`------\\u0027`------\\u0027\\n *\\n * The first BSC token to feature a reward-based gambling platform.\\n *\\n * https://nevada.casino\\n * https://t.me/NevADAtoken\\n * https://twitter.com/NevADAbsc\\n * https://www.reddit.com/r/NevADAtoken\\n *\\n * In memory of Selma\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDex.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./ISelmaNFT.sol\\\";\\n\\ncontract Nevada is IBEP20 {\\n    address constant OWNER = 0x66B5F1Dd434723C0304514029704d0db5Cc01D4B;\\n    address constant LOTTERY_WALLET = 0xA4143eF8BEFA7c091A14a0a4686d85A47678dc0b;\\n    address constant MARKETING_WALLET = 0xf452E622b99B13992D9491d96D422A7259510383;\\n    address constant DEVELOPMENT_WALLET = 0x32418251Ca2d91774070cFfB00FdA05D26E06f26;\\n    address constant LOCKER = 0xB2c8faaBfC026af5f3C44f46B8454662d03eaDDD;\\n    ISelmaNFT public constant SELMA_NFT = ISelmaNFT(0x824Db8c2Cf7eC655De2A7825f8E9311c8e526523);\\n\\n    bool public swapEnabled = true;\\n    bool public tradingEnabled;\\n    bool _sniperRekt = true;\\n    bool _inSwap;\\n\\n    uint8 constant DECIMALS = 18;\\n    uint256 constant TOTAL_SUPPLY = 10**9 * 10**DECIMALS;\\n    uint256 public swapThreshold = 300000 * 10**DECIMALS;\\n\\n    mapping (address =\\u003e uint256) _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\n\\n    mapping (address =\\u003e bool) public isFeeExempt;\\n    mapping (address =\\u003e bool) public isMarketMaker;\\n\\n    uint256 public lotteryFee = 300;\\n    uint256 public liquidityFee = 200;\\n    uint256 public marketingFee = 200;\\n    uint256 public developmentFee = 200;\\n    uint256 _totalFee = 900;\\n    uint256 constant FEE_DENOMINATOR = 10000;\\n\\n    uint256 public lotteryShare;\\n    uint256 public marketingShare;\\n    uint256 public developmentShare;\\n    uint256 public transferGas = 25000;\\n\\n    IDexRouter public constant ROUTER = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public immutable pair;\\n    address public presale;\\n\\n    event Launch(uint256 timestamp);\\n    event SetFeeExempt(address indexed account, bool indexed exempt);\\n    event SetMarketMaker(address indexed account, bool indexed isMM);\\n    event SetFees(uint256 lottery, uint256 liquidity, uint256 marketing, uint256 development);\\n    event SetSwapBackSettings(bool indexed enabled, uint256 amount);\\n    event UpdateTransferGas(uint256 gas);\\n    event TriggerSwapBack();\\n    event AutoLiquidity(uint256 pair, uint256 tokens);\\n    event Recover(uint256 amount);\\n    event ClaimLottery(uint256 amount);\\n    event ClaimMarketing(uint256 amount);\\n    event ClaimDevelopment(uint256 amount);\\n    event InitPresale(address presale);\\n    event EnableTrading();\\n\\n    modifier swapping() { \\n        _inSwap = true;\\n        _;\\n        _inSwap = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == OWNER);\\n        _;\\n    }\\n\\n    constructor () {\\n        pair = IDexFactory(ROUTER.factory()).createPair(ROUTER.WETH(), address(this));\\n        _allowances[address(this)][address(ROUTER)] = type(uint256).max;\\n\\n        isMarketMaker[pair] = true;\\n        isFeeExempt[OWNER] = true;\\n        isFeeExempt[MARKETING_WALLET] = true;\\n        isFeeExempt[LOTTERY_WALLET] = true;\\n        isFeeExempt[DEVELOPMENT_WALLET] = true;\\n        isFeeExempt[address(this)] = true;\\n\\n        _balances[MARKETING_WALLET] = TOTAL_SUPPLY;\\n        emit Transfer(address(0), MARKETING_WALLET, TOTAL_SUPPLY);\\n    }\\n\\n    // IBEP20\\n\\n    function totalSupply() external pure override returns (uint256) { return TOTAL_SUPPLY; }\\n    function decimals() external pure override returns (uint8) { return DECIMALS; }\\n    function symbol() external pure override returns (string memory) { return \\\"NEVADA\\\"; }\\n    function name() external pure override returns (string memory) { return \\\"Nevada\\\"; }\\n    function getOwner() external pure override returns (address) { return OWNER; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address _owner, address spender) external view override returns (uint256) { return _allowances[_owner][spender]; }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transferFrom(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance \\u003e= amount, \\\"Transfer amount exceeds allowance\\\");\\n\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        return true;\\n    }\\n\\n    // IBEP20 Helpers\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance \\u003e= subtractedValue, \\\"Decreased allowance below zero\\\");\\n\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    // Public\\n\\n    receive() external payable {}\\n\\n    function getTotalFee() public view returns (uint256) {\\n        if(_sniperRekt){ return FEE_DENOMINATOR - 100; }\\n        return _totalFee;\\n    }\\n\\n    // Private\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) private returns (bool) {\\n        if(isFeeExempt[sender] || isFeeExempt[recipient]){ return _basicTransfer(sender, recipient, amount); }\\n        require(tradingEnabled, \\\"Trading disabled\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"Transfer amount exceeds balance\\\");\\n        \\n        if(shouldSwapBack(recipient)){ swapBack(); }\\n\\n        _balances[sender] = senderBalance - amount;\\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\\n        _balances[recipient] += amountReceived;\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function _basicTransfer(address sender, address recipient, uint256 amount) private returns (bool) {\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"Transfer amount exceeds balance\\\");\\n\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(address sender, address recipient) private view returns (bool) {\\n        bool isSell = isMarketMaker[recipient];\\n        bool isBuy = isMarketMaker[sender];\\n        return isBuy || isSell;\\n    }\\n\\n    function takeFee(address sender, address recipient, uint256 amount) private returns (uint256) {\\n        bool isBuy = isMarketMaker[sender];\\n        address initiator = isBuy ? recipient : sender;\\n        uint256 discountMultiplier = selmaTaxDiscount(initiator);\\n\\n        uint256 discountedFee = getTotalFee() - getTotalFee() * discountMultiplier / FEE_DENOMINATOR;\\n        uint256 feeAmount = amount * discountedFee / FEE_DENOMINATOR;\\n\\n        if (feeAmount \\u003e 0) {\\n            _balances[address(this)] += feeAmount;\\n            emit Transfer(sender, address(this), feeAmount);\\n        }\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function selmaTaxDiscount(address account) private view returns (uint256) {\\n        uint256 discountMultiplier;\\n\\n        try SELMA_NFT.balanceOf(account, 1) returns (uint256 platinumBalance) {\\n            if (platinumBalance \\u003e 0) { discountMultiplier = 5000; }\\n        } catch {}\\n\\n        try SELMA_NFT.balanceOf(account, 2) returns (uint256 diamondBalance) {\\n            if (diamondBalance \\u003e 0) { discountMultiplier = FEE_DENOMINATOR; }\\n        } catch {}\\n\\n        return discountMultiplier;\\n    }\\n\\n    function shouldSwapBack(address recipient) private view returns (bool) {\\n        return isMarketMaker[recipient]\\n        \\u0026\\u0026 !_inSwap\\n        \\u0026\\u0026 swapEnabled\\n        \\u0026\\u0026 _balances[address(this)] \\u003e= swapThreshold;\\n    }\\n\\n    function swapBack() private swapping {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = ROUTER.WETH();\\n\\n        uint256 liquidityTokens = swapThreshold * liquidityFee / _totalFee / 2;\\n        uint256 amountToSwap = swapThreshold - liquidityTokens;\\n        uint256 balanceBefore = address(this).balance;\\n\\n        ROUTER.swapExactTokensForETH(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance - balanceBefore;\\n        uint256 totalBNBFee = _totalFee - liquidityFee / 2;\\n\\n        uint256 amountBNBLiquidity = amountBNB * liquidityFee / totalBNBFee / 2;\\n        lotteryShare += amountBNB * lotteryFee / totalBNBFee;\\n        marketingShare += amountBNB * marketingFee / totalBNBFee;\\n        developmentShare += amountBNB * developmentFee / totalBNBFee;\\n\\n        if (liquidityTokens \\u003e 0) {\\n            ROUTER.addLiquidityETH{value: amountBNBLiquidity}(\\n                address(this),\\n                liquidityTokens,\\n                0,\\n                0,\\n                LOCKER,\\n                block.timestamp\\n            );\\n\\n            emit AutoLiquidity(amountBNBLiquidity, liquidityTokens);\\n        }\\n    }\\n\\n    // Claim fees\\n\\n    function claimMarketing() external {\\n        require(msg.sender == MARKETING_WALLET, \\\"Unauthorized caller\\\");\\n\\n        uint256 marketingAmount = marketingShare;\\n        marketingShare = 0;\\n\\n        if (marketingAmount \\u003e 0) {\\n            (bool sent,) = payable(MARKETING_WALLET).call{value: marketingAmount, gas: transferGas}(\\\"\\\");\\n            require(sent, \\\"Tx failed\\\");\\n            \\n            emit ClaimMarketing(marketingAmount);\\n        }\\n    }\\n\\n    function claimLottery() external {\\n        require(msg.sender == LOTTERY_WALLET, \\\"Unauthorized caller\\\");\\n\\n        uint256 lotteryAmount = lotteryShare;\\n        lotteryShare = 0;\\n\\n        if (lotteryAmount \\u003e 0) {\\n            (bool sent,) = payable(LOTTERY_WALLET).call{value: lotteryAmount, gas: transferGas}(\\\"\\\");\\n            require(sent, \\\"Tx failed\\\");\\n            \\n            emit ClaimLottery(lotteryAmount);\\n        }\\n    }\\n\\n    function claimDevelopment() external {\\n        require(msg.sender == DEVELOPMENT_WALLET, \\\"Unauthorized caller\\\");\\n\\n        uint256 developmentAmount = developmentShare;\\n        developmentShare = 0;\\n\\n        if (developmentAmount \\u003e 0) {\\n            (bool sent,) = payable(DEVELOPMENT_WALLET).call{value: developmentAmount, gas: transferGas}(\\\"\\\");\\n            require(sent, \\\"Tx failed\\\");\\n            \\n            emit ClaimDevelopment(developmentAmount);\\n        }\\n    }\\n\\n    function recover() external onlyOwner {\\n        uint256 recoverAmount = address(this).balance - lotteryShare - marketingShare - developmentShare;\\n\\t\\t(bool sent,) = payable(OWNER).call{value: recoverAmount, gas: transferGas}(\\\"\\\");\\n\\t\\trequire(sent, \\\"Tx failed\\\");\\n\\n        emit Recover(recoverAmount);\\n\\t}\\n\\n    // Maintenance\\n\\n    function setIsFeeExempt(address account, bool exempt) external onlyOwner {\\n        require(account != MARKETING_WALLET \\u0026\\u0026 account != OWNER \\u0026\\u0026 account != address(this) \\u0026\\u0026 !isMarketMaker[account]);\\n        isFeeExempt[account] = exempt;\\n        emit SetFeeExempt(account, exempt);\\n    }\\n\\n    function setIsMarketMaker(address account, bool isMM) external onlyOwner {\\n        require(account != pair);\\n        isMarketMaker[account] = isMM;\\n        emit SetMarketMaker(account, isMM);\\n    }\\n\\n    function setFees(\\n        uint256 _lotteryFee,\\n        uint256 _liquidityFee,\\n        uint256 _marketingFee,\\n        uint256 _developmentFee\\n    ) external onlyOwner {\\n        lotteryFee = _lotteryFee;\\n        liquidityFee = _liquidityFee;\\n        marketingFee = _marketingFee;\\n        developmentFee = _developmentFee;\\n        _totalFee = lotteryFee + liquidityFee + marketingFee + developmentFee;\\n        require(_totalFee \\u003c= 1500);\\n\\n        emit SetFees(lotteryFee, liquidityFee, marketingFee, developmentFee);\\n    }\\n\\n    function setSwapBackSettings(bool enabled, uint256 amount) external onlyOwner {\\n        uint256 tokenAmount = amount * 10**DECIMALS;\\n        swapEnabled = enabled;\\n        swapThreshold = tokenAmount;\\n        emit SetSwapBackSettings(enabled, amount);\\n    }\\n\\n    function updateTransferGas(uint256 newGas) external onlyOwner {\\n        require(newGas \\u003e= 21000 \\u0026\\u0026 newGas \\u003c= 100000);\\n        \\n        transferGas = newGas;\\n        emit UpdateTransferGas(newGas);\\n    }\\n\\n    function triggerSwapBack() external onlyOwner {\\n        swapBack();\\n        emit TriggerSwapBack();\\n    }\\n\\n    function removeSniperRekt() external onlyOwner {\\n        _sniperRekt = false;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n        emit EnableTrading();\\n    }\\n\\n    function initPresale(address newPresale) external onlyOwner {\\n        require(presale == address(0), \\\"Presale is already initialized\\\");\\n\\n        presale = newPresale;\\n        isFeeExempt[presale] = true;\\n        emit InitPresale(presale);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pair\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDevelopment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"InitPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lottery\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isMM\",\"type\":\"bool\"}],\"name\":\"SetMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferGas\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELMA_NFT\",\"outputs\":[{\"internalType\":\"contract ISelmaNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDevelopment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPresale\",\"type\":\"address\"}],\"name\":\"initPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeSniperRekt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMM\",\"type\":\"bool\"}],\"name\":\"setIsMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"updateTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nevada", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e949e32bff31de1faf7ca804c158f9ff82fd88a97c4845744d329cdf9e4d6ec"}