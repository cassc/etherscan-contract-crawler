{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBRC20Factory {\r\n    function parameters() external view returns (string memory name, string memory symbol, uint8 decimals);\r\n}\r\n\r\ncontract BRC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n    address public immutable factory;\r\n    uint256  public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping(address => uint256)) public allowance;\r\n    mapping (address => uint256) public nonces;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() {\r\n        (name, symbol, decimals) = IBRC20Factory(msg.sender).parameters();\r\n\r\n        factory = msg.sender;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes('1')), chainId, address(this)));\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external {\r\n        require(msg.sender == factory, \"unauthorized\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(msg.sender == factory, \"unauthorized\");\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender];\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'EXPIRED');\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    '\\x19\\x01',\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        totalSupply += amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\ncontract BRC20Factory  {\r\n\r\n    bytes32 private constant DOMAIN_NAME = keccak256(\"MultiBit\");\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant MINT_TYPEHASH = keccak256(abi.encodePacked(\"Mint(address token,address to,uint256 amount,string txid)\"));\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    struct Parameters {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n    }\r\n\r\n    bool private entered;\r\n    Parameters public parameters;\r\n    address public owner;\r\n    uint256 public fee;\r\n    address[] public signers;\r\n    mapping (address => bool) public authorized;\r\n    mapping (address => uint256) public indexes;\r\n    mapping (bytes32 => bool) public used;\r\n\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    event FeeChanged(uint256 indexed oldFee, uint256 indexed newFee);\r\n\r\n    event BRC20Created(address indexed sender, address indexed dog20);\r\n\r\n    event Minted(address indexed token, address indexed to, uint256 indexed amount, string txid);\r\n\r\n    event Burned(address indexed token, address indexed from, uint256 indexed amount, uint256 fee, string receiver);\r\n    \r\n    event SignerAdded(address indexed sender, address indexed account);\r\n\r\n    event SignerRemoved(address indexed sender, address indexed account);\r\n\r\n    modifier nonReentrant() {\r\n        require(!entered, \"REENTRANT\");\r\n        entered = true;\r\n        _;\r\n        entered = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _signers) {\r\n        for (uint256 i = 0; i < _signers.length; i++) {\r\n            address _addr = _signers[i];\r\n            signers.push(_addr);\r\n            authorized[_addr] = true;\r\n            indexes[_addr] = i;\r\n        }\r\n\r\n        owner = msg.sender;\r\n        emit OwnerChanged(address(0), msg.sender);\r\n\r\n        fee = 0.01 ether;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, DOMAIN_NAME, keccak256(bytes('1')), chainId, address(this)));\r\n    }\r\n\r\n    function createBRC20(string memory name, string memory symbol, uint8 decimals) external onlyOwner returns (address brc20) {\r\n        parameters = Parameters({name: name, symbol: symbol, decimals: decimals});\r\n        brc20 = address(new BRC20{salt: keccak256(abi.encode(name, symbol, decimals))}());\r\n        delete parameters;\r\n        emit BRC20Created(msg.sender, brc20);\r\n    }\r\n\r\n    function mint(address token, address to, uint256 amount, string memory txid, uint8[] memory v, bytes32[] memory r, bytes32[] memory s) external nonReentrant {\r\n        require(v.length == signers.length, \"invalid signatures\");\r\n\r\n        bytes32 digest = buildMintSeparator(token, to, amount, txid);\r\n        require(!used[digest], \"reuse\");\r\n        used[digest] = true;\r\n\r\n        address[] memory signatures = new address[](v.length);\r\n        for (uint256 i = 0; i < v.length; i++) {\r\n            address signer = ecrecover(digest, v[i], r[i], s[i]);\r\n            require(authorized[signer], \"invalid signer\");\r\n            for (uint256 j = 0; j < i; j++) {\r\n                require(signatures[j] != signer, \"duplicated\");\r\n            }\r\n            signatures[i] = signer;\r\n        }\r\n\r\n        BRC20(token).mint(to, amount);\r\n\r\n        emit Minted(token, to, amount, txid);\r\n    }\r\n\r\n    function burn(address token, uint256 amount, string memory receiver) external payable nonReentrant {\r\n        require(msg.value >= fee, \"invalid ether\");\r\n\r\n        BRC20(token).transferFrom(msg.sender, address(this), amount);\r\n        BRC20(token).burn(amount);\r\n\r\n        emit Burned(token, msg.sender, amount, fee, receiver);\r\n    }\r\n\r\n    function withdraw(address to) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(to).transfer(balance);\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        emit OwnerChanged(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        emit FeeChanged(fee, _fee);\r\n        fee = _fee;\r\n    }\r\n\r\n    function addSigner(address account) external onlyOwner {\r\n        require(!authorized[account], \"already exists\");\r\n\r\n        indexes[account] = signers.length;\r\n        authorized[account] = true;\r\n        signers.push(account);\r\n\r\n        emit SignerAdded(msg.sender, account);\r\n    }\r\n\r\n    function removeSigner(address account) external onlyOwner {\r\n        require(authorized[account], \"non-existent\");\r\n        require(indexes[account] < signers.length, \"index out of range\");\r\n\r\n        uint256 index = indexes[account];\r\n        uint256 lastIndex = signers.length - 1;\r\n\r\n        if (index != lastIndex) {\r\n            address lastAddr = signers[lastIndex];\r\n            signers[index] = lastAddr;\r\n            indexes[lastAddr] = index;\r\n        }\r\n\r\n        delete authorized[account];\r\n        delete indexes[account];\r\n        signers.pop();\r\n\r\n        emit SignerRemoved(msg.sender, account);\r\n    }\r\n\r\n    function buildMintSeparator(address token, address to, uint256 amount, string memory txid) view public returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n            '\\x19\\x01',\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(abi.encode(MINT_TYPEHASH, token, to, amount, keccak256(bytes(txid))))\r\n        ));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dog20\",\"type\":\"address\"}],\"name\":\"BRC20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"buildMintSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createBRC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"brc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BRC20Factory", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000009e19b52caa8c86568b2d2b43e981caf4be1dd67e000000000000000000000000b87f548fe0cfd057605e6c59283c8bd436554006000000000000000000000000a998f18fb5fe798a8f85574362eb9cad9204b43e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6078ee4ac9049f8143bd6ff4d091bba6f2a22825dddfdc2ebaeccdefec5e176"}