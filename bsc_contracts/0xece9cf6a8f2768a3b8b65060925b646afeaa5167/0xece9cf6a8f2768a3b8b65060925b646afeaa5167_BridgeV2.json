{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/BridgeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IBridgeV2.sol\\\";\\nimport \\\"../utils/Block.sol\\\";\\nimport \\\"../utils/Bls.sol\\\";\\nimport \\\"../utils/Merkle.sol\\\";\\nimport \\\"../utils/RequestIdChecker.sol\\\";\\nimport \\\"../utils/Typecast.sol\\\";\\n\\n\\ncontract BridgeV2 is IBridgeV2, AccessControlEnumerable, Typecast, ReentrancyGuard {\\n    \\n    using Address for address;\\n    using Bls for Bls.Epoch;\\n\\n    /// @dev gate keeper role id\\n    bytes32 public constant GATEKEEPER_ROLE = keccak256(\\\"GATEKEEPER_ROLE\\\");\\n    /// @dev validator role id\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n    /// @dev operator role id\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @dev human readable version\\n    string public version;\\n    /// @dev current state Active\\\\Inactive\\n    State public state;\\n    /// @dev nonces\\n    mapping(address => uint256) public nonces;\\n    /// @dev received request IDs against relay\\n    RequestIdChecker public currentRequestIdChecker;\\n    /// @dev received request IDs against relay\\n    RequestIdChecker public previousRequestIdChecker;\\n    // current epoch\\n    Bls.Epoch internal currentEpoch;\\n    // previous epoch\\n    Bls.Epoch internal previousEpoch;\\n\\n    event EpochUpdated(bytes key, uint32 epochNum, uint64 protocolVersion);\\n\\n    event RequestSent(\\n        bytes32 requestId,\\n        bytes data,\\n        address to,\\n        uint64 chainIdTo\\n    );\\n\\n    event RequestReceived(bytes32 requestId, string error);\\n\\n    event StateSet(State state);\\n\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        version = \\\"2.2.3\\\";\\n        currentRequestIdChecker = new RequestIdChecker();\\n        previousRequestIdChecker = new RequestIdChecker();\\n        state = State.Inactive;\\n    }\\n\\n    /**\\n     * @dev Get current epoch.\\n     */\\n    function getCurrentEpoch() public view returns (bytes memory, uint8, uint32) {\\n        return (abi.encode(currentEpoch.publicKey), currentEpoch.participantsCount, currentEpoch.epochNum);\\n    }\\n\\n    /**\\n     * @dev Get previous epoch.\\n     */\\n    function getPreviousEpoch() public view returns (bytes memory, uint8, uint32) {\\n        return (abi.encode(previousEpoch.publicKey), previousEpoch.participantsCount, previousEpoch.epochNum);\\n    }\\n\\n    /**\\n     * @dev Updates current epoch.\\n     *\\n     * @param params ReceiveParams struct.\\n     */\\n    function updateEpoch(ReceiveParams calldata params) external onlyRole(VALIDATOR_ROLE) {\\n        // TODO ensure that new epoch really next one after previous (by hash)\\n        bytes memory payload = Merkle.prove(params.merkleProof, Block.txRootHash(params.blockHeader));\\n        (uint64 newEpochProtocolVersion, uint32 newEpochNum, bytes memory newKey, uint8 newParticipantsCount) = Block\\n            .decodeEpochUpdate(payload);\\n\\n        require(currentEpoch.epochNum + 1 == newEpochNum, \\\"Bridge: wrong epoch number\\\");\\n    \\n        // TODO remove if when resetEpoch will be removed\\n        if (currentEpoch.isSet()) {\\n            verifyEpoch(currentEpoch, params);\\n            rotateEpoch();\\n        }\\n\\n        // TODO ensure that new epoch really next one after previous (prev hash + params.blockHeader)\\n        bytes32 newHash = sha256(params.blockHeader);\\n        currentEpoch.update(newKey, newParticipantsCount, newEpochNum, newHash);\\n\\n        onEpochStart(newEpochProtocolVersion);\\n    }\\n\\n    /**\\n     * @dev Forcefully reset epoch on all chains.\\n     */\\n    function resetEpoch() public onlyRole(OPERATOR_ROLE) {\\n        // TODO consider to remove any possible manipulations from protocol\\n        if (currentEpoch.isSet()) {\\n            rotateEpoch();\\n            currentEpoch.epochNum = previousEpoch.epochNum + 1;\\n        } else {\\n            currentEpoch.epochNum = currentEpoch.epochNum + 1;\\n        }\\n        onEpochStart(0);\\n    }\\n\\n    /**\\n     * @dev Send crosschain request v2.\\n     *\\n     * @param params struct with requestId, data, receiver and opposite cahinId\\n     * @param from sender's address\\n     * @param nonce sender's nonce\\n     */\\n    function sendV2(\\n        SendParams calldata params,\\n        address from,\\n        uint256 nonce\\n    ) external override onlyRole(GATEKEEPER_ROLE) returns (bool) {\\n        require(state == State.Active, \\\"Bridge: state inactive\\\");\\n        require(previousEpoch.isSet() || currentEpoch.isSet(), \\\"Bridge: epoch not set\\\");\\n    \\n        verifyAndUpdateNonce(from, nonce);\\n\\n        emit RequestSent(\\n            params.requestId,\\n            params.data,\\n            params.to,\\n            uint64(params.chainIdTo)\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Receive (batch) crosschain request v2.\\n     *\\n     * @param params array with ReceiveParams structs.\\n     */\\n    function receiveV2(ReceiveParams[] calldata params) external override onlyRole(VALIDATOR_ROLE) nonReentrant returns (bool) {\\n        require(state != State.Inactive, \\\"Bridge: state inactive\\\");\\n\\n        for (uint256 i = 0; i < params.length; ++i) {\\n            bytes32 epochHash = Block.epochHash(params[i].blockHeader);\\n\\n            // verify the block signature\\n            if (epochHash == currentEpoch.epochHash) {\\n                require(currentEpoch.isSet(), \\\"Bridge: epoch not set\\\");\\n                verifyEpoch(currentEpoch, params[i]);\\n            } else if (epochHash == previousEpoch.epochHash) {\\n                require(previousEpoch.isSet(), \\\"Bridge: epoch not set\\\");\\n                verifyEpoch(previousEpoch, params[i]);\\n            } else {\\n                revert(\\\"Bridge: wrong epoch\\\");\\n            }\\n\\n            // verify that the transaction is really in the block\\n            bytes memory payload = Merkle.prove(params[i].merkleProof, Block.txRootHash(params[i].blockHeader));\\n\\n            // get call data\\n            (bytes32 requestId, bytes memory receivedData, address to, uint64 chainIdTo) = Block.decodeRequest(payload);\\n            require(chainIdTo == block.chainid, \\\"Bridge: wrong chain id\\\");\\n\\n            require(to.isContract(), \\\"Bridge: receiver is not a contract\\\");\\n\\n            bool isRequestIdUniq;\\n            if (epochHash == currentEpoch.epochHash) {\\n                isRequestIdUniq = currentRequestIdChecker.check(requestId);\\n            } else {\\n                isRequestIdUniq = previousRequestIdChecker.check(requestId);\\n            }\\n\\n            string memory err;\\n            \\n            if (isRequestIdUniq) {\\n                (bytes memory data, bytes memory check) = abi.decode(receivedData, (bytes, bytes));\\n                bytes memory result = to.functionCall(check);\\n                require(abi.decode(result, (bool)), \\\"Bridge: check failed\\\");\\n                \\n                to.functionCall(data, \\\"Bridge: receive failed\\\");\\n            } else {\\n                revert(\\\"Bridge: request id already seen\\\");\\n            }\\n\\n            emit RequestReceived(requestId, err);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Set new state.\\n     *\\n     * @param state_ Active\\\\Inactive state\\n     */\\n    function setState(State state_) external onlyRole(OPERATOR_ROLE) {\\n        state = state_;\\n        emit StateSet(state);\\n    }\\n\\n    /**\\n     * @dev Verifies epoch.\\n     *\\n     * @param epoch current or previous epoch;\\n     * @param params oracle tx params\\n     */\\n    function verifyEpoch(Bls.Epoch storage epoch, ReceiveParams calldata params) internal view {\\n        Block.verify(\\n            epoch,\\n            params.blockHeader,\\n            params.votersPubKey,\\n            params.votersSignature,\\n            params.votersMask\\n        );\\n    }\\n\\n    /**\\n     * @dev Verifies and updates the sender's nonce.\\n     *\\n     * @param from sender's address\\n     * @param nonce provided nonce\\n     */\\n    function verifyAndUpdateNonce(address from, uint256 nonce) internal {\\n        require(nonces[from]++ == nonce, \\\"Bridge: nonce mismatch\\\");\\n    }\\n\\n    /**\\n     * @dev Moves current epoch and current request filter to previous.\\n     */\\n    function rotateEpoch() internal {\\n        previousEpoch = currentEpoch;\\n        Bls.Epoch memory epoch;\\n        currentEpoch = epoch;\\n        previousRequestIdChecker.destroy();\\n        previousRequestIdChecker = currentRequestIdChecker;\\n        currentRequestIdChecker = new RequestIdChecker();\\n    }\\n\\n    /**\\n     * @dev Hook on start new epoch.\\n     */\\n    function onEpochStart(uint64 protocolVersion_) internal virtual {\\n        emit EpochUpdated(abi.encode(currentEpoch.publicKey), currentEpoch.epochNum, protocolVersion_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridgeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity ^0.8.17;\\n\\ninterface IBridgeV2 {\\n\\n    enum State { \\n        Active, // data send and receive possible\\n        Inactive, // data send and receive impossible\\n        Limited // only data receive possible\\n    }\\n\\n    struct SendParams {\\n        /// @param requestId unique request ID\\n        bytes32 requestId;\\n        /// @param data call data\\n        bytes data;\\n        /// @param to receiver contract address\\n        address to;\\n        /// @param chainIdTo destination chain ID\\n        uint256 chainIdTo;\\n    }\\n\\n    struct ReceiveParams {\\n        /// @param blockHeader block header serialization\\n        bytes blockHeader;\\n        /// @param merkleProof OracleRequest transaction payload and its Merkle audit path\\n        bytes merkleProof;\\n        /// @param votersPubKey aggregated public key of the old epoch participants, who voted for the block\\n        bytes votersPubKey;\\n        /// @param votersSignature aggregated signature of the old epoch participants, who voted for the block\\n        bytes votersSignature;\\n        /// @param votersMask bitmask of epoch participants, who voted, among all participants\\n        uint256 votersMask;\\n    }\\n\\n    function sendV2(\\n        SendParams calldata params,\\n        address sender,\\n        uint256 nonce\\n    ) external returns (bool);\\n\\n    function receiveV2(ReceiveParams[] calldata params) external returns (bool);\\n\\n    function nonces(address from) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Block.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\nimport \\\"../utils/Bls.sol\\\";\\nimport \\\"../utils/Utils.sol\\\";\\nimport \\\"../utils/ZeroCopySource.sol\\\";\\n\\nlibrary Block {\\n\\n    function txRootHash(bytes calldata payload) internal pure returns (bytes32 txRootHash_) {\\n        txRootHash_ = Utils.bytesToBytes32(payload[72:104]);\\n    }\\n\\n    function epochHash(bytes calldata payload) internal pure returns (bytes32 epochHash_) {\\n        epochHash_ = Utils.bytesToBytes32(payload[40:72]);\\n    }\\n\\n    function decodeRequest(bytes memory payload) internal pure returns (\\n        bytes32 requestId,\\n        bytes memory data,\\n        address to,\\n        uint64 chainIdTo\\n    ) {\\n        uint256 off = 0;\\n        (requestId, off) = ZeroCopySource.NextHash(payload, off);\\n        (chainIdTo, off) = ZeroCopySource.NextUint64(payload, off);\\n        (to, off) = ZeroCopySource.NextAddress(payload, off);\\n        (data, off) = ZeroCopySource.NextVarBytes(payload, off);\\n    }\\n\\n    function decodeEpochUpdate(bytes memory payload) internal pure returns (\\n        uint64 newEpochVersion,\\n        uint32 newEpochNum,\\n        bytes memory newKey,\\n        uint8 newEpochParticipantsCount\\n    ) {\\n        uint256 off = 0;\\n        (newEpochVersion, off) = ZeroCopySource.NextUint64(payload, off);\\n        (newEpochNum, off) = ZeroCopySource.NextUint32(payload, off);\\n        (newEpochParticipantsCount, off) = ZeroCopySource.NextUint8(payload, off);\\n        (newKey, off) = ZeroCopySource.NextVarBytes(payload, off);\\n    }\\n\\n    function verify(\\n        Bls.Epoch memory epoch,\\n        bytes calldata blockHeader,\\n        bytes calldata votersPubKey,\\n        bytes calldata votersSignature,\\n        uint256 votersMask\\n    ) internal view {\\n        require(popcnt(votersMask) > (uint256(epoch.participantsCount) * 2) / 3, \\\"Block: not enough participants\\\");\\n        require(epoch.participantsCount == 255 || votersMask < (1 << epoch.participantsCount), \\\"Block: bitmask too big\\\");\\n        require(\\n            Bls.verifyMultisig(epoch, votersPubKey, blockHeader, votersSignature, votersMask),\\n            \\\"Block: multisig mismatch\\\"\\n        );\\n    }\\n\\n    function popcnt(uint256 mask) internal pure returns (uint256 cnt) {\\n        cnt = 0;\\n        while (mask != 0) {\\n            mask = mask & (mask - 1);\\n            cnt++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Bls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) ConsenSys\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\nimport \\\"./ModUtils.sol\\\";\\n\\n/**\\n * @title Verify BLS Threshold Signed values.\\n *\\n * Much of the code in this file is derived from here:\\n * https://github.com/ConsenSys/gpact/blob/main/common/common/src/main/solidity/BlsSignatureVerification.sol\\n * https://github.com/ConsenSys/gpact/blob/main/contracts/contracts/src/common/BlsSignatureVerification.sol\\n */\\nlibrary Bls {\\n    using ModUtils for uint256;\\n\\n    struct E1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    /**\\n     * @dev Note that the ordering of the elements in each array needs to be the reverse of what you would\\n     * normally have, to match the ordering expected by the precompile.\\n     */\\n    struct E2Point {\\n        uint256[2] x;\\n        uint256[2] y;\\n    }\\n\\n    /**\\n     * @dev P is a prime over which we form a basic field;\\n     * taken from go-ethereum/crypto/bn256/cloudflare/constants.go.\\n     */\\n    uint256 constant P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct Epoch {\\n        /// @param sum of all participant public keys\\n        E2Point publicKey;\\n        /// @param // sum of H(Pub, i) hashes of all participants indexes\\n        E1Point precomputedSum;\\n        /// @param // participants count contributed to the epochKey\\n        uint8 participantsCount;\\n        /// @param epoch number\\n        uint32 epochNum;\\n        /// @param epoch hash\\n        bytes32 epochHash;\\n    }\\n\\n    /**\\n     * @dev Tests that epoch is set or zero.\\n     */\\n    function isSet(Epoch memory epoch) internal pure returns (bool) {\\n        return epoch.publicKey.x[0] != 0 || epoch.publicKey.x[1] != 0;\\n    }\\n\\n    /**\\n     * @dev Reset the epoch.\\n     */\\n    function reset(Epoch storage epoch) internal {\\n        epoch.publicKey.x[0] = 0;\\n        epoch.publicKey.x[1] = 0;\\n        epoch.precomputedSum.x = 0;\\n        epoch.epochHash = 0;\\n        epoch.participantsCount = 0;\\n    }\\n\\n    /**\\n     * @dev Update epoch and precompute epoch sum as if all participants signed.\\n     *\\n     * @param epoch_ current epoch to update;\\n     * @param epochPublicKey sum of all participant public keys;\\n     * @param epochParticipantsCount number of participants;\\n     * @param epochNum number of participants;\\n     * @param epochHash epoch hash.\\n     */\\n    function update(\\n        Epoch storage epoch_,\\n        bytes memory epochPublicKey,\\n        uint8 epochParticipantsCount,\\n        uint32 epochNum,\\n        bytes32 epochHash\\n    ) internal {\\n        E2Point memory pub = decodeE2Point(epochPublicKey);\\n        E1Point memory sum = E1Point(0, 0);\\n        uint256 index = 0;\\n        bytes memory buf = abi.encodePacked(pub.x, pub.y, index);\\n        while (index < epochParticipantsCount) {\\n            assembly {\\n                mstore(add(buf, 160), index)\\n            } // overwrite index field, same as buf[128] = index\\n            sum = addCurveE1(sum, hashToCurveE1(buf));\\n            index++;\\n        }\\n        epoch_.publicKey = pub;\\n        epoch_.precomputedSum = sum;\\n        epoch_.participantsCount = epochParticipantsCount;\\n        epoch_.epochNum = epochNum;\\n        epoch_.epochHash = epochHash;\\n    }\\n\\n    /**\\n     * @dev Checks if the BLS multisignature is valid in the current epoch.\\n     *\\n     * @param epoch_ current epoch;\\n     * @param partPublicKey Sum of participated public keys;\\n     * @param message Message that was signed;\\n     * @param partSignature Signature over the message;\\n     * @param signersBitmask Bitmask of participants in this signature;\\n     * @return True if the message was correctly signed by the given participants.\\n     */\\n    function verifyMultisig(\\n        Epoch memory epoch_,\\n        bytes memory partPublicKey,\\n        bytes memory message,\\n        bytes memory partSignature,\\n        uint256 signersBitmask\\n    ) internal view returns (bool) {\\n        E1Point memory sum = epoch_.precomputedSum;\\n        uint256 index = 0;\\n        uint256 mask = 1;\\n        bytes memory buf = abi.encodePacked(epoch_.publicKey.x, epoch_.publicKey.y, index);\\n        while (index < epoch_.participantsCount) {\\n            if (signersBitmask & mask == 0) {\\n                assembly {\\n                    mstore(add(buf, 160), index)\\n                } // overwrite index field, same as buf[128] = index\\n                sum = addCurveE1(sum, negate(hashToCurveE1(buf)));\\n            }\\n            mask <<= 1;\\n            index++;\\n        }\\n\\n        E1Point[] memory e1points = new E1Point[](3);\\n        E2Point[] memory e2points = new E2Point[](3);\\n        e1points[0] = negate(decodeE1Point(partSignature));\\n        e1points[1] = hashToCurveE1(abi.encodePacked(epoch_.publicKey.x, epoch_.publicKey.y, message));\\n        e1points[2] = sum;\\n        e2points[0] = G2();\\n        e2points[1] = decodeE2Point(partPublicKey);\\n        e2points[2] = epoch_.publicKey;\\n        return pairing(e1points, e2points);\\n    }\\n\\n    /**\\n     * @return The generator of E1.\\n     */\\n    function G1() private pure returns (E1Point memory) {\\n        return E1Point(1, 2);\\n    }\\n\\n    /**\\n     * @return The generator of E2.\\n     */\\n    function G2() private pure returns (E2Point memory) {\\n        return E2Point({\\n            x: [\\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\\n            ],\\n            y: [\\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\\n            ]\\n        });\\n    }\\n\\n    /**\\n     * Negate a point: Assuming the point isn't at infinity, the negation is same x value with -y.\\n     *\\n     * @dev Negates a point in E1;\\n     * @param _point Point to negate;\\n     * @return The negated point.\\n     */\\n    function negate(E1Point memory _point) private pure returns (E1Point memory) {\\n        if (isAtInfinity(_point)) {\\n            return E1Point(0, 0);\\n        }\\n        return E1Point(_point.x, P - (_point.y % P));\\n    }\\n\\n    /**\\n     * Computes the pairing check e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *\\n     * @param _e1points List of points in E1;\\n     * @param _e2points List of points in E2;\\n     * @return True if pairing check succeeds.\\n     */\\n    function pairing(E1Point[] memory _e1points, E2Point[] memory _e2points) private view returns (bool) {\\n        require(_e1points.length == _e2points.length, \\\"Bls: point count mismatch\\\");\\n\\n        uint256 elements = _e1points.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = _e1points[i].x;\\n            input[i * 6 + 1] = _e1points[i].y;\\n            input[i * 6 + 2] = _e2points[i].x[0];\\n            input[i * 6 + 3] = _e2points[i].x[1];\\n            input[i * 6 + 4] = _e2points[i].y[0];\\n            input[i * 6 + 5] = _e2points[i].y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n        assembly {\\n            // Start at memory offset 0x20 rather than 0 as input is a variable length array.\\n            // Location 0 is the length field.\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n        }\\n        // The pairing operation will fail if the input data isn't the correct size (this won't happen\\n        // given the code above), or if one of the points isn't on the curve.\\n        require(success, \\\"Bls: pairing operation failed\\\");\\n        return out[0] != 0;\\n    }\\n\\n    /**\\n     * @dev Checks if the point is the point at infinity.\\n     *\\n     * @param _point a point on E1;\\n     * @return true if the point is the point at infinity.\\n     */\\n    function isAtInfinity(E1Point memory _point) private pure returns (bool) {\\n        return (_point.x == 0 && _point.y == 0);\\n    }\\n\\n    /**\\n     * @dev Hash a byte array message, m, and map it deterministically to a point on G1.\\n     * Note that this approach was chosen for its simplicity /\\n     * lower gas cost on the EVM, rather than good distribution of points on G1.\\n     */\\n    function hashToCurveE1(bytes memory m) internal view returns (E1Point memory) {\\n        bytes32 h = sha256(m);\\n        uint256 x = uint256(h) % P;\\n        uint256 y;\\n\\n        while (true) {\\n            y = YFromX(x);\\n            if (y > 0) {\\n                return E1Point(x, y);\\n            }\\n            x += 1;\\n        }\\n        revert(\\\"hashToCurveE1: unreachable end point\\\");\\n    }\\n\\n    /**\\n     * @dev g1YFromX computes a Y value for a G1 point based on an X value.\\n     * This computation is simply evaluating the curve equation for Y on a given X,\\n     * and allows a point on the curve to be represented by just an X value + a sign bit.\\n     */\\n    function YFromX(uint256 x) internal view returns (uint256) {\\n        return ((x.modExp(3, P) + 3) % P).modSqrt(P);\\n    }\\n\\n    /**\\n     * @dev return the sum of two points of G1.\\n     */\\n    function addCurveE1(E1Point memory _p1, E1Point memory _p2) internal view returns (E1Point memory res) {\\n        uint256[4] memory input;\\n        input[0] = _p1.x;\\n        input[1] = _p1.y;\\n        input[2] = _p2.x;\\n        input[3] = _p2.y;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0x80, res, 0x40)\\n        }\\n        require(success, \\\"Bls: add points failed\\\");\\n    }\\n\\n    function decodeE1Point(bytes memory _sig) internal pure returns (E1Point memory signature) {\\n        uint256 sigx;\\n        uint256 sigy;\\n        assembly {\\n            sigx := mload(add(_sig, 0x20))\\n            sigy := mload(add(_sig, 0x40))\\n        }\\n        signature.x = sigx;\\n        signature.y = sigy;\\n    }\\n\\n    function decodeE2Point(bytes memory _pubKey) internal pure returns (E2Point memory pubKey) {\\n        uint256 x1;\\n        uint256 x2;\\n        uint256 y1;\\n        uint256 y2;\\n        assembly {\\n            x1 := mload(add(_pubKey, 0x20))\\n            x2 := mload(add(_pubKey, 0x40))\\n            y1 := mload(add(_pubKey, 0x60))\\n            y2 := mload(add(_pubKey, 0x80))\\n        }\\n        pubKey.x[0] = x1;\\n        pubKey.x[1] = x2;\\n        pubKey.y[0] = y1;\\n        pubKey.y[1] = y2;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\nimport \\\"./ZeroCopySource.sol\\\";\\n\\nlibrary Merkle {\\n    /** @notice Do hash leaf as the multi-chain does.\\n     *\\n     *  @param data_ Data in bytes format;\\n     *  @return result Hashed value in bytes32 format.\\n     */\\n    function hashLeaf(bytes memory data_) internal pure returns (bytes32 result) {\\n        result = sha256(abi.encodePacked(uint8(0x0), data_));\\n    }\\n\\n    /** @notice Do hash children as the multi-chain does.\\n     *\\n     *  @param l_ Left node;\\n     *  @param r_ Right node;\\n     *  @return result Hashed value in bytes32 format.\\n     */\\n    function hashChildren(bytes32 l_, bytes32 r_) internal pure returns (bytes32 result) {\\n        result = sha256(abi.encodePacked(bytes1(0x01), l_, r_));\\n    }\\n\\n    /** @notice Verify merkle proove.\\n     *\\n     *  @param auditPath_ Merkle path;\\n     *  @param root_ Merkle tree root;\\n     *  @return The verified value included in auditPath_.\\n     */\\n    function prove(bytes memory auditPath_, bytes32 root_) internal pure returns (bytes memory) {\\n        uint256 off = 0;\\n        bytes memory value;\\n        (value, off) = ZeroCopySource.NextVarBytes(auditPath_, off);\\n\\n        bytes32 hash = hashLeaf(value);\\n        uint256 size = (auditPath_.length - off) / 33; // 33 = sizeof(uint256) + 1\\n        bytes32 nodeHash;\\n        uint8 pos;\\n        for (uint256 i = 0; i < size; i++) {\\n            (pos, off) = ZeroCopySource.NextUint8(auditPath_, off);\\n            (nodeHash, off) = ZeroCopySource.NextHash(auditPath_, off);\\n            if (pos == 0x00) {\\n                hash = hashChildren(nodeHash, hash);\\n            } else if (pos == 0x01) {\\n                hash = hashChildren(hash, nodeHash);\\n            } else {\\n                revert(\\\"Merkle: prove eod\\\");\\n            }\\n        }\\n        require(hash == root_, \\\"Merkle: prove root\\\");\\n        return value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ModUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ModUtils {\\n    /**\\n     * @dev Wrap the modular exponent pre-compile introduced in Byzantium.\\n     * Returns base^exponent mod p.\\n     */\\n    function modExp(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 p\\n    ) internal view returns (uint256 o) {\\n        /* solium-disable-next-line */\\n        assembly {\\n            // Args for the precompile: [<length_of_BASE> <length_of_EXPONENT>\\n            // <length_of_MODULUS> <BASE> <EXPONENT> <MODULUS>]\\n            let output := mload(0x40)\\n            let args := add(output, 0x20)\\n            mstore(args, 0x20)\\n            mstore(add(args, 0x20), 0x20)\\n            mstore(add(args, 0x40), 0x20)\\n            mstore(add(args, 0x60), base)\\n            mstore(add(args, 0x80), exponent)\\n            mstore(add(args, 0xa0), p)\\n\\n            // 0x05 is the modular exponent contract address\\n            if iszero(staticcall(not(0), 0x05, args, 0xc0, output, 0x20)) {\\n                revert(0, 0)\\n            }\\n            o := mload(output)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates and returns the square root of a mod p if such a square\\n     * root exists. The modulus p must be an odd prime. If a square root does\\n     * not exist, function returns 0.\\n     */\\n    function modSqrt(uint256 a, uint256 p) internal view returns (uint256) {\\n        if (legendre(a, p) != 1) {\\n            return 0;\\n        }\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        if (p % 4 == 3) {\\n            return modExp(a, (p + 1) / 4, p);\\n        }\\n\\n        uint256 s = p - 1;\\n        uint256 e = 0;\\n\\n        while (s % 2 == 0) {\\n            s = s / 2;\\n            e = e + 1;\\n        }\\n\\n        // Note the smaller int- finding n with Legendre symbol or -1\\n        // should be quick\\n        uint256 n = 2;\\n        while (legendre(n, p) != -1) {\\n            n = n + 1;\\n        }\\n\\n        uint256 x = modExp(a, (s + 1) / 2, p);\\n        uint256 b = modExp(a, s, p);\\n        uint256 g = modExp(n, s, p);\\n        uint256 r = e;\\n        uint256 gs = 0;\\n        uint256 m = 0;\\n        uint256 t = b;\\n\\n        while (true) {\\n            t = b;\\n            m = 0;\\n\\n            for (m = 0; m < r; m++) {\\n                if (t == 1) {\\n                    break;\\n                }\\n                t = modExp(t, 2, p);\\n            }\\n\\n            if (m == 0) {\\n                return x;\\n            }\\n\\n            gs = modExp(g, uint256(2)**(r - m - 1), p);\\n            g = (gs * gs) % p;\\n            x = (x * gs) % p;\\n            b = (b * g) % p;\\n            r = m;\\n        }\\n        revert(\\\"modSqrt: unreachable end point\\\");\\n    }\\n\\n    /**\\n     * @dev Calculates the Legendre symbol of the given a mod p.\\n     * @return Returns 1 if a is a quadratic residue mod p, -1 if it is\\n     * a non-quadratic residue, and 0 if a is 0.\\n     */\\n    function legendre(uint256 a, uint256 p) internal view returns (int256) {\\n        uint256 raised = modExp(a, (p - 1) / uint256(2), p);\\n\\n        if (raised == 0 || raised == 1) {\\n            return int256(raised);\\n        } else if (raised == p - 1) {\\n            return -1;\\n        }\\n\\n        revert(\\\"Failed to calculate legendre.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RequestIdChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\n\\ncontract RequestIdChecker {\\n    \\n    ///\\n    mapping(bytes32 => bool) public checks;\\n    /// \\n    address public owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"RequestIdChecker: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function check(bytes32 id) public onlyOwner returns (bool) {\\n        if (checks[id] == false) {\\n            checks[id] = true;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function destroy() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Typecast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nabstract contract Typecast {\\r\\n    function castToAddress(bytes32 x) public pure returns (address) {\\r\\n        return address(uint160(uint256(x)));\\r\\n    }\\r\\n\\r\\n    function castToBytes32(address a) public pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(a)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    /* @notice      Convert the bytes array to bytes32 type, the bytes array length must be 32\\r\\n     *  @param _bs   Source bytes array\\r\\n     *  @return      bytes32\\r\\n     */\\r\\n    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\\r\\n        require(_bs.length == 32, \\\"bytes length is not 32.\\\");\\r\\n        assembly {\\r\\n            // load 32 bytes from memory starting from position _bs + 0x20 since the first 0x20 bytes stores _bs length\\r\\n            value := mload(add(_bs, 0x20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* @notice      Convert bytes to uint256\\r\\n     *  @param _b    Source bytes should have length of 32\\r\\n     *  @return      uint256\\r\\n     */\\r\\n    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\\r\\n        require(_bs.length == 32, \\\"bytes length is not 32.\\\");\\r\\n        assembly {\\r\\n            // load 32 bytes from memory starting from position _bs + 32\\r\\n            value := mload(add(_bs, 0x20))\\r\\n        }\\r\\n        require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \\\"Value exceeds the range\\\");\\r\\n    }\\r\\n\\r\\n    /* @notice      Convert uint256 to bytes\\r\\n     *  @param _b    uint256 that needs to be converted\\r\\n     *  @return      bytes\\r\\n     */\\r\\n    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\\r\\n        require(\\r\\n            _value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,\\r\\n            \\\"Value exceeds the range\\\"\\r\\n        );\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in result as\\r\\n            // Solidity does for memory variables.\\r\\n            bs := mload(0x40)\\r\\n            // Put 0x20 at the first word, the length of bytes for uint256 value\\r\\n            mstore(bs, 0x20)\\r\\n            //In the next word, put value in bytes format to the next 32 bytes\\r\\n            mstore(add(bs, 0x20), _value)\\r\\n            // Update the free-memory pointer by padding our last write location to 32 bytes\\r\\n            mstore(0x40, add(bs, 0x40))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* @notice      Convert bytes to address\\r\\n     *  @param _bs   Source bytes: bytes length must be 20\\r\\n     *  @return      Converted address from source bytes\\r\\n     */\\r\\n    function bytesToAddress(bytes memory _bs) internal pure returns (address addr) {\\r\\n        require(_bs.length == 20, \\\"bytes length does not match address\\\");\\r\\n        assembly {\\r\\n            // for _bs, first word store _bs.length, second word store _bs.value\\r\\n            // load 32 bytes from mem[_bs+20], convert it into Uint160, meaning we take last 20 bytes as addr (address).\\r\\n            addr := mload(add(_bs, 0x14))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* @notice      Convert address to bytes\\r\\n     *  @param _addr Address need to be converted\\r\\n     *  @return      Converted bytes from address\\r\\n     */\\r\\n    function addressToBytes(address _addr) internal pure returns (bytes memory bs) {\\r\\n        assembly {\\r\\n            // Get a location of some free memory and store it in result as\\r\\n            // Solidity does for memory variables.\\r\\n            bs := mload(0x40)\\r\\n            // Put 20 (address byte length) at the first word, the length of bytes for uint256 value\\r\\n            mstore(bs, 0x14)\\r\\n            // logical shift left _a by 12 bytes, change _a from right-aligned to left-aligned\\r\\n            mstore(add(bs, 0x20), shl(96, _addr))\\r\\n            // Update the free-memory pointer by padding our last write location to 32 bytes\\r\\n            mstore(0x40, add(bs, 0x40))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* @notice              Compare if two bytes are equal, which are in storage and memory, seperately\\r\\n                            Refer from https://github.com/summa-tx/bitcoin-spv/blob/master/solidity/contracts/BytesLib.sol#L368\\r\\n    *  @param _preBytes     The bytes stored in storage\\r\\n    *  @param _postBytes    The bytes stored in memory\\r\\n    *  @return              Bool type indicating if they are equal\\r\\n    */\\r\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n            // Arrays of 31 bytes or less have an even value in their slot,\\r\\n            // while longer arrays have an odd value. The actual length is\\r\\n            // the slot divided by two for odd values, and the lowest order\\r\\n            // byte divided by two for even values.\\r\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n            // two to get the length. If the slot is odd, bitwise and the slot\\r\\n            // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n            // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n                // fslot can contain both the length and contents of the array\\r\\n                // if slength < 32 bytes so let's prepare for that\\r\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                // slength != 0\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                        // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                            // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                        // cb is a circuit breaker in the for loop since there's\\r\\n                        //  no said feature for inline assembly loops\\r\\n                        // cb = 1 - don't breaker\\r\\n                        // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                        // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                        // the next line is the loop condition:\\r\\n                        // while(uint(mc < end) + cb == 2)\\r\\n                        for {\\r\\n\\r\\n                        } eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                                // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    /* @notice              Slice the _bytes from _start index till the result has length of _length\\r\\n                            Refer from https://github.com/summa-tx/bitcoin-spv/blob/master/solidity/contracts/BytesLib.sol#L246\\r\\n    *  @param _bytes        The original bytes needs to be sliced\\r\\n    *  @param _start        The index of _bytes for the start of sliced bytes\\r\\n    *  @param _length       The index of _bytes for the end of sliced bytes\\r\\n    *  @return              The sliced bytes\\r\\n    */\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(_bytes.length >= (_start + _length));\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                // lengthmod <= _length % 32\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    /* @notice              Check if the elements number of _signers within _keepers array is no less than _m\\r\\n     *  @param _keepers      The array consists of serveral address\\r\\n     *  @param _signers      Some specific addresses to be looked into\\r\\n     *  @param _m            The number requirement paramter\\r\\n     *  @return              True means containment, false meansdo do not contain.\\r\\n     */\\r\\n    function containMAddresses(\\r\\n        address[] memory _keepers,\\r\\n        address[] memory _signers,\\r\\n        uint256 _m\\r\\n    ) internal pure returns (bool) {\\r\\n        uint256 m = 0;\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            for (uint256 j = 0; j < _keepers.length; j++) {\\r\\n                if (_signers[i] == _keepers[j]) {\\r\\n                    m++;\\r\\n                    delete _keepers[j];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return m >= _m;\\r\\n    }\\r\\n\\r\\n    /* @notice              TODO\\r\\n     *  @param key\\r\\n     *  @return\\r\\n     */\\r\\n    function compressMCPubKey(bytes memory key) internal pure returns (bytes memory newkey) {\\r\\n        require(key.length >= 67, \\\"key lenggh is too short\\\");\\r\\n        newkey = slice(key, 0, 35);\\r\\n        if (uint8(key[66]) % 2 == 0) {\\r\\n            newkey[2] = 0x02;\\r\\n        } else {\\r\\n            newkey[2] = 0x03;\\r\\n        }\\r\\n        return newkey;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *      Refer from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L18\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract's constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\r\\n     * function returns false is an externally-owned account (EOA) and not a\\r\\n     * contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != 0x0 && codehash != accountHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extracts error from the returned data of inter-contract call\\r\\n     */\\r\\n    function extractErrorMessage(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length < 68) return \\\"unknown error\\\";\\r\\n        bytes memory revertData = BytesLib.slice(data, 4, data.length - 4);\\r\\n        return abi.decode(revertData, (string));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/ZeroCopySource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over decoding and deserialization operation from bytes into bassic types in Solidity for PolyNetwork cross chain utility.\\r\\n *\\r\\n * Decode into basic types in Solidity from bytes easily. It's designed to be used\\r\\n * for PolyNetwork cross chain application, and the decoding rules on Ethereum chain\\r\\n * and the encoding rule on other chains should be consistent, and . Here we\\r\\n * follow the underlying deserialization rule with implementation found here:\\r\\n * https://github.com/polynetwork/poly/blob/master/common/zero_copy_source.go\\r\\n *\\r\\n * Using this library instead of the unchecked serialization method can help reduce\\r\\n * the risk of serious bugs and handfule, so it's recommended to use it.\\r\\n *\\r\\n * Please note that risk can be minimized, yet not eliminated.\\r\\n */\\r\\nlibrary ZeroCopySource {\\r\\n    /* @notice              Read next byte as boolean type starting at offset from buff\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the boolean value\\r\\n     *  @return              The the read boolean value and new offset\\r\\n     */\\r\\n    function NextBool(bytes memory buff, uint256 offset) internal pure returns (bool, uint256) {\\r\\n        require(offset + 1 <= buff.length && offset < offset + 1, \\\"Offset exceeds limit\\\");\\r\\n        // byte === bytes1\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            v := mload(add(add(buff, 0x20), offset))\\r\\n        }\\r\\n        bool value;\\r\\n        if (v == 0x01) {\\r\\n            value = true;\\r\\n        } else if (v == 0x00) {\\r\\n            value = false;\\r\\n        } else {\\r\\n            revert(\\\"NextBool value error\\\");\\r\\n        }\\r\\n        return (value, offset + 1);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next byte as uint8 starting at offset from buff\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the byte value\\r\\n     *  @return              The read uint8 value and new offset\\r\\n     */\\r\\n    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\\r\\n        require(offset + 1 <= buff.length && offset < offset + 1, \\\"NextUint8, Offset exceeds maximum\\\");\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            let tmpbytes := mload(0x40)\\r\\n            let bvalue := mload(add(add(buff, 0x20), offset))\\r\\n            mstore8(tmpbytes, byte(0, bvalue))\\r\\n            mstore(0x40, add(tmpbytes, 0x01))\\r\\n            v := mload(sub(tmpbytes, 0x1f))\\r\\n        }\\r\\n        return (v, offset + 1);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next two bytes as uint16 type starting from offset\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the uint16 value\\r\\n     *  @return              The read uint16 value and updated offset\\r\\n     */\\r\\n    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\\r\\n        require(offset + 2 <= buff.length && offset < offset + 2, \\\"NextUint16, offset exceeds maximum\\\");\\r\\n\\r\\n        uint16 v;\\r\\n        assembly {\\r\\n            let tmpbytes := mload(0x40)\\r\\n            let bvalue := mload(add(add(buff, 0x20), offset))\\r\\n            mstore8(tmpbytes, byte(0x01, bvalue))\\r\\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\\r\\n            mstore(0x40, add(tmpbytes, 0x02))\\r\\n            v := mload(sub(tmpbytes, 0x1e))\\r\\n        }\\r\\n        return (v, offset + 2);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next four bytes as uint32 type starting from offset\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the uint32 value\\r\\n     *  @return              The read uint32 value and updated offset\\r\\n     */\\r\\n    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\\r\\n        require(offset + 4 <= buff.length && offset < offset + 4, \\\"NextUint32, offset exceeds maximum\\\");\\r\\n        uint32 v;\\r\\n        assembly {\\r\\n            let tmpbytes := mload(0x40)\\r\\n            let byteLen := 0x04\\r\\n            for {\\r\\n                let tindex := 0x00\\r\\n                let bindex := sub(byteLen, 0x01)\\r\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\r\\n            } lt(tindex, byteLen) {\\r\\n                tindex := add(tindex, 0x01)\\r\\n                bindex := sub(bindex, 0x01)\\r\\n            } {\\r\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\r\\n            }\\r\\n            mstore(0x40, add(tmpbytes, byteLen))\\r\\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\\r\\n        }\\r\\n        return (v, offset + 4);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next eight bytes as uint64 type starting from offset\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the uint64 value\\r\\n     *  @return              The read uint64 value and updated offset\\r\\n     */\\r\\n    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\\r\\n        require(offset + 8 <= buff.length && offset < offset + 8, \\\"NextUint64, offset exceeds maximum\\\");\\r\\n        uint64 v;\\r\\n        assembly {\\r\\n            let tmpbytes := mload(0x40)\\r\\n            let byteLen := 0x08\\r\\n            for {\\r\\n                let tindex := 0x00\\r\\n                let bindex := sub(byteLen, 0x01)\\r\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\r\\n            } lt(tindex, byteLen) {\\r\\n                tindex := add(tindex, 0x01)\\r\\n                bindex := sub(bindex, 0x01)\\r\\n            } {\\r\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\r\\n            }\\r\\n            mstore(0x40, add(tmpbytes, byteLen))\\r\\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\\r\\n        }\\r\\n        return (v, offset + 8);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next 32 bytes as uint256 type starting from offset,\\r\\n                            there are limits considering the numerical limits in multi-chain\\r\\n    *  @param buff          Source bytes array\\r\\n    *  @param offset        The position from where we read the uint256 value\\r\\n    *  @return              The read uint256 value and updated offset\\r\\n    */\\r\\n    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\\r\\n        require(offset + 32 <= buff.length && offset < offset + 32, \\\"NextUint255, offset exceeds maximum\\\");\\r\\n        uint256 v;\\r\\n        assembly {\\r\\n            let tmpbytes := mload(0x40)\\r\\n            let byteLen := 0x20\\r\\n            for {\\r\\n                let tindex := 0x00\\r\\n                let bindex := sub(byteLen, 0x01)\\r\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\r\\n            } lt(tindex, byteLen) {\\r\\n                tindex := add(tindex, 0x01)\\r\\n                bindex := sub(bindex, 0x01)\\r\\n            } {\\r\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\r\\n            }\\r\\n            mstore(0x40, add(tmpbytes, byteLen))\\r\\n            v := mload(tmpbytes)\\r\\n        }\\r\\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \\\"Value exceeds the range\\\");\\r\\n        return (v, offset + 32);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next variable bytes starting from offset,\\r\\n                            the decoding rule coming from multi-chain\\r\\n    *  @param buff          Source bytes array\\r\\n    *  @param offset        The position from where we read the bytes value\\r\\n    *  @return              The read variable bytes array value and updated offset\\r\\n    */\\r\\n    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns (bytes memory, uint256) {\\r\\n        uint256 len;\\r\\n        (len, offset) = NextVarUint(buff, offset);\\r\\n        require(offset + len <= buff.length && offset < offset + len, \\\"NextVarBytes, offset exceeds maximum\\\");\\r\\n        bytes memory tempBytes;\\r\\n        assembly {\\r\\n            switch iszero(len)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(len, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, len)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, len)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (tempBytes, offset + len);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next 32 bytes starting from offset,\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the bytes value\\r\\n     *  @return              The read bytes32 value and updated offset\\r\\n     */\\r\\n    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32, uint256) {\\r\\n        require(offset + 32 <= buff.length && offset < offset + 32, \\\"NextHash, offset exceeds maximum\\\");\\r\\n        bytes32 v;\\r\\n        assembly {\\r\\n            v := mload(add(buff, add(offset, 0x20)))\\r\\n        }\\r\\n        return (v, offset + 32);\\r\\n    }\\r\\n\\r\\n    /* @notice              Read next 20 bytes starting from offset,\\r\\n     *  @param buff          Source bytes array\\r\\n     *  @param offset        The position from where we read the bytes value\\r\\n     *  @return              The read bytes20 value and updated offset\\r\\n     */\\r\\n    function NextAddress(bytes memory buff, uint256 offset) internal pure returns (address, uint256) {\\r\\n        require(offset + 20 <= buff.length && offset < offset + 20, \\\"NextAddress, offset exceeds maximum\\\");\\r\\n        bytes20 v;\\r\\n        assembly {\\r\\n            v := mload(add(buff, add(offset, 0x20)))\\r\\n        }\\r\\n        return (address(v), offset + 20);\\r\\n    }\\r\\n\\r\\n    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\\r\\n        uint8 v;\\r\\n        (v, offset) = NextUint8(buff, offset);\\r\\n\\r\\n        uint256 value;\\r\\n        if (v == 0xFD) {\\r\\n            // return NextUint16(buff, offset);\\r\\n            (value, offset) = NextUint16(buff, offset);\\r\\n            require(value >= 0xFD && value <= 0xFFFF, \\\"NextUint16, value outside range\\\");\\r\\n            return (value, offset);\\r\\n        } else if (v == 0xFE) {\\r\\n            // return NextUint32(buff, offset);\\r\\n            (value, offset) = NextUint32(buff, offset);\\r\\n            require(value > 0xFFFF && value <= 0xFFFFFFFF, \\\"NextVarUint, value outside range\\\");\\r\\n            return (value, offset);\\r\\n        } else if (v == 0xFF) {\\r\\n            // return NextUint64(buff, offset);\\r\\n            (value, offset) = NextUint64(buff, offset);\\r\\n            require(value > 0xFFFFFFFF, \\\"NextVarUint, value outside range\\\");\\r\\n            return (value, offset);\\r\\n        } else {\\r\\n            // return (uint8(v), offset);\\r\\n            value = uint8(v);\\r\\n            require(value < 0xFD, \\\"NextVarUint, value outside range\\\");\\r\\n            return (value, offset);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epochNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolVersion\",\"type\":\"uint64\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"RequestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainIdTo\",\"type\":\"uint64\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IBridgeV2.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"StateSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GATEKEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"castToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"castToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequestIdChecker\",\"outputs\":[{\"internalType\":\"contract RequestIdChecker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousEpoch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRequestIdChecker\",\"outputs\":[{\"internalType\":\"contract RequestIdChecker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"merkleProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"votersMask\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridgeV2.ReceiveParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"receiveV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridgeV2.SendParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"sendV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeV2.State\",\"name\":\"state_\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IBridgeV2.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"merkleProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"votersPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"votersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"votersMask\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridgeV2.ReceiveParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BridgeV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}