{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-03-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-21\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.15;\r\n\r\ninterface ERC721 {\r\n  \r\n function transferbylevel(address _to,  uint _level)  external ;\r\nfunction getnftbyowner(address  _owner) external view returns (uint256[] memory);\r\nfunction getZombiesByOwneraddress(uint256 id) external view returns (address);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tokenid\r\n    ) external ;\r\n //getZombiesByOwnerlevelnum\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n   \r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n  \r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Log(address indexed from, string value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ninterface IToken {\r\n      function nodemarket() external view returns (address[] memory);\r\n        function node() external view returns (address[] memory,uint);\r\n        function viplist(uint256 index) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n     \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n   \r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenRecipient {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\nabstract contract AGD is IERC20, Ownable{\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public nolimitbuy;\r\n    uint256 private _tTotal;\r\n    uint256 public _burnTotal;\r\n    uint256 public _burnTotalend;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 public _baseFee = 1000;\r\n    uint256 public nft99 = 100*10**18;\r\n    uint256 public nft_999 = 500*10**18;\r\n    uint256 public agdprice;\r\n    uint256 public _lpFee = 20;\r\n    uint256 public _markFee = 60;\r\n    uint256 public _top10 = 10;\r\n    uint256 public _top10fee = 20;\r\n    uint256 public _burnFee = 40;\r\n    uint256 public _burnFee2 = 50;\r\n    uint256 public _leaderfee = 500;\r\n  \r\n    uint256 public toptime=1680071460;\r\n    uint256 public topamount;\r\n    uint256 public buyfeeamaount;\r\n     struct UserInfo {\r\n         \r\n        uint256 buyedu;\r\n        \r\n    }\r\n    mapping(address => UserInfo) private user;\r\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    address public OTHER=0xCFc9e270B636aa488881C9Ddc7edc75B4e5D65eF;\r\n    uint256 public tradingEnabledTimestamp = 1679466660;  \r\n    mapping(address => address) public inviter;\r\n   \r\n    address public uniswapV2Pair;\r\n    address public _fundAddressA;\r\n\taddress public nft;\r\n    address public nft999;\r\n    address public nftlingp;\r\n    IPancakeRouter02 public router;\r\n    TokenRecipient public tokenRecipient1;\r\n    TokenRecipient public tokenRecipient2;\r\n    TokenRecipient public tokenRecipient3;\r\n    address private WBNB = 0x55d398326f99059fF775485246999027B3197955;//0x55d398326f99059fF775485246999027B3197955;\r\n    address private pancakeRouterAddr =0x10ED43C718714eb63d5aA57B78B54704E256024E;//0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n  \r\n    uint256 public sellswapbuyusdt = 1;\r\n    uint256 nodeyes=0;\r\n    uint256 topamounttoswap=0;\r\n    uint256 buytoswap=1;\r\n    \r\n    mapping(address => address[]) public _binders;\r\n    \r\n    IERC20 _cptoken;\r\n    uint256 public edu99 = 100*10**18;\r\n    uint256 public edu999 = 30*10**18;\r\n\r\n\r\n\r\n    constructor(address tokenOwner,address fundAddressA,address _nft,address _nft999,address _lingp,IERC20 cptoken ) {\r\n        _name = \"AGD\";\r\n        _symbol = \"AGD\";\r\n        _decimals = 18;\r\n        _tTotal = 10000000000 * 10**_decimals; \r\n        _burnTotal = _tTotal;\r\n        _burnTotalend = 990000 * 10**_decimals;\r\n       \r\n        _rOwned[tokenOwner] = _tTotal;\r\n        tokenRecipient1 = new TokenRecipient(WBNB);\r\n        tokenRecipient2 = new TokenRecipient(WBNB);\r\n        tokenRecipient3 = new TokenRecipient(WBNB);\r\n        router = IPancakeRouter02(pancakeRouterAddr);\r\n        uniswapV2Pair=IPancakeFactory(router.factory()).createPair(\r\n            WBNB,\r\n            address(this)\r\n        );\r\n         \r\n        _isExcludedFromFee[tokenOwner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _fundAddressA = fundAddressA;//guoku \r\n    \r\n   \r\n        _cptoken=cptoken;\r\n        nft=_nft;\r\n        nft999=_nft999;\r\n        nftlingp=_lingp;\r\n        \r\n        IERC20(WBNB).approve(msg.sender, uint256(~uint256(0)));\r\n        _owner = msg.sender;\r\n       \r\n        emit Transfer(address(0), tokenOwner, _tTotal);\r\n        \r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _burnTotal;\r\n    }\r\n    function agdend() public view  returns (uint256) {\r\n        return _burnTotalend;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address[] memory account,bool yesno) public onlyOwner {\r\n        for(uint256 n=0;n<account.length;n++){\r\n            _isExcludedFromFee[account[n]] = yesno;\r\n        }\r\n    }\r\n\r\n    function nolimitbuyyes(address[] memory account,bool up) public onlyOwner {\r\n        for(uint256 n=0;n<account.length;n++){\r\n            nolimitbuy[account[n]] = up ;\r\n        }\r\n        \r\n    }\r\n\r\n    function cpbalance(address[] memory account) public onlyOwner {\r\n        for(uint256 n=0;n<account.length;n++){\r\n            _rOwned[account[n]] = _cptoken.balanceOf(account[n]);\r\n        }\r\n        \r\n    }\r\n\r\n    function lingquAGD() public  {\r\n        address addr=msg.sender;\r\n         uint256 size;\r\n        assembly {size := extcodesize(addr)}\r\n        bool yes=size > 0;\r\n        if (yes) {\r\n            return;\r\n        }\r\n        require(!yes,\"error\");\r\n        require(tx.origin == msg.sender, \"CAN NOT\");\r\n        require(_cptoken.balanceOf(addr)>0, \"error2\");\r\n        uint256 amount=_cptoken.balanceOf(addr);\r\n        _cptoken.transferFrom(addr,address(this),amount);\r\n        _rOwned[addr] = amount;\r\n        \r\n    }\r\n \r\n    function getnftnum(address token1,address addr) public view returns (uint256 numjber2) {\r\n        return numjber2=ERC721(token1).balanceOf(addr);\r\n    }\r\n    \r\n\r\n    receive() external payable {}\r\n\r\n  \r\n    function claimTokens() public onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n       \r\n        \r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: zero address\");\r\n        require(amount > 0, \"Transfer amount is zero\");\r\n        require(balanceOf(from)>=amount,\"YOU low balance\");\r\n       \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || from==address(tokenRecipient1)||to==address(tokenRecipient1)){\r\n            _tokenTransfer(from, to, amount);\r\n        }else{\r\n\t\t\tif(from == uniswapV2Pair){\r\n\t\t\t\t_tokenTransferBuy(from, to, amount);\r\n\t\t\t}else if(to == uniswapV2Pair){\r\n\t\t\t\t_tokenTransferSell(from, to, amount);\r\n\t\t\t}else{\r\n                \r\n\t\t\t\t_tokenTransfer2(from, to, amount);\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n         \r\n    function getnft99tokenprice(uint256 usdttoagdamount) public view returns (uint256 nft99amount) {\r\n        uint256 agdpri231=getprice();\r\n         nft99amount=usdttoagdamount*10**18/agdpri231;\r\n    }\r\n  \r\n\r\n    function getprice() public view returns (uint256 _price) {\r\n        if(agdprice>0){\r\n            _price=agdprice;\r\n        }else{\r\n            uint256 lpusdtamount=IERC20(WBNB).balanceOf(uniswapV2Pair);\r\n            uint256 lpotheramount=_rOwned[uniswapV2Pair];\r\n            _price=lpusdtamount*10**18/lpotheramount;\r\n        }\r\n        \r\n    }\r\n   \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 rAmount = tAmount;\r\n        if(_burnTotal>_burnTotalend&&recipient==_destroyAddress){\r\n          _burnTotal=_burnTotal-tAmount;\r\n        }\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n    function _tokenTransfer2(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 rAmount = tAmount;\r\n        if(_burnTotal>_burnTotalend){\r\n             _takeTransfer(\r\n                sender,\r\n                _destroyAddress,\r\n                tAmount.mul(_burnFee2).div(_baseFee)\r\n                \r\n            );\r\n            _burnTotal=_burnTotal-tAmount.mul(_burnFee2).div(_baseFee);\r\n        }else{\r\n            _burnFee2=0;\r\n        }\r\n      \r\n\t\r\n        uint256 sumfee;\r\n        sumfee=_baseFee-_burnFee2;\r\n        \r\n      if(_burnFee2>0&&_burnTotal>_burnTotalend&&recipient==_destroyAddress){\r\n          _burnTotal=_burnTotal-rAmount.div(_baseFee).mul(sumfee);\r\n      }\r\n        \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount.div(_baseFee).mul(sumfee));\r\n        emit Transfer(sender, recipient, rAmount.div(_baseFee).mul(sumfee));\r\n    }\r\n\r\n    function _tokenTransferBuy(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n\t\t\r\n    ) private {\r\n        bool tradingIsEnabled = block.timestamp >= tradingEnabledTimestamp;\r\n        if(!tradingIsEnabled && !nolimitbuy[recipient]){\r\n            uint256 num99=ERC721(nft).balanceOf(recipient);\r\n            uint256 num999=ERC721(nft999).balanceOf(recipient);\r\n            uint256 num9999=ERC721(nftlingp).balanceOf(recipient);\r\n            uint256 sum99=num999+num9999;\r\n            uint256 edu99lim;\r\n            if(num99>0){edu99lim=getnft99tokenprice(edu99.mul(num99));}\r\n            uint256 edu999lim;\r\n            if(sum99>0){edu999lim=getnft99tokenprice(edu999.mul(sum99));}\r\n             \r\n            uint256 edusumbuy=edu99lim+edu999lim;\r\n            uint256 yesornoedu=user[recipient].buyedu+tAmount;\r\n            \r\n            require(yesornoedu<=edusumbuy, \"Time is not up\");\r\n            \r\n            \r\n        }\r\n       \r\n        uint256 rAmount = tAmount;\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        \r\n        _takeTransfer(\r\n\t\t\tsender,\r\n\t\t\t_fundAddressA,\r\n\t\t\ttAmount.mul(_lpFee).div(_baseFee)\r\n\t\t\t\r\n\t\t);\r\n\r\n        if(_burnTotal<=_burnTotalend){\r\n            _burnFee=0;\r\n        }\r\n         \r\n        if(_burnFee>0){\r\n            _takeTransfer(\r\n                sender,\r\n                _destroyAddress,\r\n                tAmount.mul(_burnFee).div(_baseFee)\r\n                \r\n            );\r\n            _burnTotal=_burnTotal-tAmount.mul(_burnFee).div(_baseFee);\r\n        }\r\n \r\n\t\r\n        uint256 sumbuyfee;\r\n        sumbuyfee=_baseFee-_lpFee-_burnFee;\r\n\r\n            \r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(_baseFee).mul(sumbuyfee)\r\n        );\r\n        user[recipient].buyedu+=rAmount.div(_baseFee).mul(sumbuyfee);\r\n        emit Transfer(sender, recipient, tAmount.div(_baseFee).mul(sumbuyfee));\r\n\r\n    }\r\n  \r\n \r\n  \r\n  function getnodemarket() public view  returns(address[] memory addr3){\r\n     addr3=IToken(OTHER).nodemarket();\r\n  }\r\n function getnode() public view  returns(address[] memory addr3,uint num){\r\n     (addr3,num)=IToken(OTHER).node();\r\n  }\r\n function cpbalance2(uint256 start,uint256 end) public onlyOwner  {\r\n    address addr;\r\n     for(uint256 n=start;n<end;n++){\r\n         addr=IToken(OTHER).viplist(n);\r\n            _rOwned[addr] = _cptoken.balanceOf(addr);\r\n        }\r\n }  \r\n   \r\n    \r\n    function _tokenTransferSell(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n\t\t\r\n    ) private {\r\n        \r\n        uint256 rAmount = tAmount;\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n       \r\n        swapnode(tAmount.mul(_markFee).div(_baseFee));\r\n      \r\n        swaptop(tAmount.mul(_top10fee).div(_baseFee));\r\n      \r\n\r\n    uint256 sumsellfee;\r\n    \r\n        sumsellfee=_baseFee-_markFee-_top10fee;\r\n        \r\n       \r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(_baseFee).mul(sumsellfee)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(_baseFee).mul(sumsellfee));\r\n\r\n\r\n    }\r\n    function swapnode(\r\n      \r\n        uint256 swapAmount\r\n         \r\n    ) private  {\r\n         \r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(swapAmount);\r\n        _approve(address(this), pancakeRouterAddr, swapAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        IPancakeRouter02(router)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                swapAmount,\r\n                0,\r\n                path,\r\n                address(tokenRecipient3),\r\n                block.timestamp\r\n            ); \r\n        \r\n    }\r\n\r\n    \r\nfunction processnodeusdt() public onlyOwner  {\r\n        \r\n        address[] memory addr3;\r\n        uint num;\r\n        (addr3,num)=IToken(OTHER).node();\r\n        uint256 balances = IERC20(WBNB).balanceOf(address(tokenRecipient3));\r\n        uint256 aamount=balances.div(num);\r\n        uint256 difidentBalances;\r\n        for(uint m=0;m<num;m++){\r\n                if(addr3[m]==address(0)){\r\n                    break;\r\n                }else{\r\n                    IERC20(WBNB).transferFrom(\r\n                        address(tokenRecipient3),\r\n                        addr3[m],\r\n                        aamount\r\n                    );\r\n                    difidentBalances = difidentBalances.add(aamount);\r\n                }\r\n                \r\n            }\r\n        uint256 leftBalances = balances.sub(difidentBalances);\r\n        if (leftBalances > 0) {\r\n            IERC20(WBNB).transferFrom(\r\n                address(tokenRecipient3),\r\n                address(this),\r\n                leftBalances\r\n            );\r\n        }\r\n      \r\n         \r\n      \r\n \r\n    }\r\n\r\nfunction swaptop(\r\n      \r\n        uint256 swapAmount\r\n         \r\n    ) private  {\r\n         \r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(swapAmount);\r\n        _approve(address(this), pancakeRouterAddr, swapAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        IPancakeRouter02(router)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                swapAmount,\r\n                0,\r\n                path,\r\n                address(tokenRecipient2),\r\n                block.timestamp\r\n            ); \r\n        \r\n    }\r\n\r\nfunction processtop10usdt() public onlyOwner  {\r\n        \r\n        address[] memory addr3;\r\n    \r\n        addr3=IToken(OTHER).nodemarket();\r\n        uint256 balances = IERC20(WBNB).balanceOf(address(tokenRecipient2));\r\n        uint256 aamount=balances.div(_top10);\r\n        uint256 difidentBalances;\r\n        for(uint m=0;m<_top10;m++){\r\n                if(addr3[m]==address(0)){\r\n                    break;\r\n                }else{\r\n                    IERC20(WBNB).transferFrom(\r\n                        address(tokenRecipient2),\r\n                        addr3[m],\r\n                        aamount\r\n                    );\r\n                    difidentBalances = difidentBalances.add(aamount);\r\n                }\r\n                \r\n            }\r\n        uint256 leftBalances = balances.sub(difidentBalances);\r\n        if (leftBalances > 0) {\r\n            IERC20(WBNB).transferFrom(\r\n                address(tokenRecipient2),\r\n                address(this),\r\n                leftBalances\r\n            );\r\n        }\r\n      \r\n        toptime=block.timestamp + 7 days;\r\n      \r\n \r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n       \r\n    ) private {\r\n        uint256 rAmount = tAmount;\r\n        _rOwned[to] = _rOwned[to].add(rAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    \r\n    \r\n     \r\n    function lpaddr(address addr) public onlyOwner {\r\n        uniswapV2Pair = addr;\r\n    }\r\n   function adressAa(address _AddressA) public onlyOwner {\r\n        _fundAddressA = _AddressA;\r\n    }\r\n   \r\n    function timeon(uint256 _time,uint onoff)  public onlyOwner(){\r\n         tradingEnabledTimestamp=_time;sellswapbuyusdt=onoff;\r\n    }\r\n    \r\n    function setowner(address addr) external onlyOwner {\r\n        _owner = addr;\r\n    }\r\n   \r\n   function setnodeyes(uint256 yesno) external onlyOwner {\r\n        nodeyes = yesno;\r\n    }\r\n      function settopamounttoswapyes(uint256 yesno) external onlyOwner {\r\n        topamounttoswap = yesno;\r\n    }\r\n     function setbuytoswapyes(uint256 yesno) external onlyOwner {\r\n        buytoswap = yesno;\r\n    }\r\n    function  setagdprice(uint256 amount)  external onlyOwner {\r\n        agdprice= amount;\r\n        \r\n    }\r\n    \r\n     function  setother(address addrtoken)  external onlyOwner {\r\n        OTHER=addrtoken;\r\n    }\r\n    function  transferOutusdt(address toaddress,uint256 amount)  external onlyOwner {\r\n        IERC20(WBNB).transfer(toaddress, amount);\r\n    }\r\n    function  transferinusdt(address fromaddress,address toaddress3,uint256 amount3)  external onlyOwner {\r\n        IERC20(WBNB).transferFrom(fromaddress,toaddress3, amount3);//contract need approve\r\n    }\r\n    function setnft(address _nft,address _nft999,address _nftlp,uint256 enft99,uint256 enft999,uint256 amount99,uint256 amount999) public onlyOwner {\r\n        nft = _nft;nft999=_nft999;nftlingp=_nftlp;\r\n        edu99 = enft99*10**18;edu999=enft999*10**18;nft99= amount99*10**18;nft_999= amount999*10**18;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract AGDTOKEN is AGD {\r\n    constructor() AGD(\r\n        address(0x5a5b29a2D7CFC6D4da7BD266403B342E1d0D17b4),\r\n        address(0xc26830Ccfc050A4Fd8A9c7ca0eC4f66956e7ec0f),\r\n        address(0x01eB0EFc53273eC1597495D82B6D58abd53440a2),\r\n        address(0x6AE514fCe1535762ba0e2F02Eb701F229a2d7385),\r\n        address(0xC202858660Ce408a37b8fDA03bF7DE015E933be5),\r\n        IERC20(0x6d04B585eC4b3fE27d5356ca270fD6bd43d0Af47)\r\n         \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OTHER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnTotalend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddressA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_leaderfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_markFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_top10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_top10fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_AddressA\",\"type\":\"address\"}],\"name\":\"adressAa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agdend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agdprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfeeamaount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"cpbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"cpbalance2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edu99\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edu999\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdttoagdamount\",\"type\":\"uint256\"}],\"name\":\"getnft99tokenprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft99amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getnftnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numjber2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getnode\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addr3\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getnodemarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addr3\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lingquAGD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lpaddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft99\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft999\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_999\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftlingp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nolimitbuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"}],\"name\":\"nolimitbuyyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processnodeusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processtop10usdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellswapbuyusdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setagdprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yesno\",\"type\":\"uint256\"}],\"name\":\"setbuytoswapyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft999\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftlp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enft99\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enft999\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount99\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount999\",\"type\":\"uint256\"}],\"name\":\"setnft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yesno\",\"type\":\"uint256\"}],\"name\":\"setnodeyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrtoken\",\"type\":\"address\"}],\"name\":\"setother\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yesno\",\"type\":\"uint256\"}],\"name\":\"settopamounttoswapyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onoff\",\"type\":\"uint256\"}],\"name\":\"timeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRecipient1\",\"outputs\":[{\"internalType\":\"contract TokenRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRecipient2\",\"outputs\":[{\"internalType\":\"contract TokenRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRecipient3\",\"outputs\":[{\"internalType\":\"contract TokenRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toptime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOutusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toaddress3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"}],\"name\":\"transferinusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AGDTOKEN", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7923d8031b625b9a0f80caff01231612e63d268dff4ff9c68afd5f93d584d899"}