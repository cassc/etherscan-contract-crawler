{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PancakeStableSwapTwoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin-4.5.0/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IPancakeStableSwapLP.sol\\\";\\n\\ncontract PancakeStableSwapTwoPool is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant N_COINS = 2;\\n\\n    uint256 public constant MAX_DECIMAL = 18;\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    uint256 public constant PRECISION = 1e18;\\n    uint256[N_COINS] public PRECISION_MUL;\\n    uint256[N_COINS] public RATES;\\n\\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\\n    uint256 public constant MAX_FEE = 5e9;\\n    uint256 public constant MAX_A = 1e6;\\n    uint256 public constant MAX_A_CHANGE = 10;\\n    uint256 public constant MIN_BNB_GAS = 2300;\\n    uint256 public constant MAX_BNB_GAS = 23000;\\n\\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\\n    uint256 public constant MIN_RAMP_TIME = 1 days;\\n\\n    address[N_COINS] public coins;\\n    uint256[N_COINS] public balances;\\n    uint256 public fee; // fee * 1e10.\\n    uint256 public admin_fee; // admin_fee * 1e10.\\n    uint256 public bnb_gas = 4029; // transfer bnb gas.\\n\\n    IPancakeStableSwapLP public token;\\n\\n    address constant BNB_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    bool support_BNB;\\n\\n    uint256 public initial_A;\\n    uint256 public future_A;\\n    uint256 public initial_A_time;\\n    uint256 public future_A_time;\\n\\n    uint256 public admin_actions_deadline;\\n    uint256 public future_fee;\\n    uint256 public future_admin_fee;\\n\\n    uint256 public kill_deadline;\\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\\n    bool public is_killed;\\n\\n    address public immutable STABLESWAP_FACTORY;\\n    bool public isInitialized;\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewFee(uint256 indexed deadline, uint256 fee, uint256 admin_fee);\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(uint256 old_A, uint256 new_A, uint256 initial_time, uint256 future_time);\\n    event StopRampA(uint256 A, uint256 t);\\n    event SetBNBGas(uint256 bnb_gas);\\n    event RevertParameters();\\n    event DonateAdminFees();\\n    event Kill();\\n    event Unkill();\\n\\n    /**\\n     * @notice constructor\\n     */\\n    constructor() {\\n        STABLESWAP_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice initialize\\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _owner: Owner\\n     * @param _LP: LP address\\n     */\\n    function initialize(\\n        address[N_COINS] memory _coins,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _owner,\\n        address _LP\\n    ) external {\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\n        require(msg.sender == STABLESWAP_FACTORY, \\\"Operations: Not factory\\\");\\n        require(_A <= MAX_A, \\\"_A exceeds maximum\\\");\\n        require(_fee <= MAX_FEE, \\\"_fee exceeds maximum\\\");\\n        require(_admin_fee <= MAX_ADMIN_FEE, \\\"_admin_fee exceeds maximum\\\");\\n        isInitialized = true;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            require(_coins[i] != address(0), \\\"ZERO Address\\\");\\n            uint256 coinDecimal;\\n            if (_coins[i] == BNB_ADDRESS) {\\n                coinDecimal = 18;\\n                support_BNB = true;\\n            } else {\\n                coinDecimal = IERC20Metadata(_coins[i]).decimals();\\n            }\\n            require(coinDecimal <= MAX_DECIMAL, \\\"The maximum decimal cannot exceed 18\\\");\\n            //set PRECISION_MUL and  RATES\\n            PRECISION_MUL[i] = 10**(MAX_DECIMAL - coinDecimal);\\n            RATES[i] = PRECISION * PRECISION_MUL[i];\\n        }\\n        coins = _coins;\\n        initial_A = _A;\\n        future_A = _A;\\n        fee = _fee;\\n        admin_fee = _admin_fee;\\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\\n        token = IPancakeStableSwapLP(_LP);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    function get_A() internal view returns (uint256) {\\n        //Handle ramping A up or down\\n        uint256 t1 = future_A_time;\\n        uint256 A1 = future_A;\\n        if (block.timestamp < t1) {\\n            uint256 A0 = initial_A;\\n            uint256 t0 = initial_A_time;\\n            // Expressions in uint256 cannot have negative numbers, thus \\\"if\\\"\\n            if (A1 > A0) {\\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\\n            } else {\\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\\n            }\\n        } else {\\n            // when t1 == 0 or block.timestamp >= t1\\n            return A1;\\n        }\\n    }\\n\\n    function A() external view returns (uint256) {\\n        return get_A();\\n    }\\n\\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    function _xp_mem(uint256[N_COINS] memory _balances) internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * _balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 S;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            S += xp[i];\\n        }\\n        if (S == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev;\\n        uint256 D = S;\\n        uint256 Ann = amp * N_COINS;\\n        for (uint256 j = 0; j < 255; j++) {\\n            uint256 D_P = D;\\n            for (uint256 k = 0; k < N_COINS; k++) {\\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\\n            }\\n            Dprev = D;\\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\\n            // Equality with the precision of 1\\n            if (D > Dprev) {\\n                if (D - Dprev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (Dprev - D <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return D;\\n    }\\n\\n    function get_D_mem(uint256[N_COINS] memory _balances, uint256 amp) internal view returns (uint256) {\\n        return get_D(_xp_mem(_balances), amp);\\n    }\\n\\n    function get_virtual_price() external view returns (uint256) {\\n        /**\\n        Returns portfolio virtual price (for calculating profit)\\n        scaled up by 1e18\\n        */\\n        uint256 D = get_D(_xp(), get_A());\\n        /**\\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\\n        When balanced, D = n * x_u - total virtual value of the portfolio\\n        */\\n        uint256 token_supply = token.totalSupply();\\n        return (D * PRECISION) / token_supply;\\n    }\\n\\n    function calc_token_amount(uint256[N_COINS] memory amounts, bool deposit) external view returns (uint256) {\\n        /**\\n        Simplified method to calculate addition or reduction in token supply at\\n        deposit or withdrawal without taking fees into account (but looking at\\n        slippage).\\n        Needed to prevent front-running, not for precise calculations!\\n        */\\n        uint256[N_COINS] memory _balances = balances;\\n        uint256 amp = get_A();\\n        uint256 D0 = get_D_mem(_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (deposit) {\\n                _balances[i] += amounts[i];\\n            } else {\\n                _balances[i] -= amounts[i];\\n            }\\n        }\\n        uint256 D1 = get_D_mem(_balances, amp);\\n        uint256 token_amount = token.totalSupply();\\n        uint256 difference;\\n        if (deposit) {\\n            difference = D1 - D0;\\n        } else {\\n            difference = D0 - D1;\\n        }\\n        return (difference * token_amount) / D0;\\n    }\\n\\n    function add_liquidity(uint256[N_COINS] memory amounts, uint256 min_mint_amount) external payable nonReentrant {\\n        //Amounts is amounts of c-tokens\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_BNB) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending BNB by mistake.\\n        }\\n        uint256[N_COINS] memory fees;\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256 token_supply = token.totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances;\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            // balances store amounts of c-tokens\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n\\n        // We need to recalculate the invariant accounting for fees\\n        // to calculate fair user's share\\n        uint256 D2 = D1;\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n\\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n                balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n                new_balances[i] -= fees[i];\\n            }\\n            D2 = get_D_mem(new_balances, amp);\\n        } else {\\n            balances = new_balances;\\n        }\\n\\n        // Calculate, how much pool tokens to mint\\n        uint256 mint_amount;\\n        if (token_supply == 0) {\\n            mint_amount = D1; // Take the dust if there was any\\n        } else {\\n            mint_amount = (token_supply * (D2 - D0)) / D0;\\n        }\\n        require(mint_amount >= min_mint_amount, \\\"Slippage screwed you\\\");\\n\\n        // Take coins from the sender\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 amount = amounts[i];\\n            address coin = coins[i];\\n            transfer_in(coin, amount);\\n        }\\n\\n        // Mint pool tokens\\n        token.mint(msg.sender, mint_amount);\\n\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount);\\n    }\\n\\n    function get_y(\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[N_COINS] memory xp_\\n    ) internal view returns (uint256) {\\n        // x in the input is converted to the same price/precision\\n        require((i != j) && (i < N_COINS) && (j < N_COINS), \\\"Illegal parameter\\\");\\n        uint256 amp = get_A();\\n        uint256 D = get_D(xp_, amp);\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = amp * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k != j) {\\n                _x = xp_[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann; // - D\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 m = 0; m < 255; m++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in c-units\\n        uint256[N_COINS] memory rates = RATES;\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in underlying units\\n        uint256[N_COINS] memory xp = _xp();\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n\\n        uint256 x = xp[i] + dx * precisions[i];\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable nonReentrant {\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_BNB) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending BNB by mistake.\\n        }\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\\n\\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\\n        uint256 y = get_y(i, j, x, xp);\\n\\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\\n\\n        // Convert all to real units\\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\\n        require(dy >= min_dy, \\\"Exchange resulted in fewer coins than expected\\\");\\n\\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\\n\\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\\n        balances[i] = old_balances[i] + dx;\\n        // When rounding errors happen, we undercharge admin fee in favor of LP\\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\\n\\n        address iAddress = coins[i];\\n        if (iAddress == BNB_ADDRESS) {\\n            require(dx == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\\n        }\\n        address jAddress = coins[j];\\n        transfer_out(jAddress, dy);\\n        emit TokenExchange(msg.sender, i, dx, j, dy);\\n    }\\n\\n    function remove_liquidity(uint256 _amount, uint256[N_COINS] memory min_amounts) external nonReentrant {\\n        uint256 total_supply = token.totalSupply();\\n        uint256[N_COINS] memory amounts;\\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value = (balances[i] * _amount) / total_supply;\\n            require(value >= min_amounts[i], \\\"Withdrawal resulted in fewer coins than expected\\\");\\n            balances[i] -= value;\\n            amounts[i] = value;\\n            transfer_out(coins[i], value);\\n        }\\n\\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\\n\\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\\n    }\\n\\n    function remove_liquidity_imbalance(uint256[N_COINS] memory amounts, uint256 max_burn_amount)\\n        external\\n        nonReentrant\\n    {\\n        require(!is_killed, \\\"Killed\\\");\\n\\n        uint256 token_supply = token.totalSupply();\\n        require(token_supply > 0, \\\"dev: zero total supply\\\");\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\\n        uint256 D0 = get_D_mem(old_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            new_balances[i] -= amounts[i];\\n        }\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        uint256[N_COINS] memory fees;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n            uint256 difference;\\n            if (ideal_balance > new_balances[i]) {\\n                difference = ideal_balance - new_balances[i];\\n            } else {\\n                difference = new_balances[i] - ideal_balance;\\n            }\\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n            balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n            new_balances[i] -= fees[i];\\n        }\\n        uint256 D2 = get_D_mem(new_balances, amp);\\n\\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\\n        require(token_amount > 0, \\\"token_amount must be greater than 0\\\");\\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(token_amount <= max_burn_amount, \\\"Slippage screwed you\\\");\\n\\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (amounts[i] > 0) {\\n                transfer_out(coins[i], amounts[i]);\\n            }\\n        }\\n        token_supply -= token_amount;\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply);\\n    }\\n\\n    function get_y_D(\\n        uint256 A_,\\n        uint256 i,\\n        uint256[N_COINS] memory xp,\\n        uint256 D\\n    ) internal pure returns (uint256) {\\n        /**\\n        Calculate x[i] if one reduces D from being calculated for xp to D\\n\\n        Done by solving quadratic equation iteratively.\\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n        x_1**2 + b*x_1 = c\\n\\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\\n        */\\n        // x in the input is converted to the same price/precision\\n        require(i < N_COINS, \\\"dev: i above N_COINS\\\");\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = A_ * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann;\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 k = 0; k < 255; k++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function _calc_withdraw_one_coin(uint256 _token_amount, uint256 i) internal view returns (uint256, uint256) {\\n        // First, need to calculate\\n        // * Get current D\\n        // * Solve Eqn against y_i for D - _token_amount\\n        uint256 amp = get_A();\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n        uint256 total_supply = token.totalSupply();\\n\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 D0 = get_D(xp, amp);\\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\\n        uint256[N_COINS] memory xp_reduced = xp;\\n\\n        uint256 new_y = get_y_D(amp, i, xp, D1);\\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\\n\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            uint256 dx_expected;\\n            if (k == i) {\\n                dx_expected = (xp[k] * D1) / D0 - new_y;\\n            } else {\\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\\n            }\\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\\n        }\\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\\n\\n        return (dy, dy_0 - dy);\\n    }\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256) {\\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\\n        return dy;\\n    }\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external nonReentrant {\\n        // Remove _amount of liquidity all in a form of coin i\\n        require(!is_killed, \\\"Killed\\\");\\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(_token_amount, i);\\n        require(dy >= min_amount, \\\"Not enough coins removed\\\");\\n\\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\\n        transfer_out(coins[i], dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\\n    }\\n\\n    function transfer_out(address coin_address, uint256 value) internal {\\n        if (coin_address == BNB_ADDRESS) {\\n            _safeTransferBNB(msg.sender, value);\\n        } else {\\n            IERC20(coin_address).safeTransfer(msg.sender, value);\\n        }\\n    }\\n\\n    function transfer_in(address coin_address, uint256 value) internal {\\n        if (coin_address == BNB_ADDRESS) {\\n            require(value == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(coin_address).safeTransferFrom(msg.sender, address(this), value);\\n        }\\n    }\\n\\n    function _safeTransferBNB(address to, uint256 value) internal {\\n        (bool success, ) = to.call{gas: bnb_gas, value: value}(\\\"\\\");\\n        require(success, \\\"BNB transfer failed\\\");\\n    }\\n\\n    // Admin functions\\n\\n    function set_bnb_gas(uint256 _bnb_gas) external onlyOwner {\\n        require(_bnb_gas >= MIN_BNB_GAS && _bnb_gas <= MAX_BNB_GAS, \\\"Illegal gas\\\");\\n        bnb_gas = _bnb_gas;\\n        emit SetBNBGas(_bnb_gas);\\n    }\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external onlyOwner {\\n        require(block.timestamp >= initial_A_time + MIN_RAMP_TIME, \\\"dev : too early\\\");\\n        require(_future_time >= block.timestamp + MIN_RAMP_TIME, \\\"dev: insufficient time\\\");\\n\\n        uint256 _initial_A = get_A();\\n        require(_future_A > 0 && _future_A < MAX_A, \\\"_future_A must be between 0 and MAX_A\\\");\\n        require(\\n            (_future_A >= _initial_A && _future_A <= _initial_A * MAX_A_CHANGE) ||\\n                (_future_A < _initial_A && _future_A * MAX_A_CHANGE >= _initial_A),\\n            \\\"Illegal parameter _future_A\\\"\\n        );\\n        initial_A = _initial_A;\\n        future_A = _future_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = _future_time;\\n\\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\\n    }\\n\\n    function stop_rampget_A() external onlyOwner {\\n        uint256 current_A = get_A();\\n        initial_A = current_A;\\n        future_A = current_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = block.timestamp;\\n        // now (block.timestamp < t1) is always False, so we return saved A\\n\\n        emit StopRampA(current_A, block.timestamp);\\n    }\\n\\n    function commit_new_fee(uint256 new_fee, uint256 new_admin_fee) external onlyOwner {\\n        require(admin_actions_deadline == 0, \\\"admin_actions_deadline must be 0\\\"); // dev: active action\\n        require(new_fee <= MAX_FEE, \\\"dev: fee exceeds maximum\\\");\\n        require(new_admin_fee <= MAX_ADMIN_FEE, \\\"dev: admin fee exceeds maximum\\\");\\n\\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\\n        future_fee = new_fee;\\n        future_admin_fee = new_admin_fee;\\n\\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\\n    }\\n\\n    function apply_new_fee() external onlyOwner {\\n        require(block.timestamp >= admin_actions_deadline, \\\"dev: insufficient time\\\");\\n        require(admin_actions_deadline != 0, \\\"admin_actions_deadline should not be 0\\\");\\n\\n        admin_actions_deadline = 0;\\n        fee = future_fee;\\n        admin_fee = future_admin_fee;\\n\\n        emit NewFee(fee, admin_fee);\\n    }\\n\\n    function revert_new_parameters() external onlyOwner {\\n        admin_actions_deadline = 0;\\n        emit RevertParameters();\\n    }\\n\\n    function admin_balances(uint256 i) external view returns (uint256) {\\n        if (coins[i] == BNB_ADDRESS) {\\n            return address(this).balance - balances[i];\\n        } else {\\n            return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n        }\\n    }\\n\\n    function withdraw_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value;\\n            if (coins[i] == BNB_ADDRESS) {\\n                value = address(this).balance - balances[i];\\n            } else {\\n                value = IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n            }\\n            if (value > 0) {\\n                transfer_out(coins[i], value);\\n            }\\n        }\\n    }\\n\\n    function donate_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (coins[i] == BNB_ADDRESS) {\\n                balances[i] = address(this).balance;\\n            } else {\\n                balances[i] = IERC20(coins[i]).balanceOf(address(this));\\n            }\\n        }\\n        emit DonateAdminFees();\\n    }\\n\\n    function kill_me() external onlyOwner {\\n        require(kill_deadline > block.timestamp, \\\"Exceeded deadline\\\");\\n        is_killed = true;\\n        emit Kill();\\n    }\\n\\n    function unkill_me() external onlyOwner {\\n        is_killed = false;\\n        emit Unkill();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeStableSwapLP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPancakeStableSwapLP {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burnFrom(address _to, uint256 _amount) external;\\n\\n    function setMinter(address _newMinter) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"token_amounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"admin_fee\",\"type\":\"uint256\"}],\"name\":\"CommitNewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DonateAdminFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"admin_fee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old_A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initial_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"future_time\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"token_amounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"token_amounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevertParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnb_gas\",\"type\":\"uint256\"}],\"name\":\"SetBNBGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unkill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ACTIONS_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KILL_DEADLINE_DT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A_CHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BNB_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BNB_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RAMP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLESWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"min_mint_amount\",\"type\":\"uint256\"}],\"name\":\"add_liquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_actions_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"admin_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_new_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calc_token_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calc_withdraw_one_coin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_admin_fee\",\"type\":\"uint256\"}],\"name\":\"commit_new_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate_admin_fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_dy\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_A_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_admin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_A_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"_coins\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LP\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill_me\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_future_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_future_time\",\"type\":\"uint256\"}],\"name\":\"ramp_A\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"min_amounts\",\"type\":\"uint256[2]\"}],\"name\":\"remove_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"max_burn_amount\",\"type\":\"uint256\"}],\"name\":\"remove_liquidity_imbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"remove_liquidity_one_coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revert_new_parameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnb_gas\",\"type\":\"uint256\"}],\"name\":\"set_bnb_gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop_rampget_A\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IPancakeStableSwapLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkill_me\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakeStableSwapTwoPool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}