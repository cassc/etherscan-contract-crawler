{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Storage{\r\n    address admin;\r\n    address public implementation;\r\n}\r\n\r\n\r\nabstract contract StorageV1 is Storage{\r\n    event Points(Mark mark, string project, address item, uint256 amount);\r\n    event Exchange(Intent  intent, string project, address item, uint256 points, uint256 tokens);\r\n    event Adjusted(Mark mark, string project, address item, uint256 amount);\r\n\r\n    enum Mark{\r\n        mint,\r\n        Burn\r\n    }\r\n\r\n    enum Intent{\r\n        pointsToToken,\r\n        tokenToPoints\r\n    }\r\n\r\n    struct PublishRecord{\r\n        Mark mark;\r\n        address item;\r\n        uint256 amount;\r\n        uint256 approvalTime;\r\n        address voting;\r\n    }\r\n\r\n    mapping (bytes32 => PublishRecord[]) publishRecords;\r\n\r\n    struct ExchangeRecord{\r\n        Intent  intent;\r\n        address item;\r\n        uint256 amountPoints;\r\n        uint256 amountToken;\r\n        uint256 exchangeTime;\r\n        address voting;\r\n    }\r\n    mapping (bytes32 => ExchangeRecord[]) exchangeRecords;\r\n\r\n    struct Adjust{\r\n        Mark    mark;\r\n        address item;\r\n        string  project;\r\n        uint256 amount;\r\n        uint256 adjustTime;\r\n        address voting;\r\n        string  comment;\r\n    }\r\n    \r\n    Adjust[] adjustes;    \r\n    mapping (bytes32 => uint256) totalSupply;\r\n    address public voter;\r\n    bytes32 public defaultPoints;\r\n    mapping(bytes32 => bool) supported;\r\n    string[] projects;\r\n}\r\n\r\ncontract Certificate is StorageV1{\r\n    \r\n    constructor(){\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(admin == msg.sender, \"Caller is not owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyVoter() {\r\n        require(voter == msg.sender, \"Caller is not voter.\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyOwner{\r\n        admin = _admin;\r\n    }\r\n\r\n    function setVoter(address _voter) external onlyOwner{\r\n        voter = _voter;\r\n    }\r\n\r\n    function initialize(address _voter) external onlyOwner{\r\n        voter = _voter;\r\n        defaultPoints = keccak256(abi.encodePacked(\"ONA\"));\r\n    }\r\n\r\n    function adjust(Mark _mark, string calldata _project, address _item, uint256 _amount,string calldata _comment) external onlyOwner{\r\n        require(_amount > 0, \"Invaid adjust amount.\");\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        if(Mark.mint == _mark) totalSupply[project] += _amount;\r\n        else totalSupply[project] -= _amount;\r\n        adjustes.push(Adjust(_mark, _item, _project, _amount, block.timestamp, msg.sender,_comment));\r\n        emit Adjusted(_mark, _project, _item, _amount);\r\n    }\r\n\r\n    function pointsCreate(string calldata _project, address _item, uint256 _amount) external onlyVoter{\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        if (!supported[project]) projects.push(_project);\r\n        totalSupply[project] += _amount;\r\n        publishRecords[project].push(PublishRecord(Mark.mint, _item, _amount, block.timestamp, msg.sender));\r\n        emit Points(Mark.mint, _project, _item, _amount);\r\n    }\r\n\r\n    function pointsBurn(string calldata _project, address _item, uint256 _amount) external onlyVoter{\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        require(totalSupply[project] > _amount,\"Insufficient amount.\");\r\n        totalSupply[project] -= _amount;\r\n        publishRecords[project].push(PublishRecord(Mark.Burn, _item, _amount, block.timestamp, msg.sender));\r\n        emit Points(Mark.Burn, _project, _item, _amount);\r\n    }\r\n\r\n    function exchange(Intent _intent,string calldata _project, address _item, uint256 _amountPoints, uint256 _amountToken) external onlyVoter{\r\n        require(_amountPoints > 0 && _amountToken > 0, \"Invalid points amount.\");\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        if(Intent.pointsToToken == _intent) {\r\n            totalSupply[project] -= _amountPoints;\r\n            totalSupply[defaultPoints] += _amountToken;\r\n        }else{\r\n            totalSupply[project] += _amountPoints;\r\n            totalSupply[defaultPoints] -= _amountToken;\r\n        }\r\n        exchangeRecords[project].push(ExchangeRecord(_intent, _item, _amountPoints, _amountToken, block.timestamp, msg.sender));\r\n        emit Exchange(_intent, _project, _item, _amountPoints, _amountToken);\r\n    }\r\n\r\n    function searchSupply(string calldata _project) external view returns(uint256){\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        return totalSupply[project];\r\n    }\r\n\r\n    function searchPublishRecords(string calldata _project) external view returns(PublishRecord[] memory){\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        return publishRecords[project];\r\n    }\r\n\r\n    function searchExchangeRecords(string calldata _project) external view returns(ExchangeRecord[] memory){\r\n        bytes32 project = keccak256(abi.encodePacked(_project));\r\n        return exchangeRecords[project];\r\n    }\r\n\r\n    function searchAdjustRecords() external view returns(Adjust[] memory){\r\n        return adjustes;\r\n    }\r\n\r\n    function getProject() external view returns(string[] memory){\r\n        return projects;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StorageV1.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"project\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Adjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StorageV1.Intent\",\"name\":\"intent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"project\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StorageV1.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"project\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Points\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum StorageV1.Mark\",\"name\":\"_mark\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPoints\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StorageV1.Intent\",\"name\":\"_intent\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProject\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pointsBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pointsCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"searchAdjustRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"enum StorageV1.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"project\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voting\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"internalType\":\"struct StorageV1.Adjust[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"}],\"name\":\"searchExchangeRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"enum StorageV1.Intent\",\"name\":\"intent\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voting\",\"type\":\"address\"}],\"internalType\":\"struct StorageV1.ExchangeRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"}],\"name\":\"searchPublishRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"enum StorageV1.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voting\",\"type\":\"address\"}],\"internalType\":\"struct StorageV1.PublishRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project\",\"type\":\"string\"}],\"name\":\"searchSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Certificate", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f0ae590c5a4a082538a50c4de8374f2bec0ba1628d3bbc08edcee9272c6f823"}