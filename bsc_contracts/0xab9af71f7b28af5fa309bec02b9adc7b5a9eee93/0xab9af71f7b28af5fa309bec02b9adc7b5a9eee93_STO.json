{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/STO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract STO is Context, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public rate; // token rate against of stable coin\\n    IERC20 private token; // token address\\n    address private wallet; // company wallet address to withdraw after STO is finished\\n\\n    uint256 public softCap; // softCap for STO\\n    uint256 public hardCap; // hardCap for STO\\n\\n    uint256 private weiRaised; // total raised funds in Stable Coins\\n    uint256 public endSTODate; // end date for STO\\n    uint256 public startSTODate; // start date for STO\\n\\n    uint256 public minPurchase; // minimum investment amount in Stable Coin\\n    uint256 public maxPurchase; // maximum investment amount in Stable Coin\\n\\n    string[] acceptedCoins; // array of Stable Coin names accepted to invest\\n    mapping(string => address) acceptedCoin; // address of accepted Stable Coin\\n\\n    mapping(address => bool) isClaimed; // status to represent if a specfic user claimed\\n    mapping(address => uint256) totalInvestedOf; // total investment for a specific user\\n    mapping(address => uint256) purchasedTokensOf; // total bought token amount for a specific user\\n    mapping(address => mapping(string => uint256)) investedCoinsOf; // investment by Stable Coins for a specfic user\\n\\n    /**\\n     * @param purchaser user who invests to buy tokens\\n     * @param beneficiary user who get tokens in practice\\n     * @param coins Stable Coin amount invested\\n     * @param coinName Stable Coin Name invested\\n     * @param tokens Token amount bought\\n     * @dev event which occurs when token was purchased successfully.\\n     */\\n    event TokensPurchased(\\n        address indexed purchaser,\\n        address indexed beneficiary,\\n        uint256 coins,\\n        string coinName,\\n        uint256 tokens\\n    );\\n\\n    /**\\n     * @dev event which occurs when STO was started.\\n     */\\n    event STOStarted(\\n        uint256 startSTO,\\n        uint256 endSTO,\\n        uint256 minPurchase,\\n        uint256 maxPurchase,\\n        uint256 softCap,\\n        uint256 hardCap\\n    );\\n\\n    /**\\n     * @dev event which occurs when raised fund for a specific user was refunded.\\n     */\\n    event Refunded(address indexed beneficiary);\\n\\n    /**\\n     * @dev event which occurs when whole raised funds were withdrawn into company's account.\\n     */\\n    event Withdrawn(address indexed wallet);\\n\\n    event StableCoinAdded(address indexed coin, string coinName);\\n    event StableCoinRemoved(string coinName);\\n\\n    /**\\n     * @dev constructor\\n     */\\n    constructor(\\n        uint256 _rate,\\n        address _wallet,\\n        address _token,\\n        uint256 _startSTO,\\n        uint256 _endSTO,\\n        uint256 _minPurchase,\\n        uint256 _maxPurchase,\\n        uint256 _softCap,\\n        uint256 _hardCap,\\n        uint256 _weiRaised\\n    ) {\\n        require(\\n            _endSTO > _startSTO,\\n            \\\"STO: The ending date must be after the starting date\\\"\\n        );\\n        require(\\n            _softCap > 0 && _hardCap > _softCap,\\n            \\\"STO: softCap and hardCap must be larger than 0\\\"\\n        );\\n        require(_rate > 0, \\\"STO: rate must be larger than 0\\\");\\n        require(_wallet != address(0), \\\"STO: wallet is the zero address\\\");\\n        require(_token != address(0), \\\"STO: token is the zero address\\\");\\n        rate = _rate;\\n        wallet = _wallet;\\n        token = IERC20(_token);\\n        startSTODate = _startSTO;\\n        endSTODate = _endSTO;\\n        minPurchase = _minPurchase;\\n        maxPurchase = _maxPurchase;\\n        softCap = _softCap;\\n        hardCap = _hardCap;\\n        weiRaised = _weiRaised;\\n        acceptedCoins = [\\\"USDT\\\", \\\"USDC\\\", \\\"BUSD\\\", \\\"BKTUSD\\\"];\\n        acceptedCoin[\\\"USDT\\\"] = 0x55d398326f99059fF775485246999027B3197955;\\n        acceptedCoin[\\\"USDC\\\"] = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n        acceptedCoin[\\\"BUSD\\\"] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n        acceptedCoin[\\\"BKTUSD\\\"] = 0x8f12f949A5e82364602D6bA27DAfFD41FBD7d9ae;\\n    }\\n\\n    /**\\n     * @dev stoActive modifier possible all actions when STO is processed.\\n     */\\n    modifier stoActive() {\\n        require(\\n            block.timestamp < endSTODate &&\\n                block.timestamp > startSTODate &&\\n                hardCap > weiRaised,\\n            \\\"STO: STO must be active\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev stoFailed modifier possible all actions when STO isn't active.\\n     */\\n    modifier stoFailed() {\\n        require(\\n            endSTODate < block.timestamp && softCap > weiRaised,\\n            \\\"STO: STO must not be active\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice STO must be active to call this function.\\n     * @param _beneficiary the address whose get token.\\n     * @param _weiAmount the wei amount of Stable Coin to send\\n     * @param _coinName the stable coin name like (USDT, USDC or nay other Token that you accepting)\\n     * @dev Purchase Tokens\\n     */\\n    function buyTokens(\\n        address _beneficiary,\\n        uint256 _weiAmount,\\n        string memory _coinName\\n    ) public stoActive {\\n        require(acceptedCoin[_coinName] != address(0), \\\"Invalid Coin Name\\\");\\n        require(\\n            IERC20(acceptedCoin[_coinName]).balanceOf(_msgSender()) >=\\n                _weiAmount,\\n            \\\"Not Enough Coin Amount\\\"\\n        );\\n\\n        require(\\n            IERC20(acceptedCoin[_coinName]).allowance(\\n                _msgSender(),\\n                address(this)\\n            ) >= _weiAmount,\\n            \\\"NOT Enough Coin Amount Approved\\\"\\n        );\\n        _preValidatePurchase(_beneficiary, _weiAmount);\\n        uint256 tokens = _getTokenAmount(_weiAmount);\\n        IERC20(acceptedCoin[_coinName]).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            _weiAmount\\n        );\\n        weiRaised = weiRaised.add(_weiAmount);\\n        isClaimed[_beneficiary] = false;\\n        totalInvestedOf[_beneficiary] = totalInvestedOf[_beneficiary].add(\\n            _weiAmount\\n        );\\n        purchasedTokensOf[_beneficiary] = purchasedTokensOf[_beneficiary].add(\\n            tokens\\n        );\\n        investedCoinsOf[_beneficiary][_coinName] = investedCoinsOf[\\n            _beneficiary\\n        ][_coinName].add(_weiAmount);\\n        _deliverTokens(_beneficiary, tokens);\\n        emit TokensPurchased(\\n            _msgSender(),\\n            _beneficiary,\\n            _weiAmount,\\n            _coinName,\\n            tokens\\n        );\\n    }\\n\\n    /**\\n     * @param _beneficiary the User address to refund\\n     * @dev If STO goal is not reached softCap, then Investors Claim their funds that they spend for Purchse token.\\n     */\\n    function claimRefund(address _beneficiary) public stoFailed {\\n        require(\\n            isClaimed[_beneficiary] == false,\\n            \\\"STO: Only STO member can refund coins!\\\"\\n        );\\n        isClaimed[_beneficiary] = true;\\n        for (uint256 i = 0; i < acceptedCoins.length; i++) {\\n            if (investedCoinsOf[_beneficiary][acceptedCoins[i]] > 0) {\\n                IERC20(acceptedCoin[acceptedCoins[i]]).transfer(\\n                    _beneficiary,\\n                    investedCoinsOf[_beneficiary][acceptedCoins[i]]\\n                );\\n                totalInvestedOf[_beneficiary].sub(\\n                    investedCoinsOf[_beneficiary][acceptedCoins[i]]\\n                );\\n            }\\n        }\\n        emit Refunded(_beneficiary);\\n    }\\n\\n    /**\\n     * @dev Withdraw Whole Raised Funds into Company's account when STO is finished successfully.\\n     */\\n    function withdraw() external onlyOwner {\\n        for (uint256 i = 0; i < acceptedCoins.length; i++) {\\n            IERC20(acceptedCoin[acceptedCoins[i]]).transfer(\\n                wallet,\\n                IERC20(acceptedCoin[acceptedCoins[i]]).balanceOf(address(this))\\n            );\\n        }\\n        emit Withdrawn(wallet);\\n    }\\n\\n    /**\\n     * @dev Internal function checking all rules and regulation before purchase token This is internal function no one could call from outside\\n     * @param _beneficiary Its beneficary address\\n     * @param _weiAmount wei amount\\n     * @notice Until and unless owner also couldn't call\\n     */\\n    function _preValidatePurchase(\\n        address _beneficiary,\\n        uint256 _weiAmount\\n    ) internal view {\\n        require(\\n            _beneficiary != address(0),\\n            \\\"STO: beneficiary is the zero address\\\"\\n        );\\n        require(_weiAmount != 0, \\\"STO: weiAmount is 0\\\");\\n        require(_weiAmount >= minPurchase, \\\"have to send at least minPurchase\\\");\\n        require(_weiAmount <= maxPurchase, \\\"have to send at most maxPurchase\\\");\\n        this;\\n    }\\n\\n    /**\\n     * @dev internal function which deliver Token to User\\n     */\\n    function _deliverTokens(\\n        address _beneficiary,\\n        uint256 _tokenAmount\\n    ) internal {\\n        token.transfer(_beneficiary, _tokenAmount);\\n    }\\n\\n    /**\\n     * @param _weiAmount amount in wei of USD from investor\\n     * @dev Internally Get Token Amount\\n     */\\n    function _getTokenAmount(\\n        uint256 _weiAmount\\n    ) internal view returns (uint256) {\\n        return _weiAmount.mul(10 ** 18).div(rate);\\n    }\\n\\n    /**\\n     * @notice Only Owner can set Token that accepting for purchase Token that on sell.\\n     * @param _coin Stable Coin Address to add\\n     * @param _coinName Stable Coin Name to add\\n     */\\n    function acceptCoin(\\n        address _coin,\\n        string memory _coinName\\n    ) external onlyOwner {\\n        require(acceptedCoin[_coinName] == address(0), \\\"Already Exist\\\");\\n        acceptedCoin[_coinName] = _coin;\\n        acceptedCoins.push(_coinName);\\n        emit StableCoinAdded(_coin, _coinName);\\n    }\\n\\n    /**\\n     * @notice Owner Remove Token Accept Token to purchase token.\\n     * @param _coinName Stable Coin Name to remove\\n     */\\n    function removeAcceptedCoin(string memory _coinName) external onlyOwner {\\n        require(acceptedCoin[_coinName] != address(0), \\\"Token Not Exist\\\");\\n        acceptedCoin[_coinName] = address(0);\\n        for (uint256 i = 0; i < acceptedCoins.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(acceptedCoins[i])) ==\\n                keccak256(abi.encodePacked(_coinName))\\n            ) {\\n                acceptedCoins[i] = acceptedCoins[acceptedCoins.length - 1];\\n                acceptedCoins.pop();\\n            }\\n        }\\n        emit StableCoinRemoved(_coinName);\\n    }\\n\\n    /**\\n     * @notice Only owner can set rate\\n     * @dev Set Rate\\n     * @param _rate New Rate\\n     */\\n    function setRate(uint256 _rate) external onlyOwner {\\n        require(_rate > 0, \\\"STO: rate must be larger than 0\\\");\\n        rate = _rate;\\n    }\\n\\n    /**\\n     * @notice Only owner can set wallet address\\n     * @dev Set wallet address\\n     * @param _wallet new wallet address\\n     */\\n    function setWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"STO: wallet is the zero address\\\");\\n        wallet = _wallet;\\n    }\\n\\n    /**\\n     * @notice Only owner can set softCap\\n     * @dev Set softCap\\n     * @param _softCap new softCap in wei\\n     */\\n    function setSoftCap(uint256 _softCap) external onlyOwner {\\n        require(_softCap > 0, \\\"STO: softCap must be larger than 0\\\");\\n        softCap = _softCap;\\n    }\\n\\n    /**\\n     * @notice Only owner can set hardCap\\n     * @dev Set hardCap\\n     * @param _hardCap new hardCap in wei\\n     */\\n    function setHardCap(uint256 _hardCap) external onlyOwner {\\n        require(_hardCap > 0, \\\"STO: hardCap must be larger than 0\\\");\\n        hardCap = _hardCap;\\n    }\\n\\n    /**\\n     * @notice Only owner can set startSTODate\\n     * @dev Set startSTODate\\n     * @param _startSTODate new start STO date\\n     */\\n    function setStartSTODate(uint256 _startSTODate) external onlyOwner {\\n        require(_startSTODate > 0, \\\"STO: start STO Date must be larger than 0\\\");\\n        startSTODate = _startSTODate;\\n    }\\n\\n    /**\\n     * @notice Only owner can set endSTODate\\n     * @dev Set endSTODate\\n     * @param _endSTODate new end STO date\\n     */\\n    function setEndSTODate(uint256 _endSTODate) external onlyOwner {\\n        require(_endSTODate > 0, \\\"STO: end STO Date must be larger than 0\\\");\\n        endSTODate = _endSTODate;\\n    }\\n\\n    /**\\n     * @notice Only owner can set minPurchase\\n     * @dev Set minPurchase\\n     * @param _minPurchase new minPurchase\\n     */\\n    function setMinPurchase(uint256 _minPurchase) external onlyOwner {\\n        require(_minPurchase > 0, \\\"STO: minPurchase must be larger than 0\\\");\\n        minPurchase = _minPurchase;\\n    }\\n\\n    /**\\n     * @notice Only owner can set maxPurchase\\n     * @dev Set maxPurchase\\n     * @param _maxPurchase new maxPurchase\\n     */\\n    function setMaxPurchase(uint256 _maxPurchase) external onlyOwner {\\n        require(_maxPurchase > 0, \\\"STO: maxPurchase must be larger than 0\\\");\\n        maxPurchase = _maxPurchase;\\n    }\\n\\n    /**\\n     * @dev Get rate\\n     */\\n    function getRate() external view returns (uint256) {\\n        return rate;\\n    }\\n\\n    /**\\n     * @dev Its function just getting current block time from blockchain.\\n     */\\n    function getCurrentTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Get STO End Time.\\n     */\\n    function getEndSTOTimestamp() external view returns (uint256) {\\n        return endSTODate;\\n    }\\n\\n    /**\\n     * @dev Get STO Start Time.\\n     */\\n    function getStartSTOTimestamp() external view returns (uint256) {\\n        return startSTODate;\\n    }\\n\\n    /**\\n     * @dev Get total raised Stable Coin in wei.\\n     */\\n    function getWeiRaised() external view returns (uint256) {\\n        return weiRaised;\\n    }\\n\\n    /**\\n     * @dev Get hardcap in wei.\\n     */\\n    function getHardCap() external view returns (uint256) {\\n        return hardCap;\\n    }\\n\\n    /**\\n     * @dev Get softCap in wei.\\n     */\\n    function getSoftCap() external view returns (uint256) {\\n        return softCap;\\n    }\\n\\n    /**\\n     * @dev Get minPurchase in wei\\n     */\\n    function getMinPurchase() external view returns (uint256) {\\n        return minPurchase;\\n    }\\n\\n    /**\\n     * @dev Get maxPurchase in wei\\n     */\\n    function getMaxPurchase() external view returns (uint256) {\\n        return maxPurchase;\\n    }\\n\\n    /**\\n     * @dev Get total invested Stable Coin for a specific user.\\n     */\\n    function getTotalInvestedOf() external view returns (uint256) {\\n        return totalInvestedOf[_msgSender()];\\n    }\\n\\n    /**\\n     * @dev Get total purchased tokens amount for a specific user.\\n     */\\n    function getPurchasedTokensOf() external view returns (uint256) {\\n        return purchasedTokensOf[_msgSender()];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startSTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endSTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startSTO\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endSTO\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"}],\"name\":\"STOStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"}],\"name\":\"StableCoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"}],\"name\":\"StableCoinRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_coinName\",\"type\":\"string\"}],\"name\":\"acceptCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_coinName\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSTODate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndSTOTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchasedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoftCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartSTOTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvestedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coinName\",\"type\":\"string\"}],\"name\":\"removeAcceptedCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endSTODate\",\"type\":\"uint256\"}],\"name\":\"setEndSTODate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"setMinPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startSTODate\",\"type\":\"uint256\"}],\"name\":\"setStartSTODate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSTODate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "STO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000002141096416a0f02c9ec8739cdeaf31858f9c75d800000000000000000000000054617b6b6dbcd7896e8288851d1d9f3bae9bdae00000000000000000000000000000000000000000000000000000000064b816900000000000000000000000000000000000000000000000000000000065315280000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000427df95f24b310400000000000000000000000000000000000000000000000003bd835db56a4c9c0000000000000000000000000000000000000000000000000427df95f24b310400000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}