{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LibV2.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract LibV2 {\\n\\n    function batchBalanceOf(address[] calldata tokens, address[] calldata wallets) \\n     external\\n        view\\n        returns (uint256[] memory results)\\n    {\\n       require(tokens.length == wallets.length,\\\"invalid input\\\");\\n       results = new uint256[](wallets.length);\\n       for (uint256 i = 0; i < tokens.length; i++) {\\n           address token = tokens[i];\\n           address wallet = wallets[i];\\n           if(token == address(0)) {\\n               results[i] = wallet.balance;\\n           }\\n           else {\\n               results[i] = IERC20(token).balanceOf(wallet);\\n           }\\n       }\\n    }    \\n\\n    function multiStaticCall(address[] calldata addr, bytes[] calldata data)\\n        external\\n        view\\n        returns (bool[] memory bools,bytes[] memory results)\\n    {\\n        require(addr.length==data.length,\\\"invalid input\\\");\\n        bools = new bool[](data.length);\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(addr[i]).staticcall(\\n                data[i]\\n            );\\n            bools[i] = success;\\n            if(success) results[i] = result;\\n        }\\n    }\\n\\n    function singleContractMultiStaticCall(address addr, bytes[] calldata data)\\n        external\\n        view\\n        returns (bool[] memory bools,bytes[] memory results)\\n    {\\n        bools = new bool[](data.length);\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = addr.staticcall(\\n                data[i]\\n            );\\n            bools[i] = success;\\n            if(success) results[i] = result;\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"batchBalanceOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"results\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multiStaticCall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"bools\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"singleContractMultiStaticCall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"bools\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LibV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}