{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event BuyOrderCancelled(address indexed user, uint256 amount);\r\n    event SellOrderCancelled(address indexed user, uint256 tokenAmount);\r\n    event DividendsClaimed(address indexed user, uint256 amount);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BombFi is IERC20, Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    bool public isTransactionEnabled;\r\n\r\n    struct BuyOrder {\r\n        uint256 price;\r\n        uint256 amount;\r\n        address payable user;\r\n        bool isActive; // \u8ba2\u5355\u72b6\u6001\r\n    }\r\n\r\n    struct RedPacket {\r\n        uint256 amountPerUser; // \u6bcf\u4e2a\u5730\u5740\u53ef\u4ee5\u9886\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\r\n        uint256 totalUsers; // \u7ea2\u5305\u603b\u4eba\u6570\r\n        uint256 claimedUsers; // \u5df2\u9886\u53d6\u7ea2\u5305\u7684\u4eba\u6570\r\n        address owner; // \u53d1\u7ea2\u5305\u8005\u5730\u5740\r\n        uint256 deadline; // \u7ea2\u5305\u5230\u671f\u65f6\u95f4\r\n        mapping(address => bool) claimed; // \u8bb0\u5f55\u5730\u5740\u662f\u5426\u5df2\u9886\u53d6\u7ea2\u5305\r\n    }\r\n\r\n    mapping (address => bool) public pairs;//\u8d44\u91d1\u6c60\u5730\u5740\r\n    address public constant feeAddress = 0x000000000000000000000000000000000000dEaD;//\u9ed1\u6d1e\u9500\u6bc1\u5730\u5740\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping(address => uint256) public lpBalances;\r\n    mapping(address => uint256) public lastClaimTime;\r\n    mapping(uint256 => BuyOrder) public buyOrders;\r\n    mapping(address => uint256) public miningBalances; // \u8bb0\u5f55\u7528\u6237\u6fc0\u6d3b\u65f6\u7684\u94ed\u6587\u4f59\u989d\r\n    mapping(address => uint256) public lastMiningActivation; // \u8bb0\u5f55\u7528\u6237\u4e0a\u6b21\u6fc0\u6d3b\u6316\u77ff\u7684\u65f6\u95f4\r\n    mapping(address => uint256) public lastMiningTime; // \u9884\u552e\u7528\u6237\u4e0a\u6b21\u6316\u77ff\u65f6\u95f4\r\n    mapping(uint256 => RedPacket) public redPackets;//\u8bb0\u5f55\u7ea2\u5305\u4fe1\u606f\r\n    mapping(address => uint256) public NP; // \u8bb0\u5f55\u6bcf\u4e2a\u9884\u552e\u5730\u5740\u7684NP\r\n    \r\n    uint256 public presalePrice; // \u9884\u552e\u4ef7\u683c\r\n    uint256 public nextOrderId; // \u4e0b\u4e00\u4e2a\u8ba2\u5355\u7f16\u53f7\r\n    uint256 public nextRedPacketId;\r\n    uint256 public airdropTotal; //\u603bMint\u6570\u91cf\r\n    uint256 public lockTotal; //\u603b\u9884\u552e\u91cf\uff0c\u5168\u90e8\u6253\u5165\u9ed1\u6d1e\r\n    uint256 public poolTotal; //\u52a0\u5e95\u6c60\u6570\u91cf\r\n    uint256 public totalLP;\r\n\r\n    uint256 public currentPrice; // \u5f53\u524d\u4ef7\u683c\r\n\r\n    uint256 public DIVIDEND_PER_LP_PER_SECOND; //\u6bcf\u4e2aLP\u6316\u77ff\u6536\u76ca\r\n    uint256 public ORDER_POOL_THRESHOLD; //\u81ea\u52a8\u6302\u5355\u9608\u503c\r\n    uint256 public miningCoefficient; // \u6316\u77ff\u7cfb\u6570\r\n\r\n    uint256 public buyOrderPool;//\u4e70\u76d8\u6c60\r\n    uint256 public sellOrderPool;//\u5356\u76d8\u6c60\r\n    uint256 public orderPool; // \u6302\u5355\u6c60\r\n    uint256 public dividendPool;//\u5206\u7ea2\u6c60\r\n    uint256 public inscriptionPool;//\u94ed\u6587\u6c60\r\n    uint256 public bombPool;//\u70b8\u5f39\u6c60\r\n\r\n    event addLiquidityETH(address indexed user, uint256 bnbAmount, uint256 tokenAmount, uint256 lpAmount);\r\n    event LiquidityRemoved(address indexed user, uint256 lpAmount, uint256 bnbAmount, uint256 tokenAmount);\r\n    event ExchangeBNBForTokens(address indexed buyer, uint256 bnbAmount, uint256 tokenAmount);\r\n    event ExchangeTokensForBNB(address indexed seller, uint256 tokenAmount, uint256 bnbAmount);\r\n    event FundDistributed(address indexed sender, uint256 inscriptionAmount, uint256 bombAmount);//\u94ed\u6587\u4e8b\u4ef6\r\n    event BuyOrderPlaced(uint256 indexed orderId, address indexed user, uint256 price, uint256 amount);\r\n    event BuyOrderFilled(uint256 indexed orderId, address indexed seller, uint256 amount);\r\n    event MiningActivated(address indexed user, uint256 balance, uint256 timestamp);\r\n    event MiningRewardsClaimed(address indexed user, uint256 reward);\r\n    event RedPacketCreated(uint256 indexed redPacketId, address indexed owner, uint256 amountPerUser, uint256 totalUsers, uint256 deadline);\r\n    event RedPacketClaimed(uint256 indexed redPacketId, address indexed claimant, uint256 amount);\r\n    event RedPacketRefunded(uint256 indexed redPacketId, address indexed owner, uint256 amount);\r\n\r\nconstructor() public {\r\n\r\n    symbol = \"BTXJ\";\r\n    name = \"BTXJFi\";\r\n    decimals = 0;\r\n    _totalSupply = 21000000 * 10**uint(decimals);\r\n\r\n    isTransactionEnabled = true;\r\n    airdropTotal =0 * 10**uint(decimals);\r\n    lockTotal = 5000000 * 10**uint(decimals);\r\n    poolTotal = 1000000 * 10**uint(decimals);\r\n    DIVIDEND_PER_LP_PER_SECOND = 1; // \u4f8b\u5982\uff0c\u6bcf\u79d2\u6bcfLP\u5206\u7ea21\u4e2a\u5355\u4f4d\r\n    ORDER_POOL_THRESHOLD = 5000000000000000000; // \u4f8b\u5982\uff0c\u6302\u5355\u6c60\u9608\u503c\u4e3a5 ETH\r\n    presalePrice = 50000; //\u9884\u552e\u521d\u59cb\u4ef7\u683c1ETH=200\u5f20\u94ed\u6587\r\n    miningCoefficient = 5184000;\r\n}\r\n\r\n    function totalSupply() public view  returns (uint256) {\r\n        return airdropTotal.add(1000000);\r\n    }\r\n\r\n    function MAXSupply() public view  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function() payable external {\r\n        require(isTransactionEnabled, \"Transaction is currently disabled\"); //\u68c0\u67e5\u4ea4\u6613\u662f\u5426\u88ab\u5141\u8bb8\r\n        require(msg.value >= currentPrice.mul(100), \"Sent amount is too little\"); // \u786e\u4fdd\u53d1\u9001\u7684BNB\u6570\u91cf\u7b26\u5408\u5f53\u524d\u4ef7\u683c\r\n\r\n        // \u786e\u4fddMINT\u603b\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u603b\u4f9b\u5e94\u91cf\r\n        uint256 newAirdropTotal = airdropTotal.add(100);\r\n        require(newAirdropTotal <= 15000000 * 10**uint(decimals), \"Mint limit exceeded\");\r\n\r\n        // \u4e3a\u53d1\u9001\u8005\u589e\u52a0100\u4e2a\u4ee3\u5e01\u5355\u4f4d\r\n        balances[msg.sender] = balances[msg.sender].add(100);\r\n        airdropTotal = newAirdropTotal;\r\n\r\n        // \u81ea\u52a8\u5206\u914d\u8d44\u91d1\u5230\u94ed\u6587\u6c60\u548c\u70b8\u5f39\u6c60\r\n        uint256 inscriptionShare = msg.value.mul(60).div(100);\r\n        uint256 bombShare = msg.value.sub(inscriptionShare);   \r\n\r\n        inscriptionPool = inscriptionPool.add(inscriptionShare);\r\n        bombPool = bombPool.add(bombShare);\r\n\r\n        // \u53ef\u9009\uff1a\u89e6\u53d1\u4e00\u4e2a\u4e8b\u4ef6\u6765\u8bb0\u5f55\u8fd9\u6b21\u5206\u914d\r\n        emit FundDistributed(msg.sender, inscriptionShare, bombShare);\r\n    }\r\n\r\n\r\n    function getbomb() public onlyOwner {\r\n        address(msg.sender).transfer(address(this).balance);\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance.sub(amount)); // \u4f7f\u7528SafeMath\u7684sub\u51fd\u6570\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        uint256 senderBalance = balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        balances[sender] = senderBalance.sub(amount); // \u4f7f\u7528SafeMath\u7684sub\u51fd\u6570\r\n        \r\n        uint256 receiveAmount = amount;\r\n        if(pairs[sender] || pairs[recipient]) {\r\n            uint256 feeAmount = amount.mul(50).div(1000); // \u4f7f\u7528SafeMath\u7684mul\u548cdiv\u51fd\u6570\r\n            _transferNormal(sender, feeAddress, feeAmount);\r\n            receiveAmount = receiveAmount.sub(feeAmount); // \u4f7f\u7528SafeMath\u7684sub\u51fd\u6570\r\n        }\r\n        _transferNormal(sender, recipient, receiveAmount);\r\n    }\r\n\r\n    function _transferNormal(address sender, address recipient, uint256 amount) private {\r\n        if(recipient == address(0)){\r\n           // _totalSupply = _totalSupply.sub(amount); // \u4f7f\u7528SafeMath\u7684sub\u51fd\u6570\r\n            balances[feeAddress] = balances[feeAddress].add(amount);\r\n        }else {\r\n            balances[recipient] = balances[recipient].add(amount); // \u4f7f\u7528SafeMath\u7684add\u51fd\u6570\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function getETHnum() public view returns (uint num){\r\n        return address(this).balance;\r\n    }\r\n\r\n    //\u7ba1\u7406\u5458\u8bbe\u7f6e\u8d44\u91d1\u6c60\u624b\u7eed\u8d39\r\n    function setPair(address _pair, bool b) external onlyOwner {\r\n        pairs[_pair] = b;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ea4\u6613\u72b6\u6001\r\n    function setTransactionStatus(bool status) public onlyOwner {\r\n        isTransactionEnabled = status;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u9884\u552e\u4ef7\u683c\uff0c\u8bbe\u7f6e1\u4e2aETH=\u591a\u5c11\u5f20\u94ed\u6587\r\n    function setPresalePrice(uint256 _price) public onlyOwner {\r\n        presalePrice = _price;\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u8bbe\u7f6e\u6316\u77ff\u7cfb\u6570\r\n    function setMiningCoefficient(uint256 _coefficient) public onlyOwner {\r\n        miningCoefficient = _coefficient;\r\n    }\r\n    \r\n    // \u7ba1\u7406\u5458\u9996\u6b21\u6dfb\u52a0\u6d41\u52a8\u6027\r\n    function initialAddLiquidity(uint256 tokenAmount) external payable onlyOwner {\r\n        require(tokenAmount > 0 && msg.value > 0, \"Amounts must be greater than 0\");\r\n        require(buyOrderPool == 0 && sellOrderPool == 0, \"Liquidity already initialized\");\r\n\r\n        // \u4ece\u7ba1\u7406\u5458\u8d26\u6237\u4e2d\u6263\u9664\u4ee3\u5e01\r\n        require(balances[msg.sender] >= tokenAmount, \"Insufficient token balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n\r\n        // \u8bbe\u7f6e\u4e70\u76d8\u6c60\u548c\u5356\u76d8\u6c60\u7684\u521d\u59cb\u6570\u91cf\r\n        buyOrderPool = msg.value;\r\n        sellOrderPool = tokenAmount;\r\n\r\n        // \u8ba1\u7b97\u521d\u59cbLP\u4ee3\u5e01\u6570\u91cf\uff0c\u53ef\u4ee5\u6839\u636e\u7279\u5b9a\u7684\u903b\u8f91\u6765\u51b3\u5b9a\r\n        uint256 initialLP = msg.value.mul(2);  // \u4f8b\u5982\uff0c\u6bcf1 BNB\u5bf9\u5e942\u4e2aLP\r\n\r\n        // \u66f4\u65b0\u7ba1\u7406\u5458\u7684LP\u4f59\u989d\u548c\u603bLP\u91cf\r\n        lpBalances[msg.sender] = lpBalances[msg.sender].add(initialLP);\r\n        totalLP = totalLP.add(initialLP);\r\n\r\n        // \u66f4\u65b0\u4ef7\u683c\r\n        updateCurrentPrice();\r\n\r\n        emit addLiquidityETH(msg.sender, msg.value, tokenAmount, initialLP);\r\n    }\r\n\r\n    // \u7528\u6237\u6dfb\u52a0\u6d41\u52a8\u6027\r\n    function addLiquidity(uint256 tokenAmount) public payable {\r\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n        require(balances[msg.sender] >= tokenAmount, \"Insufficient token balance\");\r\n        require(buyOrderPool > 0 && sellOrderPool > 0, \"Initial liquidity not yet added\");\r\n\r\n        // \u6839\u636e\u6c60\u5b50\u6bd4\u4f8b\u8ba1\u7b97\u6240\u9700BNB\u6570\u91cf\r\n        uint256 requiredBNB = tokenAmount.mul(buyOrderPool).div(sellOrderPool);\r\n\r\n        // \u5141\u8bb8\u7528\u6237\u652f\u4ed8\u7684BNB\u6570\u91cf\u5fc5\u987b\u8db3\u591f\r\n        require(msg.value >= requiredBNB, \"Insufficient BNB amount\");\r\n\r\n        // \u7ed3\u7b97\u5df2\u6709\u7684\u5206\u7ea2\r\n        if (lpBalances[msg.sender] > 0) {\r\n            uint256 dividends = calculateDividends(msg.sender);\r\n            if (dividends > 0) {\r\n                address(msg.sender).transfer(dividends);\r\n            }\r\n        }\r\n\r\n        // \u8ba1\u7b97\u7528\u6237\u83b7\u5f97\u7684LP\u4ee3\u5e01\u6570\u91cf\r\n        uint256 userLP;\r\n        userLP = totalLP.mul(requiredBNB.mul(2).mul(1e18)).div(buyOrderPool.mul(2));\r\n        userLP = userLP.div(1e18); // \u7f29\u5c0f\u56de\u539f\u6765\u7684\u89c4\u6a21\r\n\r\n        // \u66f4\u65b0lastClaimTime\r\n        lastClaimTime[msg.sender] = block.timestamp;\r\n\r\n        // \u66f4\u65b0\u7528\u6237\u7684LP\u4f59\u989d\u548c\u603bLP\u91cf\r\n        lpBalances[msg.sender] = lpBalances[msg.sender].add(userLP);\r\n        totalLP = totalLP.add(userLP);\r\n\r\n        // \u5904\u7406\u7528\u6237\u652f\u4ed8\u7684BNB\uff0c\u6dfb\u52a0\u5230\u4e70\u76d8\u6c60\r\n        buyOrderPool = buyOrderPool.add(msg.value);\r\n\r\n        // \u4ece\u7528\u6237\u4f59\u989d\u4e2d\u6263\u9664\u4ee3\u5e01\uff0c\u6dfb\u52a0\u5230\u5356\u76d8\u6c60\r\n        balances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n        sellOrderPool = sellOrderPool.add(tokenAmount);\r\n\r\n        // \u66f4\u65b0\u4ef7\u683c\r\n        updateCurrentPrice();\r\n\r\n        emit addLiquidityETH(msg.sender, msg.value, tokenAmount, userLP);\r\n    }\r\n\r\n    // \u79fb\u9664\u8d44\u91d1\u6c60\r\n    function removeLiquidity(uint256 lpAmount) public {\r\n        require(lpAmount > 0, \"LP amount must be greater than 0\");\r\n        require(lpBalances[msg.sender] >= lpAmount, \"Insufficient LP balance\");\r\n\r\n        // \u5728\u79fb\u9664\u6d41\u52a8\u6027\u4e4b\u524d\u7ed3\u7b97\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u5206\u7ea2\r\n        uint256 dividends = calculateDividends(msg.sender);\r\n        if (dividends > 0) {\r\n            address(msg.sender).transfer(dividends);\r\n        }\r\n\r\n        // \u7528\u6237\u7684\u4efd\u989d\u5360\u603b\u4efd\u989d\u7684\u6bd4\u4f8b\uff08\u653e\u5927\u4ee5\u4fdd\u6301\u7cbe\u5ea6\uff09\r\n        uint256 share = lpAmount.mul(1e18).div(totalLP);\r\n\r\n        // \u8ba1\u7b97\u7528\u6237\u53ef\u4ee5\u63d0\u53d6\u7684BNB\u548c\u4ee3\u5e01\u6570\u91cf\r\n        uint256 bnbAmount = buyOrderPool.mul(share).div(1e18);\r\n        uint256 tokenAmount = sellOrderPool.mul(share).div(1e18);\r\n\r\n        // \u91cd\u8981\uff1a\u5148\u66f4\u65b0LP\u548c\u6c60\u5b50\u72b6\u6001\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\r\n        lpBalances[msg.sender] = lpBalances[msg.sender].sub(lpAmount);\r\n        totalLP = totalLP.sub(lpAmount);\r\n        buyOrderPool = buyOrderPool.sub(bnbAmount);\r\n        sellOrderPool = sellOrderPool.sub(tokenAmount);\r\n\r\n        // \u66f4\u65b0\u7528\u6237\u7684\u6700\u540e\u9886\u53d6\u65f6\u95f4\r\n        lastClaimTime[msg.sender] = block.timestamp;\r\n\r\n        // \u8f6c\u79fbBNB\u548c\u4ee3\u5e01\u7ed9\u7528\u6237\r\n        msg.sender.transfer(bnbAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n\r\n        // \u66f4\u65b0\u4ef7\u683c\r\n        updateCurrentPrice();\r\n\r\n        emit LiquidityRemoved(msg.sender, lpAmount, bnbAmount, tokenAmount);\r\n    }\r\n\r\n    // BNB\u4ea4\u6362\u94ed\u6587\r\n    function exchangeBNBForTokens() public payable {\r\n        require(msg.value > 0, \"You must send BNB to exchange\");\r\n        require(buyOrderPool > 0 && sellOrderPool > 0, \"Exchange pools cannot be empty\");\r\n\r\n        // \u6839\u636e\u5f53\u524d\u6c60\u5b50\u72b6\u6001\u548c\u53d1\u9001\u7684BNB\u8ba1\u7b97\u6240\u80fd\u8d2d\u4e70\u7684\u4ee3\u5e01\u6570\u91cf\r\n        uint256 newBuyOrderPool = buyOrderPool.add(msg.value);\r\n        // \u7531\u4e8esellOrderPool\u662f\u6574\u6570\uff0c\u8fd9\u91cc\u8ba1\u7b97\u53ef\u80fd\u4f1a\u4e22\u5931\u7cbe\u5ea6\uff0c\u6240\u4ee5\u8981\u5148\u8f6c\u6362\u6210\u66f4\u5927\u7684\u5355\u4f4d\r\n        uint256 newSellOrderPool = sellOrderPool.mul(1e18).mul(buyOrderPool).div(newBuyOrderPool);\r\n        uint256 tokenAmount = sellOrderPool.mul(1e18).sub(newSellOrderPool);\r\n\r\n        // \u5411\u4e0b\u53d6\u6574\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u786e\u4fdd\u7528\u6237\u53ea\u6536\u5230\u6574\u6570\u6570\u91cf\u7684\u4ee3\u5e01\r\n        uint256 roundedTokenAmount = tokenAmount.div(1e18);\r\n\r\n        // \u68c0\u67e5\u662f\u5426\u6709\u8db3\u591f\u7684\u4ee3\u5e01\u53ef\u4f9b\u4ea4\u6362\r\n        require(roundedTokenAmount <= sellOrderPool, \"Not enough tokens in the sell order pool\");\r\n\r\n        // \u8ba1\u7b97\u7a0e\u8d39\r\n        uint256 tax = msg.value.mul(8).div(100); // \u5047\u8bbe8%\u7a0e\u8d39\r\n\r\n        // \u66f4\u65b0\u6c60\u5b50\u72b6\u6001\u548c\u5206\u7ea2\u6c60\r\n        sellOrderPool = sellOrderPool.sub(roundedTokenAmount);\r\n        buyOrderPool = newBuyOrderPool;\r\n        dividendPool = dividendPool.add(tax);\r\n\r\n        // \u66f4\u65b0\u7528\u6237\u4f59\u989d\r\n        balances[msg.sender] = balances[msg.sender].add(roundedTokenAmount);\r\n\r\n        // \u66f4\u65b0\u4ef7\u683c\r\n        updateCurrentPrice();\r\n\r\n        emit ExchangeBNBForTokens(msg.sender, roundedTokenAmount, msg.value);\r\n    }\r\n\r\n    //\u94ed\u6587\u4ea4\u6362BNB\r\n    function exchangeTokensForBNB(uint256 tokenAmount) public {\r\n        require(tokenAmount > 0, \"You must send tokens to exchange\");\r\n        require(balances[msg.sender] >= tokenAmount, \"Insufficient token balance\");\r\n        require(buyOrderPool > 0 && sellOrderPool > 0, \"Exchange pools cannot be empty\");\r\n\r\n        // \u8ba1\u7b97\u4ea4\u6613\u540e\u6c60\u5b50\u4e2d\u7684\u65b0\u4ee3\u5e01\u6570\u91cf\r\n        uint256 newSellOrderPool = sellOrderPool.add(tokenAmount);\r\n\r\n        // \u6839\u636e\u6052\u5b9a\u4e58\u79ef\u516c\u5f0f\u8ba1\u7b97BNB\u6570\u91cf\u7684\u53d8\u5316\r\n        uint256 newBuyOrderPool = sellOrderPool.mul(buyOrderPool).div(newSellOrderPool);\r\n\r\n        // \u7528\u6237\u83b7\u5f97\u7684BNB\u6570\u91cf\uff0c\u8003\u8651\u5230\u4ef7\u683c\u6ed1\u70b9\r\n        uint256 bnbAmountBeforeTax = buyOrderPool.sub(newBuyOrderPool);\r\n\r\n        require(bnbAmountBeforeTax <= buyOrderPool, \"Not enough BNB in the buy order pool\");\r\n\r\n        // \u8ba1\u7b97\u603b\u7a0e\u8d39\uff0813%\uff09\r\n        uint256 totalTax = bnbAmountBeforeTax.mul(13).div(100);\r\n        uint256 netBNB = bnbAmountBeforeTax.sub(totalTax); // \u51cf\u53bb\u603b\u7a0e\u8d39\r\n\r\n        // \u5206\u914d\u7a0e\u8d39\r\n        uint256 dividendTax = totalTax.mul(8).div(13); // \u4ece\u603b\u7a0e\u8d39\u4e2d\u5206\u51fa8/13\u7ed9\u5206\u7ea2\u6c60\r\n        uint256 orderTax = totalTax.sub(dividendTax);  // \u5269\u4f59\u76845/13\u7ed9\u6302\u5355\u6c60\r\n\r\n        // \u66f4\u65b0\u6c60\u5b50\u72b6\u6001\u548c\u5206\u7ea2\u6c60\r\n        //sellOrderPool = newSellOrderPool;\r\n        buyOrderPool = newBuyOrderPool;\r\n        dividendPool = dividendPool.add(dividendTax);\r\n        orderPool = orderPool.add(orderTax);\r\n\r\n        // \u66f4\u65b0\u7528\u6237\u4ee3\u5e01\u4f59\u989d\r\n        balances[msg.sender] = balances[msg.sender].sub(tokenAmount);\r\n        balances[feeAddress] = balances[feeAddress].add(tokenAmount);\r\n        // \u66f4\u65b0\u4ef7\u683c\r\n        updateCurrentPrice();\r\n\r\n        // \u8f6c\u79fbBNB\uff08\u51cf\u53bb\u7a0e\u8d39\u540e\uff09\u7ed9\u7528\u6237\r\n        msg.sender.transfer(netBNB);\r\n\r\n        // \u68c0\u67e5\u6302\u5355\u6c60\u662f\u5426\u8fbe\u5230\u81ea\u52a8\u6302\u5355\u9608\u503c\r\n        if (orderPool >= ORDER_POOL_THRESHOLD) {\r\n            autoPlaceBuyOrder();\r\n        }\r\n\r\n        emit ExchangeTokensForBNB(msg.sender, tokenAmount, netBNB);\r\n    }\r\n\r\n    //\u8ba1\u7b97\u5206\u7ea2\r\n    function calculateDividends(address user) public view returns (uint256) {\r\n        uint256 lpBalance = lpBalances[user];\r\n        if (lpBalance == 0 || lastClaimTime[user] == 0) {\r\n            return 0;\r\n        }\r\n        uint256 timeElapsed = block.timestamp - lastClaimTime[user];\r\n        uint256 dividends = timeElapsed.mul(DIVIDEND_PER_LP_PER_SECOND).mul(lpBalance).div(10000000);\r\n        return dividends;\r\n    }\r\n\r\n    //\u8ba1\u7b97\u4ef7\u683c\r\n    function updateCurrentPrice() internal {\r\n        if (sellOrderPool > 0) {\r\n            currentPrice = buyOrderPool.div(sellOrderPool);\r\n        } else {\r\n            currentPrice = 0; // \u6216\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u4ef7\u683c\r\n        }\r\n    }\r\n\r\n    // \u7528\u6237\u6302\u51fa\u4e70\u5355\r\n    function placeBuyOrder(uint256 price, uint256 amount) public payable {\r\n        require(msg.value == price * amount, \"Incorrect BNB amount\");\r\n        uint256 orderId = nextOrderId++;\r\n        buyOrders[orderId] = BuyOrder({\r\n            price: price,\r\n            amount: amount,\r\n            user: msg.sender,\r\n            isActive: true // \u521d\u59cb\u72b6\u6001\u8bbe\u4e3a true\uff08\u6d3b\u8dc3\uff09\r\n        });\r\n        emit BuyOrderPlaced(orderId, msg.sender, price, amount);\r\n    }\r\n\r\n    // \u5176\u4ed6\u7528\u6237\u6210\u4ea4\u6302\u4e70\u5355\r\n    function fillBuyOrder(uint256 orderId, uint256 amount) public {\r\n        BuyOrder storage order = buyOrders[orderId];\r\n        require(order.isActive, \"Order is already inactive\");\r\n        require(amount <= order.amount, \"Insufficient order amount\");\r\n        require(balances[msg.sender] >= amount, \"Insufficient token balance\");\r\n\r\n        uint256 totalCost = order.price * amount;\r\n        require(address(this).balance >= totalCost, \"Insufficient contract BNB balance\");\r\n\r\n        // \u4ece\u5356\u5bb6\u6263\u9664\u4ee3\u5e01\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        // \u5411\u4e70\u5bb6\u8f6c\u79fb\u4ee3\u5e01\r\n        balances[order.user] = balances[order.user].add(amount);\r\n\r\n        // \u5c06BNB\u4ece\u5408\u7ea6\u8f6c\u79fb\u7ed9\u5356\u5bb6\r\n        msg.sender.transfer(totalCost);\r\n\r\n        // \u66f4\u65b0\u8ba2\u5355\u4fe1\u606f\r\n        order.amount = order.amount.sub(amount);\r\n        if (order.amount == 0) {\r\n            order.isActive = false; // \u5b8c\u5168\u6210\u4ea4\u540e\uff0c\u6807\u8bb0\u8ba2\u5355\u4f1a\u88ab\u6807\u8bb0\u4e3a\u4e0d\u6d3b\u8dc3\r\n        }\r\n    }\r\n\r\n    // \u7528\u6237\u53d6\u6d88\u6302\u5355\r\n    function cancelBuyOrder(uint256 orderId) public {\r\n        BuyOrder storage order = buyOrders[orderId];\r\n        require(msg.sender == order.user, \"You are not the owner of the order\");\r\n        require(order.isActive, \"Order is already inactive\");\r\n\r\n        // \u9000\u8fd8\u9501\u5b9a\u7684\u8d44\u91d1\uff08\u5982\u679c\u6709\uff09\r\n        order.user.transfer(order.price * order.amount);\r\n\r\n        // \u66f4\u65b0\u8ba2\u5355\u72b6\u6001\r\n        order.isActive = false;\r\n\r\n    }\r\n\r\n    // \u8d44\u91d1\u6c60\u81ea\u52a8\u6302\u5355\u5e76\u516c\u5f00\u8ba2\u5355\r\n    function autoPlaceBuyOrder() internal {\r\n\r\n        // \u8ba1\u7b97\u6302\u5355\u4ef7\u683c\u4e3a\u5f53\u524d\u4ef7\u683c\u7684\u4e94\u5206\u4e4b\u4e00\r\n        uint256 orderPrice = currentPrice.div(3);\r\n        // \u8ba1\u7b97\u6302\u5355\u7684\u4ee3\u5e01\u6570\u91cf\r\n        uint256 tokenAmount = orderPool.mul(1e18).div(orderPrice); // \u7528\u6302\u5355\u6c60\u4e2d\u7684BNB\u6570\u91cf\u9664\u4ee5\u4ef7\u683c\r\n        uint256 roundedTokenAmount = tokenAmount.div(1e18);\r\n\r\n        // \u521b\u5efa\u5e76\u5b58\u50a8\u8ba2\u5355\r\n        uint256 orderId = nextOrderId++;\r\n        buyOrders[orderId] = BuyOrder({\r\n            price: orderPrice,\r\n            amount: roundedTokenAmount,\r\n            user: address(this), // \u8ba2\u5355\u6240\u6709\u8005\u662f\u5408\u7ea6\u81ea\u8eab\r\n            isActive: true\r\n        });\r\n        // \u51cf\u53bb\u7528\u4e8e\u6302\u5355\u7684BNB\r\n        orderPool = orderPool.sub(orderPrice.mul(roundedTokenAmount));\r\n    }\r\n    \r\n    // \u6fc0\u6d3b\u6316\u77ff\r\n    function activateMining() public {\r\n        uint256 userBalance = balances[msg.sender];\r\n        require(userBalance > 0, \"No tokens to activate mining\");\r\n\r\n        miningBalances[msg.sender] = userBalance;\r\n        lastMiningActivation[msg.sender] = block.timestamp;\r\n\r\n        emit MiningActivated(msg.sender, userBalance, block.timestamp);\r\n    }\r\n\r\n    // \u8ba1\u7b97\u6316\u77ff\u6536\u76ca\r\n    function calculateMiningRewards(address user) public view returns (uint256) {\r\n        if (miningBalances[user] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 timeElapsed = block.timestamp - lastMiningActivation[user];\r\n        uint256 totalTokens = airdropTotal;\r\n        uint256 userShare = miningBalances[user].mul(1e18).div(totalTokens);\r\n        uint256 totalRewards = inscriptionPool.mul(userShare).mul(timeElapsed).div(8640000 * 1e18);\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    // \u9886\u53d6\u6316\u77ff\u6536\u76ca\r\n    function claimMiningRewards() public {\r\n        uint256 reward = calculateMiningRewards(msg.sender);\r\n        require(reward > 0, \"No rewards to claim\");\r\n        require(balances[msg.sender] >= miningBalances[msg.sender], \"Current balance is less than mining balance\");\r\n\r\n        // \u66f4\u65b0\u94ed\u6587\u6c60\r\n        inscriptionPool = inscriptionPool.sub(reward);\r\n\r\n        // \u8f6c\u79fbBNB\u6536\u76ca\r\n        address(msg.sender).transfer(reward);\r\n\r\n        // \u9500\u6bc1\u6316\u77ff\u4ee3\u5e01\r\n        balances[msg.sender] = balances[msg.sender].sub(miningBalances[msg.sender]);\r\n        \r\n        // \u6e05\u96f6\u7528\u6237\u7528\u4e8e\u6fc0\u6d3b\u6316\u77ff\u7684\u4ee3\u5e01\u4f59\u989d\r\n        miningBalances[msg.sender] = 0;\r\n\r\n        // \u66f4\u65b0\u6700\u540e\u6fc0\u6d3b\u65f6\u95f4\r\n        lastMiningActivation[msg.sender] = block.timestamp;\r\n\r\n        emit MiningRewardsClaimed(msg.sender, reward);\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u8c03\u7528\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u70b8\u5f39\u6c60\u7684BNB\u8f6c\u79fb\u81f3\u70b8\u5f39\u5e01\u5206\u7ea2\u6c60\u5408\u7ea6\r\n    function transferBombPool(address payable recipient) public onlyOwner {\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(bombPool > 0, \"Bomb pool is empty\");\r\n\r\n        uint256 amountToTransfer = bombPool;\r\n        bombPool = 0; // \u91cd\u7f6e\u70b8\u5f39\u6c60\u4f59\u989d\r\n\r\n        // \u6267\u884c\u8f6c\u8d26\r\n        recipient.transfer(amountToTransfer);\r\n    }\r\n\r\n    // \u4fee\u6539LP\u6316\u77ff\u6536\u76ca\r\n    function setDividendPerLPPerSecond(uint256 newDividendRate) external onlyOwner {\r\n        require(newDividendRate > 0, \"Dividend rate must be greater than zero\");\r\n        DIVIDEND_PER_LP_PER_SECOND = newDividendRate;\r\n    }\r\n\r\n    // \u4fee\u6539\u6302\u5355\u6c60\u9608\u503c\r\n    function setOrderPoolThreshold(uint256 newThreshold) external onlyOwner {\r\n        require(newThreshold > 0, \"Threshold must be greater than zero\");\r\n        ORDER_POOL_THRESHOLD = newThreshold;\r\n    }\r\n\r\n    //\u53d1\u7ea2\u5305\r\n    function createRedPacket(uint256 amountPerUser, uint256 totalUsers) external {\r\n        require(balances[msg.sender] >= amountPerUser * totalUsers, \"Insufficient balance\");\r\n\r\n        uint256 redPacketId = nextRedPacketId++;\r\n\r\n        RedPacket storage packet = redPackets[redPacketId];\r\n        packet.amountPerUser = amountPerUser;\r\n        packet.totalUsers = totalUsers;\r\n        packet.owner = msg.sender;\r\n        packet.deadline = block.timestamp + 10 days; //10\u5929\u540e\u53ef\u53d6\u56de\u672a\u88ab\u9886\u53d6\u7684\u7ea2\u5305\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(amountPerUser * totalUsers);\r\n\r\n        emit RedPacketCreated(redPacketId, msg.sender, amountPerUser, totalUsers, packet.deadline);\r\n    }\r\n\r\n    //\u62a2\u7ea2\u5305\r\n    function claimRedPacket(uint256 redPacketId) external {\r\n        RedPacket storage packet = redPackets[redPacketId];\r\n        require(now <= packet.deadline, \"Red packet expired\");\r\n        require(!packet.claimed[msg.sender], \"Already claimed\");\r\n        require(packet.claimedUsers < packet.totalUsers, \"Red packet empty\");\r\n\r\n        packet.claimed[msg.sender] = true;\r\n        packet.claimedUsers++;\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(packet.amountPerUser);\r\n\r\n        emit RedPacketClaimed(redPacketId, msg.sender, packet.amountPerUser);\r\n    }\r\n\r\n    //\u9000\u8fd8\u7ea2\u5305\r\n    function refundRedPacket(uint256 redPacketId) external {\r\n        RedPacket storage packet = redPackets[redPacketId];\r\n        require(msg.sender == packet.owner, \"Not the owner\");\r\n        require(now > packet.deadline, \"Red packet not yet expired\");\r\n        require(packet.claimedUsers < packet.totalUsers, \"Red packet empty\");\r\n\r\n        uint256 unclaimedAmount = (packet.totalUsers - packet.claimedUsers) * packet.amountPerUser;\r\n        balances[msg.sender] = balances[msg.sender].add(unclaimedAmount);\r\n\r\n        delete redPackets[redPacketId];\r\n\r\n        emit RedPacketRefunded(redPacketId, msg.sender, unclaimedAmount);\r\n    }\r\n\r\n    // \u9884\u552e\u529f\u80fd\r\n    function buyInPresale() public payable {\r\n        require(msg.value > 0, \"Must send BNB to buy tokens\");\r\n        \r\n        uint256 tokenAmount = msg.value.mul(presalePrice).div(1e18);\r\n        require(lockTotal >= tokenAmount, \"Insufficient locked token balance\");\r\n\r\n        // \u4ece\u9501\u5b9a\u603b\u91cf\u4e2d\u6263\u9664\u4ee3\u5e01\r\n        lockTotal = lockTotal.sub(tokenAmount);\r\n\r\n        // \u5c06\u4ee3\u5e01\u53d1\u9001\u5230\u9ed1\u6d1e\u5730\u5740\r\n        balances[feeAddress] = balances[feeAddress].add(tokenAmount);\r\n        emit Transfer(address(0), feeAddress, tokenAmount);\r\n\r\n        // \u4e3a\u7528\u6237\u53d1\u653eNP\r\n        NP[msg.sender] = NP[msg.sender].add(tokenAmount);\r\n\r\n        // \u5c06BNB\u6dfb\u52a0\u5230bombPool\r\n        bombPool = bombPool.add(msg.value);\r\n\r\n        lastMiningTime[msg.sender] = block.timestamp; // \u8bb0\u5f55\u6fc0\u6d3b\u6316\u77ff\u7684\u65f6\u95f4\r\n    }\r\n\r\n    // \u8ba1\u7b97NP\u6316\u77ff\u6536\u76ca\r\n    function calculateMiningNP(address user) public view returns (uint256) {\r\n        if (NP[user] == 0 || lastMiningTime[user] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 timeElapsed = block.timestamp - lastMiningTime[user];\r\n        uint256 Rewards = NP[user].mul(1e18).div(presalePrice).mul(3).mul(timeElapsed).div(miningCoefficient); // \u6bcf\u79d2\u7684\u6316\u77ff\u6536\u76ca\r\n\r\n        return Rewards;\r\n    }\r\n\r\n    // \u9886\u53d6\u9884\u552e\u6316\u77ff\u6536\u76ca\r\n    function claimMiningNP() public {\r\n        uint256 reward = calculateMiningNP(msg.sender);\r\n        require(reward > 0, \"No rewards to claim\");\r\n\r\n        // \u66f4\u65b0\u94ed\u6587\u6c60\r\n        inscriptionPool = inscriptionPool.sub(reward);\r\n\r\n        // \u8f6c\u79fbBNB\u6536\u76ca\r\n        address(msg.sender).transfer(reward);\r\n        \r\n        // \u66f4\u65b0\u6700\u540e\u6fc0\u6d3b\u65f6\u95f4\r\n        lastMiningTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u4f7f\u7528poolTotal\u4e2d\u7684\u4ee3\u5e01\u6dfb\u52a0\u6d41\u52a8\u6027\r\n    function withdrawFromPoolTotal(uint256 amount) public onlyOwner {\r\n        require(amount <= poolTotal, \"Amount exceeds locked total\");\r\n\r\n        poolTotal = poolTotal.sub(amount);\r\n        balances[owner] = balances[owner].add(amount);\r\n\r\n        // \u89e6\u53d1\u8f6c\u8d26\u4e8b\u4ef6\r\n        emit Transfer(address(0), owner, amount);\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u5411\u6307\u5b9a\u7528\u6237\u53d1\u9001NP\r\n    function grantNPToUser(address user, uint256 amount) public onlyOwner {\r\n        require(user != address(0), \"Invalid user address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        // \u7ed9\u6307\u5b9a\u7528\u6237\u589e\u52a0NP\r\n        NP[user] = NP[user].add(amount);\r\n\r\n        // \u8bbe\u7f6e\u7528\u6237\u7684\u6316\u77ff\u6fc0\u6d3b\u65f6\u95f4\u4e3a\u5f53\u524d\u65f6\u95f4\r\n        lastMiningTime[user] = block.timestamp;\r\n    }\r\n\r\n    // \u4e8b\u4ef6\uff1a\u8bb0\u5f55NP\u53d1\u653e\r\n    event NPGranted(address indexed user, uint256 amount, uint256 timestamp);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyOrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ExchangeBNBForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"ExchangeTokensForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inscriptionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bombAmount\",\"type\":\"uint256\"}],\"name\":\"FundDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MiningActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"MiningRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NPGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"redPacketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedPacketClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"redPacketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"RedPacketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"redPacketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedPacketRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SellOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_PER_LP_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORDER_POOL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bombPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyInPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOrderPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateMiningNP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateMiningRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMiningNP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMiningRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redPacketId\",\"type\":\"uint256\"}],\"name\":\"claimRedPacket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"}],\"name\":\"createRedPacket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeBNBForTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeTokensForBNB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getbomb\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grantNPToUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"initialAddLiquidity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inscriptionPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransactionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMiningActivation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMiningTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"miningBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRedPacketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuyOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redPackets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUsers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redPacketId\",\"type\":\"uint256\"}],\"name\":\"refundRedPacket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOrderPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDividendRate\",\"type\":\"uint256\"}],\"name\":\"setDividendPerLPPerSecond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"setMiningCoefficient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setOrderPoolThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTransactionStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferBombPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPoolTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BombFi", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f945d978b11ee8757dacfbd84a3fd2c87d094a5d86d697d2f3bee1567a589d7d"}