{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wana-staking/WanaFarmV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ITokenVault.sol\\\";\\r\\nimport \\\"./interfaces/ITokenFarmV2.sol\\\";\\r\\nimport \\\"./interfaces/ILocker.sol\\\";\\r\\n\\r\\nimport \\\"../BaseFarm.sol\\\";\\r\\nimport \\\"./Locker.sol\\\";\\r\\n\\r\\ncontract WanaFarmV2 is BaseFarm, ReentrancyGuard, Ownable, Initializable, ITokenFarmV2 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public stakeToken;\\r\\n    address public rewardToken;\\r\\n    uint256 public rewardPerBlock;\\r\\n    uint256 public accRewardPerShare;\\r\\n    uint256 public rewardVestingDuration;\\r\\n    uint256 public stakingLockDuration;\\r\\n    address public rewardLocker;\\r\\n    address public stakeLocker;\\r\\n    uint256 public stakerCount;\\r\\n    uint256 public totalStakeAmount;\\r\\n\\r\\n\\r\\n    // Info of each user that stakes Wana tokens.\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event ClaimedReward(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    modifier mustActive() {\\r\\n        require(isActive == true, \\\"Farm: Not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _rewardAmount,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        uint256[4] calldata _rateParameters, // 0: firstCycleRate , 1: initRate, 2: reducingRate, 3: reducingCycle\\r\\n        uint256[4] calldata _poolCfg // 0: rewardVestingDuration, 1: rewardLockDuration, 2: stakingLockDuration, 3: groupDuration\\r\\n    ) external initializer {\\r\\n        require(_stakeToken != address(0), \\\"Farm: Invalid stake token\\\");\\r\\n        require(_rewardToken != address(0), \\\"Farm: Invalid vault token\\\");\\r\\n        require(_rewardPerBlock > 1000, \\\"Farm: Invalid block reward\\\"); // minimum 1000 divisibility per block reward\\r\\n        require(_startBlock > block.number, \\\"Farm: Invalid start block\\\"); // ideally at least 24 hours more to give farmers time\\r\\n        require(_rateParameters[0] > 0, \\\"Farm: Invalid first cycle rate\\\");\\r\\n        require(_rateParameters[1] > 0, \\\"Farm: Invalid initial rate\\\");\\r\\n        require(_rateParameters[2] > 0 && _rateParameters[2] < 100, \\\"Farm: Invalid reducing rate\\\");\\r\\n        require(_rateParameters[3] > 0, \\\"Farm: Invalid reducing cycle\\\");\\r\\n\\r\\n        rewardToken = _rewardToken;\\r\\n        stakeToken = _stakeToken;\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n        rewardVestingDuration = _poolCfg[0];\\r\\n        stakingLockDuration = _poolCfg[2];\\r\\n\\r\\n        rateConfig.firstCycleRate = _rateParameters[0];\\r\\n        rateConfig.initRate = _rateParameters[1];\\r\\n        rateConfig.reducingRate = _rateParameters[2];\\r\\n        rateConfig.reducingCycle = _rateParameters[3];\\r\\n\\r\\n        uint256 _lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\\r\\n        lastRewardBlock = _lastRewardBlock;\\r\\n        accRewardPerShare = 0;\\r\\n\\r\\n        Locker _rewardLocker = new Locker(_rewardToken, _poolCfg[0], _poolCfg[1], _poolCfg[3]);\\r\\n        IERC20(_rewardToken).safeApprove(address(_rewardLocker), type(uint256).max);\\r\\n        rewardLocker = address(_rewardLocker);\\r\\n        \\r\\n        Locker _stakeLocker = new Locker(_stakeToken, 0, _poolCfg[2], _poolCfg[3]);\\r\\n        IERC20(_stakeToken).safeApprove(address(_stakeLocker), type(uint256).max);\\r\\n        stakeLocker = address(_stakeLocker);\\r\\n\\r\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _rewardAmount);\\r\\n    }\\r\\n\\r\\n    function pendingReward(address _user) external view override returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 _accRewardPerShare = accRewardPerShare;\\r\\n        uint256 _tokenSupply = getTotalSupply();\\r\\n        if (block.number > lastRewardBlock && _tokenSupply != 0 && isActive == true) {\\r\\n            uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\\r\\n            uint256 _tokenReward = _multiplier * rewardPerBlock;\\r\\n            _accRewardPerShare = _accRewardPerShare + (_tokenReward / _tokenSupply);\\r\\n        }\\r\\n        return ((user.amount * _accRewardPerShare) / MAGIC_NUMBER) - user.rewardDebt;\\r\\n    }\\r\\n\\r\\n    function updatePool() public mustActive {\\r\\n        if (block.number <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 _tokenSupply = getTotalSupply();\\r\\n        if (_tokenSupply == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\\r\\n        uint256 _tokenReward = _multiplier * rewardPerBlock;\\r\\n        accRewardPerShare = accRewardPerShare + (_tokenReward / _tokenSupply);\\r\\n        lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function getTotalSupply() public view returns (uint256) {\\r\\n        return IERC20(stakeToken).balanceOf(stakeLocker);\\r\\n    }\\r\\n\\r\\n    function getTokenPerBlock() external view override returns (uint256) {\\r\\n        return rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    function getUserInfo(address _account) external view override returns (uint256 amount, uint256 rewardDebt) {\\r\\n        return (userInfo[_account].amount, userInfo[_account].rewardDebt);\\r\\n    }\\r\\n\\r\\n    function getStakeToken() external view override returns (address) {\\r\\n        return stakeToken;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external override mustActive {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        updatePool();\\r\\n        if (user.amount > 0) {\\r\\n            uint256 _pending = ((user.amount * accRewardPerShare) / MAGIC_NUMBER) - user.rewardDebt;\\r\\n            if (_pending > 0) {\\r\\n                ILocker(rewardLocker).addLocker(msg.sender, _pending);\\r\\n            }\\r\\n        } else if (_amount > 0) {\\r\\n            stakerCount = stakerCount + 1;\\r\\n        }\\r\\n        user.amount = user.amount + _amount;\\r\\n        user.rewardDebt = (user.amount * accRewardPerShare) / MAGIC_NUMBER;\\r\\n        totalStakeAmount = totalStakeAmount + _amount;\\r\\n        if (_amount > 0) {\\r\\n            IERC20(stakeToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n        ILocker(stakeLocker).addLocker(msg.sender, _amount);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _start, uint256 _end) external override nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 _amount = ILocker(stakeLocker).claimTotal(msg.sender, _start, _end);\\r\\n        require(_amount > 0, \\\"unstake: Unstake amount is not available\\\");\\r\\n        require(user.amount >= _amount, \\\"unstake: Insufficient amount\\\");\\r\\n        \\r\\n        if (isActive == true) {\\r\\n            updatePool();\\r\\n        }\\r\\n        uint256 _pending = ((user.amount * accRewardPerShare) / MAGIC_NUMBER) - user.rewardDebt;\\r\\n        if (_pending > 0) {\\r\\n            ILocker(rewardLocker).addLocker(msg.sender, _pending);\\r\\n        }\\r\\n        user.amount = user.amount - _amount;\\r\\n        user.rewardDebt = (user.amount * accRewardPerShare) / MAGIC_NUMBER;\\r\\n        totalStakeAmount = totalStakeAmount - _amount;\\r\\n        if (user.amount == 0) {\\r\\n            stakerCount = stakerCount - 1;\\r\\n        }\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function claimReward(uint256 _start, uint256 _end) external nonReentrant {\\r\\n        uint256 _amount = ILocker(rewardLocker).claimTotal(msg.sender, _start, _end);\\r\\n        emit ClaimedReward(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function updateReducingRate(uint256 _reducingRate) external onlyOwner mustActive {\\r\\n        require(_reducingRate > 0 && _reducingRate <= 100, \\\"Farm: Invalid reducing rate\\\");\\r\\n        rateConfig.reducingRate = _reducingRate;\\r\\n    }\\r\\n\\r\\n    function setActive() external onlyOwner {\\r\\n        isActive = true;\\r\\n    }\\r\\n\\r\\n    function rescueFunds(\\r\\n        address tokenToRescue,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenToRescue).safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function forceEnd() external onlyOwner mustActive {\\r\\n        updatePool();\\r\\n        isActive = false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wana-staking/interfaces/ITokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface ITokenVault {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function safeTokenTransfer(address _to, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/wana-staking/interfaces/ITokenFarmV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITokenFarmV2 {\\r\\n    \\r\\n    function getTokenPerBlock() external view returns (uint256);\\r\\n\\r\\n    function getUserInfo(address _account) external view returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function unstake(uint256 _start, uint256 _end) external;\\r\\n    \\r\\n    function pendingReward(address _user) external view returns (uint256);\\r\\n\\r\\n    function getStakeToken() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/wana-staking/interfaces/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface ILocker {\\r\\n    function addLocker(address _user, uint256 _amount) external;\\r\\n    function claim(address _user, uint256 _index) external returns (uint256);\\r\\n    function claimTotal(address _user, uint256 _start, uint256 _end) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/BaseFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ncontract BaseFarm {\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many Wana tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        bool disabled;\\r\\n    }\\r\\n\\r\\n    struct LockConfig {\\r\\n        uint256 groupInHours;\\r\\n        uint256 lockInHours;\\r\\n    }\\r\\n\\r\\n    struct RateConfig {\\r\\n        uint256 firstCycleRate;\\r\\n        uint256 initRate;\\r\\n        uint256 reducingRate; // 95 equivalent to 95%\\r\\n        uint256 reducingCycle; // 195000 equivalent 195000 block\\r\\n    }\\r\\n\\r\\n    struct StakeTokenInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startBlock;\\r\\n        uint256 startTime;\\r\\n        uint256 lockDuration;\\r\\n        uint256 unstakeAmount;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    struct LockRewardInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startBlock;\\r\\n        uint256 lockDuration;\\r\\n        uint256 claimedAmount;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    uint256 internal MAGIC_NUMBER = 1e12;\\r\\n    bool public isActive;\\r\\n    uint256 public startBlock;\\r\\n    uint256 public lastRewardBlock;\\r\\n    RateConfig public rateConfig;\\r\\n\\r\\n    event UserEntered(address indexed _user);\\r\\n    event UserLeft(address indexed _user);\\r\\n    \\r\\n    /**\\r\\n     * @notice Gets the reward multiplier over the given _fromBlock until _to block\\r\\n     * @param _fromBlock the start of the period to measure rewards for\\r\\n     * @param _toBlock the end of the period to measure rewards for\\r\\n     * @return The weighted multiplier for the given period\\r\\n     */\\r\\n    function getMultiplier(uint256 _fromBlock, uint256 _toBlock) public view returns (uint256) {\\r\\n        return _getMultiplierFromStart(_toBlock) - _getMultiplierFromStart(_fromBlock);\\r\\n    }\\r\\n\\r\\n    function _getMultiplierFromStart(uint256 _block) internal view returns (uint256) {\\r\\n        if (_block <= startBlock) return 0;\\r\\n        uint256 _difBlocks = _block - startBlock;\\r\\n        uint256 roundPassed = _difBlocks / rateConfig.reducingCycle;\\r\\n        if (roundPassed == 0) {\\r\\n            return _difBlocks * rateConfig.firstCycleRate * MAGIC_NUMBER;\\r\\n        } else {\\r\\n            uint256 multiplier = rateConfig.reducingCycle * rateConfig.firstCycleRate * MAGIC_NUMBER;\\r\\n            uint256 i = 0;\\r\\n            uint256 X = MAGIC_NUMBER * rateConfig.initRate;\\r\\n            for (i = 0; i < roundPassed - 1; i++) {\\r\\n                multiplier += X * rateConfig.reducingCycle;\\r\\n                X = X * rateConfig.reducingRate/100;\\r\\n            }\\r\\n            uint256 Y = _difBlocks % rateConfig.reducingCycle;\\r\\n            if (Y > 0) {\\r\\n                multiplier += X * Y;\\r\\n            }\\r\\n\\r\\n            return multiplier;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/wana-staking/Locker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/ITokenFarm.sol\\\";\\r\\nimport \\\"./interfaces/ILocker.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Locker is ReentrancyGuard, ILocker {\\r\\n    using SafeERC20 for IERC20;\\r\\n    IERC20 public token;\\r\\n    uint256 public vestingDuration; // blocks\\r\\n    uint256 public fullockDuration; // blocks\\r\\n    uint256 public groupDuration; // blocks\\r\\n    address public farmAddress;\\r\\n\\r\\n    struct LockInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        uint256 startBlock;\\r\\n        uint256 vestingDuration;\\r\\n        uint256 fullockDuration;\\r\\n        uint256 claimedAmount;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    event AddedLock(address indexed account, uint256 amount);\\r\\n    event ClaimedLock(address indexed account, uint256 amount);\\r\\n    event LockAdded(address indexed user, uint256 indexed index, uint256 startTime, uint256 lockDuration, uint256 amount);\\r\\n    event LockUpdated(address indexed user, uint256 indexed index, uint256 startTime, uint256 amount);\\r\\n\\r\\n    // user address => vestingInfo[]\\r\\n    mapping(address => LockInfo[]) private _userToLockList;\\r\\n    mapping(address => uint256) private _totalAmount;\\r\\n    mapping(address => uint256) private _totalClaimedAmount;\\r\\n\\r\\n    modifier onlyFarm() {\\r\\n        require(msg.sender == farmAddress, \\\"Locker: You are not farm\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _token, uint256 _vestingDuration, uint256 _fullockDuration, uint256 _groupDuration) {\\r\\n        token = IERC20(_token);\\r\\n        vestingDuration = _vestingDuration;\\r\\n        fullockDuration = _fullockDuration;\\r\\n        groupDuration = _groupDuration;\\r\\n        farmAddress = msg.sender;\\r\\n    }\\r\\n\\r\\n    function addLocker(address _user, uint256 _amount) external onlyFarm override {\\r\\n        uint256 _index = _userToLockList[_user].length > 0 ? _userToLockList[_user].length - 1 : 0;\\r\\n        if (_userToLockList[_user].length > 0 && block.number < _userToLockList[_user][_index].startBlock + groupDuration) {\\r\\n            _userToLockList[_user][_index].startTime = block.timestamp;\\r\\n            _userToLockList[_user][_index].startBlock = block.number;\\r\\n            _userToLockList[_user][_index].amount += _amount;\\r\\n        } else {\\r\\n            LockInfo memory _info = LockInfo(_amount, block.timestamp, block.number, vestingDuration, fullockDuration, 0, true);\\r\\n            _userToLockList[_user].push(_info);\\r\\n        }\\r\\n        _totalAmount[_user] += _amount;\\r\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit AddedLock(_user, _amount);\\r\\n    }\\r\\n\\r\\n    function claim(address _user, uint256 _index) external onlyFarm override returns (uint256) {\\r\\n        return _claims(_user, _index, _index);\\r\\n    }\\r\\n\\r\\n    function claimTotal(address _user, uint256 _start, uint256 _end) external onlyFarm override returns (uint256) {\\r\\n        return _claims(_user, _start, _end);\\r\\n    }\\r\\n\\r\\n    function _claims(address _user, uint256 _start, uint256 _end) internal returns (uint256 _totalClaimableAmount) {\\r\\n        if (_userToLockList[_user].length == 0) {\\r\\n            return _totalClaimableAmount;\\r\\n        }\\r\\n        if (_end >= _userToLockList[_user].length) {\\r\\n            _end = _userToLockList[_user].length - 1;\\r\\n        }\\r\\n        if (_start > _end) {\\r\\n            return _totalClaimableAmount;\\r\\n        }\\r\\n        for (uint256 _index = _start; _index <= _end; _index++) {\\r\\n            uint256 _claimableAmount = _getClaimableAmount(_user, _index);\\r\\n            if (_claimableAmount > 0) {\\r\\n                _claim(_user, _index, _claimableAmount, false);\\r\\n                _totalClaimableAmount += _claimableAmount;\\r\\n            }\\r\\n        }\\r\\n        if (_totalClaimableAmount > 0) {\\r\\n            token.safeTransfer(_user, _totalClaimableAmount);\\r\\n            emit ClaimedLock(_user, _totalClaimableAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalClaimableAmount(address _user, uint256 _start, uint256 _end)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 totalClaimableAmount)\\r\\n    {\\r\\n        if (_userToLockList[_user].length == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (_end >= _userToLockList[_user].length) {\\r\\n            _end = _userToLockList[_user].length - 1;\\r\\n        }\\r\\n        if (_start > _end) {\\r\\n            return 0;\\r\\n        }\\r\\n        for (uint256 _index = _start; _index <= _end; _index++) {\\r\\n            totalClaimableAmount = totalClaimableAmount + _getClaimableAmount(_user, _index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getClaimableAmount(address _user, uint256 _index)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        if (_userToLockList[_user].length <= _index) {\\r\\n            return 0;\\r\\n        }\\r\\n        return _getClaimableAmount(_user, _index);\\r\\n    }\\r\\n\\r\\n    function getLockerCountByUser(address _user) external view returns (uint256 count) {\\r\\n        count = _userToLockList[_user].length;\\r\\n    }\\r\\n\\r\\n    function getLockerInfo(address _user, uint256 _index)\\r\\n    external\\r\\n    view\\r\\n    returns (LockInfo memory info)\\r\\n    {\\r\\n        require(_index < _userToLockList[_user].length, \\\"Locker: Invalid index\\\");\\r\\n        info = _userToLockList[_user][_index];\\r\\n    }\\r\\n\\r\\n    function getTotalAmountLockedByUser(address _user) external view returns (uint256) {\\r\\n        return _totalAmount[_user] - _totalClaimedAmount[_user];\\r\\n    }\\r\\n\\r\\n    function _claim(address _user, uint256 _index, uint256 _claimableAmount, bool _shouldTransfer) internal {\\r\\n        _userToLockList[_user][_index].claimedAmount += _claimableAmount;\\r\\n        if (_userToLockList[_user][_index].amount == _userToLockList[_user][_index].claimedAmount) {\\r\\n            _userToLockList[_user][_index].isActive = false;\\r\\n        }\\r\\n        _totalClaimedAmount[_user] += _claimableAmount;\\r\\n        if (_shouldTransfer) {\\r\\n            token.safeTransfer(_user, _claimableAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getClaimableAmount(address _user, uint256 _index)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 claimableAmount)\\r\\n    {\\r\\n        LockInfo memory info = _userToLockList[_user][_index];\\r\\n        if (block.number <= info.startBlock + info.fullockDuration) return 0;\\r\\n        if (!info.isActive) return 0;\\r\\n        uint256 passedBlocks = block.number - info.startBlock;\\r\\n\\r\\n        uint256 releasedAmount;\\r\\n        if (passedBlocks >= info.vestingDuration) {\\r\\n            releasedAmount = info.amount;\\r\\n        } else {\\r\\n            releasedAmount = (info.amount * passedBlocks) / info.vestingDuration;\\r\\n        }\\r\\n\\r\\n        claimableAmount = 0;\\r\\n        if (releasedAmount > info.claimedAmount) {\\r\\n            claimableAmount = releasedAmount - info.claimedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wana-staking/interfaces/ITokenFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITokenFarm {\\r\\n    function getTokenPerBlock() external view returns (uint256);\\r\\n\\r\\n    function getUserInfo(address _account) external view returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    function emergencyWithdraw() external;\\r\\n\\r\\n    function pendingToken(address _user) external view returns (uint256);\\r\\n\\r\\n    function getToken() external view returns (address);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"UserEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"UserLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_rateParameters\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_poolCfg\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstCycleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reducingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reducingCycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardVestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducingRate\",\"type\":\"uint256\"}],\"name\":\"updateReducingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WanaFarmV2", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}