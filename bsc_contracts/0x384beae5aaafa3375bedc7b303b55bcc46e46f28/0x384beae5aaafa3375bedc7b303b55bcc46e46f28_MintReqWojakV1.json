{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract MintReqWojakV1 is Ownable {\r\n    IERC20 public BUSDToken;\r\n    IERC20 public WUSDToken;\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public priceBUSD = 650000000000000000000;\r\n    uint public priceWUSD = 650000000000;\r\n    uint public priceEveryNFT = 3;\r\n\r\n    uint public totalMintRequest = 0;\r\n     uint public totalMint = 0;\r\n    uint public totalBusdPay = 0;\r\n    uint public totalWusdPay = 0;\r\n    bool public mintOptionalEnabled = true;\r\n    bool public mintEnabled = false;\r\n\r\n\r\n    address adminAddress;\r\n    event NewMintRequest(\r\n        address user,\r\n        uint256 amountBusd,\r\n        uint256 amountWusd,\r\n        uint256 nftCount\r\n       \r\n    );\r\n\r\n    constructor(address _BUSDToken, address _WUSDToken,address _adminAddress) {\r\n        BUSDToken = IERC20(_BUSDToken);\r\n        WUSDToken = IERC20(_WUSDToken);\r\n        adminAddress = _adminAddress;\r\n    }\r\n\r\n    function mintReqOptional(uint _nftCount,uint _busd , uint _wusd) public {\r\n        require(mintOptionalEnabled, \"Mint Disabled\");\r\n        require((_busd + _wusd) >= (priceEveryNFT * (_nftCount)), \"amount wrong\");\r\n\r\n\r\n      \r\n\r\n        if (_wusd > 0) {\r\n           \r\n            require(WUSDToken.balanceOf(msg.sender) >= _wusd*10**9, \"Insufficient WUSD balance\");\r\n            require(WUSDToken.allowance(msg.sender, address(this)) >= _wusd*10**9, \"Error Allowance\");\r\n            WUSDToken.transferFrom(msg.sender, adminAddress, _wusd*10**9);\r\n            totalWusdPay = totalWusdPay.add(_wusd);\r\n        }\r\n\r\n        if (_busd > 0) {\r\n           \r\n            require(BUSDToken.balanceOf(msg.sender) >= _busd*10**18, \"Insufficient BUSD balance\");\r\n            require(BUSDToken.allowance(msg.sender, address(this)) >= _busd*10**18, \"Error Allowance\");\r\n            BUSDToken.transferFrom(msg.sender, adminAddress, _busd*10**18);\r\n            totalBusdPay = totalBusdPay.add(_busd);\r\n        }\r\n\r\n        totalMintRequest = totalMintRequest.add(1);\r\n         totalMint = totalMint.add(_nftCount);\r\n\r\n        emit NewMintRequest(msg.sender, _busd, _wusd, _nftCount);\r\n    }\r\n\r\n   \r\n\r\n    function updatePrice(uint256 _newPriceWUSD, uint256 _newPriceBUSD,uint256 _newPriceEveryNFT) public onlyOwner {\r\n        priceWUSD = _newPriceWUSD;\r\n        priceBUSD = _newPriceBUSD;\r\n        priceEveryNFT = _newPriceEveryNFT;\r\n\r\n    }\r\n\r\n      function setAdminAddress(address _newAdminAddress) public onlyOwner {\r\n        adminAddress = _newAdminAddress;\r\n      \r\n\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(os);\r\n    }\r\n\r\n    function withdrawTokens(IERC20 token) public onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function enableMint() public onlyOwner {\r\n        mintEnabled = true;\r\n    }\r\n\r\n    function disableMint() public onlyOwner {\r\n        mintEnabled = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BUSDToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WUSDToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBusd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWusd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"}],\"name\":\"NewMintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WUSDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintOptionalEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wusd\",\"type\":\"uint256\"}],\"name\":\"mintReqOptional\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceEveryNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBusdPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWusdPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPriceWUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPriceBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPriceEveryNFT\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintReqWojakV1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000ea6c4730444cdea016527d05ec7ef24c0355e306000000000000000000000000742cbfe4b0f674467f7d3990cf4b0f7be99a2f6c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3cc588764ef0d58fe8a985418157a46db880a7a9839f31b468e305216274d5c"}