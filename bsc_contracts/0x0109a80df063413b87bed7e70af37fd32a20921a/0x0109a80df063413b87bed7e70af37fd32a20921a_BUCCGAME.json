{"SourceCode": "// SPDX-License-Identifier: SimPL-2.0\r\npragma solidity >=0.8.0;\r\n\r\ninterface IBUCCTOKEN {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    function burn(address account, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface INFT {\r\n    function useNftPrice(address account) external returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n}\r\n\r\n//BUCC\u6e38\u620f\r\ncontract BUCCGAME {\r\n    string public name = \"BUCCGAME\";\r\n    string public symbol = \"BUCCGAME\";\r\n\r\n    uint256 public epoch_base = 86400; //Mint\u5468\u671f\u57fa\u6570\uff0c\u4e0d\u53d8\r\n    uint256 public epoch = 86400; //Mint\u5468\u671f\uff0c\u968f\u7740\u65f6\u95f4\u53d8\u5316\r\n    uint256 public start_time; //Mint\u5f00\u59cb\u65f6\u95f4\r\n    uint256 public decimal_bucc = 1e3;\r\n\r\n    uint256 public totalReward; //\u603b\u5956\u52b1\r\n    uint256 public totalPower; //\u603b\u7b97\u529b\r\n    uint256 public totalUsersAmount; //\u603b\u7528\u6237\u6570\r\n    uint256 public userMaxPower = 4999 * decimal_bucc; //\u6700\u9ad8\u7b97\u529b\r\n    address payable public owner;\r\n    bool public is_mint = false; //\u662f\u5426\u5f00\u542fMint\r\n\r\n    address public daoAddress = 0x9C1e3E63631Ce60A6acE4Ce76B058415a975B849; //10% dao\r\n    address public rebackAddress = 0xcd32538A7d761008f7bCAd9D3BAEE13a2b40C8F2; //10% \u56de\u8d2d\r\n    address public marketAddress = 0xEBAE1823CD33e74D2D099D3999E2052319946EBe; //30% \u5e02\u573a\r\n    address public starAddress = 0xB0d317131a93D332FC146d2A22e345850c6db1Af; //50% \u661f\u7ea7\r\n\r\n    address public buccAddress;\r\n    address public quccAddress = 0x3c48e47703F16818d7368DBA98897FA35B80F53D;\r\n    address public nftAddress = 0x76806823840249007eE483433234DFC797DbbeA8;\r\n    address public usdAddress = 0x55d398326f99059fF775485246999027B3197955; //usdt\u5408\u7ea6\r\n\r\n    uint256 public startGameRequrieAmount = 10000; //\u5f00\u59cb\u6e38\u620f \u9700\u8981\u6d88\u8017\u7684\u6570\u91cf(qucc)\r\n    address public burnAddress = 0x0000000000000000000000000000000000000010; //\u71c3\u70e7\u5730\u5740\r\n    uint256 public burnTokenAmount = 600; //\u6bcf\u71c3\u70e71\u4e2a\u57fa\u7840\u6570\u5b57\u9700\u8981\u914d\u5408\u71c3\u70e7token\u7684\u6570\u91cf 600/10000\r\n    uint256 public basePrice = 1e18; //\u56de\u8d2d\u4ef7\u683c u\r\n\r\n    mapping(uint8 => uint8) public levelFees; //\u7b49\u7ea7\u5bf9\u5e94\u624b\u7eed\u8d39 n/100\r\n    mapping(uint8 => uint8) public levelReward; //\u5bf9\u5e94\u6536\u76ca n/10000\r\n    mapping(uint8 => uint8) public levelFirstReward; //\u76f4\u63a8\u5956\u52b1 n/1000\r\n    mapping(uint8 => uint8) public levelSecondReward; //\u4e8c\u7ea7\u5956\u52b1 n/1000\r\n    mapping(address => uint256) public userMinPower; //\u7528\u6237\u5f53\u524d\u7b49\u7ea7Mint\u6700\u4f4e\u7b97\u529b\r\n\r\n    /* This creates an array with all balances */\r\n    mapping(address => uint256) public goldBalanceOf; //\u5f85\u63d0\u73b0\u5956\u52b1\r\n    mapping(address => uint256) public userLand; //\u571f\u5730\r\n\r\n    mapping(address => address) public invite; //\u9080\u8bf7\r\n    mapping(address => uint256) public power; //\u7b97\u529b\r\n    mapping(address => uint256) public last_miner; //\u7528\u6237\u4e0a\u6b21Mint\u65f6\u95f4\r\n    mapping(address => uint256) public inviteCount; //\u9080\u8bf7\u4eba\u597d\u53cb\u6570\r\n    mapping(address => uint256) public rewardCount; //\u7d2f\u8ba1\u5956\u52b1\r\n\r\n    event Burn(address indexed operator, uint256 amount);\r\n    event Minted(address indexed operator, address indexed to, uint256 amount);\r\n    event WithdrawalReward(address indexed src, uint256 wad); //\u63d0\u73b0\u5956\u52b1\r\n    event RechargeCof(\r\n        address indexed spender,\r\n        address indexed account,\r\n        uint256 amount\r\n    );\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor(address buccToken_) {\r\n        owner = payable(msg.sender);\r\n        buccAddress = buccToken_; //bucc\r\n\r\n        //\u521d\u59cb\u5316\u53c2\u6570\r\n        initLevel();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) public onlyOwner {\r\n        TransferHelper.safeTransfer(token, daoAddress, amount);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(userLand[msg.sender] > 0, \"land status error\");\r\n        require(_value > 0, \"amount is zero\");\r\n        require(\r\n            power[msg.sender] + _value * 3 <= userMaxPower,\r\n            \"userMaxPower overflow\"\r\n        );\r\n\r\n        uint256 balance = IBUCCTOKEN(buccAddress).balanceOf(msg.sender);\r\n        require(\r\n            balance + goldBalanceOf[msg.sender] >= _value,\r\n            \"amount too many\"\r\n        );\r\n\r\n        //\u6df7\u5408\u71c3\u70e7\r\n        burnRequireToken(_value);\r\n\r\n        //\u5982\u679c\u53ef\u4ee5Mint\uff0c\u5148\u6316\u4e00\u6b21\uff0c\u907f\u514d\u591a\u8ba1\u7b97\r\n        if (\r\n            is_mint &&\r\n            power[msg.sender] > 0 &&\r\n            block.timestamp - last_miner[msg.sender] >= epoch\r\n        ) {\r\n            doMint(msg.sender);\r\n        }\r\n\r\n        //\u71c3\u70e7,\u5148\u6263\u51cf\u5f85\u9886\u53d6\u5956\u52b1,\u518d\u6263\u51cf\u4f59\u989d\r\n        if (goldBalanceOf[msg.sender] > _value) {\r\n            goldBalanceOf[msg.sender] -= _value;\r\n        } else {\r\n            uint256 sub_value = _value - goldBalanceOf[msg.sender];\r\n            goldBalanceOf[msg.sender] = 0;\r\n            IBUCCTOKEN(buccAddress).burn(msg.sender, sub_value);\r\n        }\r\n\r\n        _addPower(_value, msg.sender);\r\n\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    //\u5151\u6362\u7b97\u529b\r\n    function exchangePower(address _account, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_value > 0, \"amount is zero\");\r\n        require(\r\n            power[_account] + _value * 3 <= userMaxPower,\r\n            \"userMaxPower overflow\"\r\n        );\r\n\r\n        //\u6df7\u5408\u71c3\u70e7\r\n        burnRequireToken(_value);\r\n\r\n        //\u5982\u679c\u53ef\u4ee5Mint\uff0c\u5148\u6316\u4e00\u6b21\uff0c\u907f\u514d\u591a\u8ba1\u7b97\r\n        if (\r\n            is_mint &&\r\n            power[_account] > 0 &&\r\n            block.timestamp - last_miner[_account] >= epoch\r\n        ) {\r\n            doMint(_account);\r\n        }\r\n\r\n        //\u5145\u503c\u4e0d\u4f7f\u7528\u6e38\u620f\u4f59\u989d\r\n        IBUCCTOKEN(buccAddress).burn(msg.sender, _value);\r\n        _addPower(_value, _account);\r\n\r\n        emit Burn(_account, _value);\r\n        return true;\r\n    }\r\n\r\n    function _addPower(uint256 _value, address _account) private {\r\n        uint256 addPower = _value * 3;\r\n        power[_account] += addPower; //\u71c3\u70e7\u52a03\u500d\u7b97\u529b\r\n        totalPower += addPower; //\u7d2f\u8ba1\u603b\u7b97\u529b\r\n\r\n        // \u7b97\u529b\u4e0d\u80fd\u4f4e\u4e8e\u5f53\u524d\u7b49\u7ea7\u6700\u4f4e\u7b97\u529b\u768498%\uff0c\u65e0\u6cd5\u6316\u77ff\uff0c\u9700\u8981\u8865\u5145\u7b97\u529b\u3002\r\n        uint256 minPower = (power[_account] * 98) / 100;\r\n        if (userMinPower[_account] < minPower) {\r\n            userMinPower[_account] = minPower;\r\n        }\r\n\r\n        reward_upline(_account, _value); //\u7ed9\u4e0a\u7ea7\u5956\u52b1\r\n    }\r\n\r\n    //\u5145\u503c\r\n    function rechargeGold(address _account, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_value > 0, \"amount is zero\");\r\n\r\n        //\u5145\u503c\u4e0d\u4f7f\u7528\u6e38\u620f\u4f59\u989d\r\n        IBUCCTOKEN(buccAddress).burn(msg.sender, _value);\r\n\r\n        totalReward += _value;\r\n        goldBalanceOf[_account] += _value;\r\n        emit RechargeCof(msg.sender, _account, _value);\r\n        return true;\r\n    }\r\n\r\n    function reward_upline(address _account, uint256 _value)\r\n        private\r\n        returns (bool success)\r\n    {\r\n        //\u9080\u8bf7\u4eba\u4e0d\u80fd\u4e3a\u7a7a\r\n        if (invite[_account] != address(0)) {\r\n            address invite1 = invite[_account];\r\n            uint8 lv = getPowerLv(invite1);\r\n\r\n            uint8 scale = levelFirstReward[lv]; // n/1000 \u901a\u8bc1\u6570\u91cf\u4e58\u4ee5\u7cbe\u5ea6\u5355\u4f4d\r\n            if (scale == 0) {\r\n                return true;\r\n            }\r\n\r\n            //\u5c0f\u6570\u652f\u6301\u4e0d\u597d\uff0c\u5c31\u5148\u4e58\u540e\u9664\u7684\u65b9\u6cd5\r\n            uint256 reward = (_value * scale) / 1000;\r\n\r\n            //\u5982\u679c\u672c\u6b21\u7b97\u529b\u5927\u4e8e\u4e0a\u7ea7\r\n            if (power[invite1] < reward) {\r\n                reward = power[invite1];\r\n            }\r\n\r\n            power[invite1] -= reward; //\u51cf\u5c11\u9080\u8bf7\u4eba\u7b97\u529b\r\n            totalPower -= reward; //\u51cf\u5c11\u603b\u7b97\u529b\r\n            rewardCount[invite1] += reward; //\u8bb0\u5f55\u7d2f\u8ba1\u5956\u52b1\r\n            _mint(invite1, reward); //\u589e\u52a0\u9080\u8bf7\u4eba\u4f59\u989d\r\n\r\n            address invite2 = invite[invite1];\r\n            if (invite2 != address(0)) {\r\n                lv = getPowerLv(invite2);\r\n                scale = levelSecondReward[lv]; // n/1000\r\n                if (scale == 0) {\r\n                    return true;\r\n                }\r\n\r\n                reward = (_value * scale) / 1000;\r\n                //Check\r\n                if (power[invite2] < reward) {\r\n                    reward = power[invite2];\r\n                }\r\n\r\n                power[invite2] -= reward; //\u51cf\u5c11\u9080\u8bf7\u4eba\u7b97\u529b\r\n                totalPower -= reward; //\u51cf\u5c11\u603b\u7b97\u529b\r\n                rewardCount[invite2] += reward; //\u8bb0\u5f55\u7d2f\u8ba1\u5956\u52b1\r\n                _mint(invite2, reward); //\u589e\u52a0\u9080\u8bf7\u4eba\u4f59\u989d\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer_fee(address _from, uint256 _value)\r\n        public\r\n        view\r\n        returns (uint256 fee)\r\n    {\r\n        uint8 lv = getPowerLv(_from);\r\n        uint8 scale = levelFees[lv];\r\n        if (scale == 0) {\r\n            return 0;\r\n        }\r\n        uint256 _fee = (_value * scale) / 100;\r\n        return _fee;\r\n    }\r\n\r\n    //\u51fa\u552e\u7ed9\u7cfb\u7edf \u6240\u6709\u7528\u6237\u53ef\u4ee5\u5411\u6e38\u620f\u5408\u7ea6\u56de\u8d2d\u6c60\u5356\u5e01\r\n    function sell(uint256 amount_) public {\r\n        uint256 getUSDTamount = (amount_ * basePrice) / decimal_bucc;\r\n        TransferHelper.safeTransferFrom(\r\n            buccAddress,\r\n            msg.sender,\r\n            address(this),\r\n            amount_\r\n        );\r\n        TransferHelper.safeTransfer(usdAddress, msg.sender, getUSDTamount);\r\n    }\r\n\r\n    // \u63d0\u73b0\u5956\u52b1\r\n    function withdrawReward(uint256 _value) public returns (bool) {\r\n        require(_value > 0, \"amount is zero error\");\r\n        uint256 taxFee = transfer_fee(msg.sender, _value);\r\n        uint256 sub_value = _value - taxFee; //\u6263\u9664\u4f59\u989d\u9700\u8981\u8ba1\u7b97\u624b\u7eed\u8d39\r\n\r\n        require(goldBalanceOf[msg.sender] >= _value, \"balanceOf error\");\r\n        goldBalanceOf[msg.sender] -= _value;\r\n\r\n        IBUCCTOKEN(buccAddress).mint(msg.sender, sub_value);\r\n        if (taxFee > 0) {\r\n            IBUCCTOKEN(buccAddress).mint(address(this), taxFee);\r\n        }\r\n\r\n        emit WithdrawalReward(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // \u5206\u914d\u624b\u7eed\u8d39\r\n    function takeFee() public {\r\n        uint256 taxFee = IBUCCTOKEN(buccAddress).balanceOf(address(this));\r\n        require(taxFee > 0, \"fee is zero error\");\r\n\r\n        uint256 daoFee = (taxFee * 10) / 100;\r\n        uint256 rebackFee = (taxFee * 10) / 100;\r\n        uint256 marketFee = (taxFee * 30) / 100;\r\n        IBUCCTOKEN(buccAddress).mint(daoAddress, daoFee); // 10\r\n        IBUCCTOKEN(buccAddress).mint(rebackAddress, rebackFee); // 10\r\n        IBUCCTOKEN(buccAddress).mint(marketAddress, marketFee); // 30\r\n        IBUCCTOKEN(buccAddress).mint(\r\n            starAddress,\r\n            taxFee - daoFee - rebackFee - marketFee\r\n        ); // 50\r\n    }\r\n\r\n    //\u9700\u8981\u6df7\u5408\u71c3\u70e7\r\n    function burnRequireToken(uint256 burnAmount_) private {\r\n        if (burnAmount_ > 0 && burnTokenAmount > 0) {\r\n            TransferHelper.safeTransferFrom(\r\n                quccAddress,\r\n                msg.sender,\r\n                address(burnAddress),\r\n                (burnTokenAmount * burnAmount_) / 10000\r\n            );\r\n        }\r\n    }\r\n\r\n    //\u5f00\u542f\u571f\u5730\r\n    function startGame() public {\r\n        require(userLand[msg.sender] == 0, \"game has been start\");\r\n\r\n        if (startGameRequrieAmount > 0) {\r\n            TransferHelper.safeTransferFrom(\r\n                quccAddress,\r\n                msg.sender,\r\n                address(burnAddress),\r\n                startGameRequrieAmount\r\n            );\r\n        }\r\n\r\n        //\u6fc0\u6d3b\u4f7f\u7528\u571f\u5730nft\r\n        uint256 tokenId_ = INFT(nftAddress).useNftPrice(msg.sender);\r\n\r\n        // \u7528\u6237\u53ef\u4ee5\u6301\u6709\u571f\u5730NFT\u5c31\u53ef\u4ee5\u5728\u6e38\u620f\u4e2d\u5f00\u542f\u519c\u573a,\u5c06NFT id\u5b58\u5165\u6e38\u620f\u5408\u7ea6\u4e2d\uff0c\r\n        // \u5e76\u4e14\u6709500\u7b97\u529b\uff08\u5f53\u7528\u6237\u5f00\u542f\u519c\u573a\u540e\uff0c\u5c31\u5728\u6b64\u5408\u7ea6\u7684\u56de\u8d2d\u6c60\u52a0\u4e0a134U\uff0c\r\n        // \u53bb\u9664NFT\u5408\u7ea6\u7684\u56de\u8d2d\u989d\u5ea6\uff0c\u6240\u6709\u7528\u6237\u53ef\u4ee5\u5411\u6e38\u620f\u5408\u7ea6\u56de\u8d2d\u6c60\u5356\u5e01\uff09\u3002\r\n\r\n        userLand[msg.sender] = tokenId_;\r\n        totalUsersAmount++;\r\n        power[msg.sender] = 500 * decimal_bucc;\r\n        totalPower += 500 * decimal_bucc;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"mint to the zero address\");\r\n        totalReward += amount;\r\n        goldBalanceOf[account] += amount;\r\n        emit Minted(address(this), account, amount);\r\n    }\r\n\r\n    function setOwner(address payable new_owner) public onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n\r\n    //\u521d\u59cb\u5316\u7b49\u7ea7\u53c2\u6570\r\n    function initLevel() private {\r\n        levelReward[0] = 20;\r\n        levelReward[1] = 50;\r\n        levelReward[2] = 55;\r\n        levelReward[3] = 60;\r\n        levelReward[4] = 65;\r\n        levelReward[5] = 65;\r\n\r\n        levelFees[0] = 50;\r\n        levelFees[1] = 20;\r\n        levelFees[2] = 16;\r\n        levelFees[3] = 14;\r\n        levelFees[4] = 12;\r\n        levelFees[5] = 10;\r\n\r\n        levelFirstReward[0] = 0;\r\n        levelFirstReward[1] = 20;\r\n        levelFirstReward[2] = 30;\r\n        levelFirstReward[3] = 40;\r\n        levelFirstReward[4] = 50;\r\n        levelFirstReward[5] = 60;\r\n\r\n        levelSecondReward[0] = 0;\r\n        levelSecondReward[1] = 5;\r\n        levelSecondReward[2] = 10;\r\n        levelSecondReward[3] = 15;\r\n        levelSecondReward[4] = 20;\r\n        levelSecondReward[5] = 20;\r\n    }\r\n\r\n    //\u83b7\u53d6\u7b97\u529b\u7b49\u7ea7\r\n    function getPowerLv(address account_) public view returns (uint8 Lv) {\r\n        Lv = 0;\r\n        uint256 power_ = power[account_];\r\n        if (power_ < 502 * decimal_bucc) {\r\n            Lv = 0;\r\n        } else if (power_ < 5000 * decimal_bucc) {\r\n            Lv = 1;\r\n        } else if (power_ < 10000 * decimal_bucc) {\r\n            Lv = 2;\r\n        } else if (power_ < 20000 * decimal_bucc) {\r\n            Lv = 3;\r\n        } else if (power_ < 40000 * decimal_bucc) {\r\n            Lv = 4;\r\n        } else if (power_ >= 40000 * decimal_bucc) {\r\n            Lv = 5;\r\n        }\r\n    }\r\n\r\n    function setDao(address new_dao) public onlyOwner {\r\n        daoAddress = new_dao;\r\n    }\r\n\r\n    function setBurnAddr(address new_addr) public onlyOwner {\r\n        burnAddress = new_addr;\r\n    }\r\n\r\n    function setRebackAddr(address new_addr) public onlyOwner {\r\n        rebackAddress = new_addr;\r\n    }\r\n\r\n    function setMarketAddr(address new_addr) public onlyOwner {\r\n        marketAddress = new_addr;\r\n    }\r\n\r\n    function setStarAddr(address new_addr) public onlyOwner {\r\n        starAddress = new_addr;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u7528\u6237\u6700\u9ad8\u7b97\u529b\r\n    function setUserMaxPower(uint256 _value) public onlyOwner {\r\n        userMaxPower = _value;\r\n    }\r\n\r\n    function startMint() public onlyOwner {\r\n        is_mint = true;\r\n        start_time = block.timestamp;\r\n    }\r\n\r\n    function setBasePrice(uint256 _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        basePrice = _value;\r\n        return true;\r\n    }\r\n\r\n    function setStartGameRequireAmount(uint256 _value) public onlyOwner {\r\n        startGameRequrieAmount = _value;\r\n    }\r\n\r\n    function setburnTokenAmount(uint256 _value) public onlyOwner {\r\n        burnTokenAmount = _value;\r\n    }\r\n\r\n    function setUserLand(uint256 tokenId_, address account_) public onlyOwner {\r\n        require(\r\n            INFT(nftAddress).ownerOf(tokenId_) == account_,\r\n            \"not owner error\"\r\n        ); //\u9700\u8981\u6301\u6709\u8005\u624d\u80fd\u4fee\u6539\r\n        userLand[account_] = tokenId_;\r\n    }\r\n\r\n    function update_epoch() private returns (bool success) {\r\n        epoch = epoch_base + (block.timestamp - start_time) / 365;\r\n        return true;\r\n    }\r\n\r\n    function registration(address invite_address)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(invite[msg.sender] == address(0), \"repeat registration\"); //\u73b0\u5728\u6ca1\u6709\u9080\u8bf7\u4eba\r\n        require(msg.sender != invite_address, \"not self\"); //\u4e0d\u80fd\u662f\u81ea\u5df1\r\n\r\n        // \u4e0a\u7ea7\u5fc5\u987b\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u9080\u8bf7\u4eba\u6216\u8005\u7ed1\u5b9a\u7ba1\u7406\u5458\u5e10\u53f7\r\n        require(\r\n            invite_address == daoAddress ||\r\n                invite[invite_address] != address(0),\r\n            \"The inviter must have been bound\"\r\n        );\r\n\r\n        invite[msg.sender] = invite_address; //\u8bb0\u5f55\u9080\u8bf7\u4eba\r\n        inviteCount[invite_address] += 1; //\u9080\u8bf7\u4eba\u7684\u4e0b\u7ea7\u6570\u52a0\u4e00\r\n        return true;\r\n    }\r\n\r\n    //Mint\r\n    function mint() public returns (bool success) {\r\n        doMint(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    // Mint\u7684\u65f6\u5019\uff0c\u8981\u68c0\u67e5\u7528\u6237\u662f\u5426\u6301\u6709\u6b64NFT\uff0c\u5982\u679c\u672a\u6301\u6709\uff0c\u5c31\u4e0d\u80fdMint\uff0cMint\u7684\u6761\u4ef6\uff1a\u5730\u5740,NFT,\u6e38\u620f\u4e09\u4e2a\u90fd\u8981\u5bf9\u5e94\u4e0a\u3002\r\n    function doMint(address _account) private {\r\n        uint256 tokenId_ = userLand[msg.sender];\r\n        require(tokenId_ > 0, \"land status error\");\r\n        require(\r\n            INFT(nftAddress).ownerOf(tokenId_) == _account,\r\n            \"nft ownerOf error\"\r\n        );\r\n        require(is_mint, \"not start mint\");\r\n        require(power[_account] > 0, \"power is zero\"); //\u7b97\u529b\u4e0d\u80fd\u4e3a\u96f6\r\n        require(\r\n            block.timestamp - last_miner[_account] >= epoch,\r\n            \"last_miner error\"\r\n        ); //\u8ddd\u79bb\u4e0a\u6b21Mint\u5927\u4e8e\u4e00\u4e2a\u5468\u671f\r\n\r\n        uint8 lv = getPowerLv(_account);\r\n\r\n        // \u7b97\u529b\u4e0d\u80fd\u4f4e\u4e8e\u5f53\u524d\u7b49\u7ea7\u6700\u4f4e\u7b97\u529b\u768498%\uff0c\u65e0\u6cd5\u6316\u77ff\uff0c\u9700\u8981\u8865\u5145\u7b97\u529b\u3002\r\n        if (power[_account] <= userMinPower[_account]) {\r\n            return;\r\n        }\r\n\r\n        uint8 scale = levelReward[lv];\r\n        if (scale == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 miner_days = (block.timestamp - last_miner[_account]) / epoch;\r\n\r\n        //v1\u53ca\u4ee5\u4e0a\u53ef\u4ee5\u7d2f\u8ba110\u5929\u6316\u77ff\r\n        if (lv < 1) {\r\n            miner_days = 1;\r\n        } else if (last_miner[_account] == 0) {\r\n            miner_days = 1; //\u7b2c\u4e00\u6b21Mint\u53ea\u80fd1\u5929\r\n        } else if (miner_days > 10) {\r\n            miner_days = 10; //\u5355\u6b21\u6700\u591a\u9886\u53d610\u5929\u7684\r\n        }\r\n\r\n        //\u7b97\u529b*\u6bd4\u4f8b*\u5929\u6570\r\n        uint256 reward = (power[_account] * miner_days * scale) / 10000;\r\n\r\n        update_epoch(); //\u6bcf\u6b21\u90fd\u66f4\u65b0\u57fa\u7840\u5468\u671f\u503c\r\n        power[_account] -= reward; //\u7b97\u529b\u51cf\u53bb\u672c\u6b21\u8f6c\u6362\u7684\r\n        totalPower -= reward; //\u51cf\u5c11\u603b\u7b97\u529b\r\n\r\n        last_miner[_account] = block.timestamp; //\u8bb0\u5f55\u672c\u6b21Mint\u65f6\u95f4\r\n        _mint(_account, reward); //\u589e\u52a0\u9080\u8bf7\u4eba\u4f59\u989d\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buccToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RechargeCof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"WithdrawalReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buccAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal_bucc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"exchangePower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getPowerLv\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"Lv\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"goldBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_miner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelFirstReward\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelReward\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelSecondReward\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"power\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quccAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rechargeGold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invite_address\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_addr\",\"type\":\"address\"}],\"name\":\"setBurnAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_addr\",\"type\":\"address\"}],\"name\":\"setMarketAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_addr\",\"type\":\"address\"}],\"name\":\"setRebackAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_addr\",\"type\":\"address\"}],\"name\":\"setStarAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartGameRequireAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"setUserLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserMaxPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setburnTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGameRequrieAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userMaxPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUCCGAME", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000049ab7b384e6b7819d2e2cb2ebd86943a865c9a7f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d3dcbe09b4da22e28f1dd269c9ef245577ab52c0824637a11214d8256baee2b"}