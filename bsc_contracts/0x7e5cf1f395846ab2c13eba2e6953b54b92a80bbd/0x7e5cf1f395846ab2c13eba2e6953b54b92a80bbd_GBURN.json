{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GBURN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface Token {\\n    function transferFrom(address, address, uint) external returns (bool);\\n\\n    function transfer(address, uint) external returns (bool);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETCSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForROSESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function WETC() external pure returns (address);\\n\\n    function WHT() external pure returns (address);\\n\\n    function WROSE() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n}\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    constructor() {\\n        _owner = 0xFB2ee39fBAd553983B195044202f2C7A9bec8E9c;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0x0),\\n            \\\"call the renounceOwnership for zero address\\\"\\n        );\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nabstract contract BaseToken {\\n    event TokenCreated(\\n        address indexed owner,\\n        address indexed token,\\n        string tokenType,\\n        uint256 version\\n    );\\n}\\n\\ncontract GBURN is IERC20, Ownable, BaseToken {\\n    uint256 public constant VERSION = 1;\\n\\n    mapping(address => uint256) private rOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private immutable tTotal;\\n    uint256 private rTotal;\\n\\n    uint16 public reflectionTax;\\n    uint16 public treasuryTax;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private immutable _decimals;\\n\\n    address payable public treasuryAddress;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n\\n    bool private inSwap = false;\\n    bool public swapEnabled = true;\\n\\n    event UpdatedTreasuryWallet(address indexed account);\\n    event ChangedFees(uint16 reflectionTax, uint16 treasuryTax);\\n    event ChangedSwapEnable(bool enable);\\n    event ExcludedAccountsFromFees(address[] accounts, bool excluded);\\n    event WithdrawedTokens(\\n        address indexed token,\\n        address indexed to,\\n        uint amount\\n    );\\n    event SwapError(uint256 amount);\\n    event Reflected(address sender, uint256 amount);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 totalSupply_,\\n        address router_,\\n        address treasuryAddress_,\\n        uint16 reflectionTax_,\\n        uint16 treasuryTax_\\n    ) {\\n        require(\\n            treasuryAddress_ != address(0x0),\\n            \\\"treasury address cannot be zero\\\"\\n        );\\n\\n        require(decimals_ != 0, \\\"decimals should not be zero\\\");\\n        validateFees(reflectionTax_, treasuryTax_);\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n\\n        tTotal = totalSupply_;\\n        rTotal = (MAX - (MAX % totalSupply_));\\n\\n        rOwned[owner()] = rTotal;\\n\\n        uniswapV2Router = IUniswapV2Router02(router_);\\n\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            getNativeCurrency()\\n        );\\n\\n        treasuryAddress = payable(treasuryAddress_);\\n\\n        reflectionTax = reflectionTax_;\\n        treasuryTax = treasuryTax_;\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[treasuryAddress_] = true;\\n\\n        emit Transfer(address(0x0), owner(), totalSupply_);\\n\\n        emit TokenCreated(owner(), address(this), \\\"redis\\\", VERSION);\\n    }\\n\\n    function getNativeCurrency() internal view returns (address) {\\n        if (block.chainid == 61) {\\n            //etc\\n            return uniswapV2Router.WETC();\\n        } else if (block.chainid == 128) {\\n            //heco chain\\n            return uniswapV2Router.WHT();\\n        } else if (block.chainid == 42262) {\\n            //oasis\\n            return uniswapV2Router.WROSE();\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\n            //avalance\\n            return uniswapV2Router.WAVAX();\\n        } else {\\n            return uniswapV2Router.WETH();\\n        }\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(rOwned[account]);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address account,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[account][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 senderAllowance = _allowances[sender][msg.sender];\\n\\n        require(senderAllowance >= amount, \\\"insufficient allowance\\\");\\n\\n        _approve(sender, msg.sender, senderAllowance - amount);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) private view returns (uint256) {\\n        require(\\n            rAmount <= rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function _approve(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(account != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[account][spender] = amount;\\n        emit Approval(account, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (\\n            from != owner() &&\\n            to != owner() &&\\n            !inSwap &&\\n            from != uniswapV2Pair &&\\n            swapEnabled\\n        ) {\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n\\n            if (contractTokenBalance > 0)\\n                swapTokensForEth(contractTokenBalance);\\n        }\\n\\n        _transferStandard(from, to, amount);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = getNativeCurrency();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        if (block.chainid == 61) {\\n            //etc\\n            try\\n                uniswapV2Router\\n                    .swapExactTokensForETCSupportingFeeOnTransferTokens(\\n                        tokenAmount,\\n                        0, // accept any amount of ETH\\n                        path,\\n                        treasuryAddress,\\n                        block.timestamp\\n                    )\\n            {} catch {\\n                emit SwapError(tokenAmount);\\n            }\\n        } else if (block.chainid == 42262) {\\n            //oasis\\n            try\\n                uniswapV2Router\\n                    .swapExactTokensForROSESupportingFeeOnTransferTokens(\\n                        tokenAmount,\\n                        0, // accept any amount of ETH\\n                        path,\\n                        treasuryAddress,\\n                        block.timestamp\\n                    )\\n            {} catch {\\n                emit SwapError(tokenAmount);\\n            }\\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\\n            //avalance\\n            try\\n                uniswapV2Router\\n                    .swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n                        tokenAmount,\\n                        0, // accept any amount of ETH\\n                        path,\\n                        treasuryAddress,\\n                        block.timestamp\\n                    )\\n            {} catch {\\n                emit SwapError(tokenAmount);\\n            }\\n        } else {\\n            try\\n                uniswapV2Router\\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                        tokenAmount,\\n                        0, // accept any amount of ETH\\n                        path,\\n                        treasuryAddress,\\n                        block.timestamp\\n                    )\\n            {} catch {\\n                emit SwapError(tokenAmount);\\n            }\\n        }\\n    }\\n\\n    function withdrawETH() external onlyOwner {\\n        treasuryAddress.transfer(address(this).balance);\\n    }\\n\\n    function withdrawTokens(\\n        address token,\\n        address to,\\n        uint amount\\n    ) external onlyOwner {\\n        require(IERC20(token).transfer(to, amount), \\\"transfer rejected\\\");\\n\\n        emit WithdrawedTokens(token, to, amount);\\n    }\\n\\n    function setTreasuryAddress(address payable account) external onlyOwner {\\n        require(account != address(0x0), \\\"treasury address cannot be zero\\\");\\n\\n        treasuryAddress = account;\\n        _isExcludedFromFee[account] = true;\\n\\n        emit UpdatedTreasuryWallet(account);\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        bool takeFee = !_isExcludedFromFee[sender] &&\\n            !_isExcludedFromFee[recipient] &&\\n            (sender == uniswapV2Pair || recipient == uniswapV2Pair) &&\\n            !inSwap;\\n\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rReflection,\\n            uint256 rTreasury,\\n            uint256 tTransferAmount,\\n            uint256 tReflection,\\n            uint256 tTreasury\\n        ) = _getValues(takeFee, tAmount);\\n\\n        rOwned[sender] = rOwned[sender] - rAmount;\\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n\\n        if (rTreasury > 0) {\\n            rOwned[address(this)] = rOwned[address(this)] + rTreasury;\\n            emit Transfer(sender, address(this), tTreasury);\\n        }\\n\\n        if (rReflection > 0) {\\n            rTotal = rTotal - rReflection;\\n            emit Reflected(sender, tReflection);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function _getValues(\\n        bool takeFees,\\n        uint256 tAmount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tReflection,\\n            uint256 tTreasury\\n        ) = _getTValues(takeFees, tAmount);\\n\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rReflection,\\n            uint256 rTreasury\\n        ) = _getRValues(tAmount, tReflection, tTreasury);\\n\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rReflection,\\n            rTreasury,\\n            tTransferAmount,\\n            tReflection,\\n            tTreasury\\n        );\\n    }\\n\\n    function _getTValues(\\n        bool takeFees,\\n        uint256 tAmount\\n    ) private view returns (uint256, uint256, uint256) {\\n        if (!takeFees) return (tAmount, 0, 0);\\n\\n        uint256 tReflection = (tAmount * reflectionTax) / 100;\\n        uint256 tTreasury = (tAmount * treasuryTax) / 100;\\n        uint256 tTransferAmount = tAmount - tReflection - tTreasury;\\n        return (tTransferAmount, tReflection, tTreasury);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tReflection,\\n        uint256 tTreasury\\n    ) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 rate = _getRate();\\n\\n        uint256 rAmount = tAmount * rate;\\n        uint256 rReflection = tReflection * rate;\\n        uint256 rTreasury = tTreasury * rate;\\n        uint256 rTransferAmount = rAmount - rReflection - rTreasury;\\n\\n        return (rAmount, rTransferAmount, rReflection, rTreasury);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = rTotal;\\n        uint256 tSupply = tTotal;\\n        if (rSupply < rTotal / tTotal) return (rTotal, tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function manualSwap() external onlyOwner {\\n        swapTokensForEth(balanceOf(address(this)));\\n    }\\n\\n    function setFee(\\n        uint16 reflectionTax_,\\n        uint16 treasuryTax_\\n    ) public onlyOwner {\\n        validateFees(reflectionTax_, treasuryTax_);\\n\\n        reflectionTax = reflectionTax_;\\n        treasuryTax = treasuryTax_;\\n\\n        emit ChangedFees(reflectionTax_, treasuryTax_);\\n    }\\n\\n    function validateFees(\\n        uint16 reflectionTax_,\\n        uint16 treasuryTax_\\n    ) internal pure {\\n        require(\\n            reflectionTax_ + treasuryTax_ <= 20,\\n            \\\"Fees cannot be greater than 20%\\\"\\n        );\\n    }\\n\\n    function toggleSwap(bool enable) external onlyOwner {\\n        swapEnabled = enable;\\n\\n        emit ChangedSwapEnable(enable);\\n    }\\n\\n    function excludeMultipleAccountsFromFees(\\n        address[] calldata accounts,\\n        bool excluded\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _isExcludedFromFee[accounts[i]] = excluded;\\n        }\\n\\n        emit ExcludedAccountsFromFees(accounts, excluded);\\n    }\\n\\n    function getExcludedFromFee(address account) external view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"reflectionTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryTax_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"reflectionTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryTax\",\"type\":\"uint16\"}],\"name\":\"ChangedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"ChangedSwapEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reflected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdatedTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawedTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflectionTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasuryTax_\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GBURN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000f2326efe1d84f6b5caf6239d7594db01a67bca94000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005474255524e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005474255524e000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}