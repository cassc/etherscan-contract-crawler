{"SourceCode": "// File: contracts/interfaces/ILiquidationManager.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's liquidation manager interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface ILiquidationManager  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\tfunction partialLiquidation(address payable delinquentBorrower, uint256 targetHandler, uint256 liquidateAmount, uint256 receiveHandler) external returns (uint256);\r\n\tfunction checkLiquidation(address payable userAddr) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IManagerSlotSetter.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Manager Context Setter interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IManagerSlotSetter  {\r\n  function ownershipTransfer(address payable _owner) external returns (bool);\r\n  function setOperator(address payable adminAddr, bool flag) external returns (bool);\r\n  function setOracleProxy(address oracleProxyAddr) external returns (bool);\r\n  function setRewardErc20(address erc20Addr) external returns (bool);\r\n  function setBreakerTable(address _target, bool _status) external returns (bool);\r\n  function setCircuitBreaker(bool _emergency) external returns (bool);\r\n  function handlerRegister(uint256 handlerID, address tokenHandlerAddr, uint256 flashFeeRate, uint256 discountBase) external returns (bool);\r\n  function setLiquidationManager(address liquidationManagerAddr) external returns (bool);\r\n  function setHandlerSupport(uint256 handlerID, bool support) external returns (bool);\r\n  function setPositionStorageAddr(address _positionStorageAddr) external returns (bool);\r\n  function setNFTAddr(address _nftAddr) external returns (bool);\r\n  function setDiscountBase(uint256 handlerID, uint256 feeBase) external returns (bool);\r\n  function setFlashloanAddr(address _flashloanAddr) external returns (bool);\r\n  function sethandlerManagerAddr(address _handlerManagerAddr) external returns (bool);\r\n  function setSlotSetterAddr(address _slotSetterAddr) external returns (bool);\r\n  function setFlashloanFee(uint256 handlerID, uint256 flashFeeRate) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IHandlerManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Manager Interest interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IHandlerManager  {\r\n  function applyInterestHandlers(address payable userAddr, uint256 callerID, bool allFlag) external returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n  function interestUpdateReward() external returns (bool);\r\n  function updateRewardParams(address payable userAddr) external returns (bool);\r\n  function rewardClaimAll(address payable userAddr) external returns (uint256);\r\n  function claimHandlerReward(uint256 handlerID, address payable userAddr) external returns (uint256);\r\n  function ownerRewardTransfer(uint256 _amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IManagerFlashloan.sol\r\npragma solidity 0.6.12;\r\n\r\ninterface IManagerFlashloan {\r\n  function withdrawFlashloanFee(uint256 handlerID) external returns (bool);\r\n\r\n  function flashloan(\r\n    uint256 handlerID,\r\n    address receiverAddress,\r\n    uint256 amount,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n\r\n  function getFee(uint256 handlerID, uint256 amount) external view returns (uint256);\r\n\r\n  function getFeeTotal(uint256 handlerID) external view returns (uint256);\r\n\r\n  function getFeeFromArguments(uint256 handlerID, uint256 amount, uint256 bifiAmo) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\npragma solidity ^0.6.12;\r\n\r\n// from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @title BiFi's safe-math Contract\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\nlibrary SafeMath {\r\n  uint256 internal constant unifiedPoint = 10 ** 18;\r\n\t/******************** Safe Math********************/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"a\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _sub(a, b, \"s\");\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _mul(a, b);\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(a, b, \"d\");\r\n\t}\r\n\r\n\tfunction _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b <= a, errorMessage);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction _mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a* b;\r\n\t\trequire((c / a) == b, \"m\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction _div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b > 0, errorMessage);\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction unifiedDiv(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(_mul(a, unifiedPoint), b, \"d\");\r\n\t}\r\n\r\n\tfunction unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(_mul(a, b), unifiedPoint, \"m\");\r\n\t}\r\n}\r\n\r\n// File: contracts/interfaces/IManagerDataStorage.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's manager data storage interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IManagerDataStorage  {\r\n\tfunction getGlobalRewardPerBlock() external view returns (uint256);\r\n\tfunction setGlobalRewardPerBlock(uint256 _globalRewardPerBlock) external returns (bool);\r\n\r\n\tfunction getGlobalRewardDecrement() external view returns (uint256);\r\n\tfunction setGlobalRewardDecrement(uint256 _globalRewardDecrement) external returns (bool);\r\n\r\n\tfunction getGlobalRewardTotalAmount() external view returns (uint256);\r\n\tfunction setGlobalRewardTotalAmount(uint256 _globalRewardTotalAmount) external returns (bool);\r\n\r\n\tfunction getAlphaRate() external view returns (uint256);\r\n\tfunction setAlphaRate(uint256 _alphaRate) external returns (bool);\r\n\r\n\tfunction getAlphaLastUpdated() external view returns (uint256);\r\n\tfunction setAlphaLastUpdated(uint256 _alphaLastUpdated) external returns (bool);\r\n\r\n\tfunction getRewardParamUpdateRewardPerBlock() external view returns (uint256);\r\n\tfunction setRewardParamUpdateRewardPerBlock(uint256 _rewardParamUpdateRewardPerBlock) external returns (bool);\r\n\r\n\tfunction getRewardParamUpdated() external view returns (uint256);\r\n\tfunction setRewardParamUpdated(uint256 _rewardParamUpdated) external returns (bool);\r\n\r\n\tfunction getInterestUpdateRewardPerblock() external view returns (uint256);\r\n\tfunction setInterestUpdateRewardPerblock(uint256 _interestUpdateRewardPerblock) external returns (bool);\r\n\r\n\tfunction getInterestRewardUpdated() external view returns (uint256);\r\n\tfunction setInterestRewardUpdated(uint256 _interestRewardLastUpdated) external returns (bool);\r\n\r\n\tfunction setTokenHandler(uint256 handlerID, address handlerAddr) external returns (bool);\r\n\r\n\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address);\r\n\r\n\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\r\n\r\n\tfunction getTokenHandlerAddr(uint256 handlerID) external view returns (address);\r\n\tfunction setTokenHandlerAddr(uint256 handlerID, address handlerAddr) external returns (bool);\r\n\r\n\tfunction getTokenHandlerExist(uint256 handlerID) external view returns (bool);\r\n\tfunction setTokenHandlerExist(uint256 handlerID, bool exist) external returns (bool);\r\n\r\n\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\r\n\tfunction setTokenHandlerSupport(uint256 handlerID, bool support) external returns (bool);\r\n\r\n\tfunction setLiquidationManagerAddr(address _liquidationManagerAddr) external returns (bool);\r\n\tfunction getLiquidationManagerAddr() external view returns (address);\r\n\r\n\tfunction setManagerAddr(address _managerAddr) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IOracleProxy.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's oracle proxy interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IOracleProxy  {\r\n\tfunction getTokenPrice(uint256 tokenID) external view returns (uint256);\r\n\r\n\tfunction getOracleFeed(uint256 tokenID) external view returns (address, uint256);\r\n\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n// from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\npragma solidity 0.6.12;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external ;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external ;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IObserver.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Observer interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IObserver {\r\n    function getAlphaBaseAsset() external view returns (uint256[] memory);\r\n    function setChainGlobalRewardPerblock(uint256 _idx, uint256 globalRewardPerBlocks) external returns (bool);\r\n    function updateChainMarketInfo(uint256 _idx, uint256 chainDeposit, uint256 chainBorrow) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IProxy.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's proxy interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IProxy  {\r\n\tfunction handlerProxy(bytes memory data) external returns (bool, bytes memory);\r\n\tfunction handlerViewProxy(bytes memory data) external view returns (bool, bytes memory);\r\n\tfunction siProxy(bytes memory data) external returns (bool, bytes memory);\r\n\tfunction siViewProxy(bytes memory data) external view returns (bool, bytes memory);\r\n}\r\n\r\n// File: contracts/interfaces/IMarketHandler.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market handler interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IMarketHandler  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\tfunction setCircuitBreakWithOwner(bool _emergency) external returns (bool);\r\n\r\n\tfunction getTokenName() external view returns (string memory);\r\n\r\n\tfunction ownershipTransfer(address payable newOwner) external returns (bool);\r\n\r\n\tfunction deposit(uint256 unifiedTokenAmount, bool allFlag) external payable returns (bool);\r\n\tfunction withdraw(uint256 unifiedTokenAmount, bool allFlag) external returns (bool);\r\n\tfunction borrow(uint256 unifiedTokenAmount, bool allFlag) external returns (bool);\r\n\tfunction repay(uint256 unifiedTokenAmount, bool allFlag) external payable returns (bool);\r\n\r\n\tfunction executeFlashloan(\r\n\t\taddress receiverAddress,\r\n\t\tuint256 amount\r\n  ) external returns (bool);\r\n\r\n\tfunction depositFlashloanFee(\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n  function convertUnifiedToUnderlying(uint256 unifiedTokenAmount) external view returns (uint256);\r\n\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 rewardHandlerID) external returns (uint256, uint256, uint256);\r\n\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 liquidationAmountWithReward, address payable liquidator) external returns (uint256);\r\n\r\n\tfunction getTokenHandlerLimit() external view returns (uint256, uint256);\r\n  function getTokenHandlerBorrowLimit() external view returns (uint256);\r\n\tfunction getTokenHandlerMarginCallLimit() external view returns (uint256);\r\n\tfunction setTokenHandlerBorrowLimit(uint256 borrowLimit) external returns (bool);\r\n\tfunction setTokenHandlerMarginCallLimit(uint256 marginCallLimit) external returns (bool);\r\n\r\n  function getTokenLiquidityAmountWithInterest(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction getUserAmountWithInterest(address payable userAddr) external view returns (uint256, uint256);\r\n\tfunction getUserAmount(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserMaxBorrowAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction getUserMaxWithdrawAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction getUserMaxRepayAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction checkFirstAction() external returns (bool);\r\n\tfunction applyInterest(address payable userAddr) external returns (uint256, uint256);\r\n\r\n\tfunction reserveDeposit(uint256 unifiedTokenAmount) external payable returns (bool);\r\n\tfunction reserveWithdraw(uint256 unifiedTokenAmount) external returns (bool);\r\n\r\n\tfunction withdrawFlashloanFee(uint256 unifiedTokenAmount) external returns (bool);\r\n\r\n\tfunction getDepositTotalAmount() external view returns (uint256);\r\n\tfunction getBorrowTotalAmount() external view returns (uint256);\r\n\r\n\tfunction getSIRandBIR() external view returns (uint256, uint256);\r\n\r\n  function getERC20Addr() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IServiceIncentive.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's si interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IServiceIncentive  {\r\n\tfunction setCircuitBreakWithOwner(bool emergency) external returns (bool);\r\n\tfunction setCircuitBreaker(bool emergency) external returns (bool);\r\n\r\n\tfunction updateRewardPerBlockLogic(uint256 _rewardPerBlock) external returns (bool);\r\n\tfunction updateRewardLane(address payable userAddr) external returns (bool);\r\n\r\n\tfunction getBetaRateBaseTotalAmount() external view returns (uint256);\r\n\tfunction getBetaRateBaseUserAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction getUserRewardInfo(address payable userAddr) external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction claimRewardAmountUser(address payable userAddr) external returns (uint256);\r\n}\r\n\r\n// File: contracts/Errors.sol\r\npragma solidity 0.6.12;\r\n\r\ncontract Modifier {\r\n    string internal constant ONLY_OWNER = \"O\";\r\n    string internal constant ONLY_MANAGER = \"M\";\r\n    string internal constant CIRCUIT_BREAKER = \"emergency\";\r\n}\r\n\r\ncontract ManagerModifier is Modifier {\r\n    string internal constant ONLY_HANDLER = \"H\";\r\n    string internal constant ONLY_LIQUIDATION_MANAGER = \"LM\";\r\n    string internal constant ONLY_BREAKER = \"B\";\r\n}\r\n\r\ncontract HandlerDataStorageModifier is Modifier {\r\n    string internal constant ONLY_BIFI_CONTRACT = \"BF\";\r\n}\r\n\r\ncontract SIDataStorageModifier is Modifier {\r\n    string internal constant ONLY_SI_HANDLER = \"SI\";\r\n}\r\n\r\ncontract HandlerErrors is Modifier {\r\n    string internal constant USE_VAULE = \"use value\";\r\n    string internal constant USE_ARG = \"use arg\";\r\n    string internal constant EXCEED_LIMIT = \"exceed limit\";\r\n    string internal constant NO_LIQUIDATION = \"no liquidation\";\r\n    string internal constant NO_LIQUIDATION_REWARD = \"no enough reward\";\r\n    string internal constant NO_EFFECTIVE_BALANCE = \"not enough balance\";\r\n    string internal constant TRANSFER = \"err transfer\";\r\n}\r\n\r\ncontract SIErrors is Modifier { }\r\n\r\ncontract InterestErrors is Modifier { }\r\n\r\ncontract LiquidationManagerErrors is Modifier {\r\n    string internal constant NO_DELINQUENT = \"not delinquent\";\r\n}\r\n\r\ncontract ManagerErrors is ManagerModifier {\r\n    string internal constant REWARD_TRANSFER = \"RT\";\r\n    string internal constant UNSUPPORTED_TOKEN = \"UT\";\r\n}\r\n\r\ncontract OracleProxyErrors is Modifier {\r\n    string internal constant ZERO_PRICE = \"price zero\";\r\n}\r\n\r\ncontract RequestProxyErrors is Modifier { }\r\n\r\ncontract ManagerDataStorageErrors is ManagerModifier {\r\n    string internal constant NULL_ADDRESS = \"err addr null\";\r\n}\r\n\r\n// File: contracts/marketManager/ManagerSlot.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Slot contract\r\n * @notice Manager Slot Definitions & Allocations\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract ManagerSlot is ManagerErrors {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public owner;\r\n\tmapping(address => bool) operators;\r\n\tmapping(address => Breaker) internal breakerTable;\r\n\r\n\tbool public emergency = false;\r\n\r\n\tIManagerDataStorage internal dataStorageInstance;\r\n\tIOracleProxy internal oracleProxy;\r\n\r\n\t/* feat: manager reward token instance*/\r\n\tIERC20 internal rewardErc20Instance;\r\n\r\n\tIObserver public Observer;\r\n\r\n\taddress public slotSetterAddr;\r\n\taddress public handlerManagerAddr;\r\n\taddress public flashloanAddr;\r\n\r\n  // BiFi-X\r\n  address public positionStorageAddr;\r\n  address public nftAddr;\r\n\r\n\tuint256 public tokenHandlerLength;\r\n\r\n  struct FeeRateParams {\r\n    uint256 unifiedPoint;\r\n    uint256 minimum;\r\n    uint256 slope;\r\n    uint256 discountRate;\r\n  }\r\n\r\n  struct HandlerFlashloan {\r\n      uint256 flashFeeRate;\r\n      uint256 discountBase;\r\n      uint256 feeTotal;\r\n  }\r\n\r\n  mapping(uint256 => HandlerFlashloan) public handlerFlashloan;\r\n\r\n\tstruct UserAssetsInfo {\r\n\t\tuint256 depositAssetSum;\r\n\t\tuint256 borrowAssetSum;\r\n\t\tuint256 marginCallLimitSum;\r\n\t\tuint256 depositAssetBorrowLimitSum;\r\n\t\tuint256 depositAsset;\r\n\t\tuint256 borrowAsset;\r\n\t\tuint256 price;\r\n\t\tuint256 callerPrice;\r\n\t\tuint256 depositAmount;\r\n\t\tuint256 borrowAmount;\r\n\t\tuint256 borrowLimit;\r\n\t\tuint256 marginCallLimit;\r\n\t\tuint256 callerBorrowLimit;\r\n\t\tuint256 userBorrowableAsset;\r\n\t\tuint256 withdrawableAsset;\r\n\t}\r\n\r\n\tstruct Breaker {\r\n\t\tbool auth;\r\n\t\tbool tried;\r\n\t}\r\n\r\n\tstruct ContractInfo {\r\n\t\tbool support;\r\n\t\taddress addr;\r\n    address tokenAddr;\r\n\r\n    uint256 expectedBalance;\r\n    uint256 afterBalance;\r\n\r\n\t\tIProxy tokenHandler;\r\n\t\tbytes data;\r\n\r\n\t\tIMarketHandler handlerFunction;\r\n\t\tIServiceIncentive siFunction;\r\n\r\n\t\tIOracleProxy oracleProxy;\r\n\t\tIManagerDataStorage managerDataStorage;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyHandler(uint256 handlerID) {\r\n\t\t_isHandler(handlerID);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOperators {\r\n\t\taddress payable sender = msg.sender;\r\n\t\trequire(operators[sender] || sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isHandler(uint256 handlerID) internal view {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == dataStorageInstance.getTokenHandlerAddr(handlerID)) || (msgSender == owner), ONLY_HANDLER);\r\n\t}\r\n\r\n\tmodifier onlyLiquidationManager {\r\n\t\t_isLiquidationManager();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isLiquidationManager() internal view {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == dataStorageInstance.getLiquidationManagerAddr()) || (msgSender == owner), ONLY_LIQUIDATION_MANAGER);\r\n\t}\r\n\r\n\tmodifier circuitBreaker {\r\n\t\t_isCircuitBreak();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isCircuitBreak() internal view {\r\n\t\trequire((!emergency) || (msg.sender == owner), CIRCUIT_BREAKER);\r\n\t}\r\n\r\n\tmodifier onlyBreaker {\r\n\t\t_isBreaker();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isBreaker() internal view {\r\n\t\trequire(breakerTable[msg.sender].auth, ONLY_BREAKER);\r\n\t}\r\n}\r\n\r\n// File: contracts/marketManager/TokenManager.sol\r\n// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's marketManager contract\r\n * @notice Implement business logic and manage handlers\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract TokenManager is ManagerSlot {\r\n\r\n\t/**\r\n\t* @dev Constructor for marketManager\r\n\t* @param managerDataStorageAddr The address of the manager storage contract\r\n\t* @param oracleProxyAddr The address of oracle proxy contract (e.g., price feeds)\r\n  * @param _slotSetterAddr The address of managerSlotSetter contract\r\n  * @param _handlerManagerAddr The address of handlerManager contract\r\n  * @param _flashloanAddr The address of managerFlashloan contract\r\n\t* @param breaker The address of default circuit breaker\r\n\t* @param erc20Addr The address of reward token (ERC-20)\r\n\t*/\r\n\tconstructor (address managerDataStorageAddr, address oracleProxyAddr, address _slotSetterAddr, address _handlerManagerAddr, address _flashloanAddr, address breaker, address erc20Addr) public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\tdataStorageInstance = IManagerDataStorage(managerDataStorageAddr);\r\n\t\toracleProxy = IOracleProxy(oracleProxyAddr);\r\n\t\trewardErc20Instance = IERC20(erc20Addr);\r\n\r\n\t\tslotSetterAddr = _slotSetterAddr;\r\n\t\thandlerManagerAddr = _handlerManagerAddr;\r\n\t\tflashloanAddr = _flashloanAddr;\r\n\r\n\t\tbreakerTable[owner].auth = true;\r\n\t\tbreakerTable[breaker].auth = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer ownership\r\n\t* @param _owner the address of the new owner\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction ownershipTransfer(address payable _owner) onlyOwner public returns (bool result) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.ownershipTransfer.selector,\r\n\t\t\t\t_owner\r\n\t\t\t);\r\n\r\n    (result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\tfunction setOperator(address payable adminAddr, bool flag) onlyOwner external returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setOperator.selector,\r\n\t\t\t\tadminAddr, flag\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of OracleProxy contract\r\n\t* @param oracleProxyAddr The address of OracleProxy contract\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setOracleProxy(address oracleProxyAddr) onlyOwner external returns (bool result) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setOracleProxy.selector,\r\n\t\t\t\toracleProxyAddr\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of BiFi reward token contract\r\n\t* @param erc20Addr The address of BiFi reward token contract\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setRewardErc20(address erc20Addr) onlyOwner public returns (bool result) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setRewardErc20.selector,\r\n\t\t\t\terc20Addr\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Authorize admin user for circuitBreaker\r\n\t* @param _target The address of the circuitBreaker admin user.\r\n\t* @param _status The boolean status of circuitBreaker (on/off)\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setBreakerTable(address _target, bool _status) onlyOwner external returns (bool result) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setBreakerTable.selector,\r\n\t\t\t\t_target, _status\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set circuitBreak to freeze/unfreeze all handlers\r\n\t* @param _emergency The boolean status of circuitBreaker (on/off)\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setCircuitBreaker(bool _emergency) onlyBreaker external returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setCircuitBreaker.selector,\r\n\t\t\t\t_emergency\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\tfunction setSlotSetterAddr(address _slotSetterAddr) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter.setSlotSetterAddr.selector,\r\n\t\t\t\t\t_slotSetterAddr\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction sethandlerManagerAddr(address _handlerManagerAddr) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter.sethandlerManagerAddr.selector,\r\n\t\t\t\t\t_handlerManagerAddr\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction setFlashloanAddr(address _flashloanAddr) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter.setFlashloanAddr.selector,\r\n\t\t\t\t\t_flashloanAddr\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction setPositionStorageAddr(address _positionStorageAddr) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter.setPositionStorageAddr.selector,\r\n\t\t\t\t\t_positionStorageAddr\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction setNFTAddr(address _nftAddr) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter.setNFTAddr.selector,\r\n\t\t\t\t\t_nftAddr\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction setFlashloanFee(uint256 handlerID, uint256 flashFeeRate) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t\t.setFlashloanFee.selector,\r\n\t\t\t\t\thandlerID,\r\n\t\t\t    \tflashFeeRate\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\tfunction setDiscountBase(uint256 handlerID, uint256 feeBase) onlyOwner external returns (bool result) {\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t\t.setDiscountBase.selector,\r\n\t\t\t\t\thandlerID,\r\n\t\t\t    feeBase\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the circuitBreak status\r\n\t* @return The circuitBreak status\r\n\t*/\r\n\tfunction getCircuitBreaker() external view returns (bool)\r\n\t{\r\n\t\treturn emergency;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get information for a handler\r\n\t* @param handlerID Handler ID\r\n\t* @return (success or failure, handler address, handler name)\r\n\t*/\r\n\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address, string memory)\r\n\t{\r\n\t\tbool support;\r\n\t\taddress tokenHandlerAddr;\r\n\t\tstring memory tokenName;\r\n\t\tif (dataStorageInstance.getTokenHandlerSupport(handlerID))\r\n\t\t{\r\n\t\t\ttokenHandlerAddr = dataStorageInstance.getTokenHandlerAddr(handlerID);\r\n\t\t\tIProxy TokenHandler = IProxy(tokenHandlerAddr);\r\n\t\t\tbytes memory data;\r\n\t\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\t\tabi.encodeWithSelector(\r\n\t\t\t\t\tIMarketHandler\r\n\t\t\t\t\t.getTokenName.selector\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\ttokenName = abi.decode(data, (string));\r\n\t\t\tsupport = true;\r\n\t\t}\r\n\r\n\t\treturn (support, tokenHandlerAddr, tokenName);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Register a handler\r\n\t* @param handlerID Handler ID and address\r\n\t* @param tokenHandlerAddr The handler address\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction handlerRegister(uint256 handlerID, address tokenHandlerAddr, uint256 flashFeeRate, uint256 discountBase) onlyOwner external returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t\t.handlerRegister.selector,\r\n\t\t\t\t\thandlerID, tokenHandlerAddr, flashFeeRate, discountBase\r\n\t\t\t\t);\r\n\r\n\t\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\t}\r\n\t/**\r\n\t* @dev Set a liquidation manager contract\r\n\t* @param liquidationManagerAddr The address of liquidiation manager\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setLiquidationManager(address liquidationManagerAddr) onlyOwner external returns (bool result) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setLiquidationManager.selector,\r\n\t\t\t\tliquidationManagerAddr\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the (SI) rewards for a user\r\n\t* @param userAddr The address of the user\r\n\t* @param callerID The handler ID\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction rewardUpdateOfInAction(address payable userAddr, uint256 callerID) external returns (bool)\r\n\t{\r\n\t\tContractInfo memory handlerInfo;\r\n\t\t(handlerInfo.support, handlerInfo.addr) = dataStorageInstance.getTokenHandlerInfo(callerID);\r\n\t\tif (handlerInfo.support)\r\n\t\t{\r\n\t\t\tIProxy TokenHandler;\r\n\t\t\tTokenHandler = IProxy(handlerInfo.addr);\r\n\t\t\tTokenHandler.siProxy(\r\n\t\t\t\tabi.encodeWithSelector(\r\n\t\t\t\t\tIServiceIncentive\r\n\t\t\t\t\t.updateRewardLane.selector,\r\n\t\t\t\t\tuserAddr\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update interest of a user for a handler (internal)\r\n\t* @param userAddr The user address\r\n\t* @param callerID The handler ID\r\n\t* @param allFlag Flag for the full calculation mode (calculting for all handlers)\r\n\t* @return (uint256, uint256, uint256, uint256, uint256, uint256)\r\n\t*/\r\n\tfunction applyInterestHandlers(address payable userAddr, uint256 callerID, bool allFlag) external returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.applyInterestHandlers.selector,\r\n\t\t\t\tuserAddr, callerID, allFlag\r\n\t\t\t);\r\n\r\n\t\t(bool result, bytes memory returnData) = handlerManagerAddr.delegatecall(callData);\r\n    assert(result);\r\n\r\n    return abi.decode(returnData, (uint256, uint256, uint256, uint256, uint256, uint256));\r\n  }\r\n\r\n\t/**\r\n\t* @dev Reward the user (msg.sender) with the reward token after calculating interest.\r\n\t* @return result the interestUpdateReward call in ManagerInterest contract\r\n\t*/\r\n\tfunction interestUpdateReward() external returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.interestUpdateReward.selector\r\n\t\t\t);\r\n\r\n\t\t(result, ) = handlerManagerAddr.delegatecall(callData);\r\n    \tassert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev (Update operation) update the rewards parameters.\r\n\t* @param userAddr The address of operator\r\n\t* @return result the updateRewardParams call in ManagerInterest contract\r\n\t*/\r\n\tfunction updateRewardParams(address payable userAddr) onlyOperators external returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.updateRewardParams.selector,\r\n        userAddr\r\n\t\t\t);\r\n\r\n\t\t(result, ) = handlerManagerAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Claim all rewards for the user\r\n\t* @param userAddr The user address\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction rewardClaimAll(address payable userAddr) external returns (uint256)\r\n\t{\r\n    bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.rewardClaimAll.selector,\r\n        userAddr\r\n\t\t\t);\r\n\r\n\t\t(bool result, bytes memory returnData) = handlerManagerAddr.delegatecall(callData);\r\n    assert(result);\r\n\r\n    return abi.decode(returnData, (uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Claim handler rewards for the user\r\n\t* @param handlerID The ID of claim reward handler\r\n\t* @param userAddr The user address\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction claimHandlerReward(uint256 handlerID, address payable userAddr) external returns (uint256) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.claimHandlerReward.selector,\r\n        handlerID, userAddr\r\n\t\t\t);\r\n\r\n\t\t(bool result, bytes memory returnData) = handlerManagerAddr.delegatecall(callData);\r\n    assert(result);\r\n\r\n    return abi.decode(returnData, (uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer reward tokens to owner (for administration)\r\n\t* @param _amount The amount of the reward token\r\n\t* @return result (TODO: validate results)\r\n\t*/\r\n\tfunction ownerRewardTransfer(uint256 _amount) onlyOwner external returns (bool result)\r\n\t{\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIHandlerManager\r\n\t\t\t\t.ownerRewardTransfer.selector,\r\n        _amount\r\n\t\t\t);\r\n\r\n\t\t(result, ) = handlerManagerAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* @dev Get the token price of the handler\r\n\t* @param handlerID The handler ID\r\n\t* @return The token price of the handler\r\n\t*/\r\n\tfunction getTokenHandlerPrice(uint256 handlerID) external view returns (uint256)\r\n\t{\r\n\t\treturn _getTokenHandlerPrice(handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the margin call limit of the handler (external)\r\n\t* @param handlerID The handler ID\r\n\t* @return The margin call limit\r\n\t*/\r\n\tfunction getTokenHandlerMarginCallLimit(uint256 handlerID) external view returns (uint256)\r\n\t{\r\n\t\treturn _getTokenHandlerMarginCallLimit(handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the margin call limit of the handler (internal)\r\n\t* @param handlerID The handler ID\r\n\t* @return The margin call limit\r\n\t*/\r\n\tfunction _getTokenHandlerMarginCallLimit(uint256 handlerID) internal view returns (uint256)\r\n\t{\r\n\t\tIProxy TokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\t\tbytes memory data;\r\n\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler\r\n\t\t\t\t.getTokenHandlerMarginCallLimit.selector\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn abi.decode(data, (uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the borrow limit of the handler (external)\r\n\t* @param handlerID The handler ID\r\n\t* @return The borrow limit\r\n\t*/\r\n\tfunction getTokenHandlerBorrowLimit(uint256 handlerID) external view returns (uint256)\r\n\t{\r\n\t\treturn _getTokenHandlerBorrowLimit(handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the borrow limit of the handler (internal)\r\n\t* @param handlerID The handler ID\r\n\t* @return The borrow limit\r\n\t*/\r\n\tfunction _getTokenHandlerBorrowLimit(uint256 handlerID) internal view returns (uint256)\r\n\t{\r\n\t\tIProxy TokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\r\n\t\tbytes memory data;\r\n\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler\r\n\t\t\t\t.getTokenHandlerBorrowLimit.selector\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn abi.decode(data, (uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the handler status of whether the handler is supported or not.\r\n\t* @param handlerID The handler ID\r\n\t* @return Whether the handler is supported or not\r\n\t*/\r\n\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool)\r\n\t{\r\n\t\treturn dataStorageInstance.getTokenHandlerSupport(handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the length of the handler list\r\n\t* @param _tokenHandlerLength The length of the handler list\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setTokenHandlersLength(uint256 _tokenHandlerLength) onlyOwner external returns (bool)\r\n\t{\r\n\t\ttokenHandlerLength = _tokenHandlerLength;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the length of the handler list\r\n\t* @return the length of the handler list\r\n\t*/\r\n\tfunction getTokenHandlersLength() external view returns (uint256)\r\n\t{\r\n\t\treturn tokenHandlerLength;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the handler ID at the index in the handler list\r\n\t* @param index The index of the handler list (array)\r\n\t* @return The handler ID\r\n\t*/\r\n\tfunction getTokenHandlerID(uint256 index) external view returns (uint256)\r\n\t{\r\n\t\treturn dataStorageInstance.getTokenHandlerID(index);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the amount of token that the user can borrow more\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The amount of token that user can borrow more\r\n\t*/\r\n\tfunction getUserExtraLiquidityAmount(address payable userAddr, uint256 handlerID) external view returns (uint256)\r\n\t{\r\n\t\treturn _getUserExtraLiquidityAmount(userAddr, handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the deposit and borrow amount of the user with interest added\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The deposit and borrow amount of the user with interest\r\n\t*/\r\n\t/* about user market Information function*/\r\n\tfunction getUserIntraHandlerAssetWithInterest(address payable userAddr, uint256 handlerID) external view returns (uint256, uint256)\r\n\t{\r\n\t\treturn _getUserIntraHandlerAssetWithInterest(userAddr, handlerID);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the depositTotalCredit and borrowTotalCredit\r\n\t* @param userAddr The address of the user\r\n\t* @return depositTotalCredit The amount that users can borrow (i.e. deposit * borrowLimit)\r\n\t* @return borrowTotalCredit The sum of borrow amount for all handlers\r\n\t*/\r\n\tfunction getUserTotalIntraCreditAsset(address payable userAddr) external view returns (uint256, uint256)\r\n\t{\r\n\t\treturn _getUserTotalIntraCreditAsset(userAddr);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the borrow and margin call limits of the user for all handlers\r\n\t* @param userAddr The address of the user\r\n\t* @return userTotalBorrowLimitAsset the sum of borrow limit for all handlers\r\n\t* @return userTotalMarginCallLimitAsset the sume of margin call limit for handlers\r\n\t*/\r\n\tfunction getUserLimitIntraAsset(address payable userAddr) external view returns (uint256, uint256)\r\n\t{\r\n\t\tuint256 userTotalBorrowLimitAsset;\r\n\t\tuint256 userTotalMarginCallLimitAsset;\r\n\r\n\t\tfor (uint256 handlerID; handlerID < tokenHandlerLength; handlerID++)\r\n\t\t{\r\n\t\t\tif (dataStorageInstance.getTokenHandlerSupport(handlerID))\r\n\t\t\t{\r\n\t\t\t\tuint256 depositHandlerAsset;\r\n\t\t\t\tuint256 borrowHandlerAsset;\r\n\t\t\t\t(depositHandlerAsset, borrowHandlerAsset) = _getUserIntraHandlerAssetWithInterest(userAddr, handlerID);\r\n\t\t\t\tuint256 borrowLimit = _getTokenHandlerBorrowLimit(handlerID);\r\n\t\t\t\tuint256 marginCallLimit = _getTokenHandlerMarginCallLimit(handlerID);\r\n\t\t\t\tuint256 userBorrowLimitAsset = depositHandlerAsset.unifiedMul(borrowLimit);\r\n\t\t\t\tuint256 userMarginCallLimitAsset = depositHandlerAsset.unifiedMul(marginCallLimit);\r\n\t\t\t\tuserTotalBorrowLimitAsset = userTotalBorrowLimitAsset.add(userBorrowLimitAsset);\r\n\t\t\t\tuserTotalMarginCallLimitAsset = userTotalMarginCallLimitAsset.add(userMarginCallLimitAsset);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn (userTotalBorrowLimitAsset, userTotalMarginCallLimitAsset);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* @dev Get the maximum allowed amount to borrow of the user from the given handler\r\n\t* @param userAddr The address of the user\r\n\t* @param callerID The target handler to borrow\r\n\t* @return extraCollateralAmount The maximum allowed amount to borrow from\r\n\t  the handler.\r\n\t*/\r\n\tfunction getUserCollateralizableAmount(address payable userAddr, uint256 callerID) external view returns (uint256)\r\n\t{\r\n\t\tuint256 userTotalBorrowAsset;\r\n\t\tuint256 depositAssetBorrowLimitSum;\r\n\t\tuint256 depositHandlerAsset;\r\n\t\tuint256 borrowHandlerAsset;\r\n\t\tfor (uint256 handlerID; handlerID < tokenHandlerLength; handlerID++)\r\n\t\t{\r\n\t\t\tif (dataStorageInstance.getTokenHandlerSupport(handlerID))\r\n\t\t\t{\r\n\r\n\t\t\t\t(depositHandlerAsset, borrowHandlerAsset) = _getUserIntraHandlerAssetWithInterest(userAddr, handlerID);\r\n\t\t\t\tuserTotalBorrowAsset = userTotalBorrowAsset.add(borrowHandlerAsset);\r\n\t\t\t\tdepositAssetBorrowLimitSum = depositAssetBorrowLimitSum\r\n\t\t\t\t\t\t\t\t\t\t\t\t.add(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdepositHandlerAsset\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.unifiedMul( _getTokenHandlerBorrowLimit(handlerID) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (depositAssetBorrowLimitSum > userTotalBorrowAsset)\r\n\t\t{\r\n\t\t\treturn depositAssetBorrowLimitSum\r\n\t\t\t\t\t.sub(userTotalBorrowAsset)\r\n\t\t\t\t\t.unifiedDiv( _getTokenHandlerBorrowLimit(callerID) )\r\n\t\t\t\t\t.unifiedDiv( _getTokenHandlerPrice(callerID) );\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Partial liquidation for a user\r\n\t* @param delinquentBorrower The address of the liquidation target\r\n\t* @param liquidateAmount The amount to liquidate\r\n\t* @param liquidator The address of the liquidator (liquidation operator)\r\n\t* @param liquidateHandlerID The hander ID of the liquidating asset\r\n\t* @param rewardHandlerID The handler ID of the reward token for the liquidator\r\n\t* @return (uint256, uint256, uint256)\r\n\t*/\r\n\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 liquidateHandlerID, uint256 rewardHandlerID) onlyLiquidationManager external returns (uint256, uint256, uint256)\r\n\t{\r\n\t\taddress tokenHandlerAddr = dataStorageInstance.getTokenHandlerAddr(liquidateHandlerID);\r\n\t\tIProxy TokenHandler = IProxy(tokenHandlerAddr);\r\n\t\tbytes memory data;\r\n\r\n\t\tdata = abi.encodeWithSelector(\r\n\t\t\tIMarketHandler\r\n\t\t\t.partialLiquidationUser.selector,\r\n\r\n\t\t\tdelinquentBorrower,\r\n\t\t\tliquidateAmount,\r\n\t\t\tliquidator,\r\n\t\t\trewardHandlerID\r\n\t\t);\r\n\t\t(, data) = TokenHandler.handlerProxy(data);\r\n\r\n\t\treturn abi.decode(data, (uint256, uint256, uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the maximum liquidation reward by checking sufficient reward\r\n\t  amount for the liquidator.\r\n\t* @param delinquentBorrower The address of the liquidation target\r\n\t* @param liquidateHandlerID The hander ID of the liquidating asset\r\n\t* @param liquidateAmount The amount to liquidate\r\n\t* @param rewardHandlerID The handler ID of the reward token for the liquidator\r\n\t* @param rewardRatio delinquentBorrowAsset / delinquentDepositAsset\r\n\t* @return The maximum reward token amount for the liquidator\r\n\t*/\r\n\tfunction getMaxLiquidationReward(address payable delinquentBorrower, uint256 liquidateHandlerID, uint256 liquidateAmount, uint256 rewardHandlerID, uint256 rewardRatio) external view returns (uint256)\r\n\t{\r\n\t\tuint256 liquidatePrice = _getTokenHandlerPrice(liquidateHandlerID);\r\n\t\tuint256 rewardPrice = _getTokenHandlerPrice(rewardHandlerID);\r\n\t\tuint256 delinquentBorrowerRewardDeposit;\r\n\t\t(delinquentBorrowerRewardDeposit, ) = _getHandlerAmount(delinquentBorrower, rewardHandlerID);\r\n\t\tuint256 rewardAsset = delinquentBorrowerRewardDeposit.unifiedMul(rewardPrice).unifiedMul(rewardRatio);\r\n\t\tif (liquidateAmount.unifiedMul(liquidatePrice) > rewardAsset)\r\n\t\t{\r\n\t\t\treturn rewardAsset.unifiedDiv(liquidatePrice);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn liquidateAmount;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Reward the liquidator\r\n\t* @param delinquentBorrower The address of the liquidation target\r\n\t* @param rewardAmount The amount of reward token\r\n\t* @param liquidator The address of the liquidator (liquidation operator)\r\n\t* @param handlerID The handler ID of the reward token for the liquidator\r\n\t* @return The amount of reward token\r\n\t*/\r\n\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 rewardAmount, address payable liquidator, uint256 handlerID) onlyLiquidationManager external returns (uint256)\r\n\t{\r\n\t\taddress tokenHandlerAddr = dataStorageInstance.getTokenHandlerAddr(handlerID);\r\n\t\tIProxy TokenHandler = IProxy(tokenHandlerAddr);\r\n\t\tbytes memory data;\r\n\t\tdata = abi.encodeWithSelector(\r\n\t\t\tIMarketHandler\r\n\t\t\t.partialLiquidationUserReward.selector,\r\n\r\n\t\t\tdelinquentBorrower,\r\n\t\t\trewardAmount,\r\n\t\t\tliquidator\r\n\t\t);\r\n\t\t(, data) = TokenHandler.handlerProxy(data);\r\n\r\n\t\treturn abi.decode(data, (uint256));\r\n\t}\r\n\r\n\t/**\r\n    * @dev Execute flashloan contract with delegatecall\r\n    * @param handlerID The ID of the token handler to borrow.\r\n    * @param receiverAddress The address of receive callback contract\r\n    * @param amount The amount of borrow through flashloan\r\n    * @param params The encode metadata of user\r\n    * @return Whether or not succeed\r\n    */\r\n \tfunction flashloan(\r\n      uint256 handlerID,\r\n      address receiverAddress,\r\n      uint256 amount,\r\n      bytes calldata params\r\n    ) external returns (bool) {\r\n      bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerFlashloan\r\n\t\t\t\t.flashloan.selector,\r\n\t\t\t\thandlerID, receiverAddress, amount, params\r\n\t\t\t);\r\n\r\n      (bool result, bytes memory returnData) = flashloanAddr.delegatecall(callData);\r\n      assert(result);\r\n\r\n      return abi.decode(returnData, (bool));\r\n    }\r\n\r\n\t/**\r\n\t* @dev Call flashloan logic contract with delegatecall\r\n    * @param handlerID The ID of handler with accumulated flashloan fee\r\n    * @return The amount of fee accumlated to handler\r\n    */\r\n \tfunction getFeeTotal(uint256 handlerID) external returns (uint256)\r\n\t{\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerFlashloan\r\n\t\t\t\t.getFeeTotal.selector,\r\n\t\t\t\thandlerID\r\n\t\t\t);\r\n\r\n\t\t(bool result, bytes memory returnData) = flashloanAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\r\n\t\treturn abi.decode(returnData, (uint256));\r\n    }\r\n\r\n\t/**\r\n    * @dev Withdraw accumulated flashloan fee with delegatecall\r\n    * @param handlerID The ID of handler with accumulated flashloan fee\r\n    * @return Whether or not succeed\r\n    */\r\n\tfunction withdrawFlashloanFee(\r\n      uint256 handlerID\r\n    ) external onlyOwner returns (bool) {\r\n    \tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerFlashloan\r\n\t\t\t\t.withdrawFlashloanFee.selector,\r\n\t\t\t\thandlerID\r\n\t\t\t);\r\n\r\n\t\t(bool result, bytes memory returnData) = flashloanAddr.delegatecall(callData);\r\n\t\tassert(result);\r\n\r\n\t\treturn abi.decode(returnData, (bool));\r\n    }\r\n\r\n  /**\r\n    * @dev Get flashloan fee for flashloan amount before make product(BiFi-X)\r\n    * @param handlerID The ID of handler with accumulated flashloan fee\r\n    * @param amount The amount of flashloan amount\r\n    * @param bifiAmount The amount of Bifi amount\r\n    * @return The amount of fee for flashloan amount\r\n    */\r\n  function getFeeFromArguments(\r\n      uint256 handlerID,\r\n      uint256 amount,\r\n      uint256 bifiAmount\r\n    ) external returns (uint256) {\r\n      bytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerFlashloan\r\n\t\t\t\t.getFeeFromArguments.selector,\r\n\t\t\t\thandlerID, amount, bifiAmount\r\n\t\t\t);\r\n\r\n      (bool result, bytes memory returnData) = flashloanAddr.delegatecall(callData);\r\n      assert(result);\r\n\r\n      return abi.decode(returnData, (uint256));\r\n    }\r\n\r\n\t/**\r\n\t* @dev Get the deposit and borrow amount of the user for the handler (internal)\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The deposit and borrow amount\r\n\t*/\r\n\tfunction _getHandlerAmount(address payable userAddr, uint256 handlerID) internal view returns (uint256, uint256)\r\n\t{\r\n\t\tIProxy TokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\t\tbytes memory data;\r\n\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler\r\n\t\t\t\t.getUserAmount.selector,\r\n\t\t\t\tuserAddr\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn abi.decode(data, (uint256, uint256));\r\n\t}\r\n\r\n  \t/**\r\n\t* @dev Get the deposit and borrow amount with interest of the user for the handler (internal)\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The deposit and borrow amount with interest\r\n\t*/\r\n\tfunction _getHandlerAmountWithAmount(address payable userAddr, uint256 handlerID) internal view returns (uint256, uint256)\r\n\t{\r\n\t\tIProxy TokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\t\tbytes memory data;\r\n\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler\r\n\t\t\t\t.getUserAmountWithInterest.selector,\r\n\t\t\t\tuserAddr\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn abi.decode(data, (uint256, uint256));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the support stauts for the handler\r\n\t* @param handlerID the handler ID\r\n\t* @param support the support status (boolean)\r\n\t* @return result the setter call in contextSetter contract\r\n\t*/\r\n\tfunction setHandlerSupport(uint256 handlerID, bool support) onlyOwner public returns (bool result) {\r\n\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIManagerSlotSetter\r\n\t\t\t\t.setHandlerSupport.selector,\r\n\t\t\t\thandlerID, support\r\n\t\t\t);\r\n\r\n\t\t(result, ) = slotSetterAddr.delegatecall(callData);\r\n    assert(result);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get owner's address of the manager contract\r\n\t* @return The address of owner\r\n\t*/\r\n\tfunction getOwner() public view returns (address)\r\n\t{\r\n\t\treturn owner;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the deposit and borrow amount of the user with interest added\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The deposit and borrow amount of the user with interest\r\n\t*/\r\n\tfunction _getUserIntraHandlerAssetWithInterest(address payable userAddr, uint256 handlerID) internal view returns (uint256, uint256)\r\n\t{\r\n\t\tuint256 price = _getTokenHandlerPrice(handlerID);\r\n\t\tIProxy TokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\t\tuint256 depositAmount;\r\n\t\tuint256 borrowAmount;\r\n\r\n\t\tbytes memory data;\r\n\t\t(, data) = TokenHandler.handlerViewProxy(\r\n\t\t\tabi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler.getUserAmountWithInterest.selector,\r\n\t\t\t\tuserAddr\r\n\t\t\t)\r\n\t\t);\r\n\t\t(depositAmount, borrowAmount) = abi.decode(data, (uint256, uint256));\r\n\r\n\t\tuint256 depositAsset = depositAmount.unifiedMul(price);\r\n\t\tuint256 borrowAsset = borrowAmount.unifiedMul(price);\r\n\t\treturn (depositAsset, borrowAsset);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the depositTotalCredit and borrowTotalCredit\r\n\t* @param userAddr The address of the user\r\n\t* @return depositTotalCredit The amount that users can borrow (i.e. deposit * borrowLimit)\r\n\t* @return borrowTotalCredit The sum of borrow amount for all handlers\r\n\t*/\r\n\tfunction _getUserTotalIntraCreditAsset(address payable userAddr) internal view returns (uint256, uint256)\r\n\t{\r\n\t\tuint256 depositTotalCredit;\r\n\t\tuint256 borrowTotalCredit;\r\n\t\tfor (uint256 handlerID; handlerID < tokenHandlerLength; handlerID++)\r\n\t\t{\r\n\t\t\tif (dataStorageInstance.getTokenHandlerSupport(handlerID))\r\n\t\t\t{\r\n\t\t\t\tuint256 depositHandlerAsset;\r\n\t\t\t\tuint256 borrowHandlerAsset;\r\n\t\t\t\t(depositHandlerAsset, borrowHandlerAsset) = _getUserIntraHandlerAssetWithInterest(userAddr, handlerID);\r\n\t\t\t\tuint256 borrowLimit = _getTokenHandlerBorrowLimit(handlerID);\r\n\t\t\t\tuint256 depositHandlerCredit = depositHandlerAsset.unifiedMul(borrowLimit);\r\n\t\t\t\tdepositTotalCredit = depositTotalCredit.add(depositHandlerCredit);\r\n\t\t\t\tborrowTotalCredit = borrowTotalCredit.add(borrowHandlerAsset);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn (depositTotalCredit, borrowTotalCredit);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the amount of token that the user can borrow more\r\n\t* @param userAddr The address of user\r\n\t* @param handlerID The handler ID\r\n\t* @return The amount of token that user can borrow more\r\n\t*/\r\n  \tfunction _getUserExtraLiquidityAmount(address payable userAddr, uint256 handlerID) internal view returns (uint256) {\r\n\t\tuint256 depositCredit;\r\n\t\tuint256 borrowCredit;\r\n\t\t(depositCredit, borrowCredit) = _getUserTotalIntraCreditAsset(userAddr);\r\n\t\tif (depositCredit == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tif (depositCredit > borrowCredit)\r\n\t\t{\r\n\t\t\treturn depositCredit.sub(borrowCredit).unifiedDiv(_getTokenHandlerPrice(handlerID));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getFeePercent(uint256 handlerID) external view returns (uint256)\r\n\t{\r\n\treturn handlerFlashloan[handlerID].flashFeeRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the token price for the handler\r\n\t* @param handlerID The handler id\r\n\t* @return The token price of the handler\r\n\t*/\r\n\tfunction _getTokenHandlerPrice(uint256 handlerID) internal view returns (uint256)\r\n\t{\r\n\t\treturn (oracleProxy.getTokenPrice(handlerID));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the address of reward token\r\n\t* @return The address of reward token\r\n\t*/\r\n\tfunction getRewardErc20() public view returns (address)\r\n\t{\r\n\t\treturn address(rewardErc20Instance);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get the reward parameters\r\n\t* @return (uint256,uint256,uint256) rewardPerBlock, rewardDecrement, rewardTotalAmount\r\n\t*/\r\n\tfunction getGlobalRewardInfo() external view returns (uint256, uint256, uint256)\r\n\t{\r\n\t\tIManagerDataStorage _dataStorage = dataStorageInstance;\r\n\t\treturn (_dataStorage.getGlobalRewardPerBlock(), _dataStorage.getGlobalRewardDecrement(), _dataStorage.getGlobalRewardTotalAmount());\r\n\t}\r\n\r\n\tfunction setObserverAddr(address observerAddr) onlyOwner external returns (bool) {\r\n\t\tObserver = IObserver( observerAddr );\r\n\t}\r\n\r\n\t/**\r\n\t* @dev fallback function where handler can receive native coin\r\n\t*/\r\n\tfallback () external payable\r\n\t{\r\n\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerDataStorageAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleProxyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slotSetterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_handlerManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flashloanAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Observer\",\"outputs\":[{\"internalType\":\"contract IObserver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"callerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allFlag\",\"type\":\"bool\"}],\"name\":\"applyInterestHandlers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"claimHandlerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashloan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloanAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCircuitBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bifiAmount\",\"type\":\"uint256\"}],\"name\":\"getFeeFromArguments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"delinquentBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidateHandlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardHandlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"}],\"name\":\"getMaxLiquidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardErc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerMarginCallLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getTokenHandlerSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenHandlersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"callerID\",\"type\":\"uint256\"}],\"name\":\"getUserCollateralizableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getUserExtraLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"getUserIntraHandlerAssetWithInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserLimitIntraAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserTotalIntraCreditAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"handlerFlashloan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handlerManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenHandlerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBase\",\"type\":\"uint256\"}],\"name\":\"handlerRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestUpdateReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerRewardTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"delinquentBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidateAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidateHandlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardHandlerID\",\"type\":\"uint256\"}],\"name\":\"partialLiquidationUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"delinquentBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"partialLiquidationUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionStorageAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"rewardClaimAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"callerID\",\"type\":\"uint256\"}],\"name\":\"rewardUpdateOfInAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBreakerTable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergency\",\"type\":\"bool\"}],\"name\":\"setCircuitBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"}],\"name\":\"setDiscountBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashloanAddr\",\"type\":\"address\"}],\"name\":\"setFlashloanAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFlashloanFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"setHandlerSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidationManagerAddr\",\"type\":\"address\"}],\"name\":\"setLiquidationManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddr\",\"type\":\"address\"}],\"name\":\"setNFTAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"observerAddr\",\"type\":\"address\"}],\"name\":\"setObserverAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adminAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleProxyAddr\",\"type\":\"address\"}],\"name\":\"setOracleProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionStorageAddr\",\"type\":\"address\"}],\"name\":\"setPositionStorageAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"setRewardErc20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slotSetterAddr\",\"type\":\"address\"}],\"name\":\"setSlotSetterAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenHandlerLength\",\"type\":\"uint256\"}],\"name\":\"setTokenHandlersLength\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handlerManagerAddr\",\"type\":\"address\"}],\"name\":\"sethandlerManagerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotSetterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHandlerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"updateRewardParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"}],\"name\":\"withdrawFlashloanFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenManager", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a95a3b05da318983741360abe29dcda63dbb4d3000000000000000000000000dd80fb1c16a1eb446be94655e5f762c19c7fa89e0000000000000000000000008c0b650f149a0817be2e0767a636122994ac49ad00000000000000000000000072e419713551410297b407bf1b61a0dcc1cf5d0a0000000000000000000000008cc8a0d4759d94ecd1e5a0ae2866b3cbe65c4493000000000000000000000000d297c9a45ac9851003448c52c2b2b72c116884650000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "1", "Implementation": "0x72e419713551410297b407bf1b61a0dcc1cf5d0a", "SwarmSource": "ipfs://cf985dddebef7b1ded8b71ff43e0df43880fc6f1d293faea507acc7a687eb14f"}