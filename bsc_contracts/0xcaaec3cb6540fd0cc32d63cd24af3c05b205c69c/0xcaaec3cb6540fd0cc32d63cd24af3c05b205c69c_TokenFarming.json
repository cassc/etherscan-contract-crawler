{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event TransferOwnerShip(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit TransferOwnerShip(newOwner);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Owner can not be 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenFarming is Ownable {\r\n    uint256 noLockupDays = 99999; // no lockup days means user can withdraw anytime\r\n    uint256 public minimumStakingAmount;\r\n    uint256 public maximumStakingAmount;\r\n    uint256 public noLockupRewardPer = 5; // .5% per day -> values are in 1000\r\n    uint256 public lockup100DaysRewardPer = 15; // 1.5% per day -> values are in 1000\r\n    uint256 public lockup150DaysRewardPer = 20; // 2% per day\r\n    uint256 public lockup280DaysRewardPer = 25; // 2.5% per day\r\n\r\n    uint256 public firstGenReferralPer = 200; // 20% -> values are in 1000\r\n    uint256 public secondGenReferralPer = 100; // 10%\r\n    uint256 public thirdGenReferralPer = 50; // 5%\r\n    uint256 public fourthToTenthGenReferralPer = 10; // 1% === 10/1000\r\n\r\n    IBEP20 public stakingToken;\r\n    IBEP20 public token;\r\n\r\n    bool lock_ = false;\r\n    bool public stakingActive = true;\r\n\r\n    // users\r\n    address[] public users;\r\n    mapping(address => bool) public isUser;\r\n\r\n    mapping(address => bool) public isStaked;\r\n    mapping(address => uint256) public lockupDays;\r\n    mapping(address => uint256) public stakingBalance;\r\n    mapping(address => uint256) public rewardsClaimed;\r\n    mapping(address => uint256) public userUnlockTime;\r\n    mapping(address => uint256) public totalRewardsClaimed;\r\n\r\n    // referral mapping\r\n    mapping(address => address) public referralMapping;\r\n    mapping(address => address[]) public referralList;\r\n    mapping(address => uint256) public referredAt;\r\n    mapping(address => uint256) public referralClaimableRewards;\r\n    mapping(address => uint256) public totalReferralRewardsClaimed;\r\n    mapping(address => mapping(address => uint256)) public earnedAmountByRefFromMe;\r\n\r\n    modifier lock() {\r\n        require(!lock_, \"Process is locked\");\r\n        lock_ = true;\r\n        _;\r\n        lock_ = false;\r\n    }\r\n\r\n    constructor() {\r\n        stakingToken = IBEP20(0xA8230773Cb12Dd0500791bb3AD3F5aCc26452933);\r\n        token = IBEP20(0x9A7646BCF322Bea1dee11FfF86d9D6d9E42E5009); // mars token\r\n        uint8 _decimals = stakingToken.decimals();\r\n\r\n        minimumStakingAmount = 5000 * (10 ** _decimals);\r\n        maximumStakingAmount = 500000 * (10 ** _decimals);\r\n    }\r\n\r\n    // staking function\r\n    function stake(uint256 _amount, uint256 _lockDays, address _referrer) public lock {\r\n        require(stakingActive, \"Staking is not active\");\r\n        require(isValidLockDays(_lockDays), \"Invalid lock days\");\r\n        require(_amount >= minimumStakingAmount, \"Amount less than minimum\");\r\n        require(_amount <= maximumStakingAmount, \"Amount exceeds maximum\");\r\n\r\n        uint256 _userLockDays = lockupDays[msg.sender];\r\n        require(_userLockDays == 0, \"Already Staked\");\r\n\r\n        // Transfer tokens to this contract\r\n        require(stakingToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n\r\n        lockupDays[msg.sender] = _lockDays;\r\n        stakingBalance[msg.sender] += _amount;\r\n\r\n        // Set referral if applicable\r\n        if (_referrer != address(0) && _referrer != msg.sender && referralMapping[msg.sender] == address(0) && isStaked[_referrer] && msg.sender != referralMapping[_referrer]) {\r\n            referredAt[msg.sender] = block.timestamp;\r\n            referralMapping[msg.sender] = _referrer;\r\n            referralList[_referrer].push(msg.sender);\r\n        }\r\n\r\n        if(!isUser[msg.sender]){\r\n            isUser[msg.sender] = true;\r\n            users.push(msg.sender);\r\n        }\r\n\r\n        isStaked[msg.sender] = true;\r\n\r\n        // Set unlock time for the staked tokens\r\n        userUnlockTime[msg.sender] = block.timestamp + (_lockDays * 1 days);\r\n    }\r\n\r\n\r\n    // claimable rewards function\r\n    function claimableRewards(address _user) public view returns (uint256) {\r\n        uint256 _stakingAmount = stakingBalance[_user];\r\n        uint256 _lockDays = lockupDays[_user];\r\n        uint256 _days = getDaysCompleted(_user);\r\n\r\n        if(_days > _lockDays){\r\n            _days = _lockDays;\r\n        }\r\n\r\n        uint256 _rewardPercentage = getDailyRewardPercentage(_user);\r\n                \r\n        uint256 _amount = ((_stakingAmount * _rewardPercentage * _days) / (1000)) - rewardsClaimed[_user];\r\n        return _amount;\r\n    }\r\n\r\n    // claimable referral rewards\r\n    function claimableReferralRewards(address _user) public view returns (uint256){\r\n        return referralClaimableRewards[_user];\r\n    }\r\n\r\n    // claim rewards function\r\n    function claimRewards() public lock {\r\n        require(stakingBalance[msg.sender] > 0, \"No staking balance\");\r\n\r\n        uint256 _amount = claimableRewards(msg.sender);\r\n        require(_amount > 0, \"No rewards\");\r\n\r\n        uint256 _lockDays = lockupDays[msg.sender];\r\n\r\n        rewardsClaimed[msg.sender] += _amount;\r\n        totalRewardsClaimed[msg.sender] += _amount;\r\n\r\n        // transfer tokens to this address\r\n        token.transfer(msg.sender, _amount);\r\n\r\n        uint256 _days = getDaysCompleted(msg.sender);\r\n\r\n        // reset user data if user claimed all rewards\r\n        if(_lockDays != noLockupDays && _days >= _lockDays){\r\n            lockupDays[msg.sender] = 0;\r\n            stakingBalance[msg.sender] = 0;\r\n            userUnlockTime[msg.sender] = 0;\r\n            rewardsClaimed[msg.sender] = 0;\r\n        }\r\n\r\n        // referral rewards\r\n        address _referrer = referralMapping[msg.sender];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 1);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n            earnedAmountByRefFromMe[_referrer][msg.sender] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 2);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n            earnedAmountByRefFromMe[_referrer][msg.sender] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 3);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n            earnedAmountByRefFromMe[_referrer][msg.sender] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 4);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 5);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 6);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 7);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 8);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 9);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n        _referrer = referralMapping[_referrer];\r\n        if (_referrer != address(0)) {\r\n            uint256 _referrerAmount = userReferralShare(_amount, 10);\r\n            referralClaimableRewards[_referrer] += _referrerAmount;\r\n        }\r\n    }\r\n\r\n    // unustake function only for no lockup days\r\n    function unstake() public lock {\r\n        uint256 _amount = stakingBalance[msg.sender];\r\n        require(_amount > 0, \"No staking balance\");\r\n        require(lockupDays[msg.sender] == noLockupDays, \"Only for no lockup days\");\r\n        // check if claimable rewards are there;\r\n        uint256 _claimableRewards = claimableRewards(msg.sender);\r\n        require(_claimableRewards == 0, \"Claim rewards first\");\r\n        \r\n        lockupDays[msg.sender] = 0;\r\n        stakingBalance[msg.sender] = 0;\r\n        userUnlockTime[msg.sender] = 0;\r\n        rewardsClaimed[msg.sender] = 0;\r\n\r\n        // transfer tokens to this address\r\n        stakingToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function userReferralShare(uint256 _amount,uint256 _referrerLevel) public view returns (uint256) {\r\n        return (_amount * getReferralPercentage(_referrerLevel)) / 1000;\r\n    }\r\n\r\n    // claim referral rewards function\r\n    function claimReferralRewards() public lock {\r\n        uint256 _amount = claimableReferralRewards(msg.sender);\r\n        require(_amount > 0, \"No referral rewards\");\r\n\r\n        referralClaimableRewards[msg.sender] = 0;\r\n        totalReferralRewardsClaimed[msg.sender] += _amount;\r\n\r\n        // transfer tokens to this address\r\n        token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    // internal functions\r\n    function isValidLockDays(uint256 _lockDays) internal view returns (bool){\r\n        if(_lockDays == noLockupDays || _lockDays == 100 || _lockDays == 150 || _lockDays == 280){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    struct RefOfUser{\r\n        address user;\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // getReferralsData function\r\n    function getReferralsData(address _user) public view returns (RefOfUser[] memory){\r\n        uint256 length = users.length;\r\n        RefOfUser[] memory _referrals = new RefOfUser[](length);\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 _earnedAmount = earnedAmountByRefFromMe[_user][users[i]];\r\n            if(_earnedAmount > 0){\r\n                _referrals[count] = RefOfUser(users[i], _earnedAmount, referredAt[users[i]]);\r\n                count++;\r\n            }\r\n        }\r\n\r\n        assembly {\r\n            mstore(_referrals, count)\r\n        }\r\n\r\n        return _referrals;        \r\n    }\r\n\r\n    function getDaysCompleted(address _user) internal view returns (uint256){\r\n        uint256 _unlockTime = userUnlockTime[_user];\r\n        uint256 _lockDays = lockupDays[_user];\r\n        if(_unlockTime == 0){\r\n            return 0;\r\n        }\r\n        uint256 _userLockTime = _unlockTime - (_lockDays * 1 days); // it will give time when user locked his tokens\r\n        uint256 _days = (block.timestamp - _userLockTime) / (1 days);\r\n        return _days;\r\n    }\r\n\r\n    function getReferralPercentage(uint256 _referrerLevel) internal view returns (uint256){\r\n        if (_referrerLevel == 1) {\r\n            return firstGenReferralPer;\r\n        } else if (_referrerLevel == 2) {\r\n            return secondGenReferralPer;\r\n        } else if (_referrerLevel == 3) {\r\n            return thirdGenReferralPer;\r\n        } else if (_referrerLevel >= 4 && _referrerLevel <= 10) {\r\n            return fourthToTenthGenReferralPer;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getDailyRewardPercentage(address _user) internal view returns (uint256){\r\n        uint256 _lockupDays = lockupDays[_user];\r\n        if(_lockupDays == noLockupDays){\r\n            return noLockupRewardPer;\r\n        }else if(_lockupDays == 100){\r\n            return lockup100DaysRewardPer;\r\n        }else if(_lockupDays == 150){\r\n            return lockup150DaysRewardPer;\r\n        }else if(_lockupDays == 280){\r\n            return lockup280DaysRewardPer;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // all onlyOwner functions here\r\n    // create functions to override value for each global variable\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = IBEP20(_token);\r\n    }\r\n\r\n    function setNoLockupRewardPer(uint256 _noLockupRewardPer) public onlyOwner {\r\n        noLockupRewardPer = _noLockupRewardPer;\r\n    }\r\n\r\n    function setLockup100DaysRewardPer(uint256 _lockup100DaysRewardPer) public onlyOwner {\r\n        lockup100DaysRewardPer = _lockup100DaysRewardPer;\r\n    }\r\n\r\n    function setLockup150DaysRewardPer(uint256 _lockup150DaysRewardPer) public onlyOwner {\r\n        lockup150DaysRewardPer = _lockup150DaysRewardPer;\r\n    }\r\n\r\n    function setLockup280DaysRewardPer(uint256 _lockup280DaysRewardPer) public onlyOwner {\r\n        lockup280DaysRewardPer = _lockup280DaysRewardPer;\r\n    }\r\n\r\n    function setFirstGenReferralPer(uint256 _firstGenReferralPer) public onlyOwner {\r\n        firstGenReferralPer = _firstGenReferralPer;\r\n    }\r\n\r\n    function setSecondGenReferralPer(uint256 _secondGenReferralPer) public onlyOwner {\r\n        secondGenReferralPer = _secondGenReferralPer;\r\n    }\r\n    \r\n    function setThirdGenReferralPer(uint256 _thirdGenReferralPer) public onlyOwner {\r\n        thirdGenReferralPer = _thirdGenReferralPer;\r\n    }\r\n\r\n    function setFourthToTenthGenReferralPer(uint256 _fourthToTenthGenReferralPer) public onlyOwner {\r\n        fourthToTenthGenReferralPer = _fourthToTenthGenReferralPer;\r\n    }\r\n\r\n    // set staking token\r\n    function setStakingToken(address _stakingToken) public onlyOwner {\r\n        stakingToken = IBEP20(_stakingToken);\r\n    }\r\n\r\n    // set minimum staking amount\r\n    function setMinimumStakingAmount(uint256 _minimumStakingAmount) public onlyOwner{\r\n        minimumStakingAmount = _minimumStakingAmount;\r\n    }\r\n\r\n    // set maximum staking amount\r\n    function setMaximumStakingAmount(uint256 _maximumStakingAmount) public onlyOwner{\r\n        maximumStakingAmount = _maximumStakingAmount;\r\n    }\r\n\r\n    // set staking active\r\n    function setStakingActive(bool _stakingActive) public onlyOwner {\r\n        stakingActive = _stakingActive;\r\n    }\r\n\r\n    // withdraw tokens\r\n    function withdrawTokens(address _token, uint256 _amount) public onlyOwner {\r\n        IBEP20(_token).transfer(msg.sender, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedAmountByRefFromMe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstGenReferralPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourthToTenthGenReferralPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralsData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenFarming.RefOfUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockup100DaysRewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockup150DaysRewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockup280DaysRewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noLockupRewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondGenReferralPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstGenReferralPer\",\"type\":\"uint256\"}],\"name\":\"setFirstGenReferralPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fourthToTenthGenReferralPer\",\"type\":\"uint256\"}],\"name\":\"setFourthToTenthGenReferralPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockup100DaysRewardPer\",\"type\":\"uint256\"}],\"name\":\"setLockup100DaysRewardPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockup150DaysRewardPer\",\"type\":\"uint256\"}],\"name\":\"setLockup150DaysRewardPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockup280DaysRewardPer\",\"type\":\"uint256\"}],\"name\":\"setLockup280DaysRewardPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMaximumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noLockupRewardPer\",\"type\":\"uint256\"}],\"name\":\"setNoLockupRewardPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secondGenReferralPer\",\"type\":\"uint256\"}],\"name\":\"setSecondGenReferralPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingActive\",\"type\":\"bool\"}],\"name\":\"setStakingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdGenReferralPer\",\"type\":\"uint256\"}],\"name\":\"setThirdGenReferralPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdGenReferralPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerLevel\",\"type\":\"uint256\"}],\"name\":\"userReferralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenFarming", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13e2b5b3b839a37a96c276be2ffbffec72763245cfa79d0746e853c32773d722"}