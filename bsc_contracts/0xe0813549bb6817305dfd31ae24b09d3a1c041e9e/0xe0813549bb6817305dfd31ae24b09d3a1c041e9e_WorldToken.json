{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract WorldToken is IBEP20 {\r\n\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address private _owner;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) public balances;\r\n    \r\n    address[] public affWallets;\r\n    uint256[] public affAmounts;\r\n    address[] public claimList;\r\n    address[] public newClaimList;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 public tax = 33;\r\n    uint256 public buyTax = 10;\r\n    uint256 public transferTax = 10;\r\n    uint256 public investorProtection = 1;\r\n\r\n    address[] public holders;\r\n\r\n    address[] public dexAddressList;\r\n    address[] public allowListSaleTax;\r\n    address[] public allowListBuyTax;\r\n    address[] public allowListTransferTax;\r\n    address[] public notApyList;\r\n    address[] public owners;\r\n    uint public numConfirmationsRequired = 1;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint numConfirmations;\r\n    }\r\n\r\n    mapping(uint => mapping(address => bool)) public isConfirmed;\r\n\r\n    Transaction[] public transactions;\r\n    modifier onlyOwn() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContract() {\r\n        require(_msgSender() == address(this), \"call not from contract\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 constant private _decimals = 18;\r\n    uint8 public taxFree;\r\n    string constant private _symbol = \"WORLD\";\r\n    string constant private _name = \"WORLD\";\r\n    uint256 public constant MAX_TOTAL_SUPPLY = 10000000 * (10 ** _decimals);\r\n    uint256 public apyPerAnnum = 21;\r\n\r\n    address immutable public convertWorldWalletBuy;\r\n    address immutable public convertWorldWalletSell;\r\n    address immutable public worldPoolWallet;\r\n    address immutable public luquidityPoolWorld;\r\n    address immutable public affiliateWallet;\r\n    address immutable public teamWallet;\r\n\r\n    event APYChange(uint256 apy);\r\n    event APYDistribution(address holder, uint256 apyAmount);\r\n    event allowListTransferTaxEvent(address addr);\r\n    event addToDexAddressListEvent(address addr);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Received(address indexed sender, uint256 value);\r\n    event Deposit(address indexed sender, uint amount, uint balance);\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint indexed txIndex,\r\n        address indexed to,\r\n        uint value,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\r\n    event RequirementChange(uint256 _required);\r\n    event SendDistributeTxToConfirm(uint256 tx_index);\r\n\r\n    // bool public swapEnabled = true;\r\n    // uint256 public swapThreshold = _totalSupply * 30 / 10000;\r\n    // bool inSwap;\r\n    // modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    // uint256 targetLiquidity = 20;\r\n    // uint256 targetLiquidityDenominator = 100;\r\n\r\n    // uint256 public liquidityFee    = 2;\r\n    // uint256 public reflectionFee   = 3;\r\n    // uint256 public marketingFee    = 6;\r\n    // uint256 public totalFee        = marketingFee + reflectionFee + liquidityFee;\r\n    // uint256 public feeDenominator  = 100;\r\n    \r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _totalSupply = 0;\r\n        uint256 mintToOwner = 85000 * (10 ** _decimals);\r\n        _mint(_owner, mintToOwner);\r\n        _mint(address(this), (10000000 * (10 ** _decimals)) - mintToOwner);\r\n        allowListSaleTax.push(address(this));\r\n        allowListBuyTax.push(address(this));\r\n        allowListTransferTax.push(address(this));\r\n        notApyList.push(address(this));\r\n        allowListSaleTax.push(_owner);\r\n        allowListBuyTax.push(_owner);\r\n        allowListTransferTax.push(_owner);\r\n        notApyList.push(_owner);\r\n        allowListSaleTax.push(address(0x9443ad5e3E193a77b15ac363C64488374c42B155));\r\n        allowListBuyTax.push(address(0x9443ad5e3E193a77b15ac363C64488374c42B155));\r\n        allowListTransferTax.push(address(0x9443ad5e3E193a77b15ac363C64488374c42B155));\r\n        notApyList.push(address(0x9443ad5e3E193a77b15ac363C64488374c42B155));\r\n        \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n        owners.push(_owner);\r\n        taxFree = 0;\r\n        worldPoolWallet = address(0x1f70Eb3864B59223c829A338f7f8bee29b293227);\r\n        notApyList.push(worldPoolWallet);\r\n        allowListSaleTax.push(worldPoolWallet);\r\n        allowListBuyTax.push(worldPoolWallet);\r\n        allowListTransferTax.push(worldPoolWallet);\r\n        convertWorldWalletBuy = address(0xEbe704Ee800Bd29293a54f0A7106AAc82078b3F5);\r\n        notApyList.push(convertWorldWalletBuy);\r\n        allowListSaleTax.push(convertWorldWalletBuy);\r\n        allowListBuyTax.push(convertWorldWalletBuy);\r\n        allowListTransferTax.push(convertWorldWalletBuy);\r\n        convertWorldWalletSell = address(0xF0692700EfCC948A892155629D363FD5CdC00895);\r\n        notApyList.push(convertWorldWalletSell);\r\n        allowListSaleTax.push(convertWorldWalletSell);\r\n        allowListBuyTax.push(convertWorldWalletSell);\r\n        allowListTransferTax.push(convertWorldWalletSell);\r\n        luquidityPoolWorld = address(0x8506774B2694c6082F67628Ed87d6477430b4A71);\r\n        notApyList.push(luquidityPoolWorld);\r\n        allowListSaleTax.push(luquidityPoolWorld);\r\n        allowListBuyTax.push(luquidityPoolWorld);\r\n        allowListTransferTax.push(luquidityPoolWorld);\r\n        affiliateWallet = address(0xFB009A66C47669c3c0B32c9319c111Ba84b45a3B);\r\n        notApyList.push(affiliateWallet);\r\n        allowListSaleTax.push(affiliateWallet);\r\n        allowListBuyTax.push(affiliateWallet);\r\n        allowListTransferTax.push(affiliateWallet);\r\n        teamWallet = address(0xCc20cfF70070968Fc7866566D1848a54730C3017);\r\n        notApyList.push(teamWallet);\r\n        allowListSaleTax.push(teamWallet);\r\n        allowListBuyTax.push(teamWallet);\r\n        allowListTransferTax.push(teamWallet);\r\n\r\n        // router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        // _allowances[address(this)][address(router)] = uint256(0);\r\n    }\r\n\r\n    receive() external payable {\r\n        // \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u0444\u0438\u0440\u0430\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    function isOwner(address addr) public view returns (bool) {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == addr) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function contractAddOwner(address addr) public onlyContract {\r\n        require(addr != address(0), \"MultisigWallet: invalid owner\");\r\n        require(!isOwner(addr), \"MultisigWallet: duplicate owner\");\r\n\r\n        owners.push(addr);\r\n    }\r\n\r\n    function addOwner(address addr) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddOwner(address)\", addr);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveOwner(address addr) public onlyContract {\r\n        require(isOwner(addr), \"MultisigWallet: owner not found\");\r\n        require(owners.length > 1, \"MultisigWallet: cannot remove the last owner\");\r\n\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == addr) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        owners.pop();\r\n    }\r\n\r\n    function removeOwner(address addr) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveOwner(address)\", addr);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeRequirement(uint256 _required) public onlyContract {\r\n        require(_required > 0 && _required <= owners.length, \"MultisigWallet: invalid requirement\");\r\n        numConfirmationsRequired = _required;\r\n\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    function changeRequirement(uint256 _required) public onlyOwner returns (uint) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeRequirement(uint256)\", _required);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function submitTransaction(\r\n        bytes memory _data\r\n    ) public onlyOwner returns (uint) {\r\n        address _to = payable(address(this));\r\n        uint _value = 0;\r\n        uint txIndex = transactions.length;\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                value: _value,\r\n                data: _data,\r\n                executed: false,\r\n                numConfirmations: 0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\r\n\r\n        return txIndex;\r\n    }\r\n\r\n    function confirmTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\r\n        transactions[_txIndex].numConfirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n\r\n        if(transactions[_txIndex].numConfirmations == numConfirmationsRequired){\r\n            executeTransaction(_txIndex);\r\n        }\r\n    }\r\n\r\n    function executeTransaction(\r\n        uint _txIndex\r\n    ) internal onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        transactions[_txIndex].executed = true;\r\n\r\n        (bool success, ) = transactions[_txIndex].to.call{value: transactions[_txIndex].value}(\r\n            transactions[_txIndex].data\r\n        );\r\n\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function revokeConfirmation(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\r\n\r\n        transactions[_txIndex].numConfirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(\r\n        uint _txIndex\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint value,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.numConfirmations\r\n        );\r\n    }\r\n\r\n    function contractChangeInvestorProtection(uint256 i) public onlyContract returns (bool) {\r\n        investorProtection = i;\r\n        return true;\r\n    }\r\n\r\n    function changeInvestorProtection(uint256 i) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeInvestorProtection(uint256)\", i);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n\r\n    function contractChangeTax(uint256 newTax) public onlyContract returns (bool) {\r\n        require (newTax <= 33, \"no more than 33%\");\r\n        if (investorProtection == 0) {\r\n            require (newTax >= 5 && newTax <= 15, \"tax must be between 5% and 15%\");\r\n        }\r\n        tax = newTax;\r\n        return true;\r\n    }\r\n\r\n    function changeTax(uint256 newTax) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeTax(uint256)\", newTax);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeBuyTax(uint256 newTax) public onlyContract returns (bool) {\r\n        require (newTax >= 5 && newTax <= 15, \"tax must be between 5% and 15%\");\r\n        buyTax = newTax;\r\n        return true;\r\n    }\r\n\r\n    function changeBuyTax(uint256 newTax) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeBuyTax(uint256)\", newTax);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeTransferTax(uint256 newTax) public onlyContract returns (bool) {\r\n        require (newTax <= 5, \"no more than 5%\");\r\n        transferTax = newTax;\r\n        return true;\r\n    }\r\n\r\n    function changeTransferTax(uint256 newTax) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeTransferTax(uint256)\", newTax);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractSetTaxFree(uint8 i) public onlyContract returns (bool) {\r\n        taxFree = i;\r\n        return true;\r\n    }\r\n\r\n    function setTaxFree(uint8 i) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractSetTaxFree(uint8)\", i);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractChangeApy(uint256 apy) public onlyContract returns (bool) {\r\n        apyPerAnnum = apy;\r\n        emit APYChange(apy);\r\n        return true;\r\n    }\r\n\r\n    function changeApy(uint256 apy) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractChangeApy(uint256)\", apy);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractMintProfit() public onlyContract returns (bool) {\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            address holder = holders[i];\r\n            if (findIndex(holder, notApyList) == -1 && findIndex(holder, dexAddressList) == -1) {\r\n                uint256 holderBalance = _balances[holder];\r\n                if(holderBalance > 0){\r\n                    uint256 apyAmount = (holderBalance * apyPerAnnum) / 1000000;\r\n                    if (_balances[address(this)] >= apyAmount) {\r\n                        _transfer_simple(address(this), holder, apyAmount);\r\n                        emit APYDistribution(holder, apyAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function mintProfit() public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractMintProfit()\");\r\n        uint256 tx_index = submitTransaction(data);\r\n        emit SendDistributeTxToConfirm(tx_index);\r\n        return tx_index;\r\n    }\r\n\r\n    function contractAddToTransferAllowList(address wallet) public onlyContract returns (bool) {\r\n        if (findIndex(wallet, allowListTransferTax) == -1) {\r\n            allowListTransferTax.push(wallet);\r\n            emit allowListTransferTaxEvent(wallet);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Includes zero wallet transfer taxes\r\n    function addToTransferAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToTransferAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractAddToBuyAllowList(address wallet) public onlyContract returns (bool) {\r\n        if (findIndex(wallet, allowListTransferTax) == -1) {\r\n            allowListBuyTax.push(wallet);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addToBuyAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToBuyAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractAddToSaleAllowList(address wallet) public onlyContract returns (bool) {\r\n        if (findIndex(wallet, allowListTransferTax) == -1) {\r\n            allowListSaleTax.push(wallet);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addToSaleAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToSaleAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    //makes the address the wallet of the decentralized exchange, for which sales and purchase taxes are included\r\n    function contractAddToNotApyList(address wallet) public onlyContract returns (bool) {\r\n        if (findIndex(wallet, notApyList) == -1) {\r\n            notApyList.push(wallet);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addToNotApyList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToNotApyList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractAddToDexAddressList(address wallet) public onlyContract returns (bool) {\r\n        if (findIndex(wallet, dexAddressList) == -1) {\r\n            dexAddressList.push(wallet);\r\n            emit addToDexAddressListEvent(wallet);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\r\n    function addToDexAddressList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractAddToDexAddressList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n\r\n    function findIndex(address wallet, address[] memory list) internal pure returns (int256) {\r\n        for (uint256 i = 0; i < list.length; i++) {\r\n            if (list[i] == wallet) {\r\n                return int256(i); // Return the index as a signed integer\r\n            }\r\n        }\r\n        return -1; // Return -1 if the value is not found\r\n    }\r\n\r\n    function contractRemoveFromTransferAllowList(address wallet) public onlyContract returns (bool) {\r\n        int256 index = findIndex(wallet, allowListTransferTax);\r\n        require(index >= 0 && uint256(index) < allowListTransferTax.length, \"Invalid index\");\r\n        // Mark the element as deleted by replacing it with the last element\r\n        allowListTransferTax[uint256(index)] = allowListTransferTax[allowListTransferTax.length - 1];\r\n        // Decrease the array length by 1\r\n        allowListTransferTax.pop();\r\n        return true;\r\n    }\r\n\r\n    function removeFromTransferAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromTransferAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveFromBuyAllowList(address wallet) public onlyContract returns (bool) {\r\n        int256 index = findIndex(wallet, allowListBuyTax);\r\n        require(index >= 0 && uint256(index) < allowListBuyTax.length, \"Invalid index\");\r\n        // Mark the element as deleted by replacing it with the last element\r\n        allowListBuyTax[uint256(index)] = allowListBuyTax[allowListBuyTax.length - 1];\r\n        // Decrease the array length by 1\r\n        allowListBuyTax.pop();\r\n        return true;\r\n    }\r\n\r\n    function removeFromBuyAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromBuyAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveFromSellAllowList(address wallet) public onlyContract returns (bool) {\r\n        int256 index = findIndex(wallet, allowListSaleTax);\r\n        require(index >= 0 && uint256(index) < allowListSaleTax.length, \"Invalid index\");\r\n        // Mark the element as deleted by replacing it with the last element\r\n        allowListSaleTax[uint256(index)] = allowListSaleTax[allowListSaleTax.length - 1];\r\n        // Decrease the array length by 1\r\n        allowListSaleTax.pop();\r\n        return true;\r\n    }\r\n\r\n    function removeFromSellAllowList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromSellAllowList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function contractRemoveFromDexAddressList(address wallet) public onlyContract returns (bool) {\r\n        int256 index = findIndex(wallet, dexAddressList);\r\n        require(index >= 0 && uint256(index) < dexAddressList.length, \"Invalid index\");\r\n\r\n        // Mark the element as deleted by replacing it with the last element\r\n        dexAddressList[uint256(index)] = dexAddressList[dexAddressList.length - 1];\r\n\r\n        // Decrease the array length by 1\r\n        dexAddressList.pop();\r\n\r\n        return true;\r\n    }\r\n\r\n    function removeFromDexAddressList(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromDexAddressList(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n\r\n    function contractRemoveFromHolders(address wallet) public onlyContract returns (bool) {\r\n        int256 index = findIndex(wallet, holders);\r\n        require(index >= 0 && uint256(index) < holders.length, \"Invalid index\");\r\n\r\n        // Mark the element as deleted by replacing it with the last element\r\n        holders[uint256(index)] = holders[holders.length - 1];\r\n\r\n        // Decrease the array length by 1\r\n        holders.pop();\r\n\r\n        return true;\r\n    }\r\n\r\n    function removeFromHolders(address wallet) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractRemoveFromHolders(address)\", wallet);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function clearClaimList() internal {\r\n        for (uint256 i = 0; i < newClaimList.length; i++) {\r\n            newClaimList.pop();\r\n        }\r\n    }\r\n\r\n    function contractTakeSnapshot() public onlyContract returns (bool) {\r\n        claimList = newClaimList;\r\n        clearClaimList();\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            address addr = holders[i];\r\n            balances[addr] = _balances[addr];\r\n            if (findIndex(addr, newClaimList) == -1 && findIndex(addr, notApyList) == -1 && findIndex(addr, dexAddressList) == -1) {\r\n                newClaimList.push(addr);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function takeSnapshot() public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractTakeSnapshot()\");\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function claim() public returns (bool) {\r\n        if (findIndex(_msgSender(), claimList) > -1) {\r\n            uint256 total = 0;\r\n            for (uint256 i = 0; i < claimList.length; i++) {\r\n                total += balances[claimList[i]];\r\n            }\r\n            uint256 myBalance = balances[_msgSender()];\r\n            uint256 percent = (myBalance * 10000) / total;\r\n            uint256 amount = (_balances[worldPoolWallet] * percent) / 10000;\r\n\r\n            uint256 amountToTeam = amount * 300 / 10000;\r\n\r\n            if (amount > 0) {\r\n                _transfer_simple(worldPoolWallet, teamWallet, amountToTeam);\r\n                _transfer_simple(worldPoolWallet, _msgSender(), (amount - amountToTeam));\r\n            }\r\n            \r\n            int256 index = findIndex(_msgSender(), claimList);\r\n            require(index >= 0 && uint256(index) < claimList.length, \"Invalid index\");\r\n\r\n            // Mark the element as deleted by replacing it with the last element\r\n            claimList[uint256(index)] = claimList[claimList.length - 1];\r\n\r\n            // Decrease the array length by 1\r\n            claimList.pop();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getClaimRewardsCount() public view returns (uint256) {\r\n        if (findIndex(_msgSender(), claimList) > -1) {\r\n            uint256 total = 0;\r\n            for (uint256 i = 0; i < claimList.length; i++) {\r\n                total += balances[claimList[i]];\r\n            }\r\n            uint256 myBalance = balances[_msgSender()];\r\n            uint256 percent = (myBalance * 10000) / total;\r\n            uint256 amount = (_balances[worldPoolWallet] * percent) / 10000;\r\n            return amount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getAmountAndSendTxs(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 transferAmount = amount;\r\n        if (taxFree == 0) {\r\n          if (findIndex(recipient, dexAddressList) > -1 && findIndex(sender, allowListSaleTax) == -1) {\r\n            //sell\r\n            if (tax > 10 && investorProtection == 1) {\r\n              uint256 percent = 100;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 burnedAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - burnedAmount;\r\n              _burn(sender, burnedAmount);\r\n              \r\n              percent = 2000;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 worldPoolAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - worldPoolAmount;\r\n              _transfer_simple(sender, worldPoolWallet, worldPoolAmount);\r\n\r\n              percent = 6900;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 convertWorldAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - convertWorldAmount;\r\n              _transfer_simple(sender, convertWorldWalletSell, convertWorldAmount);\r\n\r\n              percent = 1000;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 liqPoolAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - liqPoolAmount;\r\n              _transfer_simple(sender, luquidityPoolWorld, liqPoolAmount);\r\n            } else {\r\n              uint256 percent = 50 * 10000 / 1000;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 burnedAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - burnedAmount;\r\n              _burn(sender, burnedAmount);\r\n\r\n              percent = tax * 10;\r\n              uint256 worldPoolAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - worldPoolAmount;\r\n              _transfer_simple(sender, worldPoolWallet, worldPoolAmount);\r\n\r\n              percent = 775 * 10000 / 1000;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 convertWorldAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - convertWorldAmount;\r\n              _transfer_simple(sender, convertWorldWalletBuy, convertWorldAmount);\r\n\r\n              percent = 75 * 10000 / 1000;\r\n              percent = percent * (tax * 100) / 10000;\r\n              uint256 liqPoolAmount = percent * amount / 10000;\r\n              transferAmount = transferAmount - liqPoolAmount;\r\n              _transfer_simple(sender, luquidityPoolWorld, liqPoolAmount);\r\n            }\r\n          } else if (findIndex(sender, dexAddressList) > -1 && findIndex(recipient, allowListBuyTax) == -1) {\r\n            //buy\r\n            uint256 percent = 50 * 10000 / 1000;\r\n            percent = percent * (buyTax * 100) / 10000;\r\n            uint256 burnedAmount = percent * amount / 10000;\r\n            transferAmount = transferAmount - burnedAmount;\r\n            _burn(sender, burnedAmount);\r\n\r\n            percent = 475 * 10000 / 1000;\r\n            percent = percent * (buyTax * 100) / 10000;\r\n            uint256 convertWorldAmount = percent * amount / 100000;\r\n            transferAmount = transferAmount - convertWorldAmount;\r\n            _transfer_simple(sender, convertWorldWalletBuy, convertWorldAmount);\r\n\r\n            percent = 75 * 10000 / 1000;\r\n            percent = percent * (buyTax * 100) / 10000;\r\n            uint256 worldPoolAmount = percent * amount / 10000;\r\n            transferAmount = transferAmount - worldPoolAmount;\r\n            _transfer_simple(sender, worldPoolWallet, worldPoolAmount);\r\n\r\n            percent = 25 * 10000 / 1000;\r\n            percent = percent * (buyTax * 100) / 10000;\r\n            uint256 afAmount = percent * amount / 10000;\r\n            transferAmount = transferAmount - afAmount;\r\n            _transfer_simple(sender, affiliateWallet, afAmount);\r\n\r\n            affWallets.push(recipient);\r\n            affAmounts.push(afAmount);\r\n\r\n            percent = 75 * 10000 / 1000;\r\n            percent = percent * (buyTax * 100) / 10000;\r\n            uint256 liqPoolAmount = percent * amount / 10000;\r\n            transferAmount = transferAmount - liqPoolAmount;\r\n            _transfer_simple(sender, luquidityPoolWorld, liqPoolAmount);\r\n          } else {\r\n            if (findIndex(sender, allowListTransferTax) == -1) {            \r\n              if (transferTax != 0) {\r\n                uint256 percent = 50 * 10000 / 200;\r\n                percent = percent * (transferTax * 100) / 10000;\r\n                uint256 burnedAmount = percent * amount / 10000;\r\n                transferAmount = transferAmount - burnedAmount;\r\n                _burn(sender, burnedAmount);\r\n\r\n                percent = 150 * 10000 / 200;\r\n                percent = percent * (transferTax * 100) / 10000;\r\n                uint256 worldPoolAmount = percent * amount / 10000;\r\n                transferAmount = transferAmount - worldPoolAmount;\r\n                _transfer_simple(sender, worldPoolWallet, worldPoolAmount);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if(findIndex(recipient, dexAddressList) == -1){\r\n            if (findIndex(recipient, holders) == -1) {\r\n                holders.push(recipient);\r\n            }\r\n        }\r\n        return transferAmount;\r\n    }\r\n\r\n    // function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    //     uint256 transferAmount = getAmountAndSendTxs(recipient, amount);\r\n    //     _transfer(_msgSender(), recipient, transferAmount);\r\n    //     return true;\r\n    // }\r\n\r\n    // function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    //     uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    //     require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n\r\n    //     uint256 transferAmount = getAmountAndSendTxs(recipient, amount);\r\n\r\n    //     _transfer(sender, recipient, transferAmount);\r\n    //     _approve(sender, _msgSender(), currentAllowance - amount);\r\n    //     return true;\r\n    // }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 amountReceived = getAmountAndSendTxs(sender, recipient, amount);\r\n        _transfer_simple(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount/10;\r\n        \r\n\r\n        _balances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    // function shouldSwapBack() internal view returns (bool) {\r\n    //     return msg.sender != pair\r\n    //     && !inSwap\r\n    //     && swapEnabled\r\n    //     && _balances[address(this)] >= swapThreshold;\r\n    // }\r\n\r\n    // function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n    //     return (accuracy*(_balances[pair]*2))/_totalSupply;\r\n    // }\r\n\r\n    // function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n    //     return getLiquidityBacking(accuracy) > target;\r\n    // }\r\n\r\n    // function swapBack() internal swapping {\r\n    //     uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n    //     uint256 amountToLiquify = swapThreshold * dynamicLiquidityFee / totalFee / 2;\r\n    //     uint256 amountToSwap = swapThreshold - amountToLiquify;\r\n\r\n    //     address[] memory path = new address[](2);\r\n    //     path[0] = address(this);\r\n    //     path[1] = WBNB;\r\n\r\n    //     uint256 balanceBefore = address(this).balance;\r\n\r\n    //     router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    //         amountToSwap,\r\n    //         0,\r\n    //         path,\r\n    //         address(this),\r\n    //         block.timestamp\r\n    //     );\r\n\r\n    //     uint256 amountBNB = address(this).balance - balanceBefore;\r\n\r\n    //     uint256 totalBNBFee = totalFee - (dynamicLiquidityFee / 2);\r\n        \r\n    //     uint256 amountBNBLiquidity = amountBNB * dynamicLiquidityFee / totalBNBFee / 2;\r\n    //     uint256 amountBNBReflection = amountBNB * reflectionFee / totalBNBFee;\r\n    //     uint256 amountBNBMarketing = amountBNB * marketingFee / totalBNBFee;\r\n\r\n      \r\n    //     (bool tmpSuccess,) = payable(address(this)).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n    //     (tmpSuccess,) = payable(address(this)).call{value: amountBNBReflection, gas: 30000}(\"\");\r\n        \r\n    //     // Supress warning msg\r\n    //     tmpSuccess = false;\r\n\r\n    //     if(amountToLiquify > 0){\r\n    //         router.addLiquidityETH{value: amountBNBLiquidity}(\r\n    //             address(this),\r\n    //             amountToLiquify,\r\n    //             0,\r\n    //             0,\r\n    //             address(_owner),\r\n    //             block.timestamp\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    function allowance(address own, address spender) external view returns (uint256) {\r\n        return _allowances[own][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer_simple(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        if (_totalSupply <= MAX_TOTAL_SUPPLY) {\r\n            require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n            _totalSupply += amount;\r\n            _balances[account] += amount;\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _balances[account] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address own,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(own != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[own][spender] = amount;\r\n        emit Approval(own, spender, amount);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwn {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwn {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    */\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n\r\n    function contractSendAffiliations(address[] calldata _walletAddresses, uint256[] calldata _amounts) public onlyContract {\r\n        require(_walletAddresses.length == _amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < _walletAddresses.length; i++) {\r\n            address walletAddress = _walletAddresses[i];\r\n            uint256 amount = _amounts[i];\r\n\r\n            _transfer_simple(affiliateWallet, walletAddress, amount);\r\n        }\r\n\r\n        delete affWallets;\r\n        delete affAmounts;\r\n    }\r\n\r\n    function sendAffiliations(address[] calldata _walletAddresses, uint256[] calldata _amounts) public onlyOwner returns (uint256) {\r\n        bytes memory data = abi.encodeWithSignature(\"contractSendAffiliations(address[],uint256[])\", _walletAddresses, _amounts);\r\n        return submitTransaction(data);\r\n    }\r\n\r\n    function eventParticipate(address to, uint256 amount) external {\r\n        _transfer_simple(msg.sender, to, amount);\r\n    }\r\n\r\n    function getAffData() public view returns (address[] memory, uint256[] memory) {\r\n        return (affWallets, affAmounts);\r\n    }\r\n\r\n    function burn(uint256 amount) external returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"APYChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apyAmount\",\"type\":\"uint256\"}],\"name\":\"APYDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tx_index\",\"type\":\"uint256\"}],\"name\":\"SendDistributeTxToConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToDexAddressListEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allowListTransferTaxEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToBuyAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToDexAddressList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToNotApyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToSaleAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addToTransferAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowListBuyTax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowListSaleTax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowListTransferTax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"own\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apyPerAnnum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"changeApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"changeBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"changeInvestorProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"changeTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"changeTransferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractAddOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToBuyAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToDexAddressList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToNotApyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToSaleAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractAddToTransferAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"contractChangeApy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"contractChangeBuyTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"contractChangeInvestorProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"contractChangeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"contractChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"contractChangeTransferTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractMintProfit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractRemoveFromBuyAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractRemoveFromDexAddressList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractRemoveFromHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractRemoveFromSellAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"contractRemoveFromTransferAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractRemoveOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"contractSendAffiliations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"contractSetTaxFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTakeSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertWorldWalletBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertWorldWalletSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dexAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eventParticipate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAffData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimRewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luquidityPoolWorld\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newClaimList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notApyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromBuyAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromDexAddressList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromSellAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromTransferAllowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendAffiliations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"}],\"name\":\"setTaxFree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFree\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldPoolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WorldToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e14a3891214fc7d3a3c22ecb3ce45e835db84611d775ea17f3d0b4df98ba9236"}