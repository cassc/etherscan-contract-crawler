{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2023-11-28\\n*/\\n\\n/**\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/********************************************************************************************\\n  INTERFACE\\n********************************************************************************************/\\n\\ninterface IERC20 {\\n    \\n    // EVENT \\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // FUNCTION\\n\\n    function name() external view returns (string memory);\\n    \\n    function symbol() external view returns (string memory);\\n    \\n    function decimals() external view returns (uint8);\\n    \\n    function totalSupply() external view returns (uint256);\\n    \\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    function transfer(address to, uint256 amount) external returns (bool);\\n    \\n    function allowance(address owner, address spender) external view returns (uint256);\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n    \\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\ninterface IPair {\\n\\n    // FUNCTION\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\ninterface IFactory {\\n\\n    // FUNCTION\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IRouter {\\n\\n    // FUNCTION\\n\\n    function WETH() external pure returns (address);\\n        \\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\\n    \\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\\n    \\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\\n}\\n\\ninterface ICommonError {\\n\\n    // ERROR\\n\\n    error CannotUseCurrentAddress(address current);\\n\\n    error CannotUseCurrentValue(uint256 current);\\n\\n    error CannotUseCurrentState(bool current);\\n\\n    error InvalidAddress(address invalid);\\n\\n    error InvalidValue(uint256 invalid);\\n}\\n\\n/********************************************************************************************\\n  ACCESS\\n********************************************************************************************/\\n\\nabstract contract Ownable {\\n    \\n    // DATA\\n\\n    address private _owner;\\n\\n    // MODIFIER\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    // ERROR\\n\\n    error InvalidOwner(address account);\\n\\n    error UnauthorizedAccount(address account);\\n\\n    // CONSTRUCTOR\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    // EVENT\\n    \\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // FUNCTION\\n    \\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert UnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert InvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/********************************************************************************************\\n  TOKEN\\n********************************************************************************************/\\n\\ncontract Token is Ownable, ICommonError, IERC20 {\\n\\n    // DATA\\n\\n    IRouter public router;\\n\\n    string private constant NAME = \\\"TestToken\\\";\\n    string private constant SYMBOL = \\\"TEST\\\";\\n\\n    uint8 private constant DECIMALS = 18;\\n\\n    uint256 private _totalSupply;\\n    \\n    uint256 public constant FEEDENOMINATOR = 10_000;\\n\\n    uint256 public buyFee = 4_000;\\n    uint256 public sellFee = 4_000;\\n    uint256 public transferFee = 0;\\n    uint256 public walletLimit = 200;\\n    uint256 public tradeStartTime = 0;\\n    uint256 public totalFeeCollected = 0;\\n    uint256 public totalFeeRedeemed = 0;\\n    uint256 public totalTriggerZeusBuyback = 0;\\n    uint256 public lastTriggerZeusTimestamp = 0;\\n    uint256 public minSwap = 10_000 ether;\\n\\n    bool private constant ISTESTTOKEN = true;\\n\\n    bool public tradeEnabled = false;\\n    bool public isFeeActive = false;\\n    bool public isFeeLocked = false;\\n    bool public isSwapEnabled = false;\\n    bool public inSwap = false;\\n    bool public isWalletLimited = true;\\n\\n    address public constant PROJECTOWNER = 0x69698e6533f4b9A5535E008A782747363e97208A;\\n\\n    address public feeReceiver = 0x69698e6533f4b9A5535E008A782747363e97208A;\\n\\n    address public pair;\\n    \\n    // MAPPING\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) public isExcludeFromFees;\\n    mapping(address => bool) public isExcludeFromWalletLimits;\\n    mapping(address => bool) public isPairLP;\\n\\n    // MODIFIER\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    // ERROR\\n\\n    error InvalidTradeEnabledState(bool current);\\n\\n    error InvalidFeeActiveState(bool current);\\n\\n    error InvalidSwapEnabledState(bool current);\\n\\n    error ExceedMaxFeeAllowed(uint256 limit);\\n\\n    error ExceedWalletLimit(uint256 limit);\\n\\n    error TradeDisabled();\\n\\n    error FeeUpdateLocked();\\n\\n    error WalletLimitRemoved();\\n\\n    // CONSTRUCTOR\\n\\n    constructor() Ownable (msg.sender) {\\n        _mint(msg.sender, 10_000_000 * 10**DECIMALS);\\n\\n        router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\\n\\n        isPairLP[pair] = true;\\n\\n        isExcludeFromFees[msg.sender] = true;\\n        isExcludeFromFees[address(router)] = true;\\n\\n        isExcludeFromWalletLimits[msg.sender] = true;\\n        isExcludeFromWalletLimits[pair] = true;\\n    }\\n\\n    // EVENT\\n\\n    event UpdateRouter(address oldRouter, address newRouter, address caller, uint256 timestamp);\\n\\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, address caller, uint256 timestamp);\\n\\n    event UpdateFeeActive(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\\n\\n    event UpdateFeeReceiver(address oldReceiver, address newReceiver, address caller, uint256 timestamp);\\n\\n    event UpdateBuyFee(uint256 oldFee, uint256 newFee, address caller, uint256 timestamp);\\n\\n    event UpdateSellFee(uint256 oldFee, uint256 newFee, address caller, uint256 timestamp);\\n\\n    event UpdateTransferFee(uint256 oldFee, uint256 newFee, address caller, uint256 timestamp);\\n\\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\\n        \\n    event AutoRedeem(uint256 feeDistribution, uint256 amountToRedeem, address caller, uint256 timestamp);\\n\\n    event EnableTrading(address caller, uint256 timestamp);\\n\\n    event ExcludeFromFees(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\\n    \\n    event ExcludeFromWalletLimits(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\\n\\n    event FeeLocked(address caller, uint256 timestamp);\\n\\n    event RemoveWalletLimit(address caller, uint256 timestamp);\\n\\n    // FUNCTION\\n\\n    /* General */\\n\\n    receive() external payable {}\\n\\n    function enableTrading() external onlyOwner {\\n        if (tradeEnabled) { revert InvalidTradeEnabledState(tradeEnabled); }\\n        if (isFeeActive) { revert InvalidFeeActiveState(isFeeActive); }\\n        if (isSwapEnabled) { revert InvalidSwapEnabledState(isSwapEnabled); }\\n        tradeEnabled = true;\\n        isFeeActive = true;\\n        isSwapEnabled = true;\\n        tradeStartTime = block.timestamp;\\n        emit EnableTrading(msg.sender, tradeStartTime);\\n    }\\n\\n    /* Redeem */\\n\\n    function autoRedeem(uint256 amountToRedeem) public swapping {          \\n        totalFeeRedeemed += amountToRedeem;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), amountToRedeem);\\n        \\n        emit AutoRedeem(amountToRedeem, amountToRedeem, msg.sender, block.timestamp);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToRedeem,\\n            0,\\n            path,\\n            feeReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* Check */\\n\\n    function isTestToken() external pure returns (bool) {\\n        return ISTESTTOKEN;\\n    }\\n\\n    function circulatingSupply() external view returns (uint256) {\\n        return totalSupply() - balanceOf(address(0xdead)) - balanceOf(address(0));\\n    }\\n\\n    function checkWalletLimit(uint256 amount, address to) public view {\\n        uint256 limit = totalSupply() * walletLimit / FEEDENOMINATOR;\\n        if (!isExcludeFromWalletLimits[to]) {\\n            if (balanceOf(to) + amount > limit) {\\n                revert ExceedWalletLimit(limit);\\n            }\\n        }\\n    }\\n\\n    /* Update */\\n\\n    function updateRouter(address newRouter) external onlyOwner {\\n        if (address(router) == newRouter) { revert CannotUseCurrentAddress(newRouter); }\\n        address oldRouter = address(router);\\n        router = IRouter(newRouter);\\n        \\n        isExcludeFromFees[newRouter] = true;\\n\\n        emit UpdateRouter(oldRouter, newRouter, msg.sender, block.timestamp);\\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\\n        isPairLP[pair] = true;\\n        if (isWalletLimited) {\\n            isExcludeFromWalletLimits[pair] = true;\\n        }\\n    }\\n\\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\\n        if (minSwap == newMinSwap) { revert CannotUseCurrentValue(newMinSwap); }\\n        uint256 oldMinSwap = minSwap;\\n        minSwap = newMinSwap;\\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, msg.sender, block.timestamp);\\n    }\\n\\n    function lockFee() external onlyOwner {\\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\\n        isFeeLocked = true;\\n        emit FeeLocked(msg.sender, block.timestamp);\\n    }\\n\\n    function removeWalletLimit() external onlyOwner {\\n        if (!isWalletLimited) { revert WalletLimitRemoved(); }\\n        isWalletLimited = false;\\n        emit RemoveWalletLimit(msg.sender, block.timestamp);\\n    }\\n\\n    function updateFeeActive(bool newStatus) external onlyOwner {\\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\\n        if (isFeeActive == newStatus) { revert CannotUseCurrentState(newStatus); }\\n        bool oldStatus = isFeeActive;\\n        isFeeActive = newStatus;\\n        emit UpdateFeeActive(oldStatus, newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    function updateBuyFee(uint256 newFee) external onlyOwner {\\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\\n        if (newFee == buyFee) { revert CannotUseCurrentValue(newFee); }\\n        if (newFee > 4_000) { revert ExceedMaxFeeAllowed(4_000); }\\n        uint256 oldFee = buyFee;\\n        buyFee = newFee;\\n        emit UpdateBuyFee(oldFee, newFee, msg.sender, block.timestamp);\\n    }\\n\\n    function updateSellFee(uint256 newFee) external onlyOwner {\\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\\n        if (newFee == sellFee) { revert CannotUseCurrentValue(newFee); }\\n        if (newFee > 4_000) { revert ExceedMaxFeeAllowed(4_000); }\\n        uint256 oldFee = sellFee;\\n        sellFee = newFee;\\n        emit UpdateSellFee(oldFee, newFee, msg.sender, block.timestamp);\\n    }\\n\\n    function updateTransferFee(uint256 newFee) external onlyOwner {\\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\\n        if (newFee == transferFee) { revert CannotUseCurrentValue(newFee); }\\n        if (newFee > 4_000) { revert ExceedMaxFeeAllowed(4_000); }\\n        uint256 oldFee = transferFee;\\n        transferFee = newFee;\\n        emit UpdateTransferFee(oldFee, newFee, msg.sender, block.timestamp);\\n    }\\n\\n    function updateFeeReceiver(address newReceiver) external onlyOwner {\\n        if (feeReceiver == newReceiver) { revert CannotUseCurrentAddress(newReceiver); }\\n        address oldReceiver = feeReceiver;\\n        feeReceiver = newReceiver;\\n        emit UpdateFeeReceiver(oldReceiver, newReceiver, msg.sender, block.timestamp);\\n    }\\n\\n    function updateSwapEnabled(bool newStatus) external onlyOwner {\\n        if (isSwapEnabled == newStatus) { revert CannotUseCurrentState(newStatus); }\\n        bool oldStatus = isSwapEnabled;\\n        isSwapEnabled = newStatus;\\n        emit UpdateSwapEnabled(oldStatus, newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    function setExcludeFromFees(address user, bool newStatus) external onlyOwner {\\n        if (isExcludeFromFees[user] == newStatus) { revert CannotUseCurrentState(newStatus); }\\n        bool oldStatus = isExcludeFromFees[user];\\n        isExcludeFromFees[user] = newStatus;\\n        emit ExcludeFromFees(oldStatus, newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    function setExcludeFromWalletLimits(address user, bool newStatus) external onlyOwner {\\n        if (isExcludeFromWalletLimits[user] == newStatus) { revert CannotUseCurrentState(newStatus); }\\n        bool oldStatus = isExcludeFromWalletLimits[user];\\n        isExcludeFromWalletLimits[user] = newStatus;\\n        emit ExcludeFromWalletLimits(oldStatus, newStatus, msg.sender, block.timestamp);\\n    }\\n\\n    function setPairLP(address lpPair, bool status) external onlyOwner {\\n        if (isPairLP[lpPair] == status) { revert CannotUseCurrentState(status); }\\n        if (IPair(lpPair).token0() != address(this) && IPair(lpPair).token1() != address(this)) { revert InvalidAddress(lpPair); }\\n        isPairLP[lpPair] = status;\\n    }\\n\\n    /* Fee */\\n\\n    function takeBuyFee(address from, uint256 amount, uint256 fee) internal swapping returns (uint256) {\\n        uint256 feeAmount = amount * fee / FEEDENOMINATOR;\\n        uint256 newAmount = amount - feeAmount;\\n        if (feeAmount > 0) {\\n            tallyCollection(from, feeAmount);\\n        }\\n        return newAmount;\\n    }\\n\\n    function takeSellFee(address from, uint256 amount, uint256 fee) internal swapping returns (uint256) {\\n        uint256 feeAmount = amount * fee / FEEDENOMINATOR;\\n        uint256 newAmount = amount - feeAmount;\\n        if (feeAmount > 0) {\\n            tallyCollection(from, feeAmount);\\n        }\\n        return newAmount;\\n    }\\n\\n    function takeTransferFee(address from, uint256 amount, uint256 fee) internal swapping returns (uint256) {\\n        uint256 feeAmount = amount * fee / FEEDENOMINATOR;\\n        uint256 newAmount = amount - feeAmount;\\n        if (feeAmount > 0) {\\n            tallyCollection(from, feeAmount);\\n        }\\n        return newAmount;\\n    }\\n\\n    function tallyCollection(address from, uint256 collectFee) internal swapping {\\n        totalFeeCollected += collectFee;\\n        _basicTransfer(from, address(this), collectFee);\\n    }\\n\\n    /* Buyback */\\n\\n    function triggerZeusBuyback(uint256 amount) external onlyOwner {\\n        totalTriggerZeusBuyback += amount;\\n        lastTriggerZeusTimestamp = block.timestamp;\\n        buyTokens(amount, address(0xdead));\\n    }\\n\\n    function buyTokens(uint256 amount, address to) internal swapping {\\n        if (msg.sender == address(0xdead)) { revert InvalidAddress(address(0xdead)); }\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(this);\\n\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: amount\\n        } (0, path, to, block.timestamp);\\n    }\\n\\n    /* ERC20 Standard */\\n\\n    function name() external view virtual override returns (string memory) {\\n        return NAME;\\n    }\\n    \\n    function symbol() external view virtual override returns (string memory) {\\n        return SYMBOL;\\n    }\\n    \\n    function decimals() external view virtual override returns (uint8) {\\n        return DECIMALS;\\n    }\\n    \\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n    \\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\\n        address provider = msg.sender;\\n        return _transfer(provider, to, amount);\\n    }\\n    \\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\\n        return _allowances[provider][spender];\\n    }\\n    \\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address provider = msg.sender;\\n        _approve(provider, spender, amount);\\n        return true;\\n    }\\n    \\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\\n        address spender = msg.sender;\\n        _spendAllowance(from, spender, amount);\\n        return _transfer(from, to, amount);\\n    }\\n    \\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        address provider = msg.sender;\\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\\n        return true;\\n    }\\n    \\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        address provider = msg.sender;\\n        uint256 currentAllowance = allowance(provider, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(provider, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n    \\n    function _mint(address account, uint256 amount) internal virtual {\\n        if (account == address(0)) { revert InvalidAddress(account); }\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\\n        if (provider == address(0)) { revert InvalidAddress(provider); }\\n        if (spender == address(0)) { revert InvalidAddress(spender); }\\n\\n        _allowances[provider][spender] = amount;\\n        emit Approval(provider, spender, amount);\\n    }\\n    \\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(provider, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(provider, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /* Additional */\\n\\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {        \\n        if (isPairLP[from]) {\\n            if (buyFee > 0) {\\n                return takeBuyFee(from, amount, buyFee);\\n            }\\n        }\\n        if (isPairLP[to]) {\\n            if (sellFee > 0) {\\n                return takeSellFee(from, amount, sellFee);\\n            }\\n        }\\n        if (!isPairLP[from] && !isPairLP[to]) {\\n            if (transferFee > 0) {\\n                return takeTransferFee(from, amount, transferFee);\\n            }\\n        }\\n        return amount;\\n    }\\n    \\n    /* Overrides */\\n \\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\\n        if (from == address(0)) { revert InvalidAddress(from); }\\n        if (to == address(0)) { revert InvalidAddress(to); }\\n\\n        if (!tradeEnabled && !isExcludeFromFees[from] && !isExcludeFromFees[to]) {\\n            revert TradeDisabled();\\n        }\\n\\n        if (inSwap || isExcludeFromFees[from]) {\\n            return _basicTransfer(from, to, amount);\\n        }\\n\\n        if (from != pair && isSwapEnabled && balanceOf(address(this)) >= minSwap && totalFeeCollected - totalFeeRedeemed >= minSwap) {\\n            autoRedeem(minSwap);\\n        }\\n\\n        uint256 newAmount = amount;\\n\\n        if (isFeeActive && !isExcludeFromFees[from] && !isExcludeFromFees[to]) {\\n            newAmount = _beforeTokenTransfer(from, to, amount);\\n        }\\n\\n        if (isWalletLimited) {\\n            checkWalletLimit(newAmount, to);\\n        }\\n\\n        require(_balances[from] >= newAmount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = _balances[from] - newAmount;\\n            _balances[to] += newAmount;\\n        }\\n\\n        emit Transfer(from, to, newAmount);\\n\\n        return true;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"CannotUseCurrentAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"CannotUseCurrentState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"CannotUseCurrentValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxFeeAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExceedWalletLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeUpdateLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalid\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidFeeActiveState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidSwapEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidTradeEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalid\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletLimitRemoved\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExcludeFromWalletLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveWalletLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECTOWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkWalletLimit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromWalletLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPairLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTestToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletLimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTriggerZeusTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setExcludeFromWalletLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPairLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTriggerZeusBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}