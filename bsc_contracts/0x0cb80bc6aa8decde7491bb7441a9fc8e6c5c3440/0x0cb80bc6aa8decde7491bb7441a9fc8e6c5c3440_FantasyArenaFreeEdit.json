{"SourceCode": "/**\r\n                                                                                                                                                       \r\n                                 ++++++++        *****.        +****      =***    +++++++++++       *****=            ****      *****    =***          \r\n                                 *@@@@@@@%       #@@@@%         @@@@%      @@#   #@@@@@@@@@@%       *@@@@@         #@@@@@@@@     @@@@#   :@@*          \r\n                      *    *     *@@@%   -       @@@@@@=        %@@@@%     %@#   .  :@@@@:  +       %@@@@@*       #@@@#    -     :@@@@+  %@%           \r\n                     +:    *     *@@@%          *@@#@@@%        %@@@@@@    %@#       @@@@          =@@#@@@@       %@@@%           *@@@@.*@@            \r\n                     =:    -=    *@@@%          @@* @@@@*       %@%@@@@@   %@#       @@@@          %@# %@@@#      *@@@@@%          %@@@@@@             \r\n                    *-.    =:    *@@@@@@#      *@@  *@@@@       %@#=%@@@@  %@#       @@@@         +@@  +@@@@       +@@@@@@@%        %@@@@*             \r\n        *- *        *=.    +-=   *@@@%  +      @@%###@@@@*      %@#  %@@@@*%@#       @@@@         %@@###@@@@#         %@@@@@@       +@@@@              \r\n      #=   ###   %#=*=     +=+   *@@@%        *@@%%%%%@@@@      %@#   #@@@@@@#       @@@@        +@@%%%%%@@@@           +@@@@#      +@@@%              \r\n    ##+     #   :%#*#+---- *+    *@@@%        @@*     %@@@#     %@#    #@@@@@*       @@@@        %@#     %@@@%           #@@@#      +@@@%              \r\n    ##           #*#**+=---.+    *@@@%       *@@      +@@@@     %@#     *@@@@*       @@@@       *@@      =@@@@    %%*   *@@@%       +@@@@              \r\n   ##*            **==++==++     #@@@@      .@@@      *@@@@%    @@@       *@@*      +@@@@#      @@@      +@@@@@   +%@@@@@@%.        #@@@@=             \r\n   ##*           #***-=++--:                                                                                                                           \r\n   ###+           +=+==+**                                                                                                                             \r\n    %##       %#  =:-++**+                        %@@@@+        *@@@@@@@@%:      #@@@@@@@@     @@@@#      %@@        #@@@@%                            \r\n     %%#     #%* .=..*+=+-:                       %@@@@@        =@@@@*#@@@@#     +@@@@***%     *@@@@%     *@%        #@@@@@                            \r\n      #%#*   %%#*=*:+**+=--                      +@@@@@@*       =@@@@  +@@@@     +@@@@         *@@@@@%    *@%        @@%@@@%                           \r\n        ####*%%#***+     *+                      @@*+@@@@       =@@@@  =@@@%     +@@@@         *@@@@@@%   *@%       #@%=@@@@=                          \r\n               %##                              *@%  %@@@#      =@@@@  %@@%      +@@@@%%%      *@@+@@@@@  *@%       @@  *@@@%                          \r\n               %%#                              @@#  #@@@@      =@@@@%@@@*       +@@@@##%      *@@  %@@@@+*@%      #@%  +@@@@+                         \r\n                ##*                            *@@@@@@@@@@#     =@@@@*@@@@       +@@@@         *@@   %@@@@%@%      @@@@@@@@@@@                         \r\n                #                              @@*    =@@@@     -@@@@-#@@@@      +@@@@         *@@    %@@@@@%     #@%     @@@@*                        \r\n                %                             *@@      %@@@%    -@@@@  %@@@%     +@@@@     +   *@@     #@@@@%    .@@:     *@@@@                        \r\n                                              @@#      *@@@@=   =@@@@   %@@@%    *@@@@@@@@@*   #@@      :%@@%    %@@      .@@@@#                       \r\n                                                                          #:                               *#                                          \r\n                                                                                                                                                       \r\n\r\n*/\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\ninterface IERC721Metadata {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract FantasyArenaFreeEdition is IERC721, IERC721Metadata, IERC721Enumerable, IERC165 {\r\n    using Address for address;\r\n\r\n    address public owner;\r\n    string public override name;\r\n    string public override symbol;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(uint256 => bool)) private _minted;\r\n    mapping(uint256 => uint256) private _tokenUriIndexes;\r\n    mapping(address => uint256[]) _addressOwners;\r\n    string[] private _freeTokenUris;\r\n    uint256[] private _tokenIds;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"can only be called by the contract owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        name = \"Fantasy Arena Free Edition\";\r\n        symbol = \"FA-FREE\";\r\n        owner = msg.sender;\r\n\r\n        _freeTokenUris.push(\"https://www.fantasyarena.io/wp-json/free-edition/v1/uri/1\");\r\n        _freeTokenUris.push(\"https://www.fantasyarena.io/wp-json/free-edition/v1/uri/2\");\r\n        _freeTokenUris.push(\"https://www.fantasyarena.io/wp-json/free-edition/v1/uri/3\");\r\n        _freeTokenUris.push(\"https://www.fantasyarena.io/wp-json/free-edition/v1/uri/4\");\r\n    }\r\n\r\n    function claimToken(uint256 index) public {\r\n        require(index < _freeTokenUris.length, \"This is not a valid token\");\r\n        require(hasClaimed(msg.sender, index) == false, \"You have already claimed this token\");\r\n        _tokenUriIndexes[_tokenIds.length] = index;\r\n        _minted[msg.sender][index] = true;\r\n        _safeMint(msg.sender, _tokenIds.length);\r\n    }\r\n\r\n    function hasClaimed(address who, uint256 index) public view returns (bool) {\r\n        return _minted[who][index];\r\n    }\r\n\r\n    function tokenOf(address who) public view returns (string[] memory uris) {\r\n        string[] memory tokenUris = new string[](_addressOwners[who].length);\r\n        for (uint256 i = 0; i < _addressOwners[who].length; i++) {\r\n            tokenUris[i] = _freeTokenUris[_tokenUriIndexes[_addressOwners[who][i]]];\r\n        }\r\n        return tokenUris;\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _tokenIds.length;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address who, uint256 index) external override view returns (uint256 tokenId) {\r\n        return _addressOwners[who][index];\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) external override view returns (uint256) {\r\n        return _tokenIds[index];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        require(who != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[who];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        address who = _owners[tokenId];\r\n        require(who != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return who;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return _freeTokenUris[_tokenUriIndexes[tokenId]];\r\n    }\r\n\r\n    function approve(address, uint256) public payable override {\r\n        revert(\"This NFT is not approvable\");\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return address(0);\r\n    }\r\n\r\n    function setApprovalForAll(address, bool) public pure override {\r\n        revert(\"This NFT is not approvable\");\r\n    }\r\n\r\n    function isApprovedForAll(address, address) public pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public payable override {\r\n        revert(\"This NFT is not transferable\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address, address, uint256, bytes memory) public payable override {\r\n        revert(\"This NFT is not transferable\");\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId;\r\n    }\r\n\r\n\r\n    // Admin Methods\r\n\r\n    function setOwner(address who) public onlyOwner {\r\n        require(who != address(0), \"cannot be zero address\");\r\n        owner = who;\r\n    }\r\n\r\n    function addNewNft(string memory uri) public onlyOwner {\r\n        _freeTokenUris.push(uri);\r\n    }\r\n\r\n    // Private Methods\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenIds.push(tokenId);\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n        _addressOwners[to].push(tokenId);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"addNewNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "FantasyArenaFreeEdition", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9928c6d9d239c194f86e4e83653f21b3fdf43aa85d36091af5d15480492bfcfa"}