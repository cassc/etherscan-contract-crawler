{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPermissions.sol\\\";\\r\\nimport \\\"../interfaces/IXMSToken.sol\\\";\\r\\nimport \\\"../interfaces/IUSDMToken.sol\\\";\\r\\n\\r\\n/// @title Core Interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICore is IPermissions {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event XMSSupportRatioUpdate(uint256 _xmsSupportRatio);\\r\\n    event USDMUpdate(address indexed _usdm);\\r\\n    event XMSUpdate(address indexed _xms);\\r\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\r\\n    event TokenAllocation(address indexed _to, uint256 _amount);\\r\\n    event TokenApprove(address indexed _to, uint256 _amount);\\r\\n    event GenesisPeriodComplete(uint256 _timestamp);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setXMSSupportRatio(uint256 _xmsSupportRatio) external;\\r\\n\\r\\n    function setUSDM(address token) external;\\r\\n\\r\\n    function setXMS(address token) external;\\r\\n\\r\\n    function setGenesisGroup(address _genesisGroup) external;\\r\\n\\r\\n    function allocateXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function allocateToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function approveXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function approveToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    function removeApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    // ----------- Genesis Group only state changing api -----------\\r\\n\\r\\n    function completeGenesisGroup() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function getApprovedPairsLength() external view returns (uint256);\\r\\n\\r\\n    function getApprovedContractsLength(address _pair)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approvedPairs(uint256 idx) external view returns (address);\\r\\n\\r\\n    function approvedPairExisted(address pair) external view returns (bool);\\r\\n\\r\\n    function approvedContracts(address pair, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function approvedContractExisted(address pair, address _contract)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function xmsSupportRatio() external view returns (uint256);\\r\\n\\r\\n    function xmsSupportRatioPrecision() external view returns (uint256);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function genesisGroup() external view returns (address);\\r\\n\\r\\n    function hasGenesisGroupCompleted() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICore.sol\\\";\\r\\n\\r\\n/// @title CoreRef interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICoreRef {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event CoreUpdate(address indexed _core);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setCore(address core_) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function core() external view returns (ICore);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function usdmBalance() external view returns (uint256);\\r\\n\\r\\n    function xmsBalance() external view returns (uint256);\\r\\n\\r\\n    function getUSDMAmountGovernance() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IMarsSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IMarsSwapFactory {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeScale(uint256) external;\\r\\n\\r\\n    function setFeeStakeScale(uint256) external;\\r\\n\\r\\n    function setFeeSpec(address pair, uint256 _feeScale) external;\\r\\n\\r\\n    function setFeeNoSpec() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function fee(address pair)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            bool,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeScale() external view returns (uint256);\\r\\n\\r\\n    function feeStakeScale() external view returns (uint256);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IMarsSwapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMarsSwapPair is IERC20 {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IMarsSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IMarsSwapRouter {\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function setSwapMining(address _swapMining) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    function swapMining() external view returns (address);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Permissions interface\\r\\n/// @author USDM Protocol\\r\\ninterface IPermissions {\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n    function grantMinter(address minter) external;\\r\\n\\r\\n    function grantBurner(address burner) external;\\r\\n\\r\\n    function grantPCVController(address pcvController) external;\\r\\n\\r\\n    function grantGovernor(address governor) external;\\r\\n\\r\\n    function grantGuardian(address guardian) external;\\r\\n\\r\\n    function revokeMinter(address minter) external;\\r\\n\\r\\n    function revokeBurner(address burner) external;\\r\\n\\r\\n    function revokePCVController(address pcvController) external;\\r\\n\\r\\n    function revokeGovernor(address governor) external;\\r\\n\\r\\n    function revokeGuardian(address guardian) external;\\r\\n\\r\\n    // ----------- Revoker only state changing api -----------\\r\\n\\r\\n    function revokeOverride(bytes32 role, address account) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function isBurner(address _address) external view returns (bool);\\r\\n\\r\\n    function isMinter(address _address) external view returns (bool);\\r\\n\\r\\n    function isGovernor(address _address) external view returns (bool);\\r\\n\\r\\n    function isGuardian(address _address) external view returns (bool);\\r\\n\\r\\n    function isPCVController(address _address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ISwapMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/ISwapMiningOracle.sol\\\";\\r\\n\\r\\ninterface ISwapMining {\\r\\n    struct UserInfo {\\r\\n        uint256 quantity; // How many LP tokens the user has provided\\r\\n        uint256 blockNumber; // Last transaction block\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        address pair; // Trading pairs that can be mined\\r\\n        uint256 quantity; // Current amount of LPs\\r\\n        uint256 totalQuantity; // All quantity\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool\\r\\n        uint256 allocXMSAmount; // How many XMS\\r\\n        uint256 lastRewardBlock; // Last transaction block\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event UpdateXmsPerBlock(address indexed user, uint256 xmsPerBlock);\\r\\n\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function addPool(\\r\\n        uint256 allocPoint,\\r\\n        address pair,\\r\\n        bool withUpdate\\r\\n    ) external;\\r\\n\\r\\n    function setPool(\\r\\n        uint256 pid,\\r\\n        uint256 allocPoint,\\r\\n        bool withUpdate\\r\\n    ) external;\\r\\n\\r\\n    function updateXmsPerBlock(uint256 _xmsPerBlock) external;\\r\\n\\r\\n    function addWhitelist(address _addToken) external returns (bool);\\r\\n\\r\\n    function delWhitelist(address _delToken) external returns (bool);\\r\\n\\r\\n    function setRouter(address _router) external;\\r\\n\\r\\n    function setSwapMiningOracle(ISwapMiningOracle _swapMiningOracle) external;\\r\\n\\r\\n    // ----------- Router State changing api -----------\\r\\n\\r\\n    function swap(\\r\\n        address account,\\r\\n        address input,\\r\\n        address output,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function massMintPools() external;\\r\\n\\r\\n    function updatePool(uint256 pid) external returns (bool);\\r\\n\\r\\n    function withdraw() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function xmsPerBlock() external view returns (uint256);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function swapMiningOracle() external view returns (ISwapMiningOracle);\\r\\n\\r\\n    function factory() external view returns (IMarsSwapFactory);\\r\\n\\r\\n    function targetToken() external view returns (address);\\r\\n\\r\\n    function pair2Pid(address pair) external view returns (uint256);\\r\\n\\r\\n    function poolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address pair,\\r\\n            uint256 quantity,\\r\\n            uint256 totalQuantity,\\r\\n            uint256 allocPoint,\\r\\n            uint256 allocXMSAmount,\\r\\n            uint256 lastRewardBlock\\r\\n        );\\r\\n\\r\\n    function userInfo(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 quantity, uint256 blockNumber);\\r\\n\\r\\n    function poolExistence(address pair) external view returns (bool);\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function getWhitelistsLength() external view returns (uint256);\\r\\n\\r\\n    function isWhitelist(address token) external view returns (bool);\\r\\n\\r\\n    function getWhitelist(uint256 index) external view returns (address);\\r\\n\\r\\n    function getXMSBlockReward(uint256 lastRewardBlock)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function pendingXMS(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getPoolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function getQuantity(\\r\\n        address outputToken,\\r\\n        uint256 outputAmount,\\r\\n        address anchorToken\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ISwapMiningOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IMarsSwapFactory.sol\\\";\\r\\n\\r\\ninterface ISwapMiningOracle {\\r\\n    struct Observation {\\r\\n        uint32 blockTimestampLast;\\r\\n        uint256 price0CumulativeLast;\\r\\n        uint256 price1CumulativeLast;\\r\\n        bool added;\\r\\n    }\\r\\n\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function setPeriod(uint256 period) external;\\r\\n\\r\\n    function setFactory(address _factory) external;\\r\\n\\r\\n    function addPair(address pair) external;\\r\\n\\r\\n    function removePair(address pair) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function update(address pair) external;\\r\\n\\r\\n    function consult(\\r\\n        address tokenIn,\\r\\n        uint256 amountIn,\\r\\n        address tokenOut\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function PERIOD() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (IMarsSwapFactory);\\r\\n\\r\\n    function pairs(uint256 idx) external view returns (address pair);\\r\\n\\r\\n    function getPairsLength() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IUSDMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IUSDMToken is IERC20 {\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- Burner State changing api -----------\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function burn(uint256 _amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IWETH {\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IXMSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IXMSToken is IERC20 {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function delegates(address delegator) external view returns (address);\\r\\n\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint96);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/libs/MarsSwapLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IMarsSwapPair.sol\\\";\\r\\nimport \\\"../interfaces/IMarsSwapFactory.sol\\\";\\r\\n\\r\\nlibrary MarsSwapLibrary {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address token0, address token1)\\r\\n    {\\r\\n        require(\\r\\n            tokenA != tokenB,\\r\\n            \\\"MarsSwapLibrary::sortTokens: Identical addresses\\\"\\r\\n        );\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        require(\\r\\n            token0 != address(0),\\r\\n            \\\"MarsSwapLibrary::sortTokens: Zero address\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        hex\\\"ff\\\",\\r\\n                        factory,\\r\\n                        keccak256(abi.encodePacked(token0, token1)),\\r\\n                        hex\\\"1bebc382ef02a42adebba8056f178019d890f3b232007a868603393bddd2f1ab\\\" // init code hash\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Fetches and sorts the reserves for a pair\\r\\n    function getReserves(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            address pair,\\r\\n            uint256 reserveA,\\r\\n            uint256 reserveB\\r\\n        )\\r\\n    {\\r\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\r\\n\\r\\n        pair = pairFor(factory, tokenA, tokenB);\\r\\n        (uint256 reserve0, uint256 reserve1, ) =\\r\\n            IMarsSwapPair(pair).getReserves();\\r\\n\\r\\n        (reserveA, reserveB) = tokenA == token0\\r\\n            ? (reserve0, reserve1)\\r\\n            : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) internal pure returns (uint256 amountB) {\\r\\n        require(amountA > 0, \\\"MarsSwapLibrary::quote: Insufficient amount\\\");\\r\\n        require(\\r\\n            reserveA > 0 && reserveB > 0,\\r\\n            \\\"MarsSwapLibrary::quote: Insufficient liquidity\\\"\\r\\n        );\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        require(\\r\\n            amountIn > 0,\\r\\n            \\\"MarsSwapLibrary::getAmountOut: Insufficient input amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"MarsSwapLibrary::getAmountOut: Insufficient liquidity\\\"\\r\\n        );\\r\\n        uint256 amountInWithFee = amountIn.mul(feeScale);\\r\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) internal pure returns (uint256 amountIn) {\\r\\n        require(\\r\\n            amountOut > 0,\\r\\n            \\\"MarsSwapLibrary::getAmountIn: Insufficient output amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"MarsSwapLibrary::getAmountIn: Insufficient liquidity\\\"\\r\\n        );\\r\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint256 denominator = reserveOut.sub(amountOut).mul(feeScale);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // Performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(\\r\\n        address factory,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2,\\r\\n            \\\"MarsSwapLibrary::getAmountsOut: Invalid path\\\"\\r\\n        );\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (address pair, uint256 reserveIn, uint256 reserveOut) =\\r\\n                getReserves(factory, path[i], path[i + 1]);\\r\\n            (, , uint256 feeScale) = IMarsSwapFactory(factory).fee(pair);\\r\\n            amounts[i + 1] = getAmountOut(\\r\\n                amounts[i],\\r\\n                reserveIn,\\r\\n                reserveOut,\\r\\n                feeScale\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(\\r\\n        address factory,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2,\\r\\n            \\\"MarsSwapLibrary::getAmountsIn: Invalid path\\\"\\r\\n        );\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\r\\n            (address pair, uint256 reserveIn, uint256 reserveOut) =\\r\\n                getReserves(factory, path[i - 1], path[i]);\\r\\n            (, , uint256 feeScale) = IMarsSwapFactory(factory).fee(pair);\\r\\n            amounts[i - 1] = getAmountIn(\\r\\n                amounts[i],\\r\\n                reserveIn,\\r\\n                reserveOut,\\r\\n                feeScale\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/libs/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeApprove: Approve failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeTransfer: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeTransferFrom: Transfer from failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: Eth transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/liquidity/MarsSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"../interfaces/IMarsSwapRouter.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\nimport \\\"../interfaces/ISwapMining.sol\\\";\\r\\nimport \\\"../libs/TransferHelper.sol\\\";\\r\\nimport \\\"../libs/MarsSwapLibrary.sol\\\";\\r\\nimport \\\"../refs/CoreRef.sol\\\";\\r\\n\\r\\ncontract MarsSwapRouter is IMarsSwapRouter, CoreRef {\\r\\n    using SafeMath for uint256;\\r\\n    address public immutable override factory;\\r\\n    address public immutable override WETH;\\r\\n    address public override swapMining;\\r\\n\\r\\n    modifier ensure(uint256 deadline) {\\r\\n        require(deadline >= block.timestamp, \\\"MarsSwapRouter::ensure: Expired\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _core,\\r\\n        address _factory,\\r\\n        address _WETH,\\r\\n        address _swapMining\\r\\n    ) CoreRef(_core) {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n        swapMining = _swapMining;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // Only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    function setSwapMining(address _swapMining) public override onlyGovernor {\\r\\n        swapMining = _swapMining;\\r\\n    }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin\\r\\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\\r\\n        // Create the pair if it doesn't exist yet\\r\\n        if (IMarsSwapFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\r\\n            IMarsSwapFactory(factory).createPair(tokenA, tokenB);\\r\\n        }\\r\\n\\r\\n        (, uint256 reserveA, uint256 reserveB) =\\r\\n            MarsSwapLibrary.getReserves(factory, tokenA, tokenB);\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n        } else {\\r\\n            uint256 amountBOptimal =\\r\\n                MarsSwapLibrary.quote(amountADesired, reserveA, reserveB);\\r\\n            if (amountBOptimal <= amountBDesired) {\\r\\n                require(\\r\\n                    amountBOptimal >= amountBMin,\\r\\n                    \\\"MarsSwapRouter::_addLiquidity: Insufficient b_amount\\\"\\r\\n                );\\r\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n            } else {\\r\\n                uint256 amountAOptimal =\\r\\n                    MarsSwapLibrary.quote(amountBDesired, reserveB, reserveA);\\r\\n                assert(amountAOptimal <= amountADesired);\\r\\n                require(\\r\\n                    amountAOptimal >= amountAMin,\\r\\n                    \\\"MarsSwapRouter::_addLiquidity: Insufficient a_amount\\\"\\r\\n                );\\r\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        (amountA, amountB) = _addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin\\r\\n        );\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\r\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\r\\n        liquidity = IMarsSwapPair(pair).mint(to);\\r\\n    }\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        (amountToken, amountETH) = _addLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            amountTokenDesired,\\r\\n            msg.value,\\r\\n            amountTokenMin,\\r\\n            amountETHMin\\r\\n        );\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, token, WETH);\\r\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\r\\n        IWETH(WETH).deposit{value: amountETH}();\\r\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\r\\n        liquidity = IMarsSwapPair(pair).mint(to);\\r\\n        // refund dust ETH, if any\\r\\n        if (msg.value > amountETH)\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256 amountA, uint256 amountB)\\r\\n    {\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        IMarsSwapPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\r\\n        (uint256 amount0, uint256 amount1) = IMarsSwapPair(pair).burn(to);\\r\\n        (address token0, ) = MarsSwapLibrary.sortTokens(tokenA, tokenB);\\r\\n        (amountA, amountB) = tokenA == token0\\r\\n            ? (amount0, amount1)\\r\\n            : (amount1, amount0);\\r\\n        require(\\r\\n            amountA >= amountAMin,\\r\\n            \\\"MarsSwapRouter::removeLiquidity: Insufficient a_amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            amountB >= amountBMin,\\r\\n            \\\"MarsSwapRouter::removeLiquidity: Insufficient b_amount\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256 amountToken, uint256 amountETH)\\r\\n    {\\r\\n        (amountToken, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(token, to, amountToken);\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        uint256 value = approveMax ? uint256(-1) : liquidity;\\r\\n        IMarsSwapPair(pair).permit(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            value,\\r\\n            deadline,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        (amountA, amountB) = removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256 amountToken, uint256 amountETH)\\r\\n    {\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, token, WETH);\\r\\n        uint256 value = approveMax ? uint256(-1) : liquidity;\\r\\n        IMarsSwapPair(pair).permit(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            value,\\r\\n            deadline,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        (amountToken, amountETH) = removeLiquidityETH(\\r\\n            token,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\\r\\n        (, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(\\r\\n            token,\\r\\n            to,\\r\\n            IERC20(token).balanceOf(address(this))\\r\\n        );\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (uint256 amountETH) {\\r\\n        address pair = MarsSwapLibrary.pairFor(factory, token, WETH);\\r\\n        uint256 value = approveMax ? uint256(-1) : liquidity;\\r\\n        IMarsSwapPair(pair).permit(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            value,\\r\\n            deadline,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            token,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // **** SWAP ****\\r\\n    // Requires the initial amount to have already been sent to the first pair\\r\\n    function _swap(\\r\\n        uint256[] memory amounts,\\r\\n        address[] memory path,\\r\\n        address _to\\r\\n    ) internal virtual {\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0, ) = MarsSwapLibrary.sortTokens(input, output);\\r\\n            uint256 amountOut = amounts[i + 1];\\r\\n            if (swapMining != address(0)) {\\r\\n                ISwapMining(swapMining).swap(\\r\\n                    msg.sender,\\r\\n                    input,\\r\\n                    output,\\r\\n                    amountOut\\r\\n                );\\r\\n            }\\r\\n            (uint256 amount0Out, uint256 amount1Out) =\\r\\n                input == token0\\r\\n                    ? (uint256(0), amountOut)\\r\\n                    : (amountOut, uint256(0));\\r\\n            address to =\\r\\n                i < path.length - 2\\r\\n                    ? MarsSwapLibrary.pairFor(factory, output, path[i + 2])\\r\\n                    : _to;\\r\\n            IMarsSwapPair(MarsSwapLibrary.pairFor(factory, input, output)).swap(\\r\\n                amount0Out,\\r\\n                amount1Out,\\r\\n                to\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        amounts = MarsSwapLibrary.getAmountsOut(factory, amountIn, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] >= amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForTokens: Insufficient output amount\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        amounts = MarsSwapLibrary.getAmountsIn(factory, amountOut, path);\\r\\n        require(\\r\\n            amounts[0] <= amountInMax,\\r\\n            \\\"MarsSwapRouter::swapTokensForExactTokens: Excessive input amount\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        require(\\r\\n            path[0] == WETH,\\r\\n            \\\"MarsSwapRouter::swapExactETHForTokens: Invalid path\\\"\\r\\n        );\\r\\n        amounts = MarsSwapLibrary.getAmountsOut(factory, msg.value, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] >= amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactETHForTokens: Insufficient output amount\\\"\\r\\n        );\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(\\r\\n            IWETH(WETH).transfer(\\r\\n                MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n                amounts[0]\\r\\n            )\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        require(\\r\\n            path[path.length - 1] == WETH,\\r\\n            \\\"MarsSwapRouter::swapTokensForExactETH: Invalid path\\\"\\r\\n        );\\r\\n        amounts = MarsSwapLibrary.getAmountsIn(factory, amountOut, path);\\r\\n        require(\\r\\n            amounts[0] <= amountInMax,\\r\\n            \\\"MarsSwapRouter::swapTokensForExactETH: Excessive input amount\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        require(\\r\\n            path[path.length - 1] == WETH,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForETH: Invalid path\\\"\\r\\n        );\\r\\n        amounts = MarsSwapLibrary.getAmountsOut(factory, amountIn, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] >= amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForETH: Insufficient output amount\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        require(\\r\\n            path[0] == WETH,\\r\\n            \\\"MarsSwapRouter::swapETHForExactTokens: Invalid path\\\"\\r\\n        );\\r\\n        amounts = MarsSwapLibrary.getAmountsIn(factory, amountOut, path);\\r\\n        require(\\r\\n            amounts[0] <= msg.value,\\r\\n            \\\"MarsSwapRouter::swapETHForExactTokens: Excessive input amount\\\"\\r\\n        );\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(\\r\\n            IWETH(WETH).transfer(\\r\\n                MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n                amounts[0]\\r\\n            )\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n        // Refund dust ETH, if any\\r\\n        if (msg.value > amounts[0])\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\r\\n    }\\r\\n\\r\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\r\\n    // Requires the initial amount to have already been sent to the first pair\\r\\n    function _swapSupportingFeeOnTransferTokens(\\r\\n        address[] memory path,\\r\\n        address _to\\r\\n    ) internal virtual {\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0, ) = MarsSwapLibrary.sortTokens(input, output);\\r\\n            IMarsSwapPair pair =\\r\\n                IMarsSwapPair(MarsSwapLibrary.pairFor(factory, input, output));\\r\\n            uint256 amountInput;\\r\\n            uint256 amountOutput;\\r\\n            {\\r\\n                // Scope to avoid stack too deep errors\\r\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\r\\n                (uint256 reserveInput, uint256 reserveOutput) =\\r\\n                    input == token0\\r\\n                        ? (reserve0, reserve1)\\r\\n                        : (reserve1, reserve0);\\r\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(\\r\\n                    reserveInput\\r\\n                );\\r\\n                (, , uint256 feeScale) =\\r\\n                    IMarsSwapFactory(factory).fee(address(pair));\\r\\n                amountOutput = MarsSwapLibrary.getAmountOut(\\r\\n                    amountInput,\\r\\n                    reserveInput,\\r\\n                    reserveOutput,\\r\\n                    feeScale\\r\\n                );\\r\\n            }\\r\\n            (uint256 amount0Out, uint256 amount1Out) =\\r\\n                input == token0\\r\\n                    ? (uint256(0), amountOutput)\\r\\n                    : (amountOutput, uint256(0));\\r\\n            address to =\\r\\n                i < path.length - 2\\r\\n                    ? MarsSwapLibrary.pairFor(factory, output, path[i + 2])\\r\\n                    : _to;\\r\\n            pair.swap(amount0Out, amount1Out, to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external virtual override ensure(deadline) {\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amountIn\\r\\n        );\\r\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\\r\\n                amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForTokensSupportingFeeOnTransferTokens: Insufficient output amount\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable virtual override ensure(deadline) {\\r\\n        require(\\r\\n            path[0] == WETH,\\r\\n            \\\"MarsSwapRouter::swapExactETHForTokensSupportingFeeOnTransferTokens: Invalid path\\\"\\r\\n        );\\r\\n        uint256 amountIn = msg.value;\\r\\n        IWETH(WETH).deposit{value: amountIn}();\\r\\n        assert(\\r\\n            IWETH(WETH).transfer(\\r\\n                MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n                amountIn\\r\\n            )\\r\\n        );\\r\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\\r\\n                amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactETHForTokensSupportingFeeOnTransferTokens: Insufficient output amount\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external virtual override ensure(deadline) {\\r\\n        require(\\r\\n            path[path.length - 1] == WETH,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForETHSupportingFeeOnTransferTokens: Invalid path\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0],\\r\\n            msg.sender,\\r\\n            MarsSwapLibrary.pairFor(factory, path[0], path[1]),\\r\\n            amountIn\\r\\n        );\\r\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\r\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\r\\n        require(\\r\\n            amountOut >= amountOutMin,\\r\\n            \\\"MarsSwapRouter::swapExactTokensForETHSupportingFeeOnTransferTokens: Insufficient output amount\\\"\\r\\n        );\\r\\n        IWETH(WETH).withdraw(amountOut);\\r\\n        TransferHelper.safeTransferETH(to, amountOut);\\r\\n    }\\r\\n\\r\\n    // **** LIBRARY FUNCTIONS ****\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) public pure virtual override returns (uint256 amountB) {\\r\\n        return MarsSwapLibrary.quote(amountA, reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) public view virtual override returns (uint256 amountOut) {\\r\\n        return\\r\\n            MarsSwapLibrary.getAmountOut(\\r\\n                amountIn,\\r\\n                reserveIn,\\r\\n                reserveOut,\\r\\n                feeScale\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut,\\r\\n        uint256 feeScale\\r\\n    ) public view virtual override returns (uint256 amountIn) {\\r\\n        return\\r\\n            MarsSwapLibrary.getAmountIn(\\r\\n                amountOut,\\r\\n                reserveIn,\\r\\n                reserveOut,\\r\\n                feeScale\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        return MarsSwapLibrary.getAmountsOut(factory, amountIn, path);\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] memory path)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256[] memory amounts)\\r\\n    {\\r\\n        return MarsSwapLibrary.getAmountsIn(factory, amountOut, path);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/refs/CoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/ICoreRef.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/// @title A Reference to Core\\r\\n/// @author USDM Protocol\\r\\n/// @notice Defines some modifiers and utilities around interacting with Core\\r\\nabstract contract CoreRef is ICoreRef, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ICore private _core;\\r\\n\\r\\n    /// @notice CoreRef constructor\\r\\n    /// @param core_ USDM Core to reference\\r\\n    constructor(address core_) {\\r\\n        _core = ICore(core_);\\r\\n    }\\r\\n\\r\\n    modifier ifMinterSelf() {\\r\\n        if (_core.isMinter(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier ifBurnerSelf() {\\r\\n        if (_core.isBurner(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            _core.isMinter(msg.sender),\\r\\n            \\\"CoreRef::onlyMinter: Caller is not a minter\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(\\r\\n            _core.isBurner(msg.sender),\\r\\n            \\\"CoreRef::onlyBurner: Caller is not a burner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPCVController() {\\r\\n        require(\\r\\n            _core.isPCVController(msg.sender),\\r\\n            \\\"CoreRef::onlyPCVController: Caller is not a PCV controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender),\\r\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardianOrGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\r\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyUSDM() {\\r\\n        require(\\r\\n            msg.sender == address(usdm()),\\r\\n            \\\"CoreRef::onlyUSDM: Caller is not USDM\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGenesisGroup() {\\r\\n        require(\\r\\n            msg.sender == _core.genesisGroup(),\\r\\n            \\\"CoreRef::onlyGenesisGroup: Caller is not GenesisGroup\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier postGenesis() {\\r\\n        require(\\r\\n            _core.hasGenesisGroupCompleted(),\\r\\n            \\\"CoreRef::postGenesis: Still in genesis period\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonContract() {\\r\\n        require(\\r\\n            !Address.isContract(msg.sender),\\r\\n            \\\"CoreRef::nonContract: Caller is a contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set new Core reference address\\r\\n    /// @param core_ The new core address\\r\\n    function setCore(address core_) external override onlyGovernor {\\r\\n        _core = ICore(core_);\\r\\n        emit CoreUpdate(core_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to paused\\r\\n    function pause() public override onlyGuardianOrGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to unpaused\\r\\n    function unpause() public override onlyGuardianOrGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the Core contract referenced\\r\\n    /// @return ICore implementation address\\r\\n    function core() public view override returns (ICore) {\\r\\n        return _core;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the USDM contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function usdm() public view override returns (IUSDMToken) {\\r\\n        return _core.usdm();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the XMS contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function xms() public view override returns (IXMSToken) {\\r\\n        return _core.xms();\\r\\n    }\\r\\n\\r\\n    /// @notice USDM balance of contract\\r\\n    /// @return USDM amount held\\r\\n    function usdmBalance() public view override returns (uint256) {\\r\\n        return usdm().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice XMS balance of contract\\r\\n    /// @return XMS amount held\\r\\n    function xmsBalance() public view override returns (uint256) {\\r\\n        return xms().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the usdm amount of governance\\r\\n    function getUSDMAmountGovernance()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 usdmAmount)\\r\\n    {\\r\\n        address pair;\\r\\n        address _contract;\\r\\n        for (uint256 i; i < core().getApprovedPairsLength(); i++) {\\r\\n            pair = core().approvedPairs(i);\\r\\n            for (uint256 j; j < core().getApprovedContractsLength(pair); j++) {\\r\\n                _contract = core().approvedContracts(pair, j);\\r\\n                usdmAmount += core()\\r\\n                    .usdm()\\r\\n                    .balanceOf(pair)\\r\\n                    .mul(IERC20(pair).balanceOf(_contract))\\r\\n                    .div(IERC20(pair).totalSupply());\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _burnUSDMHeld() internal {\\r\\n        usdm().burn(usdmBalance());\\r\\n    }\\r\\n\\r\\n    function _mintUSDM(uint256 amount) internal {\\r\\n        usdm().mint(address(this), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapMining\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeScale\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeScale\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDMAmountGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdmAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapMining\",\"type\":\"address\"}],\"name\":\"setSwapMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMining\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"contract IUSDMToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdmBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xms\",\"outputs\":[{\"internalType\":\"contract IXMSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarsSwapRouter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000789cfb69499c65ac9a3a68fb4917c9b4fca2a70000000000000000000000006f12482d9869303b998c54d91bcd8bccba81f3be000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}