{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//\r\n// ###    ###   ###          ##########   ##########   ##########   ###    ###\r\n//  ###  ###    ###          ##########   ##########   ##########   ###    ###\r\n//   ######     ###          ###          ###    ###   ###          ###    ###\r\n//    ####      ###          ##########   ##########   ##########   ##########\r\n//    ####      ###          ##########   ##########   ##########   ##########\r\n//   ######     ###          ###          ###    ###          ###   ###    ###\r\n//  ###  ###    ##########   ##########   ###    ###   ##########   ###    ###\r\n// ###    ###   ##########   ##########   ###    ###   ##########   ###    ###\r\n\r\npragma solidity ^0.8.16;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeApprove: approve failed'); }\r\n    function safeTransfer(address token, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeTransfer: transfer failed'); }\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal { (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value)); require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::transferFrom: transferFrom failed'); }\r\n    function safeTransferETH(address to, uint256 value) internal { (bool success, ) = to.call{value: value}(new bytes(0)); require(success, 'TransferHelper::safeTransferETH: ETH transfer failed'); }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n}\r\n\r\ninterface IPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function totalSupply() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n    function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() { _transferOwnership(_msgSender()); }\r\n    modifier onlyOwner() { _checkOwner(); _; }\r\n    function owner() public view virtual returns (address) { return _owner; }\r\n    function _checkOwner() internal view virtual { require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); }\r\n    function renounceOwnership() public virtual onlyOwner { _transferOwnership(address(0)); }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner); }\r\n    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) { _name = name_; _symbol = symbol_; _decimals = decimals_; }\r\n    function name() public view virtual override returns (string memory) { return _name; }\r\n    function symbol() public view virtual override returns (string memory) { return _symbol; }\r\n    function decimals() public view virtual override returns (uint8) { return _decimals; }\r\n    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _transfer(owner, to, amount); return true; }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _approve(owner, spender, amount); return true; }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) { address spender = _msgSender(); _spendAllowance(from, spender, amount); _transfer(from, to, amount); return true; }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { address owner = _msgSender(); _approve(owner, spender, allowance(owner, spender) + addedValue); return true; }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked { _approve(owner, spender, currentAllowance - subtractedValue); }\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked { _balances[from] = fromBalance - amount; _balances[to] += amount; }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        unchecked { _balances[account] += amount; }\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked { _approve(owner, spender, currentAllowance - amount); }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract Bank {\r\n    address public token;\r\n    address public to;\r\n\r\n    constructor (address token_) {\r\n        token = token_;\r\n        to = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n\r\n    function get() external {\r\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nabstract contract TOKEN is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum TradeType { TRANSFER, BUY, SELL, ADDLP, REMOVELP }\r\n\r\n    address public WETH;\r\n    address public USDT;\r\n\r\n    address public XSHIB;\r\n    address public XSHIB_NFT;\r\n    address public XLEASH_NFT;\r\n\r\n    address public mainpair;\r\n    address public routerAddr;\r\n\r\n    bool public enableLp;\r\n    uint256 public launchblock;\r\n    uint256 public tax;\r\n    uint256 public kb = 3;\r\n\r\n    bool    private _swapping;\r\n    uint256 private _distributeAmount;\r\n\r\n    address[] public lp_holders;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public _is_LPHolder;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    uint256[] public rewardXshibNFTs;\r\n    uint256[] public rewardXleashNFTs;\r\n\r\n    Bank public usdtbus;\r\n\r\n    modifier lockSwap() { _swapping = true; _; _swapping = false; }\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        uint256 tax_,\r\n        address usdt_,\r\n        address routerAddr_,\r\n        uint256 distributeAmount_,\r\n        address xshib_,\r\n        address xshibNFT_,\r\n        address xleashNFT_\r\n    ) ERC20(name_, symbol_, decimals_) {\r\n        {\r\n            require(address(this) > usdt_);\r\n        }\r\n\r\n        {\r\n            WETH = IRouter(routerAddr_).WETH();\r\n            USDT = usdt_;\r\n            XSHIB = xshib_;\r\n            XSHIB_NFT = xshibNFT_;\r\n            XLEASH_NFT = xleashNFT_;\r\n            tax = tax_;\r\n            routerAddr = routerAddr_;\r\n            _distributeAmount = distributeAmount_; // per distributeAmount_ usdt reward once\r\n\r\n            usdtbus = new Bank(USDT);\r\n        }\r\n\r\n        {\r\n            excludeFromFees(address(this), true);\r\n            excludeFromFees(msg.sender, true);\r\n        }\r\n\r\n        {\r\n            _mint(msg.sender, totalSupply_); // 10% for marketing\r\n            _approve(address(this), routerAddr, ~uint256(0));\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; }\r\n\r\n    function sweep(address token, address to) public onlyOwner {\r\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    function sweepETH(address to) public onlyOwner {\r\n        TransferHelper.safeTransferETH(to, address(this).balance);\r\n    }\r\n\r\n    function launch() external payable onlyOwner {\r\n        require(launchblock == 0, \"already launched\");\r\n        launchblock = block.number;\r\n    }\r\n\r\n    function set_enableLp(bool enable) external onlyOwner {\r\n        enableLp = enable;\r\n    }\r\n\r\n    function set_tax(uint256 tax_) public onlyOwner {\r\n        require(tax_ <= 20, \"invalid tax\");\r\n        tax = tax_;\r\n    }\r\n\r\n    function set_bls(address[] calldata accounts, bool bled) public onlyOwner { for (uint256 i = 0; i < accounts.length; i++) _isBlacklisted[accounts[i]] = bled; }\r\n\r\n    function set_mainpair(address lp) public onlyOwner {\r\n        mainpair = lp;\r\n    }\r\n\r\n    function set_rewardXshibNFTs(uint256[] calldata add, uint256[] calldata remove) public onlyOwner {\r\n        for (uint256 aidx = 0; aidx < add.length; aidx++) {\r\n            bool abort;\r\n            for (uint256 idx = 0; idx < rewardXshibNFTs.length; idx++) {\r\n                if (rewardXshibNFTs[idx] == add[aidx]) {\r\n                    abort = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (abort) continue;\r\n            rewardXshibNFTs.push(add[aidx]);\r\n        }\r\n\r\n        for (uint256 ridx = 0; ridx < remove.length; ridx++) {\r\n            for (uint256 idx = 0; idx < rewardXshibNFTs.length; idx++) {\r\n                if (rewardXshibNFTs[idx] == remove[ridx]) {\r\n                    rewardXshibNFTs[idx] = rewardXshibNFTs[rewardXshibNFTs.length - 1];\r\n                    rewardXshibNFTs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function set_rewardXleashNFTs(uint256[] calldata add, uint256[] calldata remove) public onlyOwner {\r\n        for (uint256 aidx = 0; aidx < add.length; aidx++) {\r\n            bool abort;\r\n            for (uint256 idx = 0; idx < rewardXleashNFTs.length; idx++) {\r\n                if (rewardXleashNFTs[idx] == add[aidx]) {\r\n                    abort = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (abort) continue;\r\n            rewardXleashNFTs.push(add[aidx]);\r\n        }\r\n\r\n        for (uint256 ridx = 0; ridx < remove.length; ridx++) {\r\n            for (uint256 idx = 0; idx < rewardXleashNFTs.length; idx++) {\r\n                if (rewardXleashNFTs[idx] == remove[ridx]) {\r\n                    rewardXleashNFTs[idx] = rewardXleashNFTs[rewardXleashNFTs.length - 1];\r\n                    rewardXleashNFTs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0) && to != address(0) && amount != 0);\r\n        require(!_isBlacklisted[from]);\r\n\r\n        if (_swapping || _isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        TradeType tradeType = _tradeType(from, to, amount);\r\n        uint256 burnAmount;\r\n        uint256 taxAmount;\r\n\r\n        if (tradeType == TradeType.BUY) {\r\n            require(launchblock > 0, \"not launched\");\r\n            taxAmount = amount.mul(tax).div(100);\r\n\r\n            if (block.number <= launchblock + kb) _isBlacklisted[to] = true;\r\n\r\n            _addLPHolder(to); // must buy once, then will enable lp_holders reward\r\n        }\r\n\r\n        if (tradeType == TradeType.SELL) {\r\n            require(launchblock > 0, \"not launched\");\r\n            taxAmount = amount.mul(tax).div(100);\r\n            burnAmount = block.number <= launchblock + 200 ? amount.mul(25).div(100) : 0;\r\n\r\n            uint256 _swapAmount = balanceOf(mainpair).div(100);\r\n            if (balanceOf(address(this)) >= _swapAmount) {\r\n                _swapUSDT(_swapAmount.mul(4).div(5), address(usdtbus)); // 80% for usdtbus\r\n                _swapXSHIB(_swapAmount.mul(1).div(5), address(this)); // 20% for swap xshib\r\n            }\r\n        }\r\n\r\n        if (tradeType == TradeType.ADDLP) {\r\n            require(enableLp);\r\n        }\r\n\r\n        if (tradeType == TradeType.REMOVELP) {\r\n            taxAmount = amount.mul(tax).div(100);\r\n            burnAmount = block.number <= launchblock + 200 ? amount.mul(25).div(100) : 0;\r\n            _removeLPHolder(to);\r\n        }\r\n\r\n        if (burnAmount > 0) { amount = amount.sub(burnAmount); super._transfer(from, address(0xdead), burnAmount); }\r\n        if (taxAmount > 0) { amount = amount.sub(taxAmount); super._transfer(from, address(this), taxAmount); }\r\n        if (amount > 0) { super._transfer(from, to, amount.sub(1)); }\r\n\r\n        _processReward();\r\n    }\r\n\r\n    function _swapXSHIB(uint256 amount, address to) internal lockSwap {\r\n        if (amount == 0) return;\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n        path[2] = XSHIB;\r\n        IRouter(routerAddr).swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, to, block.timestamp);\r\n    }\r\n\r\n    function _swapUSDT(uint256 amount, address to) internal lockSwap {\r\n        if (amount == 0) return;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n        IRouter(routerAddr).swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, to, block.timestamp);\r\n        usdtbus.get();\r\n    }\r\n\r\n    function _tradeType(address from, address to, uint256 amount) internal view returns (TradeType) {\r\n        IPair mainPair = IPair(mainpair);\r\n\r\n        (uint256 rUsdt, uint256 rThis,) = mainPair.getReserves();\r\n        uint256 balanceUsdt = IERC20(USDT).balanceOf(mainpair);\r\n        uint256 amountUsdt = rUsdt > 0 && rThis > 0 ? (amount * rUsdt) / rThis : 0;\r\n\r\n        bool isRemoveLp = balanceUsdt <= rUsdt;\r\n        bool isAddLp = balanceUsdt >= rUsdt + amountUsdt;\r\n\r\n        if (from == mainpair) return isRemoveLp ? TradeType.REMOVELP : TradeType.BUY;\r\n        if (to == mainpair) return isAddLp ? TradeType.ADDLP : TradeType.SELL;\r\n        return TradeType.TRANSFER;\r\n    }\r\n\r\n    function _isContract(address adr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _addLPHolder(address adr) internal {\r\n        if (_isContract(adr)) return;\r\n        if (_is_LPHolder[adr]) return;\r\n        if (_isBlacklisted[adr]) return;\r\n        if (IERC20(mainpair).balanceOf(adr) < IERC20(mainpair).totalSupply().div(10000)) return;\r\n\r\n        lp_holders.push(adr);\r\n        _is_LPHolder[adr] = true;\r\n    }\r\n\r\n    function _removeLPHolder(address adr) internal {\r\n        if (!_is_LPHolder[adr]) return;\r\n\r\n        for (uint256 i = 0; i < lp_holders.length; i++) {\r\n            if (lp_holders[i] == adr) {\r\n                _is_LPHolder[adr] = false;\r\n                lp_holders[i] = lp_holders[lp_holders.length - 1];\r\n                lp_holders.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* FOR REWARD */\r\n\r\n    uint256 private _processType; // 0: LP, 1: xshibNFT, 2: xleashNFT 3: xleashNFT\r\n    uint256 private _lpidx;\r\n    uint256 private _xshibNFTidx;\r\n    uint256 private _xleashNFTidx;\r\n\r\n    function _processReward() internal {\r\n        if (IERC20(USDT).balanceOf(address(this)) < _distributeAmount) return;\r\n\r\n        if (_processType == 0) _reward_lp();\r\n        if (_processType == 1) _reward_xshibNFT();\r\n        if (_processType == 2) _reward_xleashNFT();\r\n        if (_processType == 3) _reward_xleashNFT();\r\n\r\n        _processType = (_processType + 1) % 4;\r\n    }\r\n\r\n    function _reward_lp() internal {\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 rewardLPTotal;\r\n        uint256 rewardRemain = _distributeAmount;\r\n        address to;\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < lp_holders.length; i++) {\r\n            rewardLPTotal = rewardLPTotal.add(IERC20(mainpair).balanceOf(lp_holders[i]));\r\n        }\r\n\r\n        while (gasUsed < 500000 && iterations < lp_holders.length) {\r\n            if (_lpidx >= lp_holders.length) _lpidx = 0;\r\n\r\n            to = lp_holders[_lpidx];\r\n            amount = _distributeAmount.mul(IERC20(mainpair).balanceOf(to)).div(rewardLPTotal);\r\n\r\n            if (amount > rewardRemain) return;\r\n            if (amount > 0) TransferHelper.safeTransfer(USDT, to, amount);\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft()); gasLeft = gasleft();\r\n            _lpidx++; iterations++;\r\n            rewardRemain = rewardRemain.sub(amount);\r\n        }\r\n    }\r\n\r\n    function _reward_xshibNFT() internal {\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 count = rewardXshibNFTs.length;\r\n        address to;\r\n        uint256 amount = _distributeAmount.div(count);\r\n\r\n        while (gasUsed < 500000 && iterations < count) {\r\n            if (_xshibNFTidx >= count) _xshibNFTidx = 0;\r\n            \r\n            to = IERC721(XSHIB_NFT).ownerOf(rewardXshibNFTs[_xshibNFTidx]);\r\n\r\n            if (to != address(0) && to != address(0xdead) && !_isContract(to)) TransferHelper.safeTransfer(USDT, to, amount);\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft()); gasLeft = gasleft(); _xshibNFTidx++; iterations++;\r\n        }\r\n    }\r\n\r\n    function _reward_xleashNFT() internal {\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 count = rewardXleashNFTs.length;\r\n        address to;\r\n        uint256 amount = _distributeAmount.div(count);\r\n\r\n        while (gasUsed < 500000 && iterations < count) {\r\n            if (_xleashNFTidx >= count) _xleashNFTidx = 0;\r\n\r\n            to = IERC721(XLEASH_NFT).ownerOf(rewardXleashNFTs[_xleashNFTidx]);\r\n\r\n            if (to != address(0) && to != address(0xdead) && !_isContract(to)) TransferHelper.safeTransfer(USDT, to, amount);\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft()); gasLeft = gasleft(); _xleashNFTidx++; iterations++;\r\n        }\r\n    }\r\n}\r\n\r\ncontract XLEASH is TOKEN {\r\n    constructor()\r\n    TOKEN(\r\n        /* name */             \"Xleash\",\r\n        /* symbol */           \"Xleash\",\r\n        /* decimals */         18,\r\n        /* totalSupply */      10000 * 10000 * (10**18),\r\n        /* tax */              5,\r\n        /* usdt */             0x55d398326f99059fF775485246999027B3197955,\r\n        /* router */           0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n        /* distributeAmount */ 50 * (10**18), // per 50 USDT reward once\r\n        /* xshib */            0x64771885Fa0f6A49ae0e1B925242c3935Dbf6F34,\r\n        /* xshibNFT */         0xA04Be0083E16c1baAB65532cAEb18F2b1D5bC880,\r\n        /* xleashNFT */        0x8E1bC60b67a17964e021dc0a64F6778BBF725511\r\n    )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XLEASH_NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XSHIB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XSHIB_NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_is_LPHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lp_holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardXleashNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardXshibNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"bled\",\"type\":\"bool\"}],\"name\":\"set_bls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"set_enableLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"set_mainpair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"add\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"remove\",\"type\":\"uint256[]\"}],\"name\":\"set_rewardXleashNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"add\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"remove\",\"type\":\"uint256[]\"}],\"name\":\"set_rewardXshibNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax_\",\"type\":\"uint256\"}],\"name\":\"set_tax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtbus\",\"outputs\":[{\"internalType\":\"contract Bank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XLEASH", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4439cb56693678ed17a667ef628684f4f800060b87177686eca2b9996b6f9dad"}