{"SourceCode": "pragma solidity 0.5.16;\r\n\r\n\r\n/*\r\n * InfinityStakeChain Smart contract\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * @dev get smart contract context\r\n */\r\n \r\n \r\ncontract Context {\t\r\n  // prevents deploying context as a stand alone smart contract\r\n  constructor () internal { }\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; \r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\n\r\ninterface InfinityStakeChain20 {\r\n  /**\r\n   * @dev Total token supply\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n  \r\n  \r\n  /**\r\n   * @dev circulating token supply\r\n   */\r\n  function circulatingSupply() external view returns (uint256);\r\n  \r\n  \r\n  /**\r\n   * @dev released token supply\r\n   */\r\n  function releasedSupply() external view returns (uint256);\r\n  \r\n  \r\n  /**\r\n   * @dev reserved token supply\r\n   */\r\n  function reservedSupply() external view returns (uint256);\r\n  \r\n\r\n  /**\r\n   * @dev token decimal value.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n  \r\n  \r\n  /**\r\n   * @dev return incrementor value.\r\n   */\r\n  \r\n  function getCurrentSupply() external returns (uint256) ;\r\n\r\n  /**\r\n   * @dev token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev get token balance on an account\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n    \r\n  \r\n  /**\r\n   * @dev sendable tokens to another account\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n   \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n   \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {   \r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }  \r\n  \r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n  \r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }  \r\n}\r\n\r\ncontract Ownable is Context {\r\n\t\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n   \r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract InfinityStakeChain is Context, InfinityStakeChain20 , Ownable {\r\n\t\r\n\t\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) public _balances;\r\n  \r\n  mapping(address => mapping(address => uint)) allowed;\r\n  \r\n\r\n  address public _contractOwner;\r\n  address private _tokenRecipient;\r\n  uint256 public _totalSupply;\r\n  uint256 public _circulatingSupply;\r\n  uint256 public _releasedSupply;\r\n  uint256 private _amount ;\r\n  uint256[] private _incrementor ;\r\n  uint256 private  _yearCount ;\r\n  uint256 private  _secondsCount;\r\n  uint256 private  _launchDate ;\r\n  uint256 private _currentDate ;\r\n  uint256 private _allowableValue ;\r\n  uint256 public _reserveSupply ;\r\n  uint256 private _reserveUnit ;\r\n  uint256 private _unlockTimestammp;\r\n  uint8 public _decimals;\r\n  string public _symbol;\r\n  string public _name;\r\n  \r\n// modifier tokenSender() {\r\n//     require(_contractOwner != _tokenRecipient , \"caller cannot send coin to self\");\r\n//     _;\r\n//   }\r\n\r\nmodifier spendableToken() {\t\r\n\t\t  \r\n    require( _balances[_contractOwner] - _amount >= _reserveSupply );\r\n    _;\r\n}\r\n  \r\n  // make _unlockTimestammp = 31536000 when you are launching to mainnet\r\n\r\n  constructor() public {\r\n\t\r\n\t_contractOwner = msg.sender; \r\n    _name = \"InfinityStakeChain\";\r\n    _symbol = \"ISC\";\r\n    _decimals = 18 ;\r\n\t_incrementor = [2,4,6,7,8,9,10];\r\n    _totalSupply  =   10000000000000000000000000000000;\r\n\t_reserveUnit =    1000000000000000000000000000000;\r\n\t_releasedSupply = 2000000000000000000000000000000;\r\n\t_reserveSupply =  8000000000000000000000000000000;\r\n\t_yearCount = 0 ;\r\n\t_launchDate = now ;\r\n\t_currentDate = now ;\r\n\t_unlockTimestammp = now ;\t\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n  \r\n\r\n  /**\r\n  * @dev Returns InfinityStakeChain token name.\r\n  */\r\n  \r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n  \r\n    \r\n  /**\r\n   * @dev Returns InfinityStakeChain token symbol.\r\n   */\r\n   \r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the InfinityStakeChain token owner.\r\n   */ \r\n   \r\n  function getCurrentSupply() external returns (uint256) {\t  \r\n\t  \r\n\t   //_currentDate = now.add(31536000) ;\r\n\t  \r\n\t _currentDate = now ;\r\n\t \r\n\t_secondsCount = _currentDate.sub(_launchDate , \"Error !!! cannot subtract now date from lunch date\")  ;\r\n\t\r\n\t_yearCount = _secondsCount.div(31536000) ;\r\n\t\r\n\tif(_yearCount > 6){\r\n        _yearCount = 6;\r\n    }\r\n\t\r\n\t_releasedSupply = _incrementor[_yearCount].mul(_reserveUnit) ;\t\r\n\t\r\n\t_reserveSupply = _totalSupply.sub(_releasedSupply);\r\n\t  \r\n    return _incrementor[_yearCount].mul(_reserveUnit) ;\r\n  }\r\n  \r\n  \r\n\r\n  /**\r\n   * @dev Returns InfinityStakeChain token decimals.\r\n   */\r\n   \r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain20-totalSupply}.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain20-circulatingSupply}.\r\n   */\r\n  function circulatingSupply() external view returns (uint256){\r\n  \r\n     return _circulatingSupply ;\r\n  \r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain20-releasedSupply}.\r\n   */\r\n  function releasedSupply() external view returns (uint256){\r\n  \r\n\treturn _releasedSupply ;\r\n  \r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain20-reservedSupply}.\r\n   */\r\n  function reservedSupply() external view returns (uint256){\r\n   \r\n\treturn _reserveSupply ;\r\n   \r\n  }\r\n   \r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account] ;\r\n  }\r\n\r\n  \r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n      allowed[msg.sender][spender] = tokens;\r\n      emit Approval(msg.sender, spender, tokens);\r\n      return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev See {InfinityStakeChain-transfer. tokens are locked for one year only\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n\t  \r\n\t  _amount = amount ;\r\n\t  \r\n\t  _tokenRecipient = recipient ;\r\n\t  \r\n\t  \t  \r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n\t\r\n  }\r\n\r\n  /**\r\n   * @dev send token from sender to recippient\r\n   */\r\n   \r\n   \r\n  function _transfer(address sender, address recipient, uint256 amount) spendableToken internal {\r\n    require(sender != address(0), \"InfinityStakeChain20: transfer from the zero address\");\r\n    require(recipient != address(0), \"InfinityStakeChain20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, \"InfinityStakeChain20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n\t\r\n\t_circulatingSupply += amount ;\r\n\t\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), allowed[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, allowed[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, allowed[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n   function _approve(address sender, address spender, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    allowed[sender][spender] = amount;\r\n    emit Approval(sender, spender, amount);\r\n  }\r\n\r\n   /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) spendableToken internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n   * from the caller's allowance.\r\n   *\r\n   * See {_burn} and {_approve}.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    _burn(account, amount);\r\n    _approve(account, _msgSender(), allowed[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n  } \r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_releasedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_reserveSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InfinityStakeChain", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://79427e225410d7776b37d36a621b861448c83afec5e8e3d90f3168a43e7a2eb1"}