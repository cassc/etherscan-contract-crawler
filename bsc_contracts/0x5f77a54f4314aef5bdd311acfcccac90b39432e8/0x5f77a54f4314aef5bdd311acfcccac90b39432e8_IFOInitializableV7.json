{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ICaKePool.sol\\\";\\n\\ncontract ICake is Ownable {\\n    using SafeMath for uint256;\\n\\n    ICaKePool public immutable cakePool;\\n\\n    address public admin;\\n    // threshold of locked duration\\n    uint256 public ceiling;\\n\\n    uint256 public constant MIN_CEILING_DURATION = 1 weeks;\\n\\n    event UpdateCeiling(uint256 newCeiling);\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"None admin!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _cakePool: Cake pool contract\\n     * @param _admin: admin of the this contract\\n     * @param _ceiling: the max locked duration which the linear decrease start\\n     */\\n    constructor(\\n        ICaKePool _cakePool,\\n        address _admin,\\n        uint256 _ceiling\\n    ) public {\\n        require(_ceiling >= MIN_CEILING_DURATION, \\\"Invalid ceiling duration\\\");\\n        cakePool = _cakePool;\\n        admin = _admin;\\n        ceiling = _ceiling;\\n    }\\n\\n    /**\\n     * @notice calculate iCake credit per user.\\n     * @param _user: user address.\\n     */\\n    function getUserCredit(address _user) external view returns (uint256) {\\n        require(_user != address(0), \\\"getUserCredit: Invalid address\\\");\\n\\n        ICaKePool.UserInfo memory userInfo = cakePool.userInfo(_user);\\n\\n        if (!userInfo.locked || block.timestamp > userInfo.lockEndTime) {\\n            return 0;\\n        }\\n\\n        // lockEndTime always >= lockStartTime\\n        uint256 lockDuration = userInfo.lockEndTime.sub(userInfo.lockStartTime);\\n\\n        if (lockDuration >= ceiling) {\\n            return userInfo.lockedAmount;\\n        } else if (lockDuration < ceiling && lockDuration >= 0) {\\n            return (userInfo.lockedAmount.mul(lockDuration)).div(ceiling);\\n        }\\n    }\\n\\n    /**\\n     * @notice update ceiling thereshold duration for iCake calculation.\\n     * @param _newCeiling: new threshold duration.\\n     */\\n    function updateCeiling(uint256 _newCeiling) external onlyAdmin {\\n        require(_newCeiling >= MIN_CEILING_DURATION, \\\"updateCeiling: Invalid ceiling\\\");\\n        require(ceiling != _newCeiling, \\\"updateCeiling: Ceiling not changed\\\");\\n        ceiling = _newCeiling;\\n        emit UpdateCeiling(ceiling);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFOInitializableV7.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IIFOV7.sol\\\";\\nimport \\\"./utils/WhiteList.sol\\\";\\nimport \\\"./IPancakeProfile.sol\\\";\\nimport \\\"./ICake.sol\\\";\\n\\n/**\\n * @title IFOInitializableV7\\n */\\ncontract IFOInitializableV7 is IIFOV7, ReentrancyGuard, Whitelist {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Number of pools\\n    uint8 public constant NUMBER_POOLS = 2;\\n\\n    // The address of the smart chef factory\\n    address public immutable IFO_FACTORY;\\n\\n    // Max buffer seconds (for sanity checks)\\n    uint256 public MAX_BUFFER_SECONDS;\\n\\n    // Max pool id (sometimes only public sale exist)\\n    uint8 public MAX_POOL_ID;\\n\\n    // The LP token used\\n    IERC20 public lpToken;\\n\\n    // The offering token\\n    IERC20 public offeringToken;\\n\\n    // PancakeProfile\\n    address public pancakeProfileAddress;\\n\\n    // ICake contract\\n    address public iCakeAddress;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // The timestamp when IFO starts\\n    uint256 public startTimestamp;\\n\\n    // The timestamp when IFO ends\\n    uint256 public endTimestamp;\\n\\n    // The campaignId for the IFO\\n    uint256 public campaignId;\\n\\n    // The number of points distributed to each person who harvest\\n    uint256 public numberPoints;\\n\\n    // The threshold for points (in LP tokens)\\n    uint256 public thresholdPoints;\\n\\n    // Total tokens distributed across the pools\\n    uint256 public totalTokensOffered;\\n\\n    // The minimum point special sale require\\n    uint256 public pointThreshold;\\n\\n    // The contract of the admission profile\\n    address public admissionProfile;\\n\\n    // Array of PoolCharacteristics of size NUMBER_POOLS\\n    PoolCharacteristics[NUMBER_POOLS] private _poolInformation;\\n\\n    // Checks if user has claimed points\\n    mapping(address => bool) private _hasClaimedPoints;\\n\\n    // It maps the address to pool id to UserInfo\\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\\n\\n    // It maps user address to credit used amount\\n    mapping(address => uint256) public userCreditUsed;\\n\\n    // It maps if nft token id was used\\n    mapping(uint256 => address) public tokenIdUsed;\\n\\n    // It maps user address with NFT id\\n    mapping(address => uint256) public userNftTokenId;\\n\\n    // Struct that contains each pool characteristics\\n    struct PoolCharacteristics {\\n        uint256 raisingAmountPool; // amount of tokens raised for the pool (in LP tokens)\\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\\n        uint256 limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\\n        bool hasTax; // tax on the overflow (if any, it works with _calculateTaxOverflow)\\n        uint256 flatTaxRate; // new rate for flat tax\\n        uint256 totalAmountPool; // total amount pool deposited (in LP tokens)\\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\\n        SaleType saleType; // previously bool checking if a sale is special(private), currently uint act as \\\"sale type\\\"\\n        // 0: public sale\\n        // 1: private sale\\n        // 2: basic sale\\n        uint256 vestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\n        uint256 vestingCliff; // Vesting cliff\\n        uint256 vestingDuration; // Vesting duration\\n        uint256 vestingSlicePeriodSeconds; // Vesting slice period seconds\\n    }\\n\\n    // Struct that contains each user information for both pools\\n    struct UserInfo {\\n        uint256 amountPool; // How many tokens the user has provided for pool\\n        bool claimedPool; // Whether the user has claimed (default: false) for pool\\n    }\\n\\n    // vesting startTime, everyone will be started at same timestamp\\n    uint256 public vestingStartTime;\\n\\n    // A flag for vesting is being revoked\\n    bool public vestingRevoked;\\n\\n    // Struct that contains vesting schedule\\n    struct VestingSchedule {\\n        bool isVestingInitialized;\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // pool id\\n        uint8 pid;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens has been released\\n        uint256 released;\\n    }\\n\\n    bytes32[] private vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\n    uint256 private vestingSchedulesTotalAmount;\\n    mapping(address => uint256) private holdersVestingCount;\\n\\n    // Admin withdraw events\\n    event AdminWithdraw(uint256 amountLP, uint256 amountOfferingToken);\\n\\n    // Admin recovers token\\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\\n\\n    // Deposit event\\n    event Deposit(address indexed user, uint256 amount, uint8 indexed pid);\\n\\n    // Harvest event\\n    event Harvest(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\\n\\n    // Create VestingSchedule event\\n    event CreateVestingSchedule(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\\n\\n    // Event for new start & end timestamps\\n    event NewStartAndEndTimestamps(uint256 startTimestamp, uint256 endTimestamp);\\n\\n    // Event with point parameters for IFO\\n    event PointParametersSet(uint256 campaignId, uint256 numberPoints, uint256 thresholdPoints);\\n\\n    // Event when parameters are set for one of the pools\\n    event PoolParametersSet(uint256 offeringAmountPool, uint256 raisingAmountPool, uint8 pid);\\n\\n    // Event when released new amount\\n    event Released(address indexed beneficiary, uint256 amount);\\n\\n    // Event when revoked\\n    event Revoked();\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor() public {\\n        IFO_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice It initializes the contract\\n     * @dev It can only be called once.\\n     * @param _lpToken: the LP token used\\n     * @param _offeringToken: the token that is offered for the IFO\\n     * @param _pancakeProfileAddress: the address of the PancakeProfile\\n     * @param _iCakeAddress: the address of the ICake\\n     * @param _startTimestamp: the start timestamp for the IFO\\n     * @param _endTimestamp: the end timestamp for the IFO\\n     * @param _maxBufferSeconds: maximum buffer of blocks from the current block number\\n     * @param _maxPoolId: maximum id of pools, sometimes only public sale exist\\n     * @param _adminAddress: the admin address for handling tokens\\n     */\\n    function initialize(\\n        address _lpToken,\\n        address _offeringToken,\\n        address _pancakeProfileAddress,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        uint256 _maxBufferSeconds,\\n        uint8 _maxPoolId,\\n        address _adminAddress,\\n        address _iCakeAddress,\\n        uint256 _pointThreshold,\\n        address _admissionProfile\\n    ) public {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        require(msg.sender == IFO_FACTORY, \\\"Not factory\\\");\\n        require(_maxPoolId < NUMBER_POOLS, \\\"Should not larger than NUMBER_POOLS\\\");\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n\\n        lpToken = IERC20(_lpToken);\\n        offeringToken = IERC20(_offeringToken);\\n        if (_pancakeProfileAddress != address(0)) {\\n            IPancakeProfile(_pancakeProfileAddress).getTeamProfile(1);\\n            pancakeProfileAddress = _pancakeProfileAddress;\\n        }\\n        if (_iCakeAddress != address(0)) {\\n            ICake(_iCakeAddress).admin();\\n            iCakeAddress = _iCakeAddress;\\n        }\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n        MAX_BUFFER_SECONDS = _maxBufferSeconds;\\n        MAX_POOL_ID = _maxPoolId;\\n        pointThreshold = _pointThreshold;\\n        admissionProfile = _admissionProfile;\\n\\n        // Transfer ownership to admin\\n        transferOwnership(_adminAddress);\\n    }\\n\\n    /**\\n     * @notice It allows users to deposit LP tokens to pool\\n     * @param _amount: the number of LP token used (18 decimals)\\n     * @param _pid: pool id\\n     */\\n    function depositPool(uint256 _amount, uint8 _pid) external override nonReentrant {\\n        // Checks whether the pool id is valid\\n        require(_pid <= MAX_POOL_ID, \\\"Deposit: Non valid pool id\\\");\\n\\n        if (pancakeProfileAddress != address(0) && _poolInformation[_pid].saleType != SaleType.BASIC) {\\n            // Checks whether the user has an active profile when provided profile SC and not basic sale\\n            require(\\n                IPancakeProfile(pancakeProfileAddress).getUserStatus(msg.sender),\\n                \\\"Deposit: Must have an active profile\\\"\\n            );\\n        }\\n\\n        // Checks that pool was set\\n        require(\\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\\n            \\\"Deposit: Pool not set\\\"\\n        );\\n\\n        // Checks whether the timestamp is not too early\\n        require(block.timestamp > startTimestamp, \\\"Deposit: Too early\\\");\\n\\n        // Checks whether the timestamp is not too late\\n        require(block.timestamp < endTimestamp, \\\"Deposit: Too late\\\");\\n\\n        // Checks that the amount deposited is not inferior to 0\\n        require(_amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        // Verify tokens were deposited properly\\n        require(offeringToken.balanceOf(address(this)) >= totalTokensOffered, \\\"Deposit: Tokens not deposited properly\\\");\\n\\n        if (_poolInformation[_pid].saleType == SaleType.PUBLIC || _poolInformation[_pid].saleType == SaleType.BASIC) {\\n            // public and basic sales\\n            if (iCakeAddress != address(0) && _poolInformation[_pid].saleType != SaleType.BASIC) {\\n                // getUserCredit from ICake contract when it is presented and not basic sales\\n                uint256 ifoCredit = ICake(iCakeAddress).getUserCredit(msg.sender);\\n                require(userCreditUsed[msg.sender].add(_amount) <= ifoCredit, \\\"Not enough IFO credit left\\\");\\n            }\\n\\n            // Transfers funds to this contract\\n            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            // Update the user status\\n            _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\\n\\n            // Check if the pool has a limit per user\\n            if (_poolInformation[_pid].limitPerUserInLP > 0) {\\n                // Checks whether the limit has been reached\\n                require(\\n                    _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInLP,\\n                    \\\"Deposit: New amount above user limit\\\"\\n                );\\n            }\\n\\n            // Updates the totalAmount for pool\\n            _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\\n\\n            // Updates Accumulative deposit lpTokens\\n            userCreditUsed[msg.sender] = userCreditUsed[msg.sender].add(_poolInformation[_pid].saleType == SaleType.PUBLIC ? _amount : 0);\\n\\n            emit Deposit(msg.sender, _amount, _pid);\\n        } else {\\n            // private sales\\n            if (pancakeProfileAddress != address(0)) {\\n                (\\n                    ,\\n                    uint256 profileNumberPoints,\\n                    ,\\n                    address profileAddress,\\n                    uint256 tokenId,\\n                    bool active\\n                ) = IPancakeProfile(pancakeProfileAddress).getUserProfile(msg.sender);\\n\\n                require(active, \\\"profile not active\\\");\\n\\n                // Must meet one of three admission requirement\\n                require(\\n                    _isQualifiedPoints(profileNumberPoints) ||\\n                    isQualifiedWhitelist(msg.sender) ||\\n                    _isQualifiedNFT(msg.sender, profileAddress, tokenId),\\n                    \\\"Deposit: Not meet any one of required conditions\\\"\\n                );\\n            }\\n\\n            // Transfers funds to this contract\\n            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            // Update the user status\\n            _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\\n\\n            // Check if the pool has a limit per user\\n            if (_poolInformation[_pid].limitPerUserInLP > 0) {\\n                // Checks whether the limit has been reached\\n                require(\\n                    _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInLP,\\n                    \\\"Deposit: New amount above user limit\\\"\\n                );\\n            }\\n\\n            // Updates the totalAmount for pool\\n            _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\\n\\n            if (pancakeProfileAddress != address(0)) {\\n                (\\n                    ,\\n                    uint256 profileNumberPoints,\\n                    ,\\n                    address profileAddress,\\n                    uint256 tokenId,\\n\\n                ) = IPancakeProfile(pancakeProfileAddress).getUserProfile(msg.sender);\\n\\n                // Update tokenIdUsed\\n                if (\\n                    !_isQualifiedPoints(profileNumberPoints) &&\\n                !isQualifiedWhitelist(msg.sender) &&\\n                profileAddress == admissionProfile\\n                ) {\\n                    if (tokenIdUsed[tokenId] == address(0)) {\\n                        // update tokenIdUsed\\n                        tokenIdUsed[tokenId] = msg.sender;\\n                    } else {\\n                        require(tokenIdUsed[tokenId] == msg.sender, \\\"Deposit: NFT used by another address already\\\");\\n                    }\\n                    if (userNftTokenId[msg.sender] == 0) {\\n                        // update userNftTokenId\\n                        userNftTokenId[msg.sender] = tokenId;\\n                    } else {\\n                        require(\\n                            userNftTokenId[msg.sender] == tokenId,\\n                            \\\"Deposit: NFT tokenId is not the same as registered\\\"\\n                        );\\n                    }\\n                }\\n            }\\n\\n            emit Deposit(msg.sender, _amount, _pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows users to harvest from pool\\n     * @param _pid: pool id\\n     */\\n    function harvestPool(uint8 _pid) external override nonReentrant {\\n        // Checks whether it is too early to harvest\\n        require(block.timestamp > endTimestamp, \\\"Harvest: Too early\\\");\\n\\n        // Checks whether pool id is valid\\n        require(_pid <= MAX_POOL_ID, \\\"Harvest: Non valid pool id\\\");\\n\\n        // Checks whether the user has participated\\n        require(_userInfo[msg.sender][_pid].amountPool > 0, \\\"Harvest: Did not participate\\\");\\n\\n        // Checks whether the user has already harvested\\n        require(!_userInfo[msg.sender][_pid].claimedPool, \\\"Harvest: Already done\\\");\\n\\n        if (userNftTokenId[msg.sender] != 0) {\\n            (, , , address profileAddress, uint256 tokenId, bool isActive) = IPancakeProfile(pancakeProfileAddress)\\n                .getUserProfile(msg.sender);\\n\\n            require(\\n                isActive && profileAddress == admissionProfile && userNftTokenId[msg.sender] == tokenId,\\n                \\\"Harvest: NFT requirements must be met for harvest\\\"\\n            );\\n        }\\n\\n        // Claim points if possible\\n        _claimPoints(msg.sender);\\n\\n        // Updates the harvest status\\n        _userInfo[msg.sender][_pid].claimedPool = true;\\n\\n        // Updates the vesting startTime\\n        if (vestingStartTime == 0) {\\n            vestingStartTime = block.timestamp;\\n        }\\n\\n        // Initialize the variables for offering, refunding user amounts, and tax amount\\n        (\\n            uint256 offeringTokenAmount,\\n            uint256 refundingTokenAmount,\\n            uint256 userTaxOverflow\\n        ) = _calculateOfferingAndRefundingAmountsPool(msg.sender, _pid);\\n\\n        // Increment the sumTaxesOverflow\\n        if (userTaxOverflow > 0) {\\n            _poolInformation[_pid].sumTaxesOverflow = _poolInformation[_pid].sumTaxesOverflow.add(userTaxOverflow);\\n        }\\n\\n        // Transfer these tokens back to the user if quantity > 0\\n        if (offeringTokenAmount > 0) {\\n            if (100 - _poolInformation[_pid].vestingPercentage > 0) {\\n                uint256 amount = offeringTokenAmount.mul(100 - _poolInformation[_pid].vestingPercentage).div(100);\\n\\n                // Transfer the tokens at TGE\\n                offeringToken.safeTransfer(msg.sender, amount);\\n\\n                emit Harvest(msg.sender, amount, refundingTokenAmount, _pid);\\n            }\\n            // If this pool is Vesting modal, create a VestingSchedule for each user\\n            if (_poolInformation[_pid].vestingPercentage > 0) {\\n                uint256 amount = offeringTokenAmount.mul(_poolInformation[_pid].vestingPercentage).div(100);\\n\\n                // Create VestingSchedule object\\n                _createVestingSchedule(msg.sender, _pid, amount);\\n\\n                emit CreateVestingSchedule(msg.sender, amount, refundingTokenAmount, _pid);\\n            }\\n        }\\n\\n        if (refundingTokenAmount > 0) {\\n            lpToken.safeTransfer(msg.sender, refundingTokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows the admin to withdraw funds\\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\\n     * @param _offerAmount: the number of offering amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external override onlyOwner {\\n        require(_lpAmount <= lpToken.balanceOf(address(this)), \\\"Not enough LP tokens\\\");\\n        require(_offerAmount <= offeringToken.balanceOf(address(this)), \\\"Not enough offering tokens\\\");\\n\\n        if (_lpAmount > 0) {\\n            lpToken.safeTransfer(msg.sender, _lpAmount);\\n        }\\n\\n        if (_offerAmount > 0) {\\n            offeringToken.safeTransfer(msg.sender, _offerAmount);\\n        }\\n\\n        emit AdminWithdraw(_lpAmount, _offerAmount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\n     * @param _tokenAmount: the number of token amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        require(_tokenAddress != address(lpToken), \\\"Recover: Cannot be LP token\\\");\\n        require(_tokenAddress != address(offeringToken), \\\"Recover: Cannot be offering token\\\");\\n\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice It sets parameters for pool\\n     * @param _offeringAmountPool: offering amount (in tokens)\\n     * @param _raisingAmountPool: raising amount (in LP tokens)\\n     * @param _limitPerUserInLP: limit per user (in LP tokens)\\n     * @param _hasTax: if the pool has a tax\\n     * @param _flatTaxRate: flat tax rate\\n     * @param _pid: pool id\\n     * @param _saleType: // previously bool checking if a sale is special(private), currently uint act as \\\"sale type\\\"\\n        // 0: public sale\\n        // 1: private sale\\n        // 2: basic sale\\n     * @param _vestingPercentage: percentage for vesting remain tokens after end IFO\\n     * @param _vestingCliff: cliff of vesting\\n     * @param _vestingDuration: duration of vesting\\n     * @param _vestingSlicePeriodSeconds: slice period seconds of vesting\\n     * @dev This function is only callable by admin.\\n     */\\n    function setPool(\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInLP,\\n        bool _hasTax,\\n        uint256 _flatTaxRate,\\n        uint8 _pid,\\n        SaleType _saleType,\\n        uint256 _vestingPercentage,\\n        uint256 _vestingCliff,\\n        uint256 _vestingDuration,\\n        uint256 _vestingSlicePeriodSeconds\\n    ) external override onlyOwner {\\n        require(block.timestamp < startTimestamp, \\\"IFO has started\\\");\\n        require(_pid <= MAX_POOL_ID, \\\"Pool does not exist\\\");\\n        require(_flatTaxRate < 1e12, \\\"Flat tax rate must be less than 1e12\\\");\\n        require(\\n            _vestingPercentage >= 0 && _vestingPercentage <= 100,\\n            \\\"vesting percentage should exceeds 0 and interior 100\\\"\\n        );\\n        require(_vestingDuration > 0, \\\"duration must exceeds 0\\\");\\n        require(_vestingSlicePeriodSeconds >= 1, \\\"slicePeriodSeconds must be exceeds 1\\\");\\n        require(_vestingSlicePeriodSeconds <= _vestingDuration, \\\"slicePeriodSeconds must be interior duration\\\");\\n\\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\\n        _poolInformation[_pid].raisingAmountPool = _raisingAmountPool;\\n        _poolInformation[_pid].limitPerUserInLP = _limitPerUserInLP;\\n        _poolInformation[_pid].hasTax = _hasTax;\\n        if (!_hasTax) {\\n            require(_flatTaxRate == 0, \\\"hasTax is false, flatTaxRate has to be 0\\\");\\n        }\\n        _poolInformation[_pid].flatTaxRate = _flatTaxRate;\\n        _poolInformation[_pid].saleType = _saleType;\\n        _poolInformation[_pid].vestingPercentage = _vestingPercentage;\\n        _poolInformation[_pid].vestingCliff = _vestingCliff;\\n        _poolInformation[_pid].vestingDuration = _vestingDuration;\\n        _poolInformation[_pid].vestingSlicePeriodSeconds = _vestingSlicePeriodSeconds;\\n\\n        uint256 tokensDistributedAcrossPools;\\n\\n        for (uint8 i = 0; i <= MAX_POOL_ID; i++) {\\n            tokensDistributedAcrossPools = tokensDistributedAcrossPools.add(_poolInformation[i].offeringAmountPool);\\n        }\\n\\n        // Update totalTokensOffered\\n        totalTokensOffered = tokensDistributedAcrossPools;\\n\\n        emit PoolParametersSet(_offeringAmountPool, _raisingAmountPool, _pid);\\n    }\\n\\n    /**\\n     * @notice It updates point parameters for the IFO.\\n     * @param _numberPoints: the number of points for the IFO\\n     * @param _campaignId: the campaignId for the IFO\\n     * @param _thresholdPoints: the amount of LP required to receive points\\n     * @dev This function is only callable by admin.\\n     */\\n    function updatePointParameters(\\n        uint256 _campaignId,\\n        uint256 _numberPoints,\\n        uint256 _thresholdPoints\\n    ) external override onlyOwner {\\n        require(block.timestamp < endTimestamp, \\\"IFO has ended\\\");\\n\\n        numberPoints = _numberPoints;\\n        campaignId = _campaignId;\\n        thresholdPoints = _thresholdPoints;\\n\\n        emit PointParametersSet(campaignId, numberPoints, thresholdPoints);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @param _startTimestamp: the new start timestamp\\n     * @param _endTimestamp: the new end timestamp\\n     * @dev This function is only callable by admin.\\n     */\\n    function updateStartAndEndTimestamps(uint256 _startTimestamp, uint256 _endTimestamp) external onlyOwner {\\n        require(_endTimestamp < (block.timestamp + MAX_BUFFER_SECONDS), \\\"End too far\\\");\\n        require(block.timestamp < startTimestamp, \\\"IFO has started\\\");\\n        require(\\n            _startTimestamp < _endTimestamp,\\n            \\\"New start timestamp must be lower than new end timestamp\\\"\\n        );\\n        require(\\n            block.timestamp < _startTimestamp,\\n            \\\"New start timestamp must be higher than current block timestamp\\\"\\n        );\\n\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n\\n        emit NewStartAndEndTimestamps(_startTimestamp, _endTimestamp);\\n    }\\n\\n    /**\\n     * @notice It returns the pool information\\n     * @param _pid: pool id\\n     * @return raisingAmountPool: amount of LP tokens raised (in LP tokens)\\n     * @return offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)\\n     * @return limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\\n     * @return hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)\\n     * @return flatTaxRate: new rate of flat tax\\n     * @return totalAmountPool: total amount pool deposited (in LP tokens)\\n     * @return sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)\\n     */\\n    function viewPoolInformation(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            SaleType\\n        )\\n    {\\n        return (\\n            _poolInformation[_pid].raisingAmountPool,\\n            _poolInformation[_pid].offeringAmountPool,\\n            _poolInformation[_pid].limitPerUserInLP,\\n            _poolInformation[_pid].hasTax,\\n            _poolInformation[_pid].totalAmountPool,\\n            _poolInformation[_pid].sumTaxesOverflow,\\n            _poolInformation[_pid].saleType\\n        );\\n    }\\n\\n    /**\\n     * @notice It returns the pool vesting information\\n     * @param _pid: pool id\\n     * @return vestingPercentage: the percentage of vesting part, claimingPercentage + vestingPercentage should be 100\\n     * @return vestingCliff: the cliff of vesting\\n     * @return vestingDuration: the duration of vesting\\n     * @return vestingSlicePeriodSeconds: the slice period seconds of vesting\\n     */\\n    function viewPoolVestingInformation(uint256 _pid)\\n    external\\n    view\\n    override\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        return (\\n            _poolInformation[_pid].vestingPercentage,\\n            _poolInformation[_pid].vestingCliff,\\n            _poolInformation[_pid].vestingDuration,\\n            _poolInformation[_pid].vestingSlicePeriodSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice It returns the tax overflow rate calculated for a pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _pid: pool id\\n     * @return It returns the tax percentage\\n     */\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\\n        if (!_poolInformation[_pid].hasTax) {\\n            return 0;\\n        } else {\\n            if (_poolInformation[_pid].flatTaxRate > 0) {\\n                return _poolInformation[_pid].flatTaxRate;\\n            } else {\\n                return\\n                    _calculateTaxOverflow(\\n                    _poolInformation[_pid].totalAmountPool,\\n                    _poolInformation[_pid].raisingAmountPool\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice External view function to see user allocations for both pools\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     * @return\\n     */\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n    {\\n        uint256[] memory allocationPools = new uint256[](_pids.length);\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\\n        }\\n        return allocationPools;\\n    }\\n\\n    /**\\n     * @notice External view function to see user information\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     */\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory, bool[] memory)\\n    {\\n        uint256[] memory amountPools = new uint256[](_pids.length);\\n        bool[] memory statusPools = new bool[](_pids.length);\\n\\n        for (uint8 i = 0; i <= MAX_POOL_ID; i++) {\\n            amountPools[i] = _userInfo[_user][i].amountPool;\\n            statusPools[i] = _userInfo[_user][i].claimedPool;\\n        }\\n        return (amountPools, statusPools);\\n    }\\n\\n    /**\\n     * @notice External view function to see user offering and refunding amounts for both pools\\n     * @param _user: user address\\n     * @param _pids: array of pids\\n     */\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[3][] memory)\\n    {\\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\\n\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            uint256 userOfferingAmountPool;\\n            uint256 userRefundingAmountPool;\\n            uint256 userTaxAmountPool;\\n\\n            if (_poolInformation[_pids[i]].raisingAmountPool > 0) {\\n                (\\n                    userOfferingAmountPool,\\n                    userRefundingAmountPool,\\n                    userTaxAmountPool\\n                ) = _calculateOfferingAndRefundingAmountsPool(_user, _pids[i]);\\n            }\\n\\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\\n        }\\n        return amountPools;\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information of a given holder and index\\n     * @return The vesting schedule object\\n     */\\n    function getVestingScheduleByAddressAndIndex(address _holder, uint256 _index)\\n    external\\n    view\\n    returns (VestingSchedule memory)\\n    {\\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(_holder, _index));\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of vesting schedules\\n     * @return The vesting schedule total amount\\n     */\\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\\n        return vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @notice Release vested amount of offering tokens\\n     * @param _vestingScheduleId the vesting schedule identifier\\n     */\\n    function release(bytes32 _vestingScheduleId) external nonReentrant {\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingScheduleId];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n        bool isOwner = msg.sender == owner();\\n        require(isBeneficiary || isOwner, \\\"only the beneficiary and owner can release vested tokens\\\");\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(vestedAmount > 0, \\\"no vested tokens to release\\\");\\n        vestingSchedule.released = vestingSchedule.released.add(vestedAmount);\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(vestedAmount);\\n        offeringToken.safeTransfer(vestingSchedule.beneficiary, vestedAmount);\\n\\n        emit Released(vestingSchedule.beneficiary, vestedAmount);\\n    }\\n\\n    /**\\n     * @notice Revokes all the vesting schedules\\n     */\\n    function revoke() external onlyOwner {\\n        require(!vestingRevoked, \\\"vesting is revoked\\\");\\n\\n        vestingRevoked = true;\\n\\n        emit Revoked();\\n    }\\n\\n    /**\\n     * @notice Returns the number of vesting schedules managed by the contract\\n     * @return The number of vesting count\\n     */\\n    function getVestingSchedulesCount() public view returns (uint256) {\\n        return vestingSchedulesIds.length;\\n    }\\n\\n    /**\\n     * @notice Returns the vested amount of tokens for the given vesting schedule identifier\\n     * @return The number of vested count\\n     */\\n    function computeReleasableAmount(bytes32 _vestingScheduleId) public view returns (uint256) {\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\n\\n        VestingSchedule memory vestingSchedule = vestingSchedules[_vestingScheduleId];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information of a given identifier\\n     * @return The vesting schedule object\\n     */\\n    function getVestingSchedule(bytes32 _vestingScheduleId) public view returns (VestingSchedule memory) {\\n        return vestingSchedules[_vestingScheduleId];\\n    }\\n\\n    /**\\n     * @notice Returns the amount of offering token that can be withdrawn by the owner\\n     * @return The amount of offering token\\n     */\\n    function getWithdrawableOfferingTokenAmount() public view returns (uint256) {\\n        return offeringToken.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for a given holder address\\n     * @return The id string\\n     */\\n    function computeNextVestingScheduleIdForHolder(address _holder) public view returns (bytes32) {\\n        return computeVestingScheduleIdForAddressAndIndex(_holder, holdersVestingCount[_holder]);\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for an address and an index\\n     * @return The id string\\n     */\\n    function computeVestingScheduleIdForAddressAndIndex(address _holder, uint256 _index) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_holder, _index));\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for an address and an pid\\n     * @return The id string\\n     */\\n    function computeVestingScheduleIdForAddressAndPid(address _holder, uint256 _pid) external view returns (bytes32) {\\n        require(_pid <= MAX_POOL_ID, \\\"ComputeVestingScheduleId: Non valid pool id\\\");\\n        bytes32 vestingScheduleId = computeVestingScheduleIdForAddressAndIndex(_holder, 0);\\n        VestingSchedule memory vestingSchedule = vestingSchedules[vestingScheduleId];\\n        if (vestingSchedule.pid == _pid) {\\n            return vestingScheduleId;\\n        } else {\\n            return computeVestingScheduleIdForAddressAndIndex(_holder, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes the releasable amount of tokens for a vesting schedule\\n     * @return The amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(VestingSchedule memory _vestingSchedule) internal view returns (uint256) {\\n        if (block.timestamp < vestingStartTime + _poolInformation[_vestingSchedule.pid].vestingCliff) {\\n            return 0;\\n        } else if (\\n            block.timestamp >= vestingStartTime.add(_poolInformation[_vestingSchedule.pid].vestingDuration) ||\\n            vestingRevoked\\n        ) {\\n            return _vestingSchedule.amountTotal.sub(_vestingSchedule.released);\\n        } else {\\n            uint256 timeFromStart = block.timestamp.sub(vestingStartTime);\\n            uint256 secondsPerSlice = _poolInformation[_vestingSchedule.pid].vestingSlicePeriodSeconds;\\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\\n            uint256 vestedAmount = _vestingSchedule.amountTotal.mul(vestedSeconds).div(\\n                _poolInformation[_vestingSchedule.pid].vestingDuration\\n            );\\n            vestedAmount = vestedAmount.sub(_vestingSchedule.released);\\n            return vestedAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a new vesting schedule for a beneficiary\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _pid the pool id\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\n     */\\n    function _createVestingSchedule(\\n        address _beneficiary,\\n        uint8 _pid,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            getWithdrawableOfferingTokenAmount() >= _amount,\\n            \\\"can not create vesting schedule with sufficient tokens\\\"\\n        );\\n\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(_beneficiary);\\n        require(vestingSchedules[vestingScheduleId].beneficiary == address(0), \\\"vestingScheduleId is been created\\\");\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(true, _beneficiary, _pid, _amount, 0);\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        holdersVestingCount[_beneficiary]++;\\n    }\\n\\n    /**\\n     * @notice It allows users to claim points\\n     * @param _user: user address\\n     */\\n    function _claimPoints(address _user) internal {\\n        if (pancakeProfileAddress != address(0)) {\\n            if (!_hasClaimedPoints[_user] && numberPoints > 0) {\\n                uint256 sumPools;\\n                for (uint8 i = 0; i <= MAX_POOL_ID; i++) {\\n                    sumPools = sumPools.add(_userInfo[msg.sender][i].amountPool);\\n                }\\n                if (sumPools > thresholdPoints) {\\n                    _hasClaimedPoints[_user] = true;\\n                    // Increase user points\\n                    IPancakeProfile(pancakeProfileAddress).increaseUserPoints(msg.sender, numberPoints, campaignId);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @return It returns the tax percentage\\n     */\\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        uint256 ratioOverflow = _totalAmountPool.div(_raisingAmountPool);\\n        if (ratioOverflow >= 1500) {\\n            return 250000000; // 0.0125%\\n        } else if (ratioOverflow >= 1000) {\\n            return 500000000; // 0.05%\\n        } else if (ratioOverflow >= 500) {\\n            return 1000000000; // 0.1%\\n        } else if (ratioOverflow >= 250) {\\n            return 1250000000; // 0.125%\\n        } else if (ratioOverflow >= 100) {\\n            return 1500000000; // 0.15%\\n        } else if (ratioOverflow >= 50) {\\n            return 2500000000; // 0.25%\\n        } else {\\n            return 5000000000; // 0.5%\\n        }\\n    }\\n\\n    /**\\n     * @notice It calculates the offering amount for a user and the number of LP tokens to transfer back.\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return {uint256, uint256, uint256} It returns the offering amount, the refunding amount (in LP tokens),\\n     * and the tax (if any, else 0)\\n     */\\n    function _calculateOfferingAndRefundingAmountsPool(address _user, uint8 _pid)\\n    internal\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        uint256 userOfferingAmount;\\n        uint256 userRefundingAmount;\\n        uint256 taxAmount;\\n\\n        if (_poolInformation[_pid].totalAmountPool > _poolInformation[_pid].raisingAmountPool) {\\n            // Calculate allocation for the user\\n            uint256 allocation = _getUserAllocationPool(_user, _pid);\\n\\n            // Calculate the offering amount for the user based on the offeringAmount for the pool\\n            userOfferingAmount = _poolInformation[_pid].offeringAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the payAmount\\n            uint256 payAmount = _poolInformation[_pid].raisingAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the pre-tax refunding amount\\n            userRefundingAmount = _userInfo[_user][_pid].amountPool.sub(payAmount);\\n\\n            // Retrieve the tax rate\\n            if (_poolInformation[_pid].hasTax) {\\n                uint256 flatTaxRate = _poolInformation[_pid].flatTaxRate;\\n                if (flatTaxRate > 0) {\\n                    // Calculate the final taxAmount\\n                    taxAmount = userRefundingAmount.mul(flatTaxRate).div(1e12);\\n\\n                    // Adjust the refunding amount\\n                    userRefundingAmount = userRefundingAmount.sub(taxAmount);\\n                } else {\\n                    uint256 taxOverflow = _calculateTaxOverflow(\\n                        _poolInformation[_pid].totalAmountPool,\\n                        _poolInformation[_pid].raisingAmountPool\\n                    );\\n\\n                    // Calculate the final taxAmount\\n                    taxAmount = userRefundingAmount.mul(taxOverflow).div(1e12);\\n\\n                    // Adjust the refunding amount\\n                    userRefundingAmount = userRefundingAmount.sub(taxAmount);\\n                }\\n            }\\n        } else {\\n            userRefundingAmount = 0;\\n            taxAmount = 0;\\n            // _userInfo[_user] / (raisingAmount / offeringAmount)\\n            userOfferingAmount = _userInfo[_user][_pid].amountPool.mul(_poolInformation[_pid].offeringAmountPool).div(\\n                _poolInformation[_pid].raisingAmountPool\\n            );\\n        }\\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\\n    }\\n\\n    /**\\n     * @notice It returns the user allocation for pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return It returns the user's share of pool\\n     */\\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\\n        if (_pid > MAX_POOL_ID) {\\n            return 0;\\n        }\\n\\n        if (_poolInformation[_pid].totalAmountPool > 0) {\\n            return _userInfo[_user][_pid].amountPool.mul(1e18).div(_poolInformation[_pid].totalAmountPool.mul(1e6));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if an address is a contract\\n     */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function isQualifiedWhitelist(address _user) public view returns (bool) {\\n        return isWhitelisted(_user);\\n    }\\n\\n    function isQualifiedPoints(address _user) external view returns (bool) {\\n        if (pancakeProfileAddress == address(0)) {\\n            return true;\\n        }\\n        if (!IPancakeProfile(pancakeProfileAddress).getUserStatus(_user)) {\\n            return false;\\n        }\\n\\n        (, uint256 profileNumberPoints, , , , ) = IPancakeProfile(pancakeProfileAddress).getUserProfile(_user);\\n        return (pointThreshold != 0 && profileNumberPoints >= pointThreshold);\\n    }\\n\\n    function isQualifiedNFT(address _user) external view returns (bool) {\\n        if (pancakeProfileAddress == address(0)) {\\n            return true;\\n        }\\n        if (!IPancakeProfile(pancakeProfileAddress).getUserStatus(_user)) {\\n            return false;\\n        }\\n\\n        (, , , address profileAddress, uint256 tokenId, ) = IPancakeProfile(pancakeProfileAddress).getUserProfile(\\n            _user\\n        );\\n\\n        return (profileAddress == admissionProfile &&\\n            (tokenIdUsed[tokenId] == address(0) || tokenIdUsed[tokenId] == _user));\\n    }\\n    \\n    function _isQualifiedPoints(uint256 profileNumberPoints) internal view returns (bool) {\\n        return (pointThreshold != 0 && profileNumberPoints >= pointThreshold);\\n    }\\n\\n    function _isQualifiedNFT(\\n        address _user,\\n        address profileAddress,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return (profileAddress == admissionProfile &&\\n            (tokenIdUsed[tokenId] == address(0) || tokenIdUsed[tokenId] == _user));\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICaKePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICaKePool {\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 lastDepositedTime;\\n        uint256 cakeAtLastUserAction;\\n        uint256 lastUserActionTime;\\n        uint256 lockStartTime;\\n        uint256 lockEndTime;\\n        uint256 userBoostedShare;\\n        bool locked;\\n        uint256 lockedAmount;\\n    }\\n\\n    function userInfo(address _user) external view returns (UserInfo memory);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IIFOV7.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/** @title IIFOV7.\\n * @notice It is an interface for IFOV7.sol\\n */\\ninterface IIFOV7 {\\n    enum SaleType {\\n        PUBLIC, //0\\n        PRIVATE, //1\\n        BASIC //2\\n    }\\n\\n    function depositPool(uint256 _amount, uint8 _pid) external;\\n\\n    function harvestPool(uint8 _pid) external;\\n\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external;\\n\\n    function setPool(\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInLP,\\n        bool _hasTax,\\n        uint256 _flatTaxRate,\\n        uint8 _pid,\\n        SaleType _saleType,\\n        uint256 _vestingPercentage,\\n        uint256 _vestingCliff,\\n        uint256 _vestingDuration,\\n        uint256 _vestingSlicePeriodSeconds\\n    ) external;\\n\\n    function updatePointParameters(\\n        uint256 _campaignId,\\n        uint256 _numberPoints,\\n        uint256 _thresholdPoints\\n    ) external;\\n\\n    function viewPoolInformation(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            SaleType\\n        );\\n\\n    function viewPoolVestingInformation(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view returns (uint256);\\n\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids) external view returns (uint256[] memory);\\n\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        returns (uint256[] memory, bool[] memory);\\n\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        returns (uint256[3][] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/IPancakeProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title IPancakeProfile\\n */\\ninterface IPancakeProfile {\\n    function getUserProfile(address _userAddress)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256,\\n        bool\\n    );\\n\\n    function getUserStatus(address _userAddress) external view returns (bool);\\n\\n    function getTeamProfile(uint256 _teamId)\\n    external\\n    view\\n    returns (\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        bool\\n    );\\n\\n    function increaseUserPoints(\\n        address _userAddress,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/WhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Whitelist is Ownable {\\n    mapping(address => bool) private whitelist;\\n\\n    event WhitelistedAddressAdded(address indexed _user);\\n    event WhitelistedAddressRemoved(address indexed _user);\\n\\n    /**\\n     * @dev throws if user is not whitelisted.\\n     * @param _user address\\n     */\\n    modifier onlyIfWhitelisted(address _user) {\\n        require(whitelist[_user]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev add single address to whitelist\\n     */\\n    function addAddressToWhitelist(address _user) external onlyOwner {\\n        whitelist[_user] = true;\\n        emit WhitelistedAddressAdded(_user);\\n    }\\n\\n    /**\\n     * @dev add addresses to whitelist\\n     */\\n    function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = true;\\n            emit WhitelistedAddressAdded(_users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev remove single address from whitelist\\n     */\\n    function removeAddressFromWhitelist(address _user) external onlyOwner {\\n        whitelist[_user] = false;\\n        emit WhitelistedAddressRemoved(_user);\\n    }\\n\\n    /**\\n     * @dev remove addresses from whitelist\\n     */\\n    function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = false;\\n            emit WhitelistedAddressRemoved(_users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev getter to determine if address is in whitelist\\n     */\\n    function isWhitelisted(address _user) public view returns (bool) {\\n        return whitelist[_user];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfferingToken\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"CreateVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndTimestamps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"PointParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmountPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raisingAmountPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"PoolParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IFO_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUFFER_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_POOL_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admissionProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndPid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"depositPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"}],\"name\":\"finalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IFOInitializableV7.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IFOInitializableV7.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableOfferingTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"harvestPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iCakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offeringToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeProfileAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxPoolId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iCakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pointThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admissionProfile\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedPoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeringToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeProfileAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offeringAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raisingAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerUserInLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_flatTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"enum IIFOV7.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingSlicePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdUsed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensOffered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"updatePointParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCreditUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNftTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IIFOV7.SaleType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolTaxRateOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolVestingInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserAllocationPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserOfferingAndRefundingAmountsForPools\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IFOInitializableV7", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}