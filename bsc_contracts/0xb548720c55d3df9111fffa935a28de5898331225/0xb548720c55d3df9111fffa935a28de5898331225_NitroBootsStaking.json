{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NitroBootsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./StakingModel.sol\\\";\\nimport \\\"./StaticStaking.sol\\\";\\n\\nstruct StakingData {\\n    address owner_address;\\n    address staking_address;\\n    address token_stake;\\n    address token_reward;\\n}\\n\\nstruct NitroStatistic {\\n    bool tax_mode;\\n    uint256 tax_value;\\n}\\n\\ncontract NitroBootsStaking is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n\\n    mapping(address => bool) private blacklistUsersList;\\n\\n    StakingData[] public ALL_STAKING_POOLS;\\n\\n    mapping(address => StakingData[]) public staticStakeList;\\n    //a mapping to determine which contract has access to write data to this contract\\n    //used in the modifier below\\n    mapping(address => bool) accessAllowed;\\n    //set an address to the accessAllowed map and set bool to true\\n    //uses the isAllowed function modifier to determine if user can change data\\n    //this function controls which addresses can write data to the contract\\n    //if you update the UserContract you would add the new address here\\n    function allowAccess(address[] memory _addresses) public onlyOwner {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            accessAllowed[_addresses[i]] = true;\\n        }\\n    }\\n    //tax\\n    uint256 TAX_VALUE = 0;\\n    bool TAX_MODE = false;\\n    address TAX_WALLET;\\n\\n\\n    constructor()  {\\n        accessAllowed[msg.sender] = true;\\n    }\\n\\n    function denyAccess(address _address) public onlyOwner {\\n        accessAllowed[_address] = false;\\n        blacklistUsersList[_address]=true;\\n    }\\n\\n    function updateTax(uint256 tax_in_eth) public onlyOwner returns (bool){\\n        TAX_VALUE = tax_in_eth * 10** 18;\\n    }\\n    function updateTaxMode(bool status) public onlyOwner returns (bool){\\n        TAX_MODE = status;\\n    }\\n    function updateTaxWallet(address _wallet) public onlyOwner returns (bool){\\n        TAX_WALLET = _wallet;\\n    }\\n\\n    // Modifier to check token allowance\\n    modifier checkAllowance(address _tokenAddress, uint256 _tokenDecimals, uint256 amount) {\\n        require(IERC20(_tokenAddress).allowance(msg.sender, address(this)) >= amount * 10** _tokenDecimals, \\\"Need to approve token Error\\\");\\n        _;\\n    }\\n\\n    function newStaticStaking( address _token_tobe_staked,\\n        uint8 _token_tobe_stake_decimals,\\n        address _token_tobe_bonus_address,\\n        uint8 _token_tobe_bonus_decimal,\\n        uint256 _start_time,\\n        uint256 _end_time,\\n        uint256 _stake_lock_in_days,\\n        uint256 _total_rewards) checkAllowance(_token_tobe_bonus_address, _token_tobe_bonus_decimal, _total_rewards) payable public\\n    {\\n        require(\\n            !blacklistUsersList[msg.sender],\\n            \\\"Blocked wallet\\\"\\n        );\\n        \\n        require(\\n            _total_rewards > 0,\\n            \\\"Wrong amount wallet\\\"\\n        );\\n        if(TAX_MODE){\\n            require(msg.value >= TAX_VALUE, \\\"Invalid tax amount!\\\");\\n            payable(TAX_WALLET).transfer(TAX_VALUE);\\n        }\\n\\n        StaticStaking staking = new StaticStaking(_token_tobe_staked,_token_tobe_stake_decimals,_token_tobe_bonus_address,_token_tobe_bonus_decimal,_start_time,_end_time,_stake_lock_in_days,_total_rewards, msg.sender\\n        );\\n        IERC20(_token_tobe_bonus_address).transferFrom(msg.sender, address(staking), _total_rewards * 10** _token_tobe_bonus_decimal);\\n        StakingData memory staking_data = StakingData({\\n            owner_address: msg.sender,\\n            staking_address: address(staking),\\n            token_stake: _token_tobe_staked,\\n            token_reward: _token_tobe_bonus_address\\n        });\\n        \\n        StakingData[] storage currentUserStaking = staticStakeList[msg.sender];\\n        currentUserStaking.push(staking_data);\\n        staticStakeList[msg.sender] = currentUserStaking;\\n\\n        ALL_STAKING_POOLS.push(staking_data);\\n        \\n    }\\n    function getStaticStaking() public view returns(NitroStatistic memory)\\n    {\\n        NitroStatistic memory data = NitroStatistic({\\n            tax_mode: TAX_MODE,\\n            tax_value: TAX_VALUE\\n        });\\n        return data;\\n    }\\n    function getUsersStakingPools() public view returns (StakingData[] memory){\\n        return staticStakeList[msg.sender];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/StakingModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n\\nstruct StakingConfig {        \\n    \\n        bool INITIALIZED;\\n\\n        address TOKEN_TOBE_STAKED_ADDRESS;\\n        uint8 TOKEN_TOBE_STAKED_DECIMALS;\\n\\n        address TOKEN_TOBE_BONUS;\\n        uint8 TOKEN_TOBE_BONUS_DECIMAL;\\n        uint256 CLAIMED_TOKEN_AMOUNT;\\n\\n        uint256 START_TIME;\\n        uint256 END_TIME;\\n\\n        uint256 STAKE_LOCK_IN_DAYS;\\n\\n        uint256 CURRENT_STAKE_POOL_SIZE;\\n\\n        address POOL_OWNER;\\n\\n        uint256 TOTAL_REWARD;        \\n}\\n\\n\\nstruct UserInfo {\\n    address user_address;\\n    uint256 available_amount;\\n    uint256 latest_deposited_time;\\n    uint256 available_to_withdraw_time;\\n    DepositTransaction[] deposit_transactions;\\n\\n    WithdrawTransaction[] withdraw_transactions;\\n\\n    ClaimRewardTransaction[] claim_transactions;\\n    uint256 latest_snapshot_time;\\n\\n    uint256 token_claimed_amount;\\n    uint256 token_claimed_time;\\n    uint256 token_to_claim_amount;\\n    uint256 token_bonus_from_last_claim;\\n\\n\\n}\\n\\nstruct DepositTransaction {\\n    address user_address;\\n    uint256 amount;\\n    uint256 deposit_time;\\n}\\n\\nstruct WithdrawTransaction {\\n    address user_address;\\n    uint256 amount;\\n    uint256 time;\\n}\\n\\nstruct ClaimRewardTransaction {\\n    address user_address;\\n    uint256 amount;\\n    uint256 time;\\n}\\n\\nstruct Statistic {\\n    uint256 user_count;\\n    uint256 total_deposited;\\n    uint256 claimed_token_amount;\\n    uint256 total_reward;\\n}\"\r\n    },\r\n    \"contracts/StaticStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./StakingModel.sol\\\";\\n\\ncontract StaticStaking is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n    event Deposit(address indexed addr,  uint256 deposit_amount);\\n    event ClaimToken(address indexed addr,  uint256 token_claimed);\\n\\n\\n    StakingConfig config;\\n    mapping(address => UserInfo) users;\\n    address[] private usersList;\\n    uint256 public constant TOTAL_SECOND_IN_YEAR = 22896000; \\n    mapping(address => bool) private blacklistUsersList;\\n\\n    //a mapping to determine which contract has access to write data to this contract\\n    //used in the modifier below\\n    mapping(address => bool) accessAllowed;\\n    //function modifier checks to see if an address has permission to update data\\n    //bool has to be true\\n    modifier isAllowed() {\\n        require(accessAllowed[msg.sender] == true);\\n        _;\\n    }\\n\\n    //set an address to the accessAllowed map and set bool to true\\n    //uses the isAllowed function modifier to determine if user can change data\\n    //this function controls which addresses can write data to the contract\\n    //if you update the UserContract you would add the new address here\\n    function allowAccess(address[] memory _addresses) public onlyOwner {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            accessAllowed[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function denyAccess(address _address) public onlyOwner {\\n        accessAllowed[_address] = false;\\n        blacklistUsersList[_address]=true;\\n    }\\n\\n    constructor( address _token_tobe_staked,\\n        uint8 _token_tobe_stake_decimals,\\n        address _token_tobe_bonus_address,\\n        uint8 _token_tobe_bonus_decimal,\\n        uint256 _start_time,\\n        uint256 _end_time,\\n        uint256 _stake_lock_in_days,\\n        uint256 _total_rewards,\\n        address _pool_owner_address)  {\\n\\n        accessAllowed[_pool_owner_address] = true;\\n        config.INITIALIZED = true;\\n        config.TOKEN_TOBE_STAKED_ADDRESS= _token_tobe_staked;\\n        config.TOKEN_TOBE_STAKED_DECIMALS=_token_tobe_stake_decimals;\\n        config.TOKEN_TOBE_BONUS = _token_tobe_bonus_address;\\n        config.TOKEN_TOBE_BONUS_DECIMAL=_token_tobe_bonus_decimal;\\n        config.START_TIME = _start_time;\\n        config.END_TIME = _end_time;\\n        config.STAKE_LOCK_IN_DAYS = _stake_lock_in_days;\\n        config.POOL_OWNER = _pool_owner_address;\\n        config.TOTAL_REWARD = _total_rewards;\\n        /*\\n        IERC20(_token_tobe_bonus_address).transferFrom(msg.sender, address(this), _total_rewards * 10** config.TOKEN_TOBE_BONUS_DECIMAL);\\n        */\\n    }\\n    \\n    function setup_blacklist(address[] memory addressList) public onlyOwner returns (bool){\\n        for (uint256 i = 0; i < addressList.length; i++) {\\n            blacklistUsersList[addressList[i]]=true;\\n        }\\n        return true;\\n    }\\n\\n    function setup(\\n        address _token_tobe_staked,\\n        uint8 _token_tobe_stake_decimals,\\n        uint256 _total_rewards,\\n        address _token_tobe_bonus_address,\\n        uint8 _token_tobe_bonus_decimal,\\n        uint256 _start_time,\\n        uint256 _end_time,\\n        uint256 _stake_lock_in_days,\\n        address _pool_owner_address\\n    ) public isAllowed returns (bool) {\\n        config.INITIALIZED = true;\\n        config.TOKEN_TOBE_STAKED_ADDRESS= _token_tobe_staked;\\n        config.TOKEN_TOBE_STAKED_DECIMALS=_token_tobe_stake_decimals;\\n        config.TOKEN_TOBE_BONUS = _token_tobe_bonus_address;\\n        config.TOKEN_TOBE_BONUS_DECIMAL=_token_tobe_bonus_decimal;\\n        config.START_TIME = _start_time;\\n        config.END_TIME = _end_time;\\n        config.STAKE_LOCK_IN_DAYS = _stake_lock_in_days;\\n        config.POOL_OWNER = _pool_owner_address;\\n        config.TOTAL_REWARD = _total_rewards;\\n        return true;\\n    }\\n\\n\\n    function setup_stake_info(\\n        uint256 _start_time,\\n        uint256 _end_time,\\n        uint256 _total_rewards\\n    ) public isAllowed returns (bool) {\\n        config.START_TIME = _start_time;\\n        config.END_TIME = _end_time;\\n        config.TOTAL_REWARD = _total_rewards;\\n        return true;\\n    }\\n\\n    function get_config() public view returns (StakingConfig memory) {\\n        return config;\\n    }\\n    // Modifier to check token allowance\\n    modifier checkAllowance(uint amount) {\\n        require(IERC20(config.TOKEN_TOBE_BONUS).allowance(msg.sender, address(this)) >= amount * 10** config.TOKEN_TOBE_BONUS_DECIMAL, \\\"Need to approve token Error\\\");\\n        _;\\n    }\\n    function deposit(uint256 amount) checkAllowance(amount) public payable returns (bool) {\\n        /**\\n        * Snapshot current balance if any, add into the AVAILABLE TO CLAIM balance\\n        * Set latest time to NOW\\n        */\\n        require(amount > 0, \\\"WRONG AMOUNT\\\");\\n        require(\\n            config.INITIALIZED == true,\\n            \\\"This smartcontract hasn't been initialized\\\"\\n        );\\n\\n        require(\\n            block.timestamp >= config.START_TIME,\\n            \\\"The deposit time has not started yet!\\\"\\n        );\\n\\n        require(\\n            block.timestamp <= config.END_TIME,\\n            \\\"The deposit time has ended!\\\"\\n        );\\n        //ask user to send token to SC\\n        IERC20(config.TOKEN_TOBE_STAKED_ADDRESS).transferFrom(msg.sender, address(this), amount);\\n        DepositTransaction memory deposit_transaction = DepositTransaction({\\n            user_address: msg.sender,\\n            amount: amount,\\n            deposit_time: block.timestamp\\n        });\\n        //update config\\n        config.CURRENT_STAKE_POOL_SIZE += amount;\\n        //Done record\\n        UserInfo storage user = users[msg.sender];\\n        //Increase the user counter if this user has never depositted before\\n        if (user.available_amount == 0) {\\n            // Add user to list\\n            user.user_address = msg.sender; // Assign the address\\n            user.latest_snapshot_time = block.timestamp;\\n            usersList.push(msg.sender);\\n        }else{\\n            //snapshot the user reward\\n            snapshot_user_reward(msg.sender);\\n            //has a deposited\\n            uint256 currentBonus = this.calculate_token_per_user(msg.sender);\\n            user.token_to_claim_amount = currentBonus;\\n        }\\n\\n        user.available_to_withdraw_time = block.timestamp + config.STAKE_LOCK_IN_DAYS.mul(24).mul(60).mul(60);\\n        user.latest_deposited_time = block.timestamp;\\n        user.deposit_transactions.push(deposit_transaction);\\n        user.available_amount += amount;\\n\\n        emit Deposit(msg.sender, msg.value);\\n        \\n        return true;\\n        \\n        \\n    }\\n    function calculate_token_by_second() public view returns (uint256){\\n        uint256 totalSecond = config.END_TIME - config.START_TIME;\\n        return config.TOTAL_REWARD.mul(10** config.TOKEN_TOBE_BONUS_DECIMAL).div(totalSecond);\\n    }\\n    function calculate_token_by_second_per_amount(uint256 depositedAmount) public view returns (uint256){\\n        uint256 tokenBonusPerSecond = this.calculate_token_by_second();\\n        return depositedAmount.mul(tokenBonusPerSecond).div(config.CURRENT_STAKE_POOL_SIZE);\\n    }\\n    function calculate_token_per_user(address user_address) public view returns (uint256){\\n        UserInfo storage user = users[user_address];\\n        uint256 totalSecondFromLastDeposited = block.timestamp - user.latest_snapshot_time;\\n        uint256 bonusPerSecond = this.calculate_token_by_second_per_amount(user.available_amount);\\n        return totalSecondFromLastDeposited.mul(bonusPerSecond);\\n    }\\n\\n    function snapshot_user_reward(address user_address) private returns (bool) {\\n        UserInfo storage user = users[user_address];\\n        if(user.latest_snapshot_time > 0){\\n            uint256 totalSecondFromLastDeposited = block.timestamp - user.latest_snapshot_time;\\n            uint256 bonusPerSecond = this.calculate_token_by_second_per_amount(user.available_amount);\\n            uint256 currentRewardAmount = totalSecondFromLastDeposited.mul(bonusPerSecond);\\n            user.token_to_claim_amount = currentRewardAmount;\\n            user.latest_snapshot_time = block.timestamp;\\n        }else{\\n            user.token_to_claim_amount = 0;\\n            user.latest_snapshot_time = block.timestamp;\\n        }\\n        return true;\\n    }\\n    \\n\\n    function check_user_deposit() public view returns (UserInfo memory) {\\n        return users[msg.sender];\\n    }\\n\\n\\n    function claim_tokens() public returns (bool) {\\n        require(\\n            config.INITIALIZED == true,\\n            \\\"This smartcontract hasn't been initialized\\\"\\n        );\\n        \\n        require(!blacklistUsersList[msg.sender], \\\"Blacklist address\\\");\\n\\n        \\n        UserInfo storage user = users[msg.sender];\\n        require(\\n            user.available_amount > 0,\\n            \\\"There is no record of a deposit from the user!\\\"\\n        );\\n        uint256 currentBonus = this.calculate_token_per_user(msg.sender);\\n        uint256 finalTokenToClaim = user.token_to_claim_amount + currentBonus;\\n        user.token_to_claim_amount = 0;\\n        user.token_bonus_from_last_claim = 0;\\n        user.token_claimed_time = block.timestamp;\\n        user.token_claimed_amount += finalTokenToClaim;\\n        user.latest_snapshot_time = block.timestamp;\\n\\n        user.latest_snapshot_time = block.timestamp;\\n        //update the withdraw history\\n        ClaimRewardTransaction memory claim_transaction = ClaimRewardTransaction({\\n            user_address: msg.sender,\\n            amount: finalTokenToClaim,\\n            time: block.timestamp\\n        });\\n        user.claim_transactions.push(claim_transaction);\\n        config.CLAIMED_TOKEN_AMOUNT += finalTokenToClaim;\\n\\n        IERC20(config.TOKEN_TOBE_BONUS).transfer(address(msg.sender),finalTokenToClaim);\\n\\n        emit ClaimToken(msg.sender, finalTokenToClaim);\\n\\n        return true;\\n    }\\n\\n    function _get_user_info(address user_address) public view returns (UserInfo memory) {\\n        UserInfo memory user = users[user_address];\\n        user.token_bonus_from_last_claim = this.calculate_token_per_user(user_address);\\n        return user;\\n\\n    }\\n\\n    function get_user_info() public view returns (UserInfo memory) {\\n        return this._get_user_info(msg.sender);\\n    }\\n\\n    function get_statistic() public view returns (Statistic memory) {\\n        return\\n            Statistic({\\n                user_count: usersList.length,\\n                total_deposited: config.CURRENT_STAKE_POOL_SIZE,\\n                claimed_token_amount: config.CLAIMED_TOKEN_AMOUNT,\\n                total_reward: config.TOTAL_REWARD\\n            });\\n    }\\n\\n    function validate_user_balance(address user_address) public returns (bool) {\\n        uint256 deposited_balance = 0;\\n        uint256 withdraw_balance = 0;\\n        UserInfo memory user = users[msg.sender];\\n\\n        //calculate the deposited items\\n        for (uint256 i = 0; i < user.deposit_transactions.length; i++) {\\n            // minting_tokenURIs[i] = tokenURIs[senpadConfig.claimed_count + i]; \\n            DepositTransaction memory deposit_record = user.deposit_transactions[i];\\n            deposited_balance += deposit_record.amount;\\n        }\\n        //calculate the withdraw items\\n        for (uint256 i = 0; i < user.withdraw_transactions.length; i++) {\\n            // minting_tokenURIs[i] = tokenURIs[senpadConfig.claimed_count + i]; \\n            WithdrawTransaction memory withdraw_record = user.withdraw_transactions[i];\\n            withdraw_balance += withdraw_record.amount;\\n        }\\n        return (deposited_balance - withdraw_balance) == user.available_amount;\\n        \\n    }\\n\\n    function withdraw_staking_amount(uint256 amount) public returns (bool) {\\n        \\n        require(!blacklistUsersList[msg.sender], \\\"Blacklist address\\\");\\n        require(\\n            amount > 0,\\n            \\\"Locked! Only can withdraw after LOCKED time\\\"\\n        );\\n        UserInfo storage user = users[msg.sender];\\n        require(\\n            user.available_to_withdraw_time <= block.timestamp,\\n            \\\"Locked! Only can withdraw after LOCKED time\\\"\\n        );\\n        require(\\n            user.available_amount >= amount,\\n            \\\"Wrong Users Balance\\\"\\n        );\\n        //require validate balance calculation\\n        bool isValidBalance = this.validate_user_balance(msg.sender);\\n        require(isValidBalance, \\\"WRONG stake balance\\\");\\n        //transfer back the reward\\n        uint256 withdrawAmountInWei = amount;\\n        uint256 currentBalance = IERC20(config.TOKEN_TOBE_STAKED_ADDRESS).balanceOf(address(this));\\n        require(\\n            withdrawAmountInWei <= currentBalance,\\n            \\\"Wrong withdraw amount\\\"\\n        );\\n        //snapshot the user reward\\n        snapshot_user_reward(msg.sender);\\n        //add to user withdraw\\n         //update the withdraw history\\n        WithdrawTransaction memory withdraw_transaction = WithdrawTransaction({\\n            user_address: msg.sender,\\n            amount: amount,\\n            time: block.timestamp\\n        });\\n        user.withdraw_transactions.push(withdraw_transaction);\\n        //update user available balance\\n        user.available_amount = user.available_amount - amount;\\n        //send back the farming amount to user\\n        IERC20(config.TOKEN_TOBE_STAKED_ADDRESS).transfer(address(msg.sender), withdrawAmountInWei);\\n    }\\n    \\n\\n    function withdraw_token_to_cash_wallet() public isAllowed payable {\\n        uint256 currentBalance = IERC20(config.TOKEN_TOBE_BONUS).balanceOf(address(this));\\n        IERC20(config.TOKEN_TOBE_BONUS).transfer(address(msg.sender), currentBalance);\\n    }\\n    \\n\\n    function get_user_lists() public view isAllowed returns (UserInfo[] memory){\\n        uint256 user_count  = usersList.length;\\n        UserInfo[] memory users_info_list = new UserInfo[](user_count);\\n        for (uint256 i = 0; i < usersList.length; i++) {\\n            // minting_tokenURIs[i] = tokenURIs[senpadConfig.claimed_count + i]; \\n            address user_addr = usersList[i];\\n            UserInfo memory userinfo = users[user_addr];\\n            users_info_list[i]=userinfo;\\n        }\\n        return users_info_list;\\n\\n    }\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ALL_STAKING_POOLS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_reward\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"allowAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"denyAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticStaking\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"tax_mode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tax_value\",\"type\":\"uint256\"}],\"internalType\":\"struct NitroStatistic\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersStakingPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_reward\",\"type\":\"address\"}],\"internalType\":\"struct StakingData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_tobe_staked\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_token_tobe_stake_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token_tobe_bonus_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_token_tobe_bonus_decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stake_lock_in_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_rewards\",\"type\":\"uint256\"}],\"name\":\"newStaticStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staticStakeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_reward\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax_in_eth\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateTaxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NitroBootsStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}