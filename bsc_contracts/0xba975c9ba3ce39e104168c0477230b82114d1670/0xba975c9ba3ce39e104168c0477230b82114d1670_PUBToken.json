{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PUBToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\ncontract PUBToken is Ownable {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n    uint256 decimalfactor;\\n    uint256 public Max_Token;\\n\\n    uint64 public burnPercent = 1000; // 10 %\\n    uint64 public burnExtra = 1000;\\n    uint64 public mintWalletBurnPercentage = 50;\\n    uint128 public dailyMaxTransc = 100000000;\\n    bool mintAllowed = true;\\n    uint256 burnTime;\\n    address public mintWallet = 0x1db1d33b9965d4A3225A3A6c48Aeeac703Fb008a;\\n    address public otherWallet = 0xd34AdaF170fA04840604990B3e7C37530745f494;\\n\\n    uint64 public maxPercentage = 200; // percentage for cheking user transaction amount\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => bool) public excludeUser;\\n    mapping(uint64 => uint64) transactionsPerDay;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    constructor(\\n        string memory SYMBOL,\\n        string memory NAME,\\n        uint8 DECIMALS\\n    ) {\\n        symbol = SYMBOL;\\n        name = NAME;\\n        decimals = DECIMALS;\\n        decimalfactor = 10**uint256(decimals);\\n        Max_Token = 1_11_111 * decimalfactor;\\n        mint(mintWallet, ((70*Max_Token)/100));\\n        mint(otherWallet, ((30*Max_Token)/100));\\n        burnTime = block.timestamp;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        uint256 dayValue = 1 days;\\n        uint256 chekAmount = (maxPercentage * Max_Token) / 10000;\\n        uint64 completeTime = uint64((block.timestamp / dayValue) * dayValue);\\n        uint256 previousBalances;\\n\\n        require(\\n            transactionsPerDay[completeTime] < dailyMaxTransc,\\n            \\\"per day transactions limit reached\\\"\\n        );\\n        require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(\\n            balanceOf[_from] >= _value,\\n            \\\"ERC20: 'from' address balance is low\\\"\\n        );\\n        require(\\n            balanceOf[_to] + _value >= balanceOf[_to],\\n            \\\"ERC20: Value is negative\\\"\\n        );\\n\\n        uint256 burnValue;\\n        if (excludeUser[msg.sender]) {\\n            balanceOf[_from] -= _value;\\n            balanceOf[_to] += _value;\\n        } else {\\n            if (_value <= chekAmount) {\\n                burnValue = (burnPercent * _value) / 10000;\\n            } else {\\n                burnValue = (burnExtra * _value) / 10000;\\n            }\\n\\n            previousBalances = balanceOf[_from] + balanceOf[_to];\\n            balanceOf[_from] -= _value;\\n            balanceOf[_to] += _value - (burnValue);\\n            totalSupply -= burnValue;\\n            mintAllowed = true;\\n            emit Transfer(msg.sender, address(0), burnValue);\\n        }\\n\\n        ++transactionsPerDay[completeTime];\\n        burnWallet();\\n        emit Transfer(_from, _to, (_value - (burnValue)));\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public virtual returns (bool success) {\\n        require(\\n            _value <= allowance[_from][msg.sender],\\n            \\\"ERC20: Allowance error\\\"\\n        );\\n        allowance[_from][msg.sender] -= _value;\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        public\\n        returns (bool success)\\n    {\\n        allowance[msg.sender][spender] = value;\\n        burnWallet();\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function burnWallet() internal {\\n        uint256 oneDay = 1 days;\\n        uint256 counter = (block.timestamp - burnTime) / oneDay;\\n        if (balanceOf[mintWallet] > 0 && counter > 0) {\\n            uint256 burnValue = (counter *\\n                mintWalletBurnPercentage *\\n                balanceOf[mintWallet]) / 10000; // 0.5%\\n            if (burnValue > 0) {\\n                balanceOf[mintWallet] -= burnValue;\\n                totalSupply -= burnValue;\\n                mintAllowed = true;\\n                burnTime = burnTime + (counter * oneDay);\\n                emit Transfer(mintWallet, address(0), burnValue);\\n            }\\n        }\\n    }\\n\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(\\n            balanceOf[msg.sender] >= _value,\\n            \\\"ERC20: Transfer amount exceeds user balance\\\"\\n        );\\n\\n        balanceOf[msg.sender] -= _value;\\n        totalSupply -= _value;\\n\\n        mintAllowed = true;\\n\\n        emit Transfer(msg.sender, address(0), _value);\\n        return true;\\n    }\\n\\n    function mint(address to, uint256 value) public returns (bool success) {\\n        require(\\n            Max_Token >= (totalSupply + value),\\n            \\\"ERC20: Max Token limit exceeds\\\"\\n        );\\n        require(mintAllowed, \\\"ERC20: Max supply reached\\\");\\n\\n        if (Max_Token == (totalSupply + value)) {\\n            mintAllowed = false;\\n        }\\n\\n        require(msg.sender == owner, \\\"ERC20: Only Owner Can Mint\\\");\\n\\n        balanceOf[to] += value;\\n        totalSupply += value;\\n\\n        require(\\n            balanceOf[to] >= value,\\n            \\\"ERC20: Transfer amount cannot be negative\\\"\\n        );\\n\\n        emit Transfer(address(0), to, value);\\n        return true;\\n    }\\n\\n    //   ****************************************        Setter Functions           *********************************************\\n\\n    function excludeAddressFromFee(address _user, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        burnWallet();\\n        excludeUser[_user] = _status;\\n    }\\n\\n    function updateDailyMaxTrans(uint128 _transc) external onlyOwner {\\n        burnWallet();\\n        dailyMaxTransc = _transc;\\n    }\\n\\n    function UpdateBurnPercent(uint64 _percent) external onlyOwner {\\n        burnWallet();\\n        burnPercent = _percent;\\n    }\\n\\n    function updateBurnExtra(uint64 _burnExtra) external onlyOwner {\\n        burnWallet();\\n        burnExtra = _burnExtra;\\n    }\\n\\n    function updateMintWalletBurnPercentage(uint64 _mintWalletBurnPercentage)\\n        external\\n        onlyOwner\\n    {\\n        burnWallet();\\n        mintWalletBurnPercentage = _mintWalletBurnPercentage;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"SYMBOL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"NAME\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"DECIMALS\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Max_Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_percent\",\"type\":\"uint64\"}],\"name\":\"UpdateBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnExtra\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyMaxTransc\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"excludeAddressFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercentage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintWalletBurnPercentage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_burnExtra\",\"type\":\"uint64\"}],\"name\":\"updateBurnExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_transc\",\"type\":\"uint128\"}],\"name\":\"updateDailyMaxTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_mintWalletBurnPercentage\",\"type\":\"uint64\"}],\"name\":\"updateMintWalletBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PUBToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000055055423330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000750554220332e3000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}