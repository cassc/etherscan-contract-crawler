{"SourceCode": "{\"1_Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @title Storage\\n * @dev Store \\u0026 retrieve value in a variable\\n */\\ncontract Storage {\\n\\n    uint256 number;\\n\\n    /**\\n     * @dev Store value in variable\\n     * @param num value to store\\n     */\\n    function store(uint256 num) public {\\n        number = num;\\n    }\\n\\n    /**\\n     * @dev Return value \\n     * @return value of \\u0027number\\u0027\\n     */\\n    function retrieve() public view returns (uint256){\\n        return number;\\n    }\\n}\"},\"2_Owner.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Owner {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier isOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public isOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"},\"3_Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/** \\n * @title Ballot\\n * @dev Implements voting process along with vote delegation\\n */\\ncontract Ballot {\\n   \\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n\\n    struct Proposal {\\n        // If you can limit the length to a certain number of bytes, \\n        // always use one of bytes1 to bytes32 because they are much cheaper\\n        bytes32 name;   // short name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    mapping(address =\\u003e Voter) public voters;\\n\\n    Proposal[] public proposals;\\n\\n    /** \\n     * @dev Create a new ballot to choose one of \\u0027proposalNames\\u0027.\\n     * @param proposalNames names of proposals\\n     */\\n    constructor(bytes32[] memory proposalNames) {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n\\n        for (uint i = 0; i \\u003c proposalNames.length; i++) {\\n            // \\u0027Proposal({...})\\u0027 creates a temporary\\n            // Proposal object and \\u0027proposals.push(...)\\u0027\\n            // appends it to the end of \\u0027proposals\\u0027.\\n            proposals.push(Proposal({\\n                name: proposalNames[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n    \\n    /** \\n     * @dev Give \\u0027voter\\u0027 the right to vote on this ballot. May only be called by \\u0027chairperson\\u0027.\\n     * @param voter address of voter\\n     */\\n    function giveRightToVote(address voter) public {\\n        require(\\n            msg.sender == chairperson,\\n            \\\"Only chairperson can give right to vote.\\\"\\n        );\\n        require(\\n            !voters[voter].voted,\\n            \\\"The voter already voted.\\\"\\n        );\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /**\\n     * @dev Delegate your vote to the voter \\u0027to\\u0027.\\n     * @param to address to which vote is delegated\\n     */\\n    function delegate(address to) public {\\n        Voter storage sender = voters[msg.sender];\\n        require(!sender.voted, \\\"You already voted.\\\");\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\n\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n        sender.voted = true;\\n        sender.delegate = to;\\n        Voter storage delegate_ = voters[to];\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Give your vote (including votes delegated to you) to proposal \\u0027proposals[proposal].name\\u0027.\\n     * @param proposal index of proposal in the proposals array\\n     */\\n    function vote(uint proposal) public {\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If \\u0027proposal\\u0027 is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /** \\n     * @dev Computes the winning proposal taking all previous votes into account.\\n     * @return winningProposal_ index of winning proposal in the proposals array\\n     */\\n    function winningProposal() public view\\n            returns (uint winningProposal_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p \\u003c proposals.length; p++) {\\n            if (proposals[p].voteCount \\u003e winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    /** \\n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\\n     * @return winnerName_ the name of the winner\\n     */\\n    function winnerName() public view\\n            returns (bytes32 winnerName_)\\n    {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n}\\n\"},\"New Token.sol\":{\"content\":\"pragma solidity ^0.8.2;\\r\\n\\r\\ncontract Token {\\r\\n    mapping(address =\\u003e uint) public balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) public allowance;\\r\\n    uint public totalSupply = 1000000000 * 10 ** 18;\\r\\n    string public name = \\\"Aramis\\\";\\r\\n    string public symbol = \\\"ARM\\\";\\r\\n    uint public decimals = 18;\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    \\r\\n    constructor() {\\r\\n        balances[msg.sender] = totalSupply;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address owner) public returns(uint) {\\r\\n        return balances[owner];\\r\\n    }\\r\\n    \\r\\n    function transfer(address to, uint value) public returns(bool) {\\r\\n        require(balanceOf(msg.sender) \\u003e= value, \\u0027balance too low\\u0027);\\r\\n        balances[to] += value;\\r\\n        balances[msg.sender] -= value;\\r\\n       emit Transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address from, address to, uint value) public returns(bool) {\\r\\n        require(balanceOf(from) \\u003e= value, \\u0027balance too low\\u0027);\\r\\n        require(allowance[from][msg.sender] \\u003e= value, \\u0027allowance too low\\u0027);\\r\\n        balances[to] += value;\\r\\n        balances[from] -= value;\\r\\n        emit Transfer(from, to, value);\\r\\n        return true;   \\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint value) public returns (bool) {\\r\\n        allowance[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;   \\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52bd0f6a0a078ae84f9f47f84e1a598eb875f738b33de2be70cf5cf92eaa5936"}