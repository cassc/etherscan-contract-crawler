{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"ImpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ISwapRouter.sol\\\";\\r\\nimport \\\"./ISwapFactory.sol\\\";\\r\\nimport \\\"./TokenDistributor.sol\\\";\\r\\n\\r\\nabstract contract ImpToken is IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n    mapping(address =\\u003e bool) public _feeWhiteList;\\r\\n    mapping(address =\\u003e bool) public _blackList;\\r\\n    mapping(address =\\u003e bool) public _swapPairList;\\r\\n\\r\\n    address public fundAddress;\\r\\n    address public devAddress;\\r\\n    address public _fist;\\r\\n    address public _mainPair;\\r\\n    address public DEAD = address(0x000000000000000000000000000000000000dEaD);\\r\\n    address public ZERO = address(0);\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _tTotal;\\r\\n\\r\\n    ISwapRouter public _swapRouter;\\r\\n    TokenDistributor public _tokenDistributor;\\r\\n\\r\\n    bool private inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    bool public liquifyEnabled = false;\\r\\n\\r\\n    uint256 public _buyBurnFee = 100;\\r\\n    uint256 public _sellBurnFee = 100;\\r\\n    uint256 public _buyFundFee = 100;\\r\\n    uint256 public _sellFundFee = 100;\\r\\n    uint256 public _buyLPDividendFee = 100;\\r\\n    uint256 public _sellLPDividendFee = 100;\\r\\n    uint256 public _buyLPFee = 100;\\r\\n    uint256 public _sellLPFee = 100;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private numTokensSellToAddToLiquidity;\\r\\n\\r\\n    uint256 public startTradeBlock;\\r\\n    uint256 public startAddLPBlock;\\r\\n    uint256 private holderRewardCondition;\\r\\n\\r\\n    address[] private holders;\\r\\n    mapping(address =\\u003e uint256) holderIndex;\\r\\n    mapping(address =\\u003e bool) excludeHolder;\\r\\n    uint256 private currentIndex;\\r\\n    uint256 private progressRewardBlock;\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SetSwapPairList(address indexed addr, bool indexed enable);\\r\\n    event SwapAddERC20Liquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 erc20Received,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    constructor (\\r\\n        address RouterAddress, address FISTAddress,\\r\\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, uint256 minNum,\\r\\n        address FundAddress, address ReceiveAddress\\r\\n    ){\\r\\n        _name = Name;\\r\\n        _symbol = Symbol;\\r\\n        _decimals = Decimals;\\r\\n        numTokensSellToAddToLiquidity = minNum * 10 ** uint256(_decimals);\\r\\n\\r\\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\\r\\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\\r\\n\\r\\n        _fist = FISTAddress;\\r\\n        _swapRouter = swapRouter;\\r\\n        _allowances[address(this)][address(swapRouter)] = MAX;\\r\\n\\r\\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\\r\\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\\r\\n        _mainPair = swapPair;\\r\\n        _swapPairList[swapPair] = true;\\r\\n\\r\\n        uint256 total = Supply * 10 ** Decimals;\\r\\n        _tTotal = total;\\r\\n\\r\\n        _balances[ReceiveAddress] = total;\\r\\n        emit Transfer(address(0), ReceiveAddress, total);\\r\\n\\r\\n        fundAddress = FundAddress;\\r\\n        devAddress = msg.sender;\\r\\n\\r\\n        _feeWhiteList[FundAddress] = true;\\r\\n        _feeWhiteList[devAddress] = true;\\r\\n        _feeWhiteList[ReceiveAddress] = true;\\r\\n        _feeWhiteList[address(this)] = true;\\r\\n        _feeWhiteList[address(swapRouter)] = true;\\r\\n        _feeWhiteList[msg.sender] = true;\\r\\n\\r\\n        excludeHolder[address(0)] = true;\\r\\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n\\r\\n        holderRewardCondition = 1 * 10 ** IERC20(FISTAddress).decimals();\\r\\n\\r\\n        _tokenDistributor = new TokenDistributor(FISTAddress);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][msg.sender] != MAX) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n\\r\\n        bool takeFee;\\r\\n        bool isSell;\\r\\n\\r\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n        require(!_blackList[from] \\u0026\\u0026 !_blackList[to], \\\"BEP20: sender or recipient in blackList\\\");\\r\\n\\r\\n        uint256 fromBalance = balanceOf(from);\\r\\n        require(fromBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n\\r\\n        if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n            uint256 maxSellAmount = fromBalance.mul(9999).div(10000);\\r\\n            if (amount \\u003e maxSellAmount) {\\r\\n                amount = maxSellAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_swapPairList[from] || _swapPairList[to]) {\\r\\n            if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n                if (0 == startTradeBlock) {\\r\\n                    require(0 \\u003c startAddLPBlock \\u0026\\u0026 _swapPairList[to], \\\"BEP20:operater action is not AddLiquidity\\\");\\r\\n                }\\r\\n                if (block.number \\u003c startTradeBlock.add(4)) {\\r\\n                    _funTransfer(from, to, amount);\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                uint256 swapFee = _buyFundFee.add(_sellFundFee).add(_buyLPDividendFee).add(_sellLPDividendFee).add(_buyLPFee).add(_sellLPFee);\\r\\n\\r\\n                // also, don\\u0027t swap \\u0026 liquify if sender is uniswap pair.\\r\\n                uint256 contractTokenBalance = balanceOf(address(this));\\r\\n                bool overMinTokenBalance = contractTokenBalance \\u003e= numTokensSellToAddToLiquidity;\\r\\n                if (\\r\\n                    overMinTokenBalance \\u0026\\u0026\\r\\n                    !inSwapAndLiquify \\u0026\\u0026\\r\\n                    _swapPairList[to] \\u0026\\u0026\\r\\n                    swapAndLiquifyEnabled\\r\\n                ) {\\r\\n                    contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n                    //add liquidity\\r\\n                    swapAndERC20Liquify(contractTokenBalance, swapFee);\\r\\n                }\\r\\n\\r\\n                takeFee = true;\\r\\n            }\\r\\n            if (_swapPairList[to]) {\\r\\n                isSell = true;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        _tokenTransfer(from, to, amount, takeFee, isSell);\\r\\n\\r\\n        if (from != address(this)) {\\r\\n            if (isSell) {\\r\\n                addHolder(from);\\r\\n            }\\r\\n            processReward(500000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _funTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        uint256 feeAmount = tAmount.mul(75).div(100);\\r\\n        _takeTransfer(\\r\\n            sender,\\r\\n            fundAddress,\\r\\n            feeAmount\\r\\n        );\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isSell\\r\\n    ) private {\\r\\n        \\r\\n        uint256 feeAmount;\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 swapFee;\\r\\n            uint256 burnAmount;\\r\\n            uint256 burnTotal = balanceOf(DEAD);\\r\\n            if (isSell) {\\r\\n                swapFee = _sellFundFee.add(_sellLPDividendFee).add(_sellLPFee);\\r\\n                burnAmount = tAmount.mul(_sellBurnFee).div(10000);\\r\\n            } else {\\r\\n                swapFee = _buyFundFee.add(_buyLPDividendFee).add(_buyLPFee);\\r\\n                burnAmount = tAmount.mul(_buyBurnFee).div(10000);\\r\\n            }\\r\\n            uint256 swapAmount = tAmount.mul(swapFee).div(10000);\\r\\n            if (swapAmount \\u003e 0) {\\r\\n                feeAmount += swapAmount;\\r\\n                _takeTransfer(\\r\\n                    sender,\\r\\n                    address(this),\\r\\n                    swapAmount\\r\\n                );\\r\\n            }\\r\\n            if(\\r\\n                burnAmount \\u003e 0 \\u0026\\u0026\\r\\n                burnTotal \\u003c= _tTotal.mul(9000).div(10000)\\r\\n            ) {\\r\\n                feeAmount += burnAmount;\\r\\n                _takeTransfer(sender, DEAD, burnAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function swapAndERC20Liquify(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\\r\\n        \\r\\n        uint256 lpFee = _sellLPFee.add(_buyLPFee);\\r\\n        uint256 lpAmount = tokenAmount.mul(lpFee).div(swapFee);\\r\\n        uint256 halflpAmount = lpAmount.div(2);\\r\\n        uint256 otherlpAmount = lpAmount.sub(halflpAmount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _fist;\\r\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount.sub(otherlpAmount),\\r\\n            0,\\r\\n            path,\\r\\n            address(_tokenDistributor),\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n        swapFee = swapFee.sub(lpFee.div(2));\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\\r\\n        uint256 fundAmount = fistBalance.mul(_buyFundFee.add(_sellFundFee)).div(swapFee);\\r\\n        if(fundAmount \\u003e 0) {\\r\\n            FIST.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\\r\\n        }\\r\\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance.sub(fundAmount));\\r\\n\\r\\n        if(\\r\\n            liquifyEnabled \\u0026\\u0026\\r\\n            lpAmount \\u003e 0\\r\\n        ) {\\r\\n            uint256 lpFist = fistBalance.mul(lpFee).div(swapFee).div(2);\\r\\n            _swapRouter.addLiquidity(\\r\\n                    address(this), _fist, otherlpAmount, lpFist, 0, 0, fundAddress, block.timestamp\\r\\n                );\\r\\n            emit SwapAddERC20Liquify(halflpAmount, lpFist, otherlpAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _takeTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[to] = _balances[to].add(tAmount);\\r\\n        emit Transfer(sender, to, tAmount);\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address addr) external onlyFunder {\\r\\n        fundAddress = addr;\\r\\n        _feeWhiteList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address addr) external onlyFunder {\\r\\n        devAddress = addr;\\r\\n    }\\r\\n\\r\\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _buyLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _buyFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setBuyLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _buyLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setBuyBurnFee(uint256 burnFee) external onlyOwner {\\r\\n        _buyBurnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _sellLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _sellFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _sellLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setSellBurnFee(uint256 burnFee) external onlyOwner {\\r\\n        _sellBurnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function startAddLP() external onlyOwner {\\r\\n        require(0 == startAddLPBlock, \\\"BEP20: startAddLP has been set\\\");\\r\\n        startAddLPBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeAddLP() external onlyOwner {\\r\\n        require(startAddLPBlock \\u003e 0, \\\"BEP20: startAddLP has not been set\\\");\\r\\n        startAddLPBlock = 0;\\r\\n    }\\r\\n\\r\\n    function startTrade() external onlyOwner {\\r\\n        require(0 == startTradeBlock, \\\"BEP20: startTrade has been set\\\");\\r\\n        startTradeBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeTrade() external onlyOwner {\\r\\n        require(startTradeBlock \\u003e 0, \\\"BEP20: startTrade has not been set\\\");\\r\\n        startTradeBlock = 0;\\r\\n    }\\r\\n\\r\\n    function setFeeWhiteList(address addr, bool enable) external onlyFunder {\\r\\n        _feeWhiteList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setBlackList(address addr, bool enable) external onlyOwner {\\r\\n        _blackList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setSwapPairList(address addr, bool enable) external onlyFunder {\\r\\n        require(_swapPairList[addr] != enable, \\\"BEP20: swapPairList is already set to that enable\\\");\\r\\n        _swapPairList[addr] = enable;\\r\\n        emit SetSwapPairList(addr, enable);\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyFunder {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function setLiquifyEnabled(bool _enabled) public onlyFunder {\\r\\n        liquifyEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function setProgressRewardBlock(uint256 _progressRewardBlock) public onlyFunder {\\r\\n        require(_progressRewardBlock \\u003e= progressRewardBlock, \\\"BEP20: progressRewardBlock less than current value\\\");\\r\\n        progressRewardBlock = _progressRewardBlock;\\r\\n    }\\r\\n\\r\\n    function claimBalance() external onlyFunder {\\r\\n        payable(fundAddress).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function claimToken(address token, uint256 amount, address to) external onlyFunder {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    modifier onlyFunder() {\\r\\n        require(owner() == msg.sender || fundAddress == msg.sender || devAddress == msg.sender, \\\"BEP20: caller is not owner or Funder and Dev\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addHolder(address adr) private {\\r\\n        uint256 size;\\r\\n        assembly {size := extcodesize(adr)}\\r\\n        if (size \\u003e 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (0 == holderIndex[adr]) {\\r\\n            if (0 == holders.length || holders[0] != adr) {\\r\\n                holderIndex[adr] = holders.length;\\r\\n                holders.push(adr);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function processReward(uint256 gas) private {\\r\\n        if (progressRewardBlock + 1 days \\u003e block.timestamp) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n\\r\\n        uint256 balance = FIST.balanceOf(address(this));\\r\\n        if (balance \\u003c holderRewardCondition) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 holdToken = IERC20(_mainPair);\\r\\n        uint holdTokenTotal = holdToken.totalSupply();\\r\\n\\r\\n        address shareHolder;\\r\\n        uint256 tokenBalance;\\r\\n        uint256 amount;\\r\\n\\r\\n        uint256 shareholderCount = holders.length;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 iterations = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if (currentIndex \\u003e= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n            shareHolder = holders[currentIndex];\\r\\n            tokenBalance = holdToken.balanceOf(shareHolder);\\r\\n            if (tokenBalance \\u003e 0 \\u0026\\u0026 !excludeHolder[shareHolder]) {\\r\\n                amount = balance.mul(tokenBalance).div(holdTokenTotal);\\r\\n                if (amount \\u003e 0) {\\r\\n                    FIST.transfer(shareHolder, amount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            gasUsed = gasUsed + (gasLeft - gasleft());\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n\\r\\n        progressRewardBlock = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setHolderRewardCondition(uint256 amount) external onlyFunder {\\r\\n        holderRewardCondition = amount;\\r\\n    }\\r\\n\\r\\n    function setNumTokensSellToAddToLiquidity(uint256 amount) external onlyFunder {\\r\\n        numTokensSellToAddToLiquidity = amount;\\r\\n    }\\r\\n\\r\\n    function setExcludeHolder(address addr, bool enable) external onlyFunder {\\r\\n        excludeHolder[addr] = enable;\\r\\n    }\\r\\n}\"},\"ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"RalpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./ImpToken.sol\\\";\\r\\n\\r\\ncontract RalpToken is ImpToken {\\r\\n    constructor() ImpToken(\\r\\n    \\r\\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\\r\\n        address(0x55d398326f99059fF775485246999027B3197955),\\r\\n        \\\"TLAB Token\\\",\\r\\n        \\\"TLAB\\\",\\r\\n        18,\\r\\n        10000000,\\r\\n        100,\\r\\n        address(0x000000000000000000000000000000000000dEaD),\\r\\n        address(0x1e985ee1E017eD32563173020693A44ef12B8A6b)\\r\\n    ){\\r\\n        \\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract TokenDistributor {\\r\\n    constructor (address token) {\\r\\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"SetSwapPairList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAddERC20Liquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_progressRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RalpToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13136c7858d846a4b2816faa1c156baee655961fe82740199a2eea02fd14c4b0"}