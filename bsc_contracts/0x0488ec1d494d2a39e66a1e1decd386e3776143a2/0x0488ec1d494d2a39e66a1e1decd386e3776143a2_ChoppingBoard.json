{"SourceCode": "// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/_libraries/IBEP20.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/_libraries/SafeBEP20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/_libraries/BEP20.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\r\n        );\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/overcookedfarm/OnionToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n// OnionToken with Governance.\r\ncontract OnionToken is BEP20 {\r\n\t// Whether token has fair launched.\r\n\tbool public isPublicLaunched = false;\r\n\t// The block number when token launched.\r\n\tuint256 public launchBlockStart;\r\n\t// The block number where fair launch ends.\r\n\tuint256 public launchBlockEnd;\r\n\r\n\t// Transfer tax rate in basis points. (default 5%)\r\n\tuint16 public transferTaxRate = 500;\r\n\t// Burn rate of transfer tax. (default 50%)\r\n\tuint16 public burnRate = 50;\r\n\t// Burn address for contract.\r\n\taddress public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\t// Addresses that are excluded from transferTax.\r\n\tmapping(address => bool) private _excludedFromTransferTax;\r\n\r\n\t// Whether the swapAndLiquify is enabled.\r\n\tbool public swapAndLiquifyEnabled = false;\r\n\t// Minimum amount of ONION to liquify.\r\n\tuint256 public minAmountToLiquify = 100 ether;\r\n\t// The ONIONSwap's router.\r\n\tIUniswapV2Router02 public pancakeSwapRouter;\r\n\t// The trading pair address.\r\n\taddress public pancakeSwapPair;\r\n\t// If is in swapAndLiquify.\r\n\tbool private _inSwapAndLiquify;\r\n\r\n\t// Maximum transfer amount rate in basis points. (default 1%)\r\n\tuint16 public maxTransferAmountRate = 100;\r\n\t// Addresses that are excluded from antiWhale.\r\n\tmapping(address => bool) private _excludedFromAntiWhale;\r\n\r\n\t// The operator can control the contract.\r\n\taddress private _operator;\r\n\r\n\t// The launcher can launch the contract.\r\n\taddress private _launcher;\r\n\r\n\t// The events to be emitted at changes.\r\n\tevent isPublicLaunchedUpdated(address indexed launcher, bool enabled);\r\n\tevent TransferTaxRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\r\n\tevent BurnRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\r\n\tevent SwapAndLiquifyEnabledUpdated(address indexed operator, bool enabled);\r\n\tevent MinAmountToLiquifyUpdated(address indexed operator, uint256 previousAmount, uint256 newAmount);\r\n\tevent PancakeSwapRouterUpdated(address indexed operator, address indexed router, address indexed pair);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\tevent OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n\tevent LauncherTransferred(address indexed previousLauncher, address indexed newLauncher);\r\n\r\n\tmodifier onlyOperator() {\r\n\t\trequire(_operator == msg.sender, \"ONION::onlyOperator: caller is not the operator\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyLauncher() {\r\n\t\trequire(_launcher == msg.sender, \"ONION::onlyLauncher: caller is not the launcher\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier antiWhale(address sender, address recipient, uint256 amount) {\r\n\t\tif (isPublicLaunched == true && block.number < launchBlockEnd && maxTransferAmount() > 0) {\r\n\t\t\tif (_excludedFromAntiWhale[sender] == false && _excludedFromAntiWhale[recipient] == false) {\r\n\t\t\t\trequire(amount <= maxTransferAmount(), \"ONION::antiWhale: amount exceeds the maxTransferAmount\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier lockTheSwap {\r\n\t\t_inSwapAndLiquify = true;\r\n\t\t_;\r\n\t\t_inSwapAndLiquify = false;\r\n\t}\r\n\r\n\tmodifier transferTaxFree {\r\n\t\tuint16 _transferTaxRate = transferTaxRate;\r\n\t\ttransferTaxRate = 0;\r\n\t\t_;\r\n\t\ttransferTaxRate = _transferTaxRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Constructs the OnionToken contract.\r\n\t*/\r\n\tconstructor() public BEP20(\"Overcooked Token\", \"ONION\") {\r\n\t\t_operator = _msgSender();\r\n\t\temit OperatorTransferred(address(0), _operator);\r\n\r\n\t\t_launcher = _msgSender();\r\n\t\temit LauncherTransferred(address(0), _launcher);\r\n\r\n\t\t_excludedFromTransferTax[msg.sender] = true;\r\n\t\t_excludedFromTransferTax[address(0)] = true;\r\n\t\t_excludedFromTransferTax[address(this)] = true;\r\n\t\t_excludedFromTransferTax[BURN_ADDRESS] = true;\r\n\r\n\t\t_excludedFromAntiWhale[msg.sender] = true;\r\n\t\t_excludedFromAntiWhale[address(0)] = true;\r\n\t\t_excludedFromAntiWhale[address(this)] = true;\r\n\t\t_excludedFromAntiWhale[BURN_ADDRESS] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Creates `_amount` token to `_to`. Must only be called by the owner.\r\n\t*/\r\n\tfunction mint(address _to, uint256 _amount) public onlyOwner {\r\n\t\t_mint(_to, _amount);\r\n\t\t_moveDelegates(address(0), _delegates[_to], _amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Overrides transfer function to meet tokenomics of ONION.\r\n\t*/\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override antiWhale(sender, recipient, amount) {\r\n\t\tif (isPublicLaunched == true) {\r\n\t\t\tif (\r\n\t\t\t\tswapAndLiquifyEnabled == true\r\n\t\t\t\t&& _inSwapAndLiquify == false\r\n\t\t\t\t&& address(pancakeSwapRouter) != address(0)\r\n\t\t\t\t&& pancakeSwapPair != address(0)\r\n\t\t\t\t&& sender != pancakeSwapPair\r\n\t\t\t\t&& sender != owner()\r\n\t\t\t) {\r\n\t\t\t\tswapAndLiquify();\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tblock.number < launchBlockEnd\r\n\t\t\t\t|| _excludedFromTransferTax[sender] == false\r\n\t\t\t\t|| _excludedFromTransferTax[recipient] == false\r\n\t\t\t\t|| recipient == BURN_ADDRESS\r\n\t\t\t\t|| transferTaxRate == 0\r\n\t\t\t) {\r\n\t\t\t\tsuper._transfer(sender, recipient, amount);\r\n\t\t\t} else {\r\n\t\t\t\tuint256 taxAmount = amount.mul(transferTaxRate).div(10000);\r\n\t\t\t\tuint256 burnAmount = taxAmount.mul(burnRate).div(100);\r\n\t\t\t\tuint256 liquidityAmount = taxAmount.sub(burnAmount);\r\n\t\t\t\trequire(taxAmount == burnAmount + liquidityAmount, \"ONION::transfer: burn value is invalid\");\r\n\r\n\t\t\t\tuint256 sendAmount = amount.sub(taxAmount);\r\n\t\t\t\trequire(amount == sendAmount + taxAmount, \"ONION::transfer: tax value invalid\");\r\n\r\n\t\t\t\tsuper._transfer(sender, BURN_ADDRESS, burnAmount);\r\n\t\t\t\tsuper._transfer(sender, address(this), liquidityAmount);\r\n\t\t\t\tsuper._transfer(sender, recipient, sendAmount);\r\n\t\t\t\tamount = sendAmount;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trequire(sender == _operator || recipient == _operator, \"ONION::transfer: contract not launched yet\");\r\n\t\t\tsuper._transfer(sender, recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Swap and liquify ONION.\r\n\t*/\r\n\tfunction swapAndLiquify() private lockTheSwap transferTaxFree {\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n\t\tif (contractTokenBalance >= minAmountToLiquify) {\r\n\t\t\tuint256 liquifyAmount = minAmountToLiquify;\r\n\t\t\tuint256 half = liquifyAmount.div(2);\r\n\t\t\tuint256 otherHalf = liquifyAmount.sub(half);\r\n\t\t\tuint256 initialBalance = address(this).balance;\r\n\r\n\t\t\tswapTokensForEth(half);\r\n\r\n\t\t\tuint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n\t\t\taddLiquidity(otherHalf, newBalance);\r\n\r\n\t\t\temit SwapAndLiquify(half, newBalance, otherHalf);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Swap ONION tokens for eth.\r\n\t*/\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = pancakeSwapRouter.WETH();\r\n\r\n\t\t_approve(address(this), address(pancakeSwapRouter), tokenAmount);\r\n\r\n\t\tpancakeSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add liquidity to pool.\r\n\t*/\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(pancakeSwapRouter), tokenAmount);\r\n\r\n\t\tpancakeSwapRouter.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\toperator(),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev This is to receive BNB from pancakeSwapRouter when swapping.\r\n\t*/\r\n\treceive() external payable {}\r\n\r\n\t/**\r\n\t* @dev Update the transfer tax rate.\r\n\t*/\r\n\tfunction updateTransferTaxRate(uint16 _transferTaxRate) public onlyOperator {\r\n\t\trequire(_transferTaxRate <= 1000, \"ONION::updateTransferTaxRate: transfer tax rate must not exceed the maximum rate\"); // maximum 10% transfer tax.\r\n\t\temit TransferTaxRateUpdated(msg.sender, transferTaxRate, _transferTaxRate);\r\n\t\ttransferTaxRate = _transferTaxRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the burn rate.\r\n\t*/\r\n\tfunction updateBurnRate(uint16 _burnRate) public onlyOperator {\r\n\t\trequire(_burnRate <= 100, \"ONION::updateBurnRate: burn rate must not exceed the maximum rate\");\r\n\t\temit BurnRateUpdated(msg.sender, burnRate, _burnRate);\r\n\t\tburnRate = _burnRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the swapAndLiquifyEnabled boolean.\r\n\t*/\r\n\tfunction updateSwapAndLiquifyEnabled(bool _enabled) public onlyOperator {\r\n\t\temit SwapAndLiquifyEnabledUpdated(msg.sender, _enabled);\r\n\t\tswapAndLiquifyEnabled = _enabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the minimum amount to liquify.\r\n\t*/\r\n\tfunction updateMinAmountToLiquify(uint256 _minAmount) public onlyOperator {\r\n\t\temit MinAmountToLiquifyUpdated(msg.sender, minAmountToLiquify, _minAmount);\r\n\t\tminAmountToLiquify = _minAmount;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the AMM swap router address.\r\n\t*/\r\n\tfunction updatePancakeSwapRouter(address _router) public onlyOperator {\r\n\t\tpancakeSwapRouter = IUniswapV2Router02(_router);\r\n\t\tpancakeSwapPair = IUniswapV2Factory(pancakeSwapRouter.factory()).getPair(address(this), pancakeSwapRouter.WETH());\r\n\t\trequire(pancakeSwapPair != address(0), \"ONION::updatePancakeSwapRouter: invalid pair address\");\r\n\t\temit PancakeSwapRouterUpdated(msg.sender, address(pancakeSwapRouter), pancakeSwapPair);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Exclude or include an address from transferTax.\r\n\t*/\r\n\tfunction setExcludedFromTransferTax(address _account, bool _excluded) public onlyOperator {\r\n\t\t_excludedFromTransferTax[_account] = _excluded;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns if the address is excluded from transferTax.\r\n\t*/\r\n\tfunction isExcludedFromTransferTax(address _account) public view returns (bool) {\r\n\t\treturn _excludedFromAntiWhale[_account];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Exclude or include an address from antiWhale.\r\n\t*/\r\n\tfunction setExcludedFromAntiWhale(address _account, bool _excluded) public onlyOperator {\r\n\t\t_excludedFromAntiWhale[_account] = _excluded;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns if the address is excluded from antiWhale.\r\n\t*/\r\n\tfunction isExcludedFromAntiWhale(address _account) public view returns (bool) {\r\n\t\treturn _excludedFromAntiWhale[_account];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Launch the ONION contract to public and renounce launcher.\r\n\t*/\r\n\tfunction launchContractToPublic(uint256 _minutes) public virtual onlyLauncher {\r\n\t\tisPublicLaunched = true;\r\n\t\temit isPublicLaunchedUpdated(msg.sender, true);\r\n\r\n\t\tlaunchBlockStart = block.number;\r\n\t\tlaunchBlockEnd = _minutes.mul(20).add(launchBlockStart); // Per minute is about 20 blocks.\r\n\r\n\t\temit LauncherTransferred(msg.sender, address(0));\r\n\t\t_launcher = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the maximum transfer amount.\r\n\t*/\r\n\tfunction maxTransferAmount() public view returns (uint256) {\r\n\t\treturn totalSupply().mul(maxTransferAmountRate).div(10000);\r\n\t}\r\n\r\n\t/*\r\n\t* @dev Transfers operator of the contract to a new account.\r\n\t*/\r\n\tfunction transferOperator(address newOperator) public onlyOperator {\r\n\t\trequire(newOperator != address(0), \"ONION::transferOperator: new operator is the zero address\");\r\n\t\temit OperatorTransferred(_operator, newOperator);\r\n\t\t_operator = newOperator;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the address of the current operator.\r\n\t*/\r\n\tfunction operator() public view returns (address) {\r\n\t\treturn _operator;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the address of the current launcher.\r\n\t*/\r\n\tfunction launcher() public view returns (address) {\r\n\t\treturn _launcher;\r\n\t}\r\n\r\n\t// Copied and modified from YAM code:\r\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n\t// Which is copied and modified from COMPOUND:\r\n\t// https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n\t/// @dev A record of each accounts delegate\r\n\tmapping (address => address) internal _delegates;\r\n\r\n\t/// @notice A checkpoint for marking number of votes from a given block\r\n\tstruct Checkpoint {\r\n\t\tuint32 fromBlock;\r\n\t\tuint256 votes;\r\n\t}\r\n\r\n\t/// @notice A record of votes checkpoints for each account, by index\r\n\tmapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n\t/// @notice The number of checkpoints for each account\r\n\tmapping (address => uint32) public numCheckpoints;\r\n\r\n\t/// @notice The EIP-712 typehash for the contract's domain\r\n\tbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n\t/// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n\tbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n\t/// @notice A record of states for signing / validating signatures\r\n\tmapping (address => uint) public nonces;\r\n\r\n\t/// @notice An event thats emitted when an account changes its delegate\r\n\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n\t/// @notice An event thats emitted when a delegate account's vote balance changes\r\n\tevent DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n\t/**\r\n\t* @notice Delegate votes from `msg.sender` to `delegatee`\r\n\t* @param delegator The address to get delegatee for\r\n\t*/\r\n\tfunction delegates(address delegator)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address)\r\n\t{\r\n\t\treturn _delegates[delegator];\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Delegate votes from `msg.sender` to `delegatee`\r\n\t* @param delegatee The address to delegate votes to\r\n\t*/\r\n\tfunction delegate(address delegatee) external {\r\n\t\treturn _delegate(msg.sender, delegatee);\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Delegates votes from signatory to `delegatee`\r\n\t* @param delegatee The address to delegate votes to\r\n\t* @param nonce The contract state required to match the signature\r\n\t* @param expiry The time at which to expire the signature\r\n\t* @param v The recovery byte of the signature\r\n\t* @param r Half of the ECDSA signature pair\r\n\t* @param s Half of the ECDSA signature pair\r\n\t*/\r\n\tfunction delegateBySig(\r\n\t\taddress delegatee,\r\n\t\tuint nonce,\r\n\t\tuint expiry,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t)\r\n\t\texternal\r\n\t{\r\n\t\tbytes32 domainSeparator = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDOMAIN_TYPEHASH,\r\n\t\t\t\tkeccak256(bytes(name())),\r\n\t\t\t\tgetChainId(),\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tbytes32 structHash = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDELEGATION_TYPEHASH,\r\n\t\t\t\tdelegatee,\r\n\t\t\t\tnonce,\r\n\t\t\t\texpiry\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t\"\\x19\\x01\",\r\n\t\t\t\tdomainSeparator,\r\n\t\t\t\tstructHash\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\taddress signatory = ecrecover(digest, v, r, s);\r\n\t\trequire(signatory != address(0), \"ONION::delegateBySig: invalid signature\");\r\n\t\trequire(nonce == nonces[signatory]++, \"ONION::delegateBySig: invalid nonce\");\r\n\t\trequire(now <= expiry, \"ONION::delegateBySig: signature expired\");\r\n\t\treturn _delegate(signatory, delegatee);\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Gets the current votes balance for `account`\r\n\t* @param account The address to get votes balance\r\n\t* @return The number of current votes for `account`\r\n\t*/\r\n\tfunction getCurrentVotes(address account)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint32 nCheckpoints = numCheckpoints[account];\r\n\t\treturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Determine the prior number of votes for an account as of a block number\r\n\t* @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n\t* @param account The address of the account to check\r\n\t* @param blockNumber The block number to get the vote balance at\r\n\t* @return The number of votes the account had as of the given block\r\n\t*/\r\n\tfunction getPriorVotes(address account, uint blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(blockNumber < block.number, \"ONION::getPriorVotes: not yet determined\");\r\n\r\n\t\tuint32 nCheckpoints = numCheckpoints[account];\r\n\t\tif (nCheckpoints == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// First check most recent balance\r\n\t\tif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n\t\t\treturn checkpoints[account][nCheckpoints - 1].votes;\r\n\t\t}\r\n\r\n\t\t// Next check implicit zero balance\r\n\t\tif (checkpoints[account][0].fromBlock > blockNumber) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint32 lower = 0;\r\n\t\tuint32 upper = nCheckpoints - 1;\r\n\t\twhile (upper > lower) {\r\n\t\t\tuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n\t\t\tCheckpoint memory cp = checkpoints[account][center];\r\n\t\t\tif (cp.fromBlock == blockNumber) {\r\n\t\t\t\treturn cp.votes;\r\n\t\t\t} else if (cp.fromBlock < blockNumber) {\r\n\t\t\t\tlower = center;\r\n\t\t\t} else {\r\n\t\t\t\tupper = center - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn checkpoints[account][lower].votes;\r\n\t}\r\n\r\n\tfunction _delegate(address delegator, address delegatee)\r\n\t\tinternal\r\n\t{\r\n\t\taddress currentDelegate = _delegates[delegator];\r\n\t\tuint256 delegatorBalance = balanceOf(delegator); // balance of underlying ONIONs (not scaled);\r\n\t\t_delegates[delegator] = delegatee;\r\n\r\n\t\temit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n\t\t_moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n\t}\r\n\r\n\tfunction _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n\t\tif (srcRep != dstRep && amount > 0) {\r\n\t\t\tif (srcRep != address(0)) {\r\n\t\t\t\t// decrease old representative\r\n\t\t\t\tuint32 srcRepNum = numCheckpoints[srcRep];\r\n\t\t\t\tuint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n\t\t\t\tuint256 srcRepNew = srcRepOld.sub(amount);\r\n\t\t\t\t_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n\t\t\t}\r\n\r\n\t\t\tif (dstRep != address(0)) {\r\n\t\t\t\t// increase new representative\r\n\t\t\t\tuint32 dstRepNum = numCheckpoints[dstRep];\r\n\t\t\t\tuint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n\t\t\t\tuint256 dstRepNew = dstRepOld.add(amount);\r\n\t\t\t\t_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _writeCheckpoint(\r\n\t\taddress delegatee,\r\n\t\tuint32 nCheckpoints,\r\n\t\tuint256 oldVotes,\r\n\t\tuint256 newVotes\r\n\t)\r\n\t\tinternal\r\n\t{\r\n\t\tuint32 blockNumber = safe32(block.number, \"ONION::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n\t\tif (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n\t\t\tcheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n\t\t} else {\r\n\t\t\tcheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n\t\t\tnumCheckpoints[delegatee] = nCheckpoints + 1;\r\n\t\t}\r\n\r\n\t\temit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n\t}\r\n\r\n\tfunction safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n\t\trequire(n < 2**32, errorMessage);\r\n\t\treturn uint32(n);\r\n\t}\r\n\r\n\tfunction getChainId() internal pure returns (uint) {\r\n\t\tuint256 chainId;\r\n\t\tassembly { chainId := chainid() }\r\n\t\treturn chainId;\r\n\t}\r\n}\r\n\r\n// File: contracts/overcookedfarm/ChoppingBoard.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ChoppingBoard is the master of ONION. He can make ONION and he is a fair guy.\r\n//\r\n// This contract is ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once ONION is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free.\r\ncontract ChoppingBoard is Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeBEP20 for IBEP20;\r\n\r\n\t// Info of each user.\r\n\tstruct UserInfo {\r\n\t\tuint256 amount; // How many LP tokens the user has provided.\r\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\r\n\t\t//\r\n\t\t// We do some fancy math here. Basically, any point in time, the amount of\r\n\t\t// ONIONs entitled to a user but is pending to be distributed is:\r\n\t\t//\r\n\t\t//\tpending reward = (user.amount * pool.accOnionPerShare) - user.rewardDebt\r\n\t\t//\r\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n\t\t//\t1. The pool's `accOnionPerShare` (and `lastRewardBlock`) gets updated.\r\n\t\t//\t2. User receives the pending reward sent to his/her address.\r\n\t\t//\t3. User's `amount` gets updated.\r\n\t\t//\t4. User's `rewardDebt` gets updated.\r\n\t}\r\n\r\n\t// Info of each pool.\r\n\tstruct PoolInfo {\r\n\t\tIBEP20 lpToken; // Address of LP token contract.\r\n\t\tuint256 allocPoint;  // How many allocation points assigned to this pool.\r\n\t\tuint256 lastRewardBlock; // Last block number that ONIONs distribution occurs.\r\n\t\tuint256 accOnionPerShare; // Accumulated ONIONs per share, times 1e12. See below.\r\n\t\tuint16 depositFeeBP; // Deposit fee in basis points.\r\n\t}\r\n\r\n\t// This is the ONION token.\r\n\tOnionToken public onion;\r\n\r\n\t// The developer address.\r\n\taddress public devaddr;\r\n\r\n\t// The fee address.\r\n\taddress public feeaddr;\r\n\r\n\t//  ONION tokens created per block.\r\n\tuint256 public onionPerBlock;\r\n\r\n\t// Bonus muliplier for early makers.\r\n\tuint256 public constant BONUS_MULTIPLIER = 1;\r\n\r\n\t// Info of each pool.\r\n\tPoolInfo[] public poolInfo;\r\n\r\n\t// Info of each user that stakes LP tokens.\r\n\tmapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n\t// Total allocation points. Must be the sum of all allocation points.\r\n\tuint256 public totalAllocPoint = 0;\r\n\r\n\t// The events to be emitted at changes.\r\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent SetFeeAddress(address indexed user, address indexed newAddress);\r\n\tevent SetDevAddress(address indexed user, address indexed newAddress);\r\n\tevent UpdateEmissionRate(address indexed user, uint256 onionPerBlock);\r\n\r\n\t/**\r\n\t* @dev Constructs the ChoppingBoard contract.\r\n\t*/\r\n\tconstructor(\r\n\t\tOnionToken _onion,\r\n\t\taddress _devaddr,\r\n\t\taddress _feeaddr,\r\n\t\tuint256 _onionPerBlock\r\n\t) public {\r\n\t\tonion = _onion;\r\n\t\tdevaddr = _devaddr;\r\n\t\tfeeaddr = _feeaddr;\r\n\t\tonionPerBlock = _onionPerBlock;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the number of pools in contract.\r\n\t*/\r\n\tfunction poolLength() external view returns (uint256) {\r\n\t\treturn poolInfo.length;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Prevents duplicated pool entry.\r\n\t*/\r\n\tmapping(IBEP20 => bool) public poolExistence;\r\n\tmodifier nonDuplicated(IBEP20 _lpToken) {\r\n\t\trequire(poolExistence[_lpToken] == false, \"ChoppingBoard::nonDuplicated: duplicated\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add a new LP to the pool.\r\n\t*/\r\n\tfunction add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\r\n\t\trequire(_depositFeeBP <= 10000, \"ChoppingBoard::add: invalid deposit fee basis points\");\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\tuint256 lastRewardBlock = block.number;\r\n\t\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\t\tpoolExistence[_lpToken] = true;\r\n\t\tpoolInfo.push(PoolInfo({\r\n\t\t\tlpToken : _lpToken,\r\n\t\t\tallocPoint : _allocPoint,\r\n\t\t\tlastRewardBlock : lastRewardBlock,\r\n\t\t\taccOnionPerShare : 0,\r\n\t\t\tdepositFeeBP : _depositFeeBP\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the given `_pid` pool.\r\n\t*/\r\n\tfunction set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner {\r\n\t\trequire(_depositFeeBP <= 10000, \"ChoppingBoard::set: invalid deposit fee basis points\");\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\ttotalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n\t\tpoolInfo[_pid].allocPoint = _allocPoint;\r\n\t\tpoolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Return reward multiplier over the given _from to _to block.\r\n\t*/\r\n\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n\t\treturn _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev View function to see pending ONIONs on frontend.\r\n\t*/\r\n\tfunction pendingOnion(uint256 _pid, address _user) external view returns (uint256) {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\tuint256 accOnionPerShare = pool.accOnionPerShare;\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n\t\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\t\tuint256 onionReward = multiplier.mul(onionPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\t\taccOnionPerShare = accOnionPerShare.add(onionReward.mul(1e12).div(lpSupply));\r\n\t\t}\r\n\t\treturn user.amount.mul(accOnionPerShare).div(1e12).sub(user.rewardDebt);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update reward variables for all pools.\r\n\t*/\r\n\tfunction massUpdatePools() public {\r\n\t\tuint256 length = poolInfo.length;\r\n\t\tfor (uint256 pid = 0; pid < length; ++pid) {\r\n\t\t\tupdatePool(pid);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update reward variables of the given pool to be up-to-date.\r\n\t*/\r\n\tfunction updatePool(uint256 _pid) public {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tif (block.number <= pool.lastRewardBlock) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (lpSupply == 0 || pool.allocPoint == 0) {\r\n\t\t\tpool.lastRewardBlock = block.number;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\tuint256 onionReward = multiplier.mul(onionPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\tonion.mint(devaddr, onionReward.div(10));\r\n\t\tonion.mint(address(this), onionReward);\r\n\t\tpool.accOnionPerShare = pool.accOnionPerShare.add(onionReward.mul(1e12).div(lpSupply));\r\n\t\tpool.lastRewardBlock = block.number;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Deposit LP tokens to ChoppingBoard for ONION allocation.\r\n\t*/\r\n\tfunction deposit(uint256 _pid, uint256 _amount) public nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tupdatePool(_pid);\r\n\t\tif (user.amount > 0) {\r\n\t\t\tuint256 pending = user.amount.mul(pool.accOnionPerShare).div(1e12).sub(user.rewardDebt);\r\n\t\t\tif (pending > 0) {\r\n\t\t\t\tsafeOnionTransfer(msg.sender, pending);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\t\t\tif (pool.depositFeeBP > 0) {\r\n\t\t\t\tuint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n\t\t\t\tpool.lpToken.safeTransfer(feeaddr, depositFee);\r\n\t\t\t\tuser.amount = user.amount.add(_amount).sub(depositFee);\r\n\t\t\t} else {\r\n\t\t\t\tuser.amount = user.amount.add(_amount);\r\n\t\t\t}\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accOnionPerShare).div(1e12);\r\n\t\temit Deposit(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Withdraw LP tokens from ChoppingBoard.\r\n\t*/\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\trequire(user.amount >= _amount, \"ChoppingBoard::withdraw: not good\");\r\n\t\tupdatePool(_pid);\r\n\t\tuint256 pending = user.amount.mul(pool.accOnionPerShare).div(1e12).sub(user.rewardDebt);\r\n\t\tif (pending > 0) {\r\n\t\t\tsafeOnionTransfer(msg.sender, pending);\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tuser.amount = user.amount.sub(_amount);\r\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accOnionPerShare).div(1e12);\r\n\t\temit Withdraw(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Withdraw without caring about rewards.\r\n\t*/\r\n\tfunction emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tuint256 amount = user.amount;\r\n\t\tuser.amount = 0;\r\n\t\tuser.rewardDebt = 0;\r\n\t\tpool.lpToken.safeTransfer(address(msg.sender), amount);\r\n\t\temit EmergencyWithdraw(msg.sender, _pid, amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Safe transfer function, just in case if rounding error causes pool to not have enough ONIONs.\r\n\t*/\r\n\tfunction safeOnionTransfer(address _to, uint256 _amount) internal {\r\n\t\tuint256 onionBal = onion.balanceOf(address(this));\r\n\t\tbool transferSuccess = false;\r\n\t\tif (_amount > onionBal) {\r\n\t\t\ttransferSuccess = onion.transfer(_to, onionBal);\r\n\t\t} else {\r\n\t\t\ttransferSuccess = onion.transfer(_to, _amount);\r\n\t\t}\r\n\t\trequire(transferSuccess, \"ChoppingBoard::safeOnionTransfer: transfer failed\");\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update developer address.\r\n\t*/\r\n\tfunction dev(address _devaddr) public {\r\n\t\trequire(msg.sender == devaddr, \"ChoppingBoard::dev: wut?\");\r\n\t\tdevaddr = _devaddr;\r\n\t\temit SetDevAddress(msg.sender, _devaddr);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update fee address.\r\n\t*/\r\n\tfunction fee(address _feeaddr) public {\r\n\t\trequire(msg.sender == feeaddr, \"ChoppingBoard::fee: wut?\");\r\n\t\tfeeaddr = _feeaddr;\r\n\t\temit SetFeeAddress(msg.sender, _feeaddr);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Alter the emission, here we make it simple and transparent to all.\r\n\t*/\r\n\tfunction updateEmissionRate(uint256 _onionPerBlock) public onlyOwner {\r\n\t\tmassUpdatePools();\r\n\t\tonionPerBlock = _onionPerBlock;\r\n\t\temit UpdateEmissionRate(msg.sender, _onionPerBlock);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract OnionToken\",\"name\":\"_onion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_onionPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onionPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeaddr\",\"type\":\"address\"}],\"name\":\"fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onion\",\"outputs\":[{\"internalType\":\"contract OnionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onionPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingOnion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accOnionPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_onionPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChoppingBoard", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e421217568b278a46d29c7dd064ac947c20e02f9000000000000000000000000d6c356969bb978aa955cefef61a5ffe7c4bf925d000000000000000000000000d6c356969bb978aa955cefef61a5ffe7c4bf925d00000000000000000000000000000000000000000000000006f05b59d3b20000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb04ecd9bf5d1fdcab3d330b6dac317e56d1c3443cc0afa5f15f3b1d69a725b4"}