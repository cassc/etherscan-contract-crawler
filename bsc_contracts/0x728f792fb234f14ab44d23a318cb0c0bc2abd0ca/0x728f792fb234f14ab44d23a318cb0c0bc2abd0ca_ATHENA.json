{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ATH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IStaking {\\n    function bonusUsdt(uint256 _amount) external;\\n}\\n\\ncontract ATHENA {\\n    string public name = \\\"ATHENA\\\";\\n    string public symbol = \\\"ATH\\\";\\n    uint8 public decimals = 18;\\n    uint256 public totalSupply = 0;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    address public owner;\\n    address public lpStaking;\\n    address private burnAddress = 0x000000000000000000000000000000000000dEaD; //\u71c3\u70e7\u5730\u5740\\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //uniswapRouter\\n    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; //usdtAddress\\n    address public lpPairAddress; //lpPairAddress\\n    bool public swapTokenToMarketEnabled = true;\\n    uint256 public swapTokenOverflowNum = 500 * 10**decimals; //\u8d85\u8fc7\u591a\u5c11\u4e2atoken\u53ef\u4ee5\u8f6c\u6362\u6210\u5e02\u573a 500\\n\\n    uint256 public buyFee = 30; // 30/1000\\n    uint256 public buyInviteFee = 10; // 10/1000\\n    uint256 public burnFee = 10; // 10/1000\\n    uint256 public operateFee = 10; // 10/1000\\n    address public operateAddress = 0xDb075E924a3845Ce3DBcD669fe565cDA1c17d325; //1%\u8fd0\u8425\\n\\n    uint256 public sellFee = 60; // 60/1000\\n    uint256 public sellInviteFee = 10; // 10/1000\\n    uint256 public lpFee = 20; // 20/1000\\n    uint256 public marketFee = 30; // 10/1000 //\u5956\u52b1\u5e02\u573a\u94b1\u5305\uff0c\u5206\u7ea2\u89e6\u53d1\u5356\u6210USDT\\n\\n    bool public isBuy = false; // \u4e70\u5165\u5f00\u5173\\n\\n    mapping(address => bool) public whitelist; // \u767d\u540d\u5355\\n    mapping(address => bool) public blacklist; // \u9ed1\u540d\u5355\\n    mapping(address => bool) public pairlist; // \u6d41\u52a8\u6c60\\n\\n    mapping(address => address) public inviter; // \u9080\u8bf7\u4eba\\n    mapping(address => uint256) public inviteCount; // \u9080\u8bf7\u4eba\u6570\u91cf\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed holder,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event BindInviter(address indexed _user, address indexed _inviter);\\n\\n    constructor(address dao_, address _lp_staking) {\\n        owner = msg.sender;\\n        lpStaking = _lp_staking;\\n\\n        whitelist[owner] = true;\\n        whitelist[dao_] = true;\\n        whitelist[lpStaking] = true;\\n        whitelist[address(this)] = true;\\n\\n        uint256 _totalSupply = 10000000 * 10**decimals;\\n        uint256 lpSupply = 3360000 * 10**decimals;\\n        _mint(dao_, _totalSupply - lpSupply);\\n        _mint(lpStaking, lpSupply);\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\\n        lpPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), usdtAddress);\\n        pairlist[lpPairAddress] = true;\\n\\n        allowance[address(this)][routerAddress] = ~uint256(0);\\n        safeApprove(usdtAddress, lpStaking, ~uint256(0));\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(msg.sender == owner);\\n        owner = newOwner;\\n    }\\n\\n    function setOperateAddress(address _operateAddress) public onlyOwner {\\n        operateAddress = _operateAddress;\\n    }\\n\\n    function setLpStaking(address _lp_staking) public onlyOwner {\\n        lpStaking = _lp_staking;\\n    }\\n\\n    function setBurnAddress(address _burnAddress) public onlyOwner {\\n        burnAddress = _burnAddress;\\n    }\\n\\n    function setLpPairAddress(address _lpPairAddress) public onlyOwner {\\n        lpPairAddress = _lpPairAddress;\\n    }\\n\\n    function setUsdtAddress(address _usdtAddress) public onlyOwner {\\n        usdtAddress = _usdtAddress;\\n    }\\n\\n    function setSwapTokenToMarketEnabled(bool _swapTokenToMarketEnabled)\\n        public\\n        onlyOwner\\n    {\\n        swapTokenToMarketEnabled = _swapTokenToMarketEnabled;\\n    }\\n\\n    function setSwapTokenOverflowNum(uint256 _swapTokenOverflowNum)\\n        public\\n        onlyOwner\\n    {\\n        swapTokenOverflowNum = _swapTokenOverflowNum;\\n    }\\n\\n    function setBuyFee(\\n        uint256 _inviteFee,\\n        uint256 _burnFee,\\n        uint256 _operateFee\\n    ) public onlyOwner {\\n        buyFee = _inviteFee + _burnFee + _operateFee;\\n        require(buyFee <= 1000, \\\"fee rate max error\\\");\\n        buyInviteFee = _inviteFee;\\n        burnFee = _burnFee;\\n        operateFee = _operateFee;\\n    }\\n\\n    function setSellFee(\\n        uint256 _inviteFee,\\n        uint256 _lpFee,\\n        uint256 _marketFee\\n    ) public onlyOwner {\\n        sellFee = _inviteFee + _lpFee + _marketFee;\\n        require(sellFee <= 1000, \\\"fee rate max error\\\");\\n        sellInviteFee = _inviteFee;\\n        lpFee = _lpFee;\\n        marketFee = _marketFee;\\n    }\\n\\n    function setWhitelist(address[] memory addrlist, bool value)\\n        public\\n        onlyOwner\\n    {\\n        require(addrlist.length > 0, \\\"lsit empty error\\\");\\n        for (uint256 i = 0; i < addrlist.length; i++) {\\n            whitelist[addrlist[i]] = value;\\n        }\\n    }\\n\\n    function setBlacklist(address[] memory addrlist, bool value)\\n        public\\n        onlyOwner\\n    {\\n        require(addrlist.length > 0, \\\"lsit empty error\\\");\\n        for (uint256 i = 0; i < addrlist.length; i++) {\\n            blacklist[addrlist[i]] = value;\\n        }\\n    }\\n\\n    function setIsBuy(bool _isBuy) public onlyOwner {\\n        isBuy = _isBuy;\\n    }\\n\\n    function setPairlist(address addr, bool value) public onlyOwner {\\n        pairlist[addr] = value;\\n    }\\n\\n    // \u7ed1\u5b9a\u9080\u8bf7\u4eba\\n    function setInviter(address inviter_) external virtual returns (bool) {\\n        require(inviter[msg.sender] == address(0), \\\"has been invited\\\");\\n        require(msg.sender != inviter_, \\\"don't invite yourself\\\");\\n\\n        require(inviter[inviter_] != msg.sender, \\\"inviter invited error\\\");\\n\\n        inviter[msg.sender] = inviter_;\\n        inviteCount[inviter_] += 1;\\n        emit BindInviter(msg.sender, inviter_);\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 currentAllowance = allowance[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            allowance[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = allowance[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!blacklist[sender], \\\"ERC20: transfer from blacklisted account\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = balanceOf[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            balanceOf[sender] = senderBalance - amount;\\n        }\\n        balanceOf[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowance[holder][spender] = amount;\\n        emit Approval(holder, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        if (amount == 0 || whitelist[to] || whitelist[from]) {\\n            return;\\n        }\\n        if (pairlist[from] && buyFee > 0) {\\n            require(isBuy, \\\"ERC20: buy error\\\");\\n            takeFee(to, burnAddress, amount, burnFee);\\n            takeFee(to, operateAddress, amount, operateFee);\\n\\n            address _invite = inviter[to];\\n            if (_invite != address(0)) {\\n                takeFee(to, _invite, amount, buyInviteFee);\\n            } else {\\n                takeFee(to, operateAddress, amount, buyInviteFee);\\n            }\\n        } else if (pairlist[to] && sellFee > 0) {\\n            takeFee(to, lpPairAddress, amount, lpFee);\\n            address _invite = inviter[from];\\n            if (_invite != address(0)) {\\n                takeFee(to, _invite, amount, sellInviteFee);\\n            } else {\\n                takeFee(to, operateAddress, amount, sellInviteFee);\\n            }\\n\\n            takeFee(to, address(this), amount, marketFee);\\n        } else {\\n            swapTokensForToken();\\n        }\\n    }\\n\\n    function takeFee(\\n        address _spender,\\n        address _to,\\n        uint256 amount,\\n        uint256 _feeRate\\n    ) private {\\n        if (_feeRate > 0) {\\n            uint256 _fee = (amount * _feeRate) / 1000;\\n            balanceOf[_to] += _fee;\\n            balanceOf[_spender] -= _fee;\\n            emit Transfer(_spender, _to, _fee);\\n        }\\n    }\\n\\n    function swapTokensForToken() public {\\n        uint256 tokenAmount = balanceOf[address(this)];\\n        if (swapTokenToMarketEnabled && tokenAmount >= swapTokenOverflowNum) {\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = usdtAddress;\\n\\n            uint256 balanceBefore = IERC20(usdtAddress).balanceOf(lpStaking); //\u517c\u5bb9\u6709\u624b\u7eed\u8d39\u7684\u4ee3\u5e01\\n\\n            IUniswapV2Router02(routerAddress)\\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    tokenAmount,\\n                    0, // accept any amount of ETH\\n                    path,\\n                    lpStaking,\\n                    block.timestamp\\n                );\\n\\n            uint256 balanceAdd = IERC20(usdtAddress).balanceOf(lpStaking) -\\n                balanceBefore; //\u517c\u5bb9\u6709\u624b\u7eed\u8d39\u7684\u4ee3\u5e01\\n\\n            IStaking(lpStaking).bonusUsdt(balanceAdd);\\n        }\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function approveUinswap() public onlyOwner {\\n        allowance[address(this)][routerAddress] = ~uint256(0);\\n    }\\n\\n    function approveToken(address token, address to) public onlyOwner {\\n        safeApprove(token, to, ~uint256(0));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"BindInviter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveUinswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrlist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inviteFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operateFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter_\",\"type\":\"address\"}],\"name\":\"setInviter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBuy\",\"type\":\"bool\"}],\"name\":\"setIsBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPairAddress\",\"type\":\"address\"}],\"name\":\"setLpPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp_staking\",\"type\":\"address\"}],\"name\":\"setLpStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operateAddress\",\"type\":\"address\"}],\"name\":\"setOperateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPairlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inviteFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokenOverflowNum\",\"type\":\"uint256\"}],\"name\":\"setSwapTokenOverflowNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapTokenToMarketEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapTokenToMarketEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrlist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenOverflowNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenToMarketEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ATHENA", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000b403b5332819e8597fbc2a6eb2c7c66c2bdfbe0000000000000000000000009f4534e143eaee4e4cb278b5aaf71408df74e509", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}