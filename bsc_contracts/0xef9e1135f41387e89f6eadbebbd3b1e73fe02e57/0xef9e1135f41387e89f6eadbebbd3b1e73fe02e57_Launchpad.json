{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n    function nonces(address owner) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\nlibrary Address {\r\n    error AddressInsufficientBalance(address account);\r\n    error AddressEmptyCode(address target);\r\n    error FailedInnerCall();\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, defaultRevert);\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, customRevert);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, defaultRevert);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, defaultRevert);\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, defaultRevert);\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check if target is a contract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                if (target.code.length == 0) {\r\n                    revert AddressEmptyCode(target);\r\n                }\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, customRevert);\r\n        }\r\n    }\r\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\r\n        return verifyCallResult(success, returndata, defaultRevert);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, customRevert);\r\n        }\r\n    }\r\n    function defaultRevert() internal pure {\r\n        revert FailedInnerCall();\r\n    }\r\n\r\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            customRevert();\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    error SafeERC20FailedOperation(address token);\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        if (nonceAfter != nonceBefore + 1) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Launchpad {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    IERC20 usdtAddress;\r\n    address launcpadOwner;\r\n    uint256 platformFees = 0.001 ether ;\r\n    event CreatePresale(address indexed tokenAddress,address indexed from,address indexed to,uint256 amount);\r\n    event AddMore(uint256 indexed count,uint256 indexed amount);\r\n    event InvesWithBNB(uint256 indexed count,uint256 indexed amount);\r\n    event InvestWithUSDT(uint256 indexed count,uint256 indexed amount);\r\n    event UpdatePrice(uint256 indexed count,uint256 indexed price);\r\n    event UpdateMinInvestment(uint256 indexed count,uint256 indexed minimumInvestment);\r\n    event UpdateTime(uint256 indexed count, uint256 indexed startingtime,uint256 indexed endingTime);\r\n    event UpdateMetadata(uint256 indexed count,string indexed metadata);\r\n\r\n    event ClosePresale(uint256 indexed count);\r\n    struct details{\r\n        address tokenAddress;\r\n        string metadata;\r\n        address seller;\r\n        uint256 amount;\r\n        uint256 prelaunchprice;\r\n        uint256 price;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 minimumInvestment;\r\n        uint256 maximumInvestment;\r\n        uint256 remainingAmount;\r\n        bool status;\r\n    }\r\n    mapping(uint256 => details) presaleDetails;\r\n    mapping(uint256 => mapping(address => bool)) public isPurchasedListed;\r\n    uint256 presaleCounter = 0;\r\n    constructor(IERC20 _usdtAddress) {\r\n        launcpadOwner = msg.sender;\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n    modifier onlyLaunchpadOwner(){\r\n        require(msg.sender == launcpadOwner,\"Launchpad owner can call\");\r\n        _;\r\n    }\r\n function createPresale(\r\n    address _tokenAddress,\r\n    string memory _metadata,\r\n    uint256 _amount,\r\n    uint256 _prelaunchprice,\r\n    uint256 _price,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _minimumInvestment,\r\n    uint256 _maximumInvestment\r\n    ) \r\n    \r\n    public  returns (bool){\r\n        presaleCounter ++ ;\r\n        require(msg.sender == launcpadOwner,\"Launchpad owner can call\");\r\n        IERC20 tokenAddress = IERC20(_tokenAddress);\r\n        require(presaleDetails[presaleCounter].status == false,\"token on presale already\");\r\n        require(tokenAddress.balanceOf(msg.sender) >= _amount,\"insufficient amount\");\r\n        require(presaleDetails[presaleCounter].maximumInvestment >= presaleDetails[presaleCounter].minimumInvestment,\"maximum investment should be greater than minimum invesment\");\r\n        tokenAddress.transferFrom(msg.sender,address(this), _amount);\r\n        presaleDetails[presaleCounter].tokenAddress = _tokenAddress;\r\n        presaleDetails[presaleCounter].seller = msg.sender;\r\n        presaleDetails[presaleCounter].metadata = _metadata;\r\n        presaleDetails[presaleCounter].price = _price;\r\n        presaleDetails[presaleCounter].amount = _amount;\r\n        presaleDetails[presaleCounter].prelaunchprice= _prelaunchprice;\r\n        presaleDetails[presaleCounter].endTime = _endTime;\r\n        presaleDetails[presaleCounter].startTime = _startTime;\r\n        presaleDetails[presaleCounter].minimumInvestment = _minimumInvestment;\r\n        presaleDetails[presaleCounter].maximumInvestment = _maximumInvestment;\r\n        presaleDetails[presaleCounter].remainingAmount = _amount;\r\n        presaleDetails[presaleCounter].status = true;\r\n        emit CreatePresale(_tokenAddress, msg.sender, address(this), _amount);\r\n        return true;\r\n    }\r\n    function getPresaleDetail(uint256 _counter) public view returns(address _tokenAddress,\r\n    address _seller,string memory _metadata,uint256 _price,uint256 _startTime,\r\n    uint256 _endTime,uint256 _minimumInvestment,uint256 _maximumInvestment,\r\n    uint256 _remainingAmount,uint256 price, uint256 _amount){\r\n       details storage pre = presaleDetails[(_counter)];\r\n       return(pre.tokenAddress,pre.seller,pre.metadata,pre.prelaunchprice,pre.startTime,pre.endTime,pre.minimumInvestment,pre.maximumInvestment,pre.remainingAmount,pre.price, pre.amount);\r\n    }\r\n    function totalPresale() public view returns(uint256){\r\n        return presaleCounter;\r\n    }\r\n    function investWithBNB(uint256 _count,uint256 _amount) public payable returns(bool) {\r\n        require(!isPurchasedListed[_count][msg.sender], \"Address has purchased already\");\r\n        IERC20 _tokenAddress = IERC20(presaleDetails[_count].tokenAddress);\r\n        uint256 _price = _amount.mul(presaleDetails[_count].prelaunchprice);\r\n        require (_tokenAddress.balanceOf(address(this)) >= _amount,\"tokens are not enough\");\r\n        require(msg.value <= presaleDetails[_count].maximumInvestment,\"increase maximum investment \");\r\n        require(msg.value <= presaleDetails[_count].maximumInvestment,\"increase maximum investment \");\r\n        require(presaleDetails[_count].endTime >= block.timestamp,\"presale ended\");\r\n        payable(presaleDetails[_count].seller).transfer(_price);\r\n        _tokenAddress.approve(msg.sender,_amount);\r\n        _tokenAddress.transferFrom(address(this),msg.sender,_amount);\r\n        presaleDetails[_count].remainingAmount = presaleDetails[_count].remainingAmount.sub(_amount);\r\n        emit InvesWithBNB(_count,_amount);\r\n        isPurchasedListed[_count][msg.sender] = true;\r\n        presaleCounter ++;\r\n        return true;\r\n    } \r\n    function investWithUSDT(uint256 _count, uint256 _USDTamount)public returns(uint256){\r\n        require(!isPurchasedListed[_count][msg.sender], \"Address has purchased already\");\r\n        IERC20 _tokenAddress = IERC20 (presaleDetails[_count].tokenAddress);\r\n        uint256 _amount = _USDTamount.mul(presaleDetails[_count].prelaunchprice).div(1e18);\r\n        require(_USDTamount <= presaleDetails[_count].maximumInvestment,\"increase maximum investment \");\r\n        require(_USDTamount >= presaleDetails[_count].minimumInvestment,\"less than minimum investment \");\r\n        require(presaleDetails[_count].status == true,\"presale status ended\");\r\n        require(presaleDetails[_count].endTime >= block.timestamp,\"presale time ended\");\r\n        require(presaleDetails[_count].startTime <= block.timestamp,\"presale is not active\");\r\n        require(_tokenAddress.balanceOf(address(this)) >= _amount,\"balance low\");\r\n        usdtAddress.transferFrom(msg.sender, presaleDetails[_count].seller, _USDTamount);\r\n        _tokenAddress.transfer(msg.sender,_amount);\r\n        presaleDetails[_count].remainingAmount = presaleDetails[_count].remainingAmount.sub(_amount);\r\n        emit InvestWithUSDT(_count, _USDTamount);\r\n        isPurchasedListed[_count][msg.sender] = true;\r\n        return _amount;\r\n    }\r\n\r\n     function checkPurchase(uint256 _count,address user)public view returns(bool){\r\n        return isPurchasedListed[_count][user];\r\n    }\r\n    function closePresale(uint256 _count) public returns (bool) {\r\n        IERC20 _tokenAddress = IERC20(presaleDetails[_count].tokenAddress);\r\n        require(msg.sender==presaleDetails[_count].seller,\"only seller can call\" );\r\n        _tokenAddress.transfer(msg.sender, _tokenAddress.balanceOf(address(this)));\r\n        presaleDetails[_count].status = false;\r\n        emit ClosePresale(_count);\r\n        return true;\r\n    }\r\n    function withdrawTokens(uint256 _amount, address _tokenAddress) public returns (bool) {\r\n        require(msg.sender == launcpadOwner,\"Launchpad owner can call\");\r\n        IERC20 tokenAddress = IERC20(_tokenAddress);\r\n        tokenAddress.transfer(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    function updateTime(uint256 _count, uint256 _startingtime,uint256 _endingTime) public{\r\n        require(msg.sender == presaleDetails[_count].seller,\"seller can call\");\r\n        presaleDetails[_count].startTime = _startingtime;\r\n        presaleDetails[_count].endTime = _endingTime;\r\n        emit UpdateTime(_count,_startingtime,_endingTime);\r\n    }\r\n\r\n    function updateUsdtAddress(IERC20 _usdtAddress) public  {\r\n        require(msg.sender == launcpadOwner,\"Launchpad owner can call\");\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    function updateLaunchPadOwner(address _newOwner) public  {\r\n        require(msg.sender == launcpadOwner,\"Launchpad owner can call\");\r\n        launcpadOwner = _newOwner;\r\n    }\r\n\r\n    function updateMetadata(uint256 _count, string memory _metadata) public{\r\n        require(msg.sender == presaleDetails[_count].seller,\"seller can call\");\r\n        presaleDetails[_count].metadata = _metadata;\r\n        emit UpdateMetadata(_count,_metadata);\r\n    }\r\n    function updatePrice(uint256 _count,uint256 _price) public {\r\n        require(msg.sender == presaleDetails[_count].seller,\"seller can call\");\r\n        presaleDetails[_count].prelaunchprice= _price;\r\n        emit UpdatePrice(_count,_price);\r\n    }\r\n\r\n    function updateMinInvestment(uint256 _count,uint256 _minInvest) public {\r\n        require(msg.sender == presaleDetails[_count].seller,\"seller can call\");\r\n        presaleDetails[_count].minimumInvestment= _minInvest;\r\n        emit UpdateMinInvestment(_count,_minInvest);\r\n    }\r\n    function addMoreTokens(uint256 _count,uint256 amount) public  returns(uint256){\r\n        IERC20 tokenAddress = IERC20(presaleDetails[_count].tokenAddress);\r\n        require(msg.sender == presaleDetails[_count].seller,\"seller can call\");\r\n        presaleDetails[_count].amount = presaleDetails[_count].amount + amount;\r\n        uint256 balance = tokenAddress.balanceOf(address(this));\r\n        balance  = balance + amount;\r\n        tokenAddress.transferFrom(msg.sender,address(this), amount);\r\n        emit AddMore(_count,amount);\r\n        return balance;\r\n    }\r\n    function getPresaleStatus(uint256 _count) public view returns(bool){\r\n        details storage pre = presaleDetails[_count];\r\n        return pre.status;\r\n    }\r\n    function calculateTokens(uint256 _usdt, uint256 _count ) public view returns(uint256){\r\n        details storage pre = presaleDetails[_count];\r\n        return _usdt.mul(pre.prelaunchprice).div(1e18);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddMore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ClosePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvesWithBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvestWithUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"UpdateMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minimumInvestment\",\"type\":\"uint256\"}],\"name\":\"UpdateMinInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startingtime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endingTime\",\"type\":\"uint256\"}],\"name\":\"UpdateTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMoreTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"closePresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prelaunchprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumInvestment\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"}],\"name\":\"getPresaleDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPresaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investWithBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_USDTamount\",\"type\":\"uint256\"}],\"name\":\"investWithUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPurchasedListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateLaunchPadOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInvest\",\"type\":\"uint256\"}],\"name\":\"updateMinInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endingTime\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"updateUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Launchpad", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a18ba0bd656b965beb865e3c3068756525b3f06dfa0d2e71cd06290e0c99c2a"}