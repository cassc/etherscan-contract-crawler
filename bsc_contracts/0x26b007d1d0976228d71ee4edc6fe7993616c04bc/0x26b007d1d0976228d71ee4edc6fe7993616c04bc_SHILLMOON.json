{"SourceCode": "/**\r\n      \u2726        \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591                  \u2726                                               \u2730\r\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2605                      \u2605\r\n        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588            \u2605\r\n      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591            \u2591\u2591\u2591\u2588\u2588\u2588                                           \u2605\r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591                   \u2591\u2591\u2591\u2588 \r\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591                     \r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591                             \r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591    \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2557\u2591\u2591\u2591\u2591 \u2588\u2588\u2557\u2591\u2591\u2591\u2591 \u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557 \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591 \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591 \u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591     \u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2551\u2591\u2591\u2591\u2591 \u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\r\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591    \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591 \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591 \u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591 \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\r\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591                            \r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591                   \u2591\u2591\u2591\u2588\r\n      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591            \u2591\u2591\u2591\u2588\u2588\u2588\u255d        \u2605                            \u2726      \r\n        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u255d\r\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u2550\u255d                      \u2730                      \u2605\r\n        \u2726    \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2550\u2550\u2550\u2550\u255d\r\n                  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d                                         \u2726                           \u2605 \r\n\r\nThe SHILLMOON protocol is composed of three elements:\r\n\r\n1. Hyper-deflationary tokenomics that tax ingress & egress, but allow for frictionless transfer,\r\n2. Automatic yield farming (\u201cautofarming\u201d) for community-controlled liquidity, and \r\n3. The \u201cShill Fund\u201d, which provides community incentives for active contributors.\r\n\r\nKey features:\r\n\ud83c\udf11 Incentivized shilling and community rewards using a capped mint function\r\n\ud83c\udf11 Community-controlled, autostaking liquidity (\"autofarming\")\r\n\ud83c\udf11 Deflationary tokenomics; fee on buy-and-sell but not transfer\r\n\ud83c\udf11 No reflect -> tax advantages\r\n\r\nFees-on-transfer:\r\n\ud83c\udf11 Maximum 10% fee to-and-from liquidity pools, including exchanges\r\n\ud83c\udf11 Initial/default fee of 5% farming rewards for liquidity providers, 5% burned\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/** \r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/token/ERC20/IERC20.sol \r\n*/\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/** \r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/utils/Context.sol \r\n*/\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n  function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\n/**\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/access/Ownable.sol \r\n*/\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n  constructor() { _setOwner(_msgSender()); }\r\n\r\n  function owner() public view virtual returns (address) { return _owner; }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  function renounceOwnership() public virtual onlyOwner { _setOwner(address(0)); }\r\n  \r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n/** \r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/token/ERC20/ERC20.sol\r\n- allowed _transfer() to burn address \r\n- allowed _mint() to burn address\r\n- removed _burn()\r\n- removed pre- and post- transfer hooks\r\n- moved _name, _symbol, constructor, name(), symbol(), decimals() to SHILLMOON\r\n*/\r\ncontract BEP20 is Context, IBEP20 {\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\r\n  \r\n  function balanceOf(address account) public view virtual override returns (uint256) { \r\n    return _balances[account]; \r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n    unchecked {\r\n      _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n  \r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n    unchecked {\r\n      _balances[sender] = senderBalance - amount;\r\n    }\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n}\r\n\r\n/**\r\nhttps://github.com/Uniswap/uniswap-v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/interfaces/IUniswapV2Pair.sol\r\n- only need sync method\r\n*/\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\n/**\r\nAll non-OpenZeppelin/Uniswap code is here.\r\nKey ideas:\r\n- Owner has ability to mint initialMintable amount + half of the burn to date.\r\n- Separate fee for ingress/egress (included accounts) & default transfers.\r\n- Owner can include addresses from the ingress/egress fee (liquidity pools).\r\n- Owner can set ingress/egress fee (up to 10%), split between a liquidity fee and a burn fee.\r\n- Owner can set a default transfer fee up to 2% in increments of 0.1%, and remove addresses from it. \r\n- \"Liquidity\" fee can be redirected to an address of the Owner's choice.\r\n*/\r\ncontract SHILLMOON is Ownable, BEP20 {\r\n  string constant _name = 'SHILLMOON';\r\n  string constant _symbol = 'SHILLMOON';\r\n  uint8 constant _decimals = 9;\r\n  uint256 constant _initialSupply = 900 *  (10 ** 12) * (10 ** _decimals);\r\n  uint256 constant _initialMintable = 100 *  (10 ** 12) * (10 ** _decimals);\r\n  uint256 public mintedToDate = 0 *  (10 ** 12) * (10 ** _decimals);\r\n  \r\n  uint256 public maxTxAmount = 0; \r\n  uint256 constant _minMaxTxAmount = 1 *  (10 ** 12) * (10 ** _decimals);\r\n\r\n  mapping (address => bool) private _isIncludedInFee;\r\n  mapping (address => bool) private _isExcludedFromFeeOnGeneralTransfer;\r\n\r\n  uint256 public feeOnGeneralTransfer = 0;\r\n  uint256 public burnFee = 5;\r\n  uint256 public liquidityFee = 5;\r\n  address public liquidityTarget = address(0);\r\n  bool public liquidityTargetIsIUniswapV2Pair = false;\r\n\r\n  constructor() { \r\n    super._mint(msg.sender, _initialSupply); \r\n    _isExcludedFromFeeOnGeneralTransfer[msg.sender] = true;\r\n  }\r\n\r\n  function name() public pure returns (string memory) { return _name; }\r\n  function symbol() public pure returns (string memory) { return _symbol; }\r\n  function decimals() public pure returns (uint8) { return _decimals; }\r\n\r\n  function mintable() public view returns (uint256) {\r\n    return _initialMintable + super.balanceOf(address(0)) / 2 - mintedToDate;\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal override {\r\n    require(amount <= mintable(), \"SHILLMOON: Minting cap exceeded\");\r\n    mintedToDate += amount;\r\n    super._mint(account, amount);\r\n  }\r\n\r\n  function mint(address[] memory receivers, uint256[] memory amounts) external onlyOwner() {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      _mint(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function sendToLiquidity() external {\r\n    uint256 amount = super.balanceOf(address(this));\r\n    require(amount > 0, \"SHILLMOON: Nothing to send to liquidity!\");\r\n    super._transfer(address(this), liquidityTarget, amount);\r\n    if (liquidityTargetIsIUniswapV2Pair) {\r\n      IUniswapV2Pair pair = IUniswapV2Pair(liquidityTarget);\r\n      pair.sync();\r\n    }\r\n  }\r\n\r\n  function isIncludedInFee(address account) external view returns (bool) {\r\n    return _isIncludedInFee[account];\r\n  }\r\n\r\n  function isExcludedFromFeeOnGeneralTransfer(address account) external view returns (bool) {\r\n    return _isExcludedFromFeeOnGeneralTransfer[account];\r\n  }\r\n\r\n  function includeInFee(address account) external onlyOwner() {\r\n    require(!_isIncludedInFee[account], \"SHILLMOON: Account is already included!\");\r\n    _isIncludedInFee[account] = true;\r\n  }\r\n\r\n  function excludeFromFee(address account) external onlyOwner() {\r\n    require(_isIncludedInFee[account], \"SHILLMOON: Account is already excluded!\");\r\n    _isIncludedInFee[account] = false;\r\n  }\r\n\r\n  function excludeFromFeeOnGeneralTransfer(address account) external onlyOwner() {\r\n    require(!_isExcludedFromFeeOnGeneralTransfer[account], \"SHILLMOON: Account is already excluded!\");\r\n    _isExcludedFromFeeOnGeneralTransfer[account] = true;\r\n  }\r\n\r\n  function includeInFeeOnGeneralTransfer(address account) external onlyOwner() {\r\n    require(_isExcludedFromFeeOnGeneralTransfer[account], \"SHILLMOON: Account is already included!\");\r\n    _isExcludedFromFeeOnGeneralTransfer[account] = false;\r\n  }\r\n\r\n  function setBurnFeePercent(uint256 fee) external onlyOwner() {\r\n    require(fee + liquidityFee <= 10, \"SHILLMOON: Total fee cannot be higher than 10%!\");\r\n    burnFee = fee; \r\n  }\r\n\r\n  function setLiqFeePercent(uint256 fee) external onlyOwner() {\r\n    require(fee + burnFee <= 10, \"SHILLMOON: Total fee cannot be higher than 10%!\");\r\n    liquidityFee = fee; \r\n  }\r\n\r\n  function setFeeOnGeneralTransfer(uint256 feeInTenthsOfPercent) external onlyOwner() {\r\n    require(feeInTenthsOfPercent <= 20, \"SHILLMOON: Fee on general transfer cannot be higher than 2%!\");\r\n    feeOnGeneralTransfer = feeInTenthsOfPercent; \r\n  }\r\n  \r\n  function setLiqTarget(address account, bool isIUniswapV2Pair) external onlyOwner() {\r\n    liquidityTarget = account; \r\n    liquidityTargetIsIUniswapV2Pair = isIUniswapV2Pair;\r\n  }\r\n\r\n  function setMaxTxAmount(uint256 trillions) external onlyOwner() {\r\n    uint256 amount = trillions *  (10 ** 12) * (10 ** _decimals);\r\n    require(amount >= _minMaxTxAmount, \"SHILLMOON: Maximum transaction amount too small!\");\r\n    maxTxAmount = amount; \r\n  }\r\n\r\n  function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n    uint256 burnAmount = (tAmount * burnFee) / 100;\r\n    uint256 liquidityAmount = (tAmount * liquidityFee) / 100;\r\n    uint256 transferAmount = (tAmount - burnAmount) - liquidityAmount;\r\n    return (transferAmount, burnAmount, liquidityAmount);\r\n  }\r\n\r\n  function _getGeneralTransferValues(uint tAmount) private view returns (uint256, uint256, uint256) {\r\n    uint256 taxAmount = (tAmount * feeOnGeneralTransfer) / 1000;\r\n    uint256 transferAmount = tAmount - taxAmount;\r\n    uint256 burnAmount = (taxAmount * burnFee) / (burnFee + liquidityFee);\r\n    uint256 liquidityAmount = taxAmount - burnAmount;\r\n    return (transferAmount, burnAmount, liquidityAmount);\r\n  }\r\n  \r\n  function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n    bool isOwner = false;\r\n    if (sender != owner() && recipient != owner()) { \r\n      require(amount <= maxTxAmount, \"SHILLMOON: Transfer amount exceeds the maxTxAmount.\");\r\n    } else {\r\n      isOwner = true;\r\n    }\r\n\r\n    if ((_isIncludedInFee[sender] || _isIncludedInFee[recipient]) && !isOwner) {\r\n      (uint256 transferAmount, uint256 burnAmount, uint256 liquidityAmount) = _getValues(amount);\r\n      super._transfer(sender, recipient, transferAmount); \r\n      super._transfer(sender, address(0), burnAmount); \r\n      super._transfer(sender, address(this), liquidityAmount);\r\n    } else if ((feeOnGeneralTransfer > 0) && \r\n               (!_isExcludedFromFeeOnGeneralTransfer[sender] || !_isExcludedFromFeeOnGeneralTransfer[recipient])) {\r\n      (uint256 transferAmount, uint256 burnAmount, uint256 liquidityAmount) = _getGeneralTransferValues(amount);\r\n      super._transfer(sender, recipient, transferAmount); \r\n      super._transfer(sender, address(0), burnAmount); \r\n      super._transfer(sender, address(this), liquidityAmount);\r\n    } else {\r\n      super._transfer(sender, recipient, amount);\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFeeOnGeneralTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnGeneralTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFeeOnGeneralTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFeeOnGeneralTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedInFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTargetIsIUniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedToDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInTenthsOfPercent\",\"type\":\"uint256\"}],\"name\":\"setFeeOnGeneralTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiqFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isIUniswapV2Pair\",\"type\":\"bool\"}],\"name\":\"setLiqTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trillions\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SHILLMOON", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d3d06a67b5b41e43a32620dfff5e7ecfa444226d2b7004262cd097cd85abab84"}