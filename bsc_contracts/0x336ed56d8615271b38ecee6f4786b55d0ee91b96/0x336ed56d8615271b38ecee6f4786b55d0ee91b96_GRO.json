{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Create2.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\r\n        );\r\n        return address(uint256(_data));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/PegToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract PegToken is Ownable, ERC20\r\n{\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _supply)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\t_setupDecimals(_decimals);\r\n\t\t_mint(_sender, _supply);\r\n\t}\r\n}\r\n\r\ncontract GRO is PegToken(\"Growth-Peg Token\", \"GRO\", 18, 1000000e18)\r\n{\r\n}\r\n\r\n// File: @openzeppelin/contracts/cryptography/ECDSA.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/SignatureValidator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract SignatureValidator\r\n{\r\n\tfunction calcSignatureHash(uint256 _transferId, bytes32 _txId) public pure returns (bytes32 _hash)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(_transferId, _txId));\r\n\t}\r\n\r\n\tfunction validateSignature(address _agent, uint256 _transferId, bytes32 _txId, bytes memory _signature) public pure returns (bool _valid)\r\n\t{\r\n\t\tbytes32 _hash = calcSignatureHash(_transferId, _txId);\r\n\t\treturn ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature) == _agent;\r\n\t}\r\n\r\n\tfunction requireValidSignature(address _agent, uint256 _transferId, bytes32 _txId, bytes memory _signature) internal\r\n\t{\r\n\t\trequire(validateSignature(_agent, _transferId, _txId, _signature), \"invalid signature\");\r\n\t\temit ValidSignature(_agent, _transferId, _txId, _signature);\r\n\t}\r\n\r\n\tevent ValidSignature(address indexed _agent, uint256 indexed _transferId, bytes32 indexed _txId, bytes _signature);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations in the context of the current\r\n * contract.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/TrustedBridge.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract TrustedBridge is ReentrancyGuard\r\n{\r\n\tuint256 constant BLOCK_TIME_TOLERANCE = 15 minutes;\r\n\r\n\tuint256 constant WITHDRAW_GRACE_PERIOD = 30 minutes;\r\n\r\n\tuint256 public chainId;\r\n\taddress public token;\r\n\r\n\tmapping (uint256 => Transfer) public transfers;\r\n\r\n\tstruct Transfer {\r\n\t\tuint256 timestamp;\r\n\t}\r\n\r\n\tmodifier onlyEOA()\r\n\t{\r\n\t\trequire(tx.origin == msg.sender, \"not an externally owned account\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction construct(uint256 _chainId, address _token) external\r\n\t{\r\n\t\tassert(chainId == 0);\r\n\t\tchainId = _chainId;\r\n\t\ttoken = _token;\r\n\t}\r\n\r\n\tfunction calcTransferId(address _bridge, uint256 _sourceChainId, uint256 _targetChainId, address _client, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp) public pure returns (uint256 _transferId)\r\n\t{\r\n\t\treturn uint256(keccak256(abi.encode(_bridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp)));\r\n\t}\r\n\r\n\tfunction deposit(uint256 _targetChainId, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId) external onlyEOA nonReentrant\r\n\t{\r\n\t\taddress _bridge = address(this);\r\n\t\tuint256 _sourceChainId = chainId;\r\n\t\taddress _client = msg.sender;\r\n\t\trequire(_sourceChainId != _targetChainId, \"invalid chain\");\r\n\t\trequire(transfers[_transferId].timestamp == 0, \"access denied\");\r\n\t\trequire(now - BLOCK_TIME_TOLERANCE <= _timestamp && _timestamp <= now + BLOCK_TIME_TOLERANCE, \"not available\");\r\n\t\trequire(_transferId == calcTransferId(_bridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp), \"invalid transfer id\");\r\n\t\tTransfers._pullFunds(token, _client, _sourceAmount);\r\n\t\tTransfers._pushFunds(token, _server, _sourceAmount);\r\n\t\ttransfers[_transferId].timestamp = now;\r\n\t\temit Deposit(_targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _sourceChainId, address _client, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId) external nonReentrant\r\n\t{\r\n\t\taddress _bridge = address(this);\r\n\t\tuint256 _targetChainId = chainId;\r\n\t\taddress _server = msg.sender;\r\n\t\trequire(_sourceChainId != _targetChainId, \"invalid chain\");\r\n\t\trequire(transfers[_transferId].timestamp == 0, \"access denied\");\r\n\t\trequire(now >= _timestamp + WITHDRAW_GRACE_PERIOD, \"not available\");\r\n\t\trequire(_transferId == calcTransferId(_bridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp), \"invalid transfer id\");\r\n\t\tTransfers._pullFunds(token, _server, _targetAmount);\r\n\t\tTransfers._pushFunds(token, _client, _targetAmount);\r\n\t\ttransfers[_transferId].timestamp = now;\r\n\t\temit Withdraw(_sourceChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\r\n\t}\r\n\r\n\tevent Deposit(uint256 indexed _targetChainId, address _client, address indexed _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 indexed _transferId);\r\n\tevent Withdraw(uint256 indexed _sourceChainId, address _client, address indexed _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 indexed _transferId);\r\n}\r\n\r\n// File: contracts/Operator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Operator is Ownable, ReentrancyGuard, SignatureValidator\r\n{\r\n\tuint256 public chainId;\r\n\taddress public bridge;\r\n\taddress public vault;\r\n\taddress public token;\r\n\r\n\tmapping (uint256 => bytes32) public transactions;\r\n\r\n\taddress[] public agents;\r\n\r\n\tfunction construct(uint256 _chainId, address _bridge, address _vault) external\r\n\t{\r\n\t\tassert(chainId == 0);\r\n\t\tchainId = _chainId;\r\n\t\tbridge = _bridge;\r\n\t\tvault = _vault;\r\n\t\ttoken = TrustedBridge(_bridge).token();\r\n\t}\r\n\r\n\tfunction processWithdraw(uint256 _sourceChainId, address _client, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId, bytes32 _txId, bytes memory _signatures) external nonReentrant\r\n\t{\r\n\t\trequire(agents.length >= 2, \"invalid agents\");\r\n\t\trequire(_sourceAmount >= _targetAmount, \"invalid amount\");\r\n\t\trequire(_signatures.length == 65 * agents.length, \"invalid length\");\r\n\t\tfor (uint256 _i = 0; _i < agents.length; _i++) {\r\n\t\t\taddress _agent = agents[_i];\r\n\t\t\tbytes memory _signature = new bytes(65);\r\n\t\t\tfor (uint256 _j = 0; _j < 65; _j++) {\r\n\t\t\t\t_signature[_j] = _signatures[65 * _i + _j];\r\n\t\t\t}\r\n\t\t\trequireValidSignature(_agent, _transferId, _txId, _signature);\r\n\t\t}\r\n\t\tTransfers._approveFunds(token, bridge, _targetAmount);\r\n\t\tTrustedBridge(bridge).withdraw(_sourceChainId, _client, _sourceAmount, _targetAmount, _timestamp, _transferId);\r\n\t\tassert(transactions[_transferId] == bytes32(0));\r\n\t\ttransactions[_transferId] = _txId;\r\n\t}\r\n\r\n\tfunction transferToVault(uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\tTransfers._pushFunds(token, vault, _amount);\r\n\t}\r\n\r\n\tfunction addAgent(address _agent) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_agent != address(0), \"invalid agent\");\r\n\t\tagents.push(_agent);\r\n\t\temit AddAgent(_agent);\r\n\t}\r\n\r\n\tfunction removeAgent(uint256 _index) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_index < agents.length, \"invalid index\");\r\n\t\taddress _agent = agents[_index];\r\n\t\tagents[_index] = agents[agents.length - 1];\r\n\t\tagents.pop();\r\n\t\temit RemoveAgent(_agent);\r\n\t}\r\n\r\n\tevent ValidSignature(address indexed _agent, uint256 indexed _transferId, bytes32 indexed _txId, bytes _signature);\r\n\tevent AddAgent(address _agent);\r\n\tevent RemoveAgent(address _agent);\r\n}\r\n\r\n// File: contracts/Panel.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Panel is Ownable, ReentrancyGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant DEFAULT_NETWORK_CONFIRMATIONS = 16;\r\n\tuint256 constant MINIMUM_NETWORK_CONFIRMATIONS = 8;\r\n\r\n\tuint256 public chainId;\r\n\taddress public bridge;\r\n\taddress public operator;\r\n\r\n\tuint256 public networkConfirmations = DEFAULT_NETWORK_CONFIRMATIONS;\r\n\tmapping (uint256 => Fee) public fees;\r\n\r\n\tstruct Fee {\r\n\t\tuint256 variableFeeRate;\r\n\t\tuint256 fixedFeeAmount;\r\n\t}\r\n\r\n\tfunction construct(uint256 _chainId, address _bridge, address _operator) external\r\n\t{\r\n\t\tassert(chainId == 0);\r\n\t\tchainId = _chainId;\r\n\t\tbridge = _bridge;\r\n\t\toperator = _operator;\r\n\t}\r\n\r\n\tfunction calcDepositParams(address _account, uint256 _amount, uint256 _chainId) external view returns (uint256 _targetChainId, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId)\r\n\t{\r\n\t\trequire(chainId != _chainId, \"invalid chain\");\r\n\t\tuint256 _feeAmount = _amount.mul(fees[_chainId].variableFeeRate).div(1e18).add(fees[_chainId].fixedFeeAmount);\r\n\t\trequire(_amount >= _feeAmount, \"insufficient amount\");\r\n\t\tuint256 _netAmount = _amount.sub(_feeAmount);\r\n\t\taddress _bridge = bridge;\r\n\t\tuint256 _sourceChainId = chainId;\r\n\t\t_targetChainId = _chainId;\r\n\t\taddress _client = _account;\r\n\t\t_server = operator;\r\n\t\t_sourceAmount = _amount;\r\n\t\t_targetAmount = _netAmount;\r\n\t\t_timestamp = now;\r\n\t\t_transferId = TrustedBridge(bridge).calcTransferId(_bridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp);\r\n\t\treturn (_targetChainId, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\r\n\t}\r\n\r\n\tfunction setNetworkConfirmations(uint256 _newNetworkConfirmations) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newNetworkConfirmations < MINIMUM_NETWORK_CONFIRMATIONS, \"invalid network confirmations\");\r\n\t\tuint256 _oldNetworkConfirmations = networkConfirmations;\r\n\t\tnetworkConfirmations = _newNetworkConfirmations;\r\n\t\temit NetworkConfirmationsChange(_oldNetworkConfirmations, _newNetworkConfirmations);\r\n\t}\r\n\r\n\tfunction setFee(uint256 _chainId, uint256 _newVariableFeeRate, uint256 _newFixedFeeAmount) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newVariableFeeRate <= 1e18, \"invalid fee rate\");\r\n\t\tuint256 _oldVariableFeeRate = fees[_chainId].variableFeeRate;\r\n\t\tuint256 _oldFixedFeeAmount = fees[_chainId].fixedFeeAmount;\r\n\t\tfees[_chainId].variableFeeRate = _newVariableFeeRate;\r\n\t\tfees[_chainId].fixedFeeAmount = _newFixedFeeAmount;\r\n\t\temit FeeChange(_chainId, _oldVariableFeeRate, _oldFixedFeeAmount, _newVariableFeeRate, _newFixedFeeAmount);\r\n\t}\r\n\r\n\tevent NetworkConfirmationsChange(uint256 _oldNetworkConfirmations, uint256 _newNetworkConfirmations);\r\n\tevent FeeChange(uint256 _chainId, uint256 _oldVariableFeeRate, uint256 _oldFixedFeeAmount, uint256 _newVariableFeeRate, uint256 _newFixedFeeAmount);\r\n}\r\n\r\n// File: contracts/SignatureRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract SignatureRegistry is SignatureValidator\r\n{\r\n\tmapping (uint256 => mapping (address => Signature)) public signatures;\r\n\r\n\tstruct Signature {\r\n\t\tbytes32 txId;\r\n\t\tbytes signature;\r\n\t}\r\n\r\n\tfunction registerSignature(uint256 _transferId, bytes32 _txId, bytes memory _signature) external\r\n\t{\r\n\t\taddress _agent = msg.sender;\r\n\t\trequireValidSignature(_agent, _transferId, _txId, _signature);\r\n\t\tsignatures[_transferId][_agent].txId = _txId;\r\n\t\tsignatures[_transferId][_agent].signature = _signature;\r\n\t}\r\n}\r\n\r\n// File: contracts/TimeLockedVault.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract TimeLockedVault is Ownable, ReentrancyGuard\r\n{\r\n\tuint256 constant WITHDRAWAL_WAIT_INTERVAL = 1 days;\r\n\tuint256 constant WITHDRAWAL_OPEN_INTERVAL = 1 days;\r\n\r\n\tmapping (address => Withdrawal) public withdrawals;\r\n\r\n\tstruct Withdrawal {\r\n\t\tuint256 timestamp;\r\n\t\taddress to;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tfunction announceWithdrawal(address _token, address _to, uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(withdrawals[_token].timestamp == 0, \"existing withdrawal\");\r\n\t\trequire(Transfers._getBalance(_token) >= _amount, \"insufficient balance\");\r\n\t\tuint256 _timestamp = now;\r\n\t\twithdrawals[_token].timestamp = _timestamp;\r\n\t\twithdrawals[_token].to = _to;\r\n\t\twithdrawals[_token].amount = _amount;\r\n\t\temit AnnounceWithdrawal(_token, _to, _amount, _timestamp);\r\n\t}\r\n\r\n\tfunction cancelWithdrawal(address _token) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _timestamp = withdrawals[_token].timestamp;\r\n\t\trequire(_timestamp != 0, \"unknown withdrawal\");\r\n\t\taddress _to = withdrawals[_token].to;\r\n\t\tuint256 _amount = withdrawals[_token].amount;\r\n\t\twithdrawals[_token].timestamp = 0;\r\n\t\twithdrawals[_token].to = address(0);\r\n\t\twithdrawals[_token].amount = 0;\r\n\t\temit CancelWithdrawal(_token, _to, _amount, _timestamp);\r\n\t}\r\n\r\n\tfunction withdraw(address _token, address _to, uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _timestamp = withdrawals[_token].timestamp;\r\n\t\trequire(_timestamp != 0, \"unknown withdrawal\");\r\n\t\trequire(_to == withdrawals[_token].to, \"to mismatch\");\r\n\t\trequire(_amount == withdrawals[_token].amount, \"amount mismatch\");\r\n\t\tuint256 _start = _timestamp + WITHDRAWAL_WAIT_INTERVAL;\r\n\t\tuint256 _end = _start + WITHDRAWAL_OPEN_INTERVAL;\r\n\t\trequire(_start <= now && now < _end, \"not available\");\r\n\t\tTransfers._pushFunds(_token, _to, _amount);\r\n\t\twithdrawals[_token].timestamp = 0;\r\n\t\twithdrawals[_token].to = address(0);\r\n\t\twithdrawals[_token].amount = 0;\r\n\t\temit Withdraw(_token, _to, _amount, _timestamp);\r\n\t}\r\n\r\n\tevent AnnounceWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\r\n\tevent CancelWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\r\n\tevent Withdraw(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for convenience. It is the single source for\r\n *      the current network and all related hardcoded contract addresses.\r\n */\r\nlibrary $\r\n{\r\n\tenum Network {\r\n\t\tMainnet, Ropsten, Rinkeby, Kovan, Goerli,\r\n\t\tBscmain, Bsctest,\r\n\t\tFtmmain, Ftmtest\r\n\t}\r\n\r\n\tNetwork constant NETWORK = Network.Bscmain;\r\n\r\n\tfunction chainId() internal pure returns (uint256 _chainid)\r\n\t{\r\n\t\tassembly { _chainid := chainid() }\r\n\t\treturn _chainid;\r\n\t}\r\n\r\n\tfunction network() internal pure returns (Network _network)\r\n\t{\r\n\t\tuint256 _chainid = chainId();\r\n\t\tif (_chainid == 1) return Network.Mainnet;\r\n\t\tif (_chainid == 3) return Network.Ropsten;\r\n\t\tif (_chainid == 4) return Network.Rinkeby;\r\n\t\tif (_chainid == 42) return Network.Kovan;\r\n\t\tif (_chainid == 5) return Network.Goerli;\r\n\t\tif (_chainid == 56) return Network.Bscmain;\r\n\t\tif (_chainid == 97) return Network.Bsctest;\r\n\t\tif (_chainid == 250) return Network.Ftmmain;\r\n\t\tif (_chainid == 4002) return Network.Ftmtest;\r\n\t\trequire(false, \"unsupported network\");\r\n\t}\r\n\r\n\taddress constant GRO =\r\n\t\tNETWORK == Network.Mainnet ? 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0 :\r\n\t\tNETWORK == Network.Ropsten ? 0x5BaF82B5Eddd5d64E03509F0a7dBa4Cbf88CF455 :\r\n\t\tNETWORK == Network.Rinkeby ? 0x020e317e70B406E23dF059F3656F6fc419411401 :\r\n\t\tNETWORK == Network.Kovan ? 0xFcB74f30d8949650AA524d8bF496218a20ce2db4 :\r\n\t\tNETWORK == Network.Goerli ? 0x464DF14dB50f46290CeDA1A8f7F0C6716c3c999D :\r\n\t\t// NETWORK == Network.Bscmain ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Ftmmain ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Ftmtest ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant UniswapV2_Compatible_ROUTER02 =\r\n\t\t// Ethereum / UniswapV2\r\n\t\tNETWORK == Network.Mainnet ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Ropsten ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Rinkeby ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Kovan ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\tNETWORK == Network.Goerli ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\r\n\t\t// Binance Smart Chain / PancakeSwap\r\n\t\tNETWORK == Network.Bscmain ? 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F :\r\n\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// Fantom Opera / fUNI\r\n\t\t// NETWORK == Network.Bscmain ? 0x0000000000000000000000000000000000000000 :\r\n\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n}\r\n\r\n// File: contracts/Deployer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Deployer is Ownable\r\n{\r\n\taddress constant NATIVE_TREASURY = 0x3E7Ff81efBbAdf5FCA2810086b7f4C17a4F3682f;\r\n\taddress constant PEGGED_TREASURY = 0x2165fa4a32B9c228cD55713f77d2e977297D03e8; // G\r\n\r\n\taddress constant NATIVE_DEFAULT_ADMIN = 0x3E7Ff81efBbAdf5FCA2810086b7f4C17a4F3682f;\r\n\taddress constant PEGGED_DEFAULT_ADMIN = 0xBf70B751BB1FC725bFbC4e68C4Ec4825708766c5; // S\r\n\r\n\tuint256 constant PEGGED_GRO_VAULT_ALLOCATION = 998000e18; // 998,000\r\n\tuint256 constant PEGGED_GRO_TREASURY_ALLOCATION = 1000e18; // 1,000\r\n\tuint256 constant PEGGED_GRO_OPERATOR_ALLOCATION = 1000e18; // 1,000\r\n\r\n\t$.Network constant NATIVE_NETWORK = $.Network.Mainnet;\r\n\tuint256 constant NATIVE_TARGET_CHAIN_ID = 56; // bscmain\r\n\tuint256 constant NATIVE_TARGET_VARIABLE_FEE_RATE = 3e16; // 3%\r\n\tuint256 constant NATIVE_TARGET_FIXED_FEE_AMOUNT = 0e18; // 0 GRO\r\n\r\n\t$.Network constant PEGGED_NETWORK = $.Network.Bscmain;\r\n\tuint256 constant PEGGED_TARGET_CHAIN_ID = 1; // mainnet\r\n\tuint256 constant PEGGED_TARGET_VARIABLE_FEE_RATE = 3e16; // 3%\r\n\tuint256 constant PEGGED_TARGET_FIXED_FEE_AMOUNT = 1e18; // 1 GRO\r\n\r\n\taddress constant DEFAULT_OPERATOR1 = 0xfd692394625c66cE3cfd62802D098902c2e92281;\r\n\taddress constant DEFAULT_OPERATOR2 = 0xfB468077695F7a2bAA0AdF394b5767Dd9eC140dB;\r\n\r\n\taddress public treasury;\r\n\taddress public admin;\r\n\taddress public token;\r\n\taddress public vault;\r\n\taddress public bridge;\r\n\taddress public operator;\r\n\taddress public panel;\r\n\taddress public registry;\r\n\r\n\tbool public deployed = false;\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\trequire($.NETWORK == $.network(), \"wrong network\");\r\n\t}\r\n\r\n\tfunction deploy() external onlyOwner\r\n\t{\r\n\t\trequire(!deployed, \"deploy unavailable\");\r\n\r\n\t\tbool _nativeNetwork = true\r\n\t\t\t&& $.NETWORK != $.Network.Bscmain\r\n\t\t\t&& $.NETWORK != $.Network.Bsctest\r\n\t\t\t&& $.NETWORK != $.Network.Ftmmain\r\n\t\t\t&& $.NETWORK != $.Network.Ftmtest;\r\n\r\n\t\t// publish contracts\r\n\t\tif (_nativeNetwork) {\r\n\t\t\ttreasury = NATIVE_TREASURY;\r\n\t\t\tadmin = NATIVE_DEFAULT_ADMIN;\r\n\t\t\ttoken = $.GRO;\r\n\t\t} else {\r\n\t\t\ttreasury = PEGGED_TREASURY;\r\n\t\t\tadmin = PEGGED_DEFAULT_ADMIN;\r\n\t\t\ttoken = LibDeployer1.publishGRO();\r\n\t\t\tregistry = LibDeployer1.publishSignatureRegistry();\r\n\t\t}\r\n\t\tvault = LibDeployer1.publishTimeLockedVault();\r\n\t\tbridge = LibDeployer2.publishTrustedBridge(token);\r\n\t\toperator = LibDeployer2.publishOperator(bridge, vault);\r\n\t\tpanel = LibDeployer2.publishPanel(bridge, operator);\r\n\r\n\t\t// configure panel\r\n\t\tif ($.NETWORK == NATIVE_NETWORK) {\r\n\t\t\tPanel(panel).setFee(NATIVE_TARGET_CHAIN_ID, NATIVE_TARGET_VARIABLE_FEE_RATE, NATIVE_TARGET_FIXED_FEE_AMOUNT);\r\n\t\t}\r\n\t\telse\r\n\t\tif ($.NETWORK == PEGGED_NETWORK) {\r\n\t\t\tPanel(panel).setFee(PEGGED_TARGET_CHAIN_ID, PEGGED_TARGET_VARIABLE_FEE_RATE, PEGGED_TARGET_FIXED_FEE_AMOUNT);\r\n\t\t}\r\n\r\n\t\t// configure operator\r\n\t\tOperator(operator).addAgent(DEFAULT_OPERATOR1);\r\n\t\tOperator(operator).addAgent(DEFAULT_OPERATOR2);\r\n\r\n\t\t// transfer total supply\r\n\t\tif (!_nativeNetwork) {\r\n\t\t\tTransfers._pushFunds(token, vault, PEGGED_GRO_VAULT_ALLOCATION);\r\n\t\t\tTransfers._pushFunds(token, treasury, PEGGED_GRO_TREASURY_ALLOCATION);\r\n\t\t\tTransfers._pushFunds(token, operator, PEGGED_GRO_OPERATOR_ALLOCATION);\r\n\t\t}\r\n\r\n\t\t// make sure all transfers occurred\r\n\t\trequire(Transfers._getBalance(token) == 0, \"GRO left over\");\r\n\r\n\t\t// transfer ownerships\r\n\t\tOwnable(vault).transferOwnership(admin);\r\n\t\tOwnable(operator).transferOwnership(admin);\r\n\t\tOwnable(panel).transferOwnership(admin);\r\n\r\n\t\t// wrap up the deployment\r\n\t\trenounceOwnership();\r\n\t\tdeployed = true;\r\n\t\temit DeployPerformed();\r\n\t}\r\n\r\n\tevent DeployPerformed();\r\n}\r\n\r\nlibrary LibDeployer1\r\n{\r\n\tfunction publishGRO() public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(GRO).creationCode);\r\n\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\r\n\t}\r\n\r\n\tfunction publishSignatureRegistry() public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(SignatureRegistry).creationCode);\r\n\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\r\n\t}\r\n\r\n\tfunction publishTimeLockedVault() public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(TimeLockedVault).creationCode);\r\n\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer2\r\n{\r\n\tfunction publishTrustedBridge(address _token) public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(TrustedBridge).creationCode);\r\n\t\t_address = Create2.deploy(0, bytes32(0), _bytecode);\r\n\t\tTrustedBridge(_address).construct($.chainId(), _token);\r\n\t\treturn _address;\r\n\t}\r\n\r\n\tfunction publishOperator(address _bridge, address _vault) public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(Operator).creationCode);\r\n\t\t_address = Create2.deploy(0, bytes32(0), _bytecode);\r\n\t\tOperator(_address).construct($.chainId(), _bridge, _vault);\r\n\t\treturn _address;\r\n\t}\r\n\r\n\tfunction publishPanel(address _bridge, address _operator) public returns (address _address)\r\n\t{\r\n\t\tbytes memory _bytecode = abi.encodePacked(type(Panel).creationCode);\r\n\t\t_address = Create2.deploy(0, bytes32(0), _bytecode);\r\n\t\tPanel(_address).construct($.chainId(), _bridge, _operator);\r\n\t\treturn _address;\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GRO", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://659a601164b01c2a165b9e249d673b55213c0109a3744480ba081fe905d02d1b"}