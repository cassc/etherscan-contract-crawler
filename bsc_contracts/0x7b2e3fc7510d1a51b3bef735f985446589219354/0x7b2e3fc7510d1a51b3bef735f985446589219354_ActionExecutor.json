{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ActionExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport { IActionDataStructures } from './interfaces/IActionDataStructures.sol';\\nimport { IGateway } from './crosschain/interfaces/IGateway.sol';\\nimport { IGatewayClient } from './crosschain/interfaces/IGatewayClient.sol';\\nimport { IRegistry } from './interfaces/IRegistry.sol';\\nimport { ISettings } from './interfaces/ISettings.sol';\\nimport { ITokenMint } from './interfaces/ITokenMint.sol';\\nimport { IVariableBalanceRecords } from './interfaces/IVariableBalanceRecords.sol';\\nimport { IVault } from './interfaces/IVault.sol';\\nimport { BalanceManagement } from './BalanceManagement.sol';\\nimport { CallerGuard } from './CallerGuard.sol';\\nimport { Pausable } from './Pausable.sol';\\nimport { SystemVersionId } from './SystemVersionId.sol';\\nimport { TokenMintError, ZeroAddressError } from './Errors.sol';\\nimport './helpers/AddressHelper.sol' as AddressHelper;\\nimport './helpers/DecimalsHelper.sol' as DecimalsHelper;\\nimport './helpers/GasReserveHelper.sol' as GasReserveHelper;\\nimport './helpers/RefundHelper.sol' as RefundHelper;\\nimport './helpers/TransferHelper.sol' as TransferHelper;\\nimport './Constants.sol' as Constants;\\n\\n/**\\n * @title ActionExecutor\\n * @notice The main contract for cross-chain swaps\\n */\\ncontract ActionExecutor is\\n    SystemVersionId,\\n    Pausable,\\n    ReentrancyGuard,\\n    CallerGuard,\\n    BalanceManagement,\\n    IGatewayClient,\\n    ISettings,\\n    IActionDataStructures\\n{\\n    /**\\n     * @dev The contract for action settings\\n     */\\n    IRegistry public registry;\\n\\n    /**\\n     * @dev The contract for variable balance storage\\n     */\\n    IVariableBalanceRecords public variableBalanceRecords;\\n\\n    uint256 private lastActionId = block.chainid * 1e7 + 555 ** 2;\\n\\n    /**\\n     * @notice Emitted when source chain action is performed\\n     * @param actionId The ID of the action\\n     * @param targetChainId The ID of the target chain\\n     * @param sourceSender The address of the user on the source chain\\n     * @param targetRecipient The address of the recipient on the target chain\\n     * @param gatewayType The type of cross-chain gateway\\n     * @param sourceToken The address of the input token on the source chain\\n     * @param targetToken The address of the output token on the target chain\\n     * @param amount The amount of the vault asset used for the action, with decimals set to 18\\n     * @param fee The fee amount, measured in vault asset with decimals set to 18\\n     * @param timestamp The timestamp of the action (in seconds)\\n     */\\n    event ActionSource(\\n        uint256 indexed actionId,\\n        uint256 indexed targetChainId,\\n        address indexed sourceSender,\\n        address targetRecipient,\\n        uint256 gatewayType,\\n        address sourceToken,\\n        address targetToken,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when target chain action is performed\\n     * @param actionId The ID of the action\\n     * @param sourceChainId The ID of the source chain\\n     * @param isSuccess The status of the action execution\\n     * @param timestamp The timestamp of the action (in seconds)\\n     */\\n    event ActionTarget(\\n        uint256 indexed actionId,\\n        uint256 indexed sourceChainId,\\n        bool indexed isSuccess,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when single-chain action is performed\\n     * @param actionId The ID of the action\\n     * @param sender The address of the user\\n     * @param recipient The address of the recipient\\n     * @param fromToken The address of the input token\\n     * @param toToken The address of the output token\\n     * @param fromAmount The input token amount\\n     * @param toAmount The output token amount\\n     * @param toTokenFee The fee amount, measured in the output token\\n     * @param timestamp The timestamp of the action (in seconds)\\n     */\\n    event ActionLocal(\\n        uint256 indexed actionId,\\n        address indexed sender,\\n        address recipient,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 toTokenFee,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted for source chain and single-chain actions when user's funds processing is completed\\n     * @param actionId The ID of the action\\n     * @param isLocal The action type flag, is true for single-chain actions\\n     * @param sender The address of the user\\n     * @param routerType The type of the swap router\\n     * @param fromTokenAddress The address of the swap input token\\n     * @param toTokenAddress The address of the swap output token\\n     * @param fromAmount The input token amount\\n     * @param resultAmount The swap result token amount\\n     */\\n    event SourceProcessed(\\n        uint256 indexed actionId,\\n        bool indexed isLocal,\\n        address indexed sender,\\n        uint256 routerType,\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        uint256 fromAmount,\\n        uint256 resultAmount\\n    );\\n\\n    /**\\n     * @notice Emitted for target chain actions when the user's funds processing is completed\\n     * @param actionId The ID of the action\\n     * @param recipient The address of the recipient\\n     * @param routerType The type of the swap router\\n     * @param fromTokenAddress The address of the swap input token\\n     * @param toTokenAddress The address of the swap output token\\n     * @param fromAmount The input token amount\\n     * @param resultAmount The swap result token amount\\n     */\\n    event TargetProcessed(\\n        uint256 indexed actionId,\\n        address indexed recipient,\\n        uint256 routerType,\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        uint256 fromAmount,\\n        uint256 resultAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when the variable balance is allocated on the target chain\\n     * @param actionId The ID of the action\\n     * @param recipient The address of the variable balance recipient\\n     * @param vaultType The type of the corresponding vault\\n     * @param amount The allocated variable balance amount\\n     */\\n    event VariableBalanceAllocated(\\n        uint256 indexed actionId,\\n        address indexed recipient,\\n        uint256 vaultType,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when the Registry contract address is updated\\n     * @param registryAddress The address of the Registry contract\\n     */\\n    event SetRegistry(address indexed registryAddress);\\n\\n    /**\\n     * @notice Emitted when the VariableBalanceRecords contract address is updated\\n     * @param recordsAddress The address of the VariableBalanceRecords contract\\n     */\\n    event SetVariableBalanceRecords(address indexed recordsAddress);\\n\\n    /**\\n     * @notice Emitted when the caller is not a registered cross-chain gateway\\n     */\\n    error OnlyGatewayError();\\n\\n    /**\\n     * @notice Emitted when the call is not from the current contract\\n     */\\n    error OnlySelfError();\\n\\n    /**\\n     * @notice Emitted when a cross-chain swap is attempted with the target chain ID matching the current chain\\n     */\\n    error SameChainIdError();\\n\\n    /**\\n     * @notice Emitted when a single-chain swap is attempted with the same token as input and output\\n     */\\n    error SameTokenError();\\n\\n    /**\\n     * @notice Emitted when the native token value of the transaction does not correspond to the swap amount\\n     */\\n    error NativeTokenValueError();\\n\\n    /**\\n     * @notice Emitted when the requested cross-chain gateway type is not set\\n     */\\n    error GatewayNotSetError();\\n\\n    /**\\n     * @notice Emitted when the requested swap router type is not set\\n     */\\n    error RouterNotSetError();\\n\\n    /**\\n     * @notice Emitted when the requested vault type is not set\\n     */\\n    error VaultNotSetError();\\n\\n    /**\\n     * @notice Emitted when the provided call value is not sufficient for the cross-chain message sending\\n     */\\n    error MessageFeeError();\\n\\n    /**\\n     * @notice Emitted when the swap amount is greater than the allowed maximum\\n     */\\n    error SwapAmountMaxError();\\n\\n    /**\\n     * @notice Emitted when the swap amount is less than the allowed minimum\\n     */\\n    error SwapAmountMinError();\\n\\n    /**\\n     * @notice Emitted when the swap process results in an error\\n     */\\n    error SwapError();\\n\\n    /**\\n     * @notice Emitted when there is no matching target swap info option\\n     */\\n    error TargetSwapInfoError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a registered cross-chain gateway\\n     */\\n    modifier onlyGateway() {\\n        if (!registry.isGatewayAddress(msg.sender)) {\\n            revert OnlyGatewayError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the caller is the current contract\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert OnlySelfError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deploys the ActionExecutor contract\\n     * @param _registry The address of the action settings registry contract\\n     * @param _variableBalanceRecords The address of the variable balance records contract\\n     * @param _actionIdOffset The initial offset of the action ID value\\n     * @param _owner The address of the initial owner of the contract\\n     * @param _managers The addresses of initial managers of the contract\\n     * @param _addOwnerToManagers The flag to optionally add the owner to the list of managers\\n     */\\n    constructor(\\n        IRegistry _registry,\\n        IVariableBalanceRecords _variableBalanceRecords,\\n        uint256 _actionIdOffset,\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) {\\n        _setRegistry(_registry);\\n        _setVariableBalanceRecords(_variableBalanceRecords);\\n\\n        lastActionId += _actionIdOffset;\\n\\n        _initRoles(_owner, _managers, _addOwnerToManagers);\\n    }\\n\\n    /**\\n     * @notice The standard \\\"receive\\\" function\\n     * @dev Is payable to allow receiving native token funds from a target swap router\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Sets the address of the action settings registry contract\\n     * @param _registry The address of the action settings registry contract\\n     */\\n    function setRegistry(IRegistry _registry) external onlyManager {\\n        _setRegistry(_registry);\\n    }\\n\\n    /**\\n     * @notice Executes a single-chain action\\n     * @param _localAction The parameters of the action\\n     */\\n    function executeLocal(\\n        LocalAction calldata _localAction\\n    ) external payable whenNotPaused nonReentrant checkCaller returns (uint256 actionId) {\\n        if (_localAction.fromTokenAddress == _localAction.toTokenAddress) {\\n            revert SameTokenError();\\n        }\\n\\n        // For single-chain swaps of the native token,\\n        // the value of the transaction should be equal to the swap amount\\n        if (\\n            _localAction.fromTokenAddress == Constants.NATIVE_TOKEN_ADDRESS &&\\n            msg.value != _localAction.swapInfo.fromAmount\\n        ) {\\n            revert NativeTokenValueError();\\n        }\\n\\n        uint256 initialBalance = address(this).balance - msg.value;\\n\\n        lastActionId++;\\n        actionId = lastActionId;\\n\\n        LocalSettings memory settings = registry.localSettings(\\n            msg.sender,\\n            _localAction.swapInfo.routerType\\n        );\\n\\n        (uint256 processedAmount, ) = _processSource(\\n            actionId,\\n            true,\\n            _localAction.fromTokenAddress,\\n            _localAction.toTokenAddress,\\n            _localAction.swapInfo,\\n            settings.router,\\n            settings.routerTransfer\\n        );\\n\\n        address recipient = _localAction.recipient == address(0)\\n            ? msg.sender\\n            : _localAction.recipient;\\n\\n        uint256 recipientAmount = _calculateLocalAmount(\\n            processedAmount,\\n            true,\\n            settings.systemFeeLocal,\\n            settings.isWhitelist\\n        );\\n\\n        if (_localAction.toTokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(recipient, recipientAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_localAction.toTokenAddress, recipient, recipientAmount);\\n        }\\n\\n        // - - - System fee transfer - - -\\n\\n        uint256 systemFeeAmount = processedAmount - recipientAmount;\\n\\n        if (systemFeeAmount > 0) {\\n            address feeCollector = settings.feeCollectorLocal;\\n\\n            if (feeCollector != address(0)) {\\n                if (_localAction.toTokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n                    TransferHelper.safeTransferNative(feeCollector, systemFeeAmount);\\n                } else {\\n                    TransferHelper.safeTransfer(\\n                        _localAction.toTokenAddress,\\n                        feeCollector,\\n                        systemFeeAmount\\n                    );\\n                }\\n            } else if (_localAction.toTokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n                initialBalance += systemFeeAmount; // Keep at the contract address\\n            }\\n        }\\n\\n        // - - -\\n\\n        // - - - Extra balance transfer - - -\\n\\n        RefundHelper.refundExtraBalance(address(this), initialBalance, payable(msg.sender));\\n\\n        // - - -\\n\\n        emit ActionLocal(\\n            actionId,\\n            msg.sender,\\n            recipient,\\n            _localAction.fromTokenAddress,\\n            _localAction.toTokenAddress,\\n            _localAction.swapInfo.fromAmount,\\n            recipientAmount,\\n            systemFeeAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes a cross-chain action\\n     * @param _action The parameters of the action\\n     */\\n    function execute(\\n        Action calldata _action\\n    ) external payable whenNotPaused nonReentrant checkCaller returns (uint256 actionId) {\\n        if (_action.targetChainId == block.chainid) {\\n            revert SameChainIdError();\\n        }\\n\\n        // For cross-chain swaps of the native token,\\n        // the value of the transaction should be greater or equal to the swap amount\\n        if (\\n            _action.sourceTokenAddress == Constants.NATIVE_TOKEN_ADDRESS &&\\n            msg.value < _action.sourceSwapInfo.fromAmount\\n        ) {\\n            revert NativeTokenValueError();\\n        }\\n\\n        uint256 initialBalance = address(this).balance - msg.value;\\n\\n        lastActionId++;\\n        actionId = lastActionId;\\n\\n        SourceSettings memory settings = registry.sourceSettings(\\n            msg.sender,\\n            _action.targetChainId,\\n            _action.gatewayType,\\n            _action.sourceSwapInfo.routerType,\\n            _action.vaultType\\n        );\\n\\n        if (settings.vault == address(0)) {\\n            revert VaultNotSetError();\\n        }\\n\\n        address vaultAsset = IVault(settings.vault).asset();\\n\\n        (uint256 processedAmount, uint256 nativeTokenSpent) = _processSource(\\n            actionId,\\n            false,\\n            _action.sourceTokenAddress,\\n            vaultAsset,\\n            _action.sourceSwapInfo,\\n            settings.router,\\n            settings.routerTransfer\\n        );\\n\\n        uint256 targetVaultAmountMax = _calculateVaultAmount(\\n            settings.sourceVaultDecimals,\\n            settings.targetVaultDecimals,\\n            processedAmount,\\n            true,\\n            settings.systemFee,\\n            settings.isWhitelist\\n        );\\n\\n        SwapInfo memory targetSwapInfo;\\n\\n        uint256 targetOptionsLength = _action.targetSwapInfoOptions.length;\\n\\n        if (targetOptionsLength == 0) {\\n            targetSwapInfo = SwapInfo({\\n                fromAmount: targetVaultAmountMax,\\n                routerType: uint256(0),\\n                routerData: new bytes(0)\\n            });\\n        } else {\\n            for (uint256 index; index < targetOptionsLength; index++) {\\n                SwapInfo memory targetSwapInfoOption = _action.targetSwapInfoOptions[index];\\n\\n                if (targetSwapInfoOption.fromAmount <= targetVaultAmountMax) {\\n                    targetSwapInfo = targetSwapInfoOption;\\n\\n                    break;\\n                }\\n            }\\n\\n            if (targetSwapInfo.fromAmount == 0) {\\n                revert TargetSwapInfoError();\\n            }\\n        }\\n\\n        uint256 sourceVaultAmount = DecimalsHelper.convertDecimals(\\n            settings.targetVaultDecimals,\\n            settings.sourceVaultDecimals,\\n            targetSwapInfo.fromAmount\\n        );\\n\\n        uint256 normalizedAmount = DecimalsHelper.convertDecimals(\\n            settings.sourceVaultDecimals,\\n            Constants.DECIMALS_DEFAULT,\\n            sourceVaultAmount\\n        );\\n\\n        if (!settings.isWhitelist) {\\n            _checkSwapAmountLimits(\\n                normalizedAmount,\\n                settings.swapAmountMin,\\n                settings.swapAmountMax\\n            );\\n        }\\n\\n        // - - - Transfer to vault - - -\\n\\n        TransferHelper.safeTransfer(vaultAsset, settings.vault, sourceVaultAmount);\\n\\n        // - - -\\n\\n        bytes memory targetMessageData = abi.encode(\\n            TargetMessage({\\n                actionId: actionId,\\n                sourceSender: msg.sender,\\n                vaultType: _action.vaultType,\\n                targetTokenAddress: _action.targetTokenAddress,\\n                targetSwapInfo: targetSwapInfo,\\n                targetRecipient: _action.targetRecipient == address(0)\\n                    ? msg.sender\\n                    : _action.targetRecipient\\n            })\\n        );\\n\\n        _sendMessage(settings, _action, targetMessageData, msg.value - nativeTokenSpent);\\n\\n        // - - - System fee transfer - - -\\n\\n        uint256 systemFeeAmount = processedAmount - sourceVaultAmount;\\n\\n        if (systemFeeAmount > 0 && settings.feeCollector != address(0)) {\\n            TransferHelper.safeTransfer(vaultAsset, settings.feeCollector, systemFeeAmount);\\n        }\\n\\n        // - - -\\n\\n        // - - - Extra balance transfer - - -\\n\\n        RefundHelper.refundExtraBalance(address(this), initialBalance, payable(msg.sender));\\n\\n        // - - -\\n\\n        _emitActionSourceEvent(\\n            actionId,\\n            _action,\\n            normalizedAmount,\\n            DecimalsHelper.convertDecimals(\\n                settings.sourceVaultDecimals,\\n                Constants.DECIMALS_DEFAULT,\\n                systemFeeAmount\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Variable token claim by user's variable balance\\n     * @param _vaultType The type of the variable balance vault\\n     */\\n    function claimVariableToken(\\n        uint256 _vaultType\\n    ) external whenNotPaused nonReentrant checkCaller {\\n        _processVariableBalanceRepayment(_vaultType, false);\\n    }\\n\\n    /**\\n     * @notice Vault asset claim by user's variable balance\\n     * @param _vaultType The type of the variable balance vault\\n     */\\n    function convertVariableBalanceToVaultAsset(\\n        uint256 _vaultType\\n    ) external whenNotPaused nonReentrant checkCaller {\\n        _processVariableBalanceRepayment(_vaultType, true);\\n    }\\n\\n    /**\\n     * @notice Cross-chain message fee estimation\\n     * @param _gatewayType The type of the cross-chain gateway\\n     * @param _targetChainId The ID of the target chain\\n     * @param _targetRouterDataOptions The array of transaction data options for the target chain\\n     * @param _gatewaySettings The settings specific to the selected cross-chain gateway\\n     */\\n    function messageFeeEstimate(\\n        uint256 _gatewayType,\\n        uint256 _targetChainId,\\n        bytes[] calldata _targetRouterDataOptions,\\n        bytes calldata _gatewaySettings\\n    ) external view returns (uint256) {\\n        if (_targetChainId == block.chainid) {\\n            return 0;\\n        }\\n\\n        MessageFeeEstimateSettings memory settings = registry.messageFeeEstimateSettings(\\n            _gatewayType\\n        );\\n\\n        if (settings.gateway == address(0)) {\\n            revert GatewayNotSetError();\\n        }\\n\\n        uint256 result = 0;\\n\\n        if (_targetRouterDataOptions.length == 0) {\\n            result = IGateway(settings.gateway).messageFee(\\n                _targetChainId,\\n                _blankMessage(new bytes(0)),\\n                _gatewaySettings\\n            );\\n        } else {\\n            for (uint256 index; index < _targetRouterDataOptions.length; index++) {\\n                bytes memory messageData = _blankMessage(_targetRouterDataOptions[index]);\\n\\n                uint256 value = IGateway(settings.gateway).messageFee(\\n                    _targetChainId,\\n                    messageData,\\n                    _gatewaySettings\\n                );\\n\\n                if (value > result) {\\n                    result = value;\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Swap result amount for single-chain actions, taking the system fee into account\\n     * @param _fromAmount The amount before the calculation\\n     * @param _isForward The direction of the calculation\\n     */\\n    function calculateLocalAmount(\\n        uint256 _fromAmount,\\n        bool _isForward\\n    ) external view returns (uint256 result) {\\n        LocalAmountCalculationSettings memory settings = registry.localAmountCalculationSettings(\\n            msg.sender\\n        );\\n\\n        return\\n            _calculateLocalAmount(\\n                _fromAmount,\\n                _isForward,\\n                settings.systemFeeLocal,\\n                settings.isWhitelist\\n            );\\n    }\\n\\n    /**\\n     * @notice Swap result amount for cross-chain actions, taking the system fee into account\\n     * @param _vaultType The type of the vault\\n     * @param _fromChainId The ID of the source chain\\n     * @param _toChainId The ID of the target chain\\n     * @param _fromAmount The amount before the calculation\\n     * @param _isForward The direction of the calculation\\n     */\\n    function calculateVaultAmount(\\n        uint256 _vaultType,\\n        uint256 _fromChainId,\\n        uint256 _toChainId,\\n        uint256 _fromAmount,\\n        bool _isForward\\n    ) external view returns (uint256 result) {\\n        VaultAmountCalculationSettings memory settings = registry.vaultAmountCalculationSettings(\\n            msg.sender,\\n            _vaultType,\\n            _fromChainId,\\n            _toChainId\\n        );\\n\\n        return\\n            _calculateVaultAmount(\\n                settings.fromDecimals,\\n                settings.toDecimals,\\n                _fromAmount,\\n                _isForward,\\n                settings.systemFee,\\n                settings.isWhitelist\\n            );\\n    }\\n\\n    /**\\n     * @notice The variable balance of the account\\n     * @param _account The address of the variable balance owner\\n     * @param _vaultType The type of the vault\\n     */\\n    function variableBalance(address _account, uint256 _vaultType) external view returns (uint256) {\\n        return variableBalanceRecords.getAccountBalance(_account, _vaultType);\\n    }\\n\\n    /**\\n     * @notice Cross-chain message handler on the target chain\\n     * @dev The function is called by cross-chain gateways\\n     * @param _messageSourceChainId The ID of the message source chain\\n     * @param _payloadData The content of the cross-chain message\\n     */\\n    function handleExecutionPayload(\\n        uint256 _messageSourceChainId,\\n        bytes calldata _payloadData\\n    ) external whenNotPaused onlyGateway {\\n        TargetMessage memory targetMessage = abi.decode(_payloadData, (TargetMessage));\\n\\n        TargetSettings memory settings = registry.targetSettings(\\n            targetMessage.vaultType,\\n            targetMessage.targetSwapInfo.routerType\\n        );\\n\\n        bool selfCallSuccess;\\n\\n        (bool hasGasReserve, uint256 gasAllowed) = GasReserveHelper.checkGasReserve(\\n            settings.gasReserve\\n        );\\n\\n        if (hasGasReserve) {\\n            try this.selfCallTarget{ gas: gasAllowed }(settings, targetMessage) {\\n                selfCallSuccess = true;\\n            } catch {}\\n        }\\n\\n        if (!selfCallSuccess) {\\n            _targetAllocateVariableBalance(targetMessage);\\n        }\\n\\n        emit ActionTarget(\\n            targetMessage.actionId,\\n            _messageSourceChainId,\\n            selfCallSuccess,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Controllable processing of the target chain logic\\n     * @dev Is called by the current contract to enable error handling\\n     * @param _settings Target action settings\\n     * @param _targetMessage The content of the cross-chain message\\n     */\\n    function selfCallTarget(\\n        TargetSettings calldata _settings,\\n        TargetMessage calldata _targetMessage\\n    ) external onlySelf {\\n        if (_settings.vault == address(0)) {\\n            revert VaultNotSetError();\\n        }\\n\\n        // - - - Transfer from vault - - -\\n\\n        address assetAddress = IVault(_settings.vault).requestAsset(\\n            _targetMessage.targetSwapInfo.fromAmount,\\n            address(this),\\n            false\\n        );\\n\\n        // - - -\\n\\n        _processTarget(\\n            _settings,\\n            _targetMessage.actionId,\\n            assetAddress,\\n            _targetMessage.targetTokenAddress,\\n            _targetMessage.targetSwapInfo,\\n            _targetMessage.targetRecipient\\n        );\\n    }\\n\\n    function _processSource(\\n        uint256 _actionId,\\n        bool _isLocal,\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        SwapInfo memory _sourceSwapInfo,\\n        address _routerAddress,\\n        address _routerTransferAddress\\n    ) private returns (uint256 resultAmount, uint256 nativeTokenSpent) {\\n        uint256 toTokenBalanceBefore = tokenBalance(_toTokenAddress);\\n\\n        if (_fromTokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            if (_routerAddress == address(0)) {\\n                revert RouterNotSetError();\\n            }\\n\\n            // - - - Source swap (native token) - - -\\n\\n            (bool routerCallSuccess, ) = payable(_routerAddress).call{\\n                value: _sourceSwapInfo.fromAmount\\n            }(_sourceSwapInfo.routerData);\\n\\n            if (!routerCallSuccess) {\\n                revert SwapError();\\n            }\\n\\n            // - - -\\n\\n            nativeTokenSpent = _sourceSwapInfo.fromAmount;\\n        } else {\\n            TransferHelper.safeTransferFrom(\\n                _fromTokenAddress,\\n                msg.sender,\\n                address(this),\\n                _sourceSwapInfo.fromAmount\\n            );\\n\\n            if (_fromTokenAddress != _toTokenAddress) {\\n                if (_routerAddress == address(0)) {\\n                    revert RouterNotSetError();\\n                }\\n\\n                // - - - Source swap (non-native token) - - -\\n\\n                TransferHelper.safeApprove(\\n                    _fromTokenAddress,\\n                    _routerTransferAddress,\\n                    _sourceSwapInfo.fromAmount\\n                );\\n\\n                (bool routerCallSuccess, ) = _routerAddress.call(_sourceSwapInfo.routerData);\\n\\n                if (!routerCallSuccess) {\\n                    revert SwapError();\\n                }\\n\\n                TransferHelper.safeApprove(_fromTokenAddress, _routerTransferAddress, 0);\\n\\n                // - - -\\n            }\\n\\n            nativeTokenSpent = 0;\\n        }\\n\\n        resultAmount = tokenBalance(_toTokenAddress) - toTokenBalanceBefore;\\n\\n        emit SourceProcessed(\\n            _actionId,\\n            _isLocal,\\n            msg.sender,\\n            _sourceSwapInfo.routerType,\\n            _fromTokenAddress,\\n            _toTokenAddress,\\n            _sourceSwapInfo.fromAmount,\\n            resultAmount\\n        );\\n    }\\n\\n    function _processTarget(\\n        TargetSettings memory settings,\\n        uint256 _actionId,\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        SwapInfo memory _targetSwapInfo,\\n        address _targetRecipient\\n    ) private {\\n        uint256 resultAmount;\\n\\n        if (_toTokenAddress == _fromTokenAddress) {\\n            resultAmount = _targetSwapInfo.fromAmount;\\n        } else {\\n            if (settings.router == address(0)) {\\n                revert RouterNotSetError();\\n            }\\n\\n            uint256 toTokenBalanceBefore = tokenBalance(_toTokenAddress);\\n\\n            // - - - Target swap - - -\\n\\n            TransferHelper.safeApprove(\\n                _fromTokenAddress,\\n                settings.routerTransfer,\\n                _targetSwapInfo.fromAmount\\n            );\\n\\n            (bool success, ) = settings.router.call(_targetSwapInfo.routerData);\\n\\n            if (!success) {\\n                revert SwapError();\\n            }\\n\\n            TransferHelper.safeApprove(_fromTokenAddress, settings.routerTransfer, 0);\\n\\n            // - - -\\n\\n            resultAmount = tokenBalance(_toTokenAddress) - toTokenBalanceBefore;\\n        }\\n\\n        if (_toTokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(_targetRecipient, resultAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_toTokenAddress, _targetRecipient, resultAmount);\\n        }\\n\\n        emit TargetProcessed(\\n            _actionId,\\n            _targetRecipient,\\n            _targetSwapInfo.routerType,\\n            _fromTokenAddress,\\n            _toTokenAddress,\\n            _targetSwapInfo.fromAmount,\\n            resultAmount\\n        );\\n    }\\n\\n    function _targetAllocateVariableBalance(TargetMessage memory _targetMessage) private {\\n        address tokenRecipient = _targetMessage.targetRecipient;\\n        uint256 vaultType = _targetMessage.vaultType;\\n        uint256 tokenAmount = _targetMessage.targetSwapInfo.fromAmount;\\n\\n        variableBalanceRecords.increaseBalance(tokenRecipient, vaultType, tokenAmount);\\n\\n        emit VariableBalanceAllocated(\\n            _targetMessage.actionId,\\n            tokenRecipient,\\n            vaultType,\\n            tokenAmount\\n        );\\n    }\\n\\n    function _processVariableBalanceRepayment(\\n        uint256 _vaultType,\\n        bool _convertToVaultAsset\\n    ) private {\\n        VariableBalanceRepaymentSettings memory settings = registry\\n            .variableBalanceRepaymentSettings(_vaultType);\\n\\n        if (settings.vault == address(0)) {\\n            revert VaultNotSetError();\\n        }\\n\\n        uint256 tokenAmount = variableBalanceRecords.getAccountBalance(msg.sender, _vaultType);\\n\\n        variableBalanceRecords.clearBalance(msg.sender, _vaultType);\\n\\n        if (tokenAmount > 0) {\\n            if (_convertToVaultAsset) {\\n                IVault(settings.vault).requestAsset(tokenAmount, msg.sender, true);\\n            } else {\\n                address variableTokenAddress = IVault(settings.vault).checkVariableTokenState();\\n\\n                bool mintSuccess = ITokenMint(variableTokenAddress).mint(msg.sender, tokenAmount);\\n\\n                if (!mintSuccess) {\\n                    revert TokenMintError();\\n                }\\n            }\\n        }\\n    }\\n\\n    function _setRegistry(IRegistry _registry) private {\\n        AddressHelper.requireContract(address(_registry));\\n\\n        registry = _registry;\\n\\n        emit SetRegistry(address(_registry));\\n    }\\n\\n    function _setVariableBalanceRecords(IVariableBalanceRecords _variableBalanceRecords) private {\\n        AddressHelper.requireContract(address(_variableBalanceRecords));\\n\\n        variableBalanceRecords = _variableBalanceRecords;\\n\\n        emit SetVariableBalanceRecords(address(_variableBalanceRecords));\\n    }\\n\\n    function _sendMessage(\\n        SourceSettings memory settings,\\n        Action calldata _action,\\n        bytes memory _messageData,\\n        uint256 _availableValue\\n    ) private {\\n        if (settings.gateway == address(0)) {\\n            revert GatewayNotSetError();\\n        }\\n\\n        uint256 messageFee = IGateway(settings.gateway).messageFee(\\n            _action.targetChainId,\\n            _messageData,\\n            _action.gatewaySettings\\n        );\\n\\n        if (_availableValue < messageFee) {\\n            revert MessageFeeError();\\n        }\\n\\n        IGateway(settings.gateway).sendMessage{ value: messageFee }(\\n            _action.targetChainId,\\n            _messageData,\\n            _action.gatewaySettings\\n        );\\n    }\\n\\n    function _emitActionSourceEvent(\\n        uint256 _actionId,\\n        Action calldata _action,\\n        uint256 _amount,\\n        uint256 _fee\\n    ) private {\\n        emit ActionSource(\\n            _actionId,\\n            _action.targetChainId,\\n            msg.sender,\\n            _action.targetRecipient,\\n            _action.gatewayType,\\n            _action.sourceTokenAddress,\\n            _action.targetTokenAddress,\\n            _amount,\\n            _fee,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _checkSwapAmountLimits(\\n        uint256 _normalizedAmount,\\n        uint256 _swapAmountMin,\\n        uint256 _swapAmountMax\\n    ) private pure {\\n        if (_normalizedAmount < _swapAmountMin) {\\n            revert SwapAmountMinError();\\n        }\\n\\n        if (_normalizedAmount > _swapAmountMax) {\\n            revert SwapAmountMaxError();\\n        }\\n    }\\n\\n    function _calculateLocalAmount(\\n        uint256 _fromAmount,\\n        bool _isForward,\\n        uint256 _systemFeeLocal,\\n        bool _isWhitelist\\n    ) private pure returns (uint256 result) {\\n        if (_isWhitelist || _systemFeeLocal == 0) {\\n            return _fromAmount;\\n        }\\n\\n        return\\n            _isForward\\n                ? (_fromAmount * (Constants.MILLIPERCENT_FACTOR - _systemFeeLocal)) /\\n                    Constants.MILLIPERCENT_FACTOR\\n                : (_fromAmount * Constants.MILLIPERCENT_FACTOR) /\\n                    (Constants.MILLIPERCENT_FACTOR - _systemFeeLocal);\\n    }\\n\\n    function _calculateVaultAmount(\\n        uint256 _fromDecimals,\\n        uint256 _toDecimals,\\n        uint256 _fromAmount,\\n        bool _isForward,\\n        uint256 _systemFee,\\n        bool _isWhitelist\\n    ) private pure returns (uint256 result) {\\n        bool isZeroFee = _isWhitelist || _systemFee == 0;\\n\\n        uint256 amountToConvert = (!_isForward || isZeroFee)\\n            ? _fromAmount\\n            : (_fromAmount * (Constants.MILLIPERCENT_FACTOR - _systemFee)) /\\n                Constants.MILLIPERCENT_FACTOR;\\n\\n        uint256 convertedAmount = DecimalsHelper.convertDecimals(\\n            _fromDecimals,\\n            _toDecimals,\\n            amountToConvert\\n        );\\n\\n        result = (_isForward || isZeroFee)\\n            ? convertedAmount\\n            : (convertedAmount * Constants.MILLIPERCENT_FACTOR) /\\n                (Constants.MILLIPERCENT_FACTOR - _systemFee);\\n    }\\n\\n    function _blankMessage(bytes memory _targetRouterData) private pure returns (bytes memory) {\\n        bytes memory messageData = abi.encode(\\n            TargetMessage({\\n                actionId: uint256(0),\\n                sourceSender: address(0),\\n                vaultType: uint256(0),\\n                targetTokenAddress: address(0),\\n                targetSwapInfo: SwapInfo({\\n                    fromAmount: uint256(0),\\n                    routerType: uint256(0),\\n                    routerData: _targetRouterData\\n                }),\\n                targetRecipient: address(0)\\n            })\\n        );\\n\\n        return messageData;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BalanceManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ITokenBalance } from './interfaces/ITokenBalance.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/TransferHelper.sol' as TransferHelper;\\nimport './Constants.sol' as Constants;\\n\\n/**\\n * @title BalanceManagement\\n * @notice Base contract for the withdrawal of tokens, except for reserved ones\\n */\\nabstract contract BalanceManagement is ManagerRole {\\n    /**\\n     * @notice Emitted when the specified token is reserved\\n     */\\n    error ReservedTokenError();\\n\\n    /**\\n     * @notice Performs the withdrawal of tokens, except for reserved ones\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @param _tokenAmount The amount of the token\\n     */\\n    function cleanup(address _tokenAddress, uint256 _tokenAmount) external onlyManager {\\n        if (isReservedToken(_tokenAddress)) {\\n            revert ReservedTokenError();\\n        }\\n\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(msg.sender, _tokenAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_tokenAddress, msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the token balance of the current contract\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @return The token balance of the current contract\\n     */\\n    function tokenBalance(address _tokenAddress) public view returns (uint256) {\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return ITokenBalance(_tokenAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the reserved token flag\\n     * @dev Override to add reserved token addresses\\n     * @param _tokenAddress The address of the token\\n     * @return The reserved token flag\\n     */\\n    function isReservedToken(address _tokenAddress) public view virtual returns (bool) {\\n        // The function returns false by default.\\n        // The explicit return statement is omitted to avoid the unused parameter warning.\\n        // See https://github.com/ethereum/solidity/issues/5295\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CallerGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/AddressHelper.sol' as AddressHelper;\\nimport './Constants.sol' as Constants;\\nimport './DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title CallerGuard\\n * @notice Base contract to control access from other contracts\\n */\\nabstract contract CallerGuard is ManagerRole {\\n    /**\\n     * @dev Caller guard mode enumeration\\n     */\\n    enum CallerGuardMode {\\n        ContractForbidden,\\n        ContractList,\\n        ContractAllowed\\n    }\\n\\n    /**\\n     * @dev Caller guard mode value\\n     */\\n    CallerGuardMode public callerGuardMode = CallerGuardMode.ContractForbidden;\\n\\n    /**\\n     * @dev Registered contract list for \\\"ContractList\\\" mode\\n     */\\n    address[] public listedCallerGuardContractList;\\n\\n    /**\\n     * @dev Registered contract list indices for \\\"ContractList\\\" mode\\n     */\\n    mapping(address /*account*/ => DataStructures.OptionalValue /*index*/)\\n        public listedCallerGuardContractIndexMap;\\n\\n    /**\\n     * @notice Emitted when the caller guard mode is set\\n     * @param callerGuardMode The caller guard mode\\n     */\\n    event SetCallerGuardMode(CallerGuardMode indexed callerGuardMode);\\n\\n    /**\\n     * @notice Emitted when a registered contract for \\\"ContractList\\\" mode is added or removed\\n     * @param contractAddress The contract address\\n     * @param isListed The registered contract list inclusion flag\\n     */\\n    event SetListedCallerGuardContract(address indexed contractAddress, bool indexed isListed);\\n\\n    /**\\n     * @notice Emitted when the caller is not allowed to perform the intended action\\n     */\\n    error CallerGuardError(address caller);\\n\\n    /**\\n     * @dev Modifier to check if the caller is allowed to perform the intended action\\n     */\\n    modifier checkCaller() {\\n        if (msg.sender != tx.origin) {\\n            bool condition = (callerGuardMode == CallerGuardMode.ContractAllowed ||\\n                (callerGuardMode == CallerGuardMode.ContractList &&\\n                    isListedCallerGuardContract(msg.sender)));\\n\\n            if (!condition) {\\n                revert CallerGuardError(msg.sender);\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the caller guard mode\\n     * @param _callerGuardMode The caller guard mode\\n     */\\n    function setCallerGuardMode(CallerGuardMode _callerGuardMode) external onlyManager {\\n        callerGuardMode = _callerGuardMode;\\n\\n        emit SetCallerGuardMode(_callerGuardMode);\\n    }\\n\\n    /**\\n     * @notice Updates the list of registered contracts for the \\\"ContractList\\\" mode\\n     * @param _items The addresses and flags for the contracts\\n     */\\n    function setListedCallerGuardContracts(\\n        DataStructures.AccountToFlag[] calldata _items\\n    ) external onlyManager {\\n        for (uint256 index; index < _items.length; index++) {\\n            DataStructures.AccountToFlag calldata item = _items[index];\\n\\n            if (item.flag) {\\n                AddressHelper.requireContract(item.account);\\n            }\\n\\n            DataStructures.uniqueAddressListUpdate(\\n                listedCallerGuardContractList,\\n                listedCallerGuardContractIndexMap,\\n                item.account,\\n                item.flag,\\n                Constants.LIST_SIZE_LIMIT_DEFAULT\\n            );\\n\\n            emit SetListedCallerGuardContract(item.account, item.flag);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the registered contract count\\n     * @return The registered contract count\\n     */\\n    function listedCallerGuardContractCount() external view returns (uint256) {\\n        return listedCallerGuardContractList.length;\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of registered contracts\\n     * @return The complete list of registered contracts\\n     */\\n    function fullListedCallerGuardContractList() external view returns (address[] memory) {\\n        return listedCallerGuardContractList;\\n    }\\n\\n    /**\\n     * @notice Getter of a listed contract flag\\n     * @param _account The contract address\\n     * @return The listed contract flag\\n     */\\n    function isListedCallerGuardContract(address _account) public view returns (bool) {\\n        return listedCallerGuardContractIndexMap[_account].isSet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev The default token decimals value\\n */\\nuint256 constant DECIMALS_DEFAULT = 18;\\n\\n/**\\n * @dev The maximum uint256 value for swap amount limit settings\\n */\\nuint256 constant INFINITY = type(uint256).max;\\n\\n/**\\n * @dev The default limit of account list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_DEFAULT = 100;\\n\\n/**\\n * @dev The limit of swap router list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_ROUTERS = 200;\\n\\n/**\\n * @dev The factor for percentage settings. Example: 100 is 0.1%\\n */\\nuint256 constant MILLIPERCENT_FACTOR = 100_000;\\n\\n/**\\n * @dev The de facto standard address to denote the native token\\n */\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/crosschain/interfaces/IGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IGateway\\n * @notice Cross-chain gateway interface\\n */\\ninterface IGateway {\\n    /**\\n     * @notice Send a cross-chain message\\n     * @param _targetChainId The message target chain ID\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     */\\n    function sendMessage(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external payable;\\n\\n    /**\\n     * @notice Cross-chain message fee estimation\\n     * @param _targetChainId The ID of the target chain\\n     * @param _message The message content\\n     * @param _settings The gateway-specific settings\\n     */\\n    function messageFee(\\n        uint256 _targetChainId,\\n        bytes calldata _message,\\n        bytes calldata _settings\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/crosschain/interfaces/IGatewayClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IGatewayClient\\n * @notice Cross-chain gateway client interface\\n */\\ninterface IGatewayClient {\\n    /**\\n     * @notice Cross-chain message handler on the target chain\\n     * @dev The function is called by cross-chain gateways\\n     * @param _messageSourceChainId The ID of the message source chain\\n     * @param _payloadData The content of the cross-chain message\\n     */\\n    function handleExecutionPayload(\\n        uint256 _messageSourceChainId,\\n        bytes calldata _payloadData\\n    ) external;\\n\\n    /**\\n     * @notice The standard \\\"receive\\\" function\\n     */\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Optional value structure\\n * @dev Is used in mappings to allow zero values\\n * @param isSet Value presence flag\\n * @param value Numeric value\\n */\\nstruct OptionalValue {\\n    bool isSet;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure\\n * @dev Is used as an array parameter item to perform multiple key-value settings\\n * @param key Numeric key\\n * @param value Numeric value\\n */\\nstruct KeyToValue {\\n    uint256 key;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure for address values\\n * @dev Is used as an array parameter item to perform multiple key-value settings with address values\\n * @param key Numeric key\\n * @param value Address value\\n */\\nstruct KeyToAddressValue {\\n    uint256 key;\\n    address value;\\n}\\n\\n/**\\n * @notice Address-to-flag structure\\n * @dev Is used as an array parameter item to perform multiple settings\\n * @param account Account address\\n * @param flag Flag value\\n */\\nstruct AccountToFlag {\\n    address account;\\n    bool flag;\\n}\\n\\n/**\\n * @notice Emitted when a list exceeds the size limit\\n */\\nerror ListSizeLimitError();\\n\\n/**\\n * @notice Sets or updates a value in a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @param _value The address value\\n * @param _sizeLimit The map and list size limit\\n * @return isNewKey True if the key was just added, otherwise false\\n */\\nfunction combinedMapSet(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isNewKey) {\\n    isNewKey = !_keyIndexMap[_key].isSet;\\n\\n    if (isNewKey) {\\n        uniqueListAdd(_keyList, _keyIndexMap, _key, _sizeLimit);\\n    }\\n\\n    _map[_key] = _value;\\n}\\n\\n/**\\n * @notice Removes a value from a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @return isChanged True if the combined map was changed, otherwise false\\n */\\nfunction combinedMapRemove(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key\\n) returns (bool isChanged) {\\n    isChanged = _keyIndexMap[_key].isSet;\\n\\n    if (isChanged) {\\n        delete _map[_key];\\n        uniqueListRemove(_keyList, _keyIndexMap, _key);\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListAdd(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListRemove(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            uint256 lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListAdd(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListRemove(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            address lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds or removes a value to/from a unique address value list (a list with value index mapping)\\n * @dev The list size limit is checked on items adding only\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _flag The value inclusion flag\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListUpdate(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    bool _flag,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    return\\n        _flag\\n            ? uniqueAddressListAdd(_list, _indexMap, _value, _sizeLimit)\\n            : uniqueAddressListRemove(_list, _indexMap, _value);\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an attempt to burn a token fails\\n */\\nerror TokenBurnError();\\n\\n/**\\n * @notice Emitted when an attempt to mint a token fails\\n */\\nerror TokenMintError();\\n\\n/**\\n * @notice Emitted when a zero address is specified where it is not allowed\\n */\\nerror ZeroAddressError();\\n\"\r\n    },\r\n    \"contracts/helpers/AddressHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when the account is not a contract\\n * @param account The account address\\n */\\nerror NonContractAddressError(address account);\\n\\n/**\\n * @notice Function to check if the account is a contract\\n * @return The account contract status flag\\n */\\nfunction isContract(address _account) view returns (bool) {\\n    return _account.code.length > 0;\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract\\n */\\nfunction requireContract(address _account) view {\\n    if (!isContract(_account)) {\\n        revert NonContractAddressError(_account);\\n    }\\n}\\n\\n/**\\n * @notice Function to require an account to be a contract or a zero address\\n */\\nfunction requireContractOrZeroAddress(address _account) view {\\n    if (_account != address(0)) {\\n        requireContract(_account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/DecimalsHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Function to perform decimals conversion\\n * @param _fromDecimals Source value decimals\\n * @param _toDecimals Target value decimals\\n * @param _fromAmount Source value\\n * @return Target value\\n */\\nfunction convertDecimals(\\n    uint256 _fromDecimals,\\n    uint256 _toDecimals,\\n    uint256 _fromAmount\\n) pure returns (uint256) {\\n    if (_toDecimals == _fromDecimals) {\\n        return _fromAmount;\\n    } else if (_toDecimals > _fromDecimals) {\\n        return _fromAmount * 10 ** (_toDecimals - _fromDecimals);\\n    } else {\\n        return _fromAmount / 10 ** (_fromDecimals - _toDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/GasReserveHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Function to check if the available gas matches the specified gas reserve value\\n * @param _gasReserve Gas reserve value\\n * @return hasGasReserve Flag of gas reserve availability\\n * @return gasAllowed The remaining gas quantity taking the reserve into account\\n */\\nfunction checkGasReserve(\\n    uint256 _gasReserve\\n) view returns (bool hasGasReserve, uint256 gasAllowed) {\\n    uint256 gasLeft = gasleft();\\n\\n    hasGasReserve = gasLeft >= _gasReserve;\\n    gasAllowed = hasGasReserve ? gasLeft - _gasReserve : 0;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/RefundHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport './TransferHelper.sol' as TransferHelper;\\n\\n/**\\n * @notice Refunds the extra balance of the native token\\n * @dev Reverts on subtraction if the actual balance is less than expected\\n * @param _self The address of the executing contract\\n * @param _expectedBalance The expected native token balance value\\n * @param _to The refund receiver's address\\n */\\nfunction refundExtraBalance(address _self, uint256 _expectedBalance, address payable _to) {\\n    uint256 extraBalance = _self.balance - _expectedBalance;\\n\\n    if (extraBalance > 0) {\\n        TransferHelper.safeTransferNative(_to, extraBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an approval action fails\\n */\\nerror SafeApproveError();\\n\\n/**\\n * @notice Emitted when a transfer action fails\\n */\\nerror SafeTransferError();\\n\\n/**\\n * @notice Emitted when a transferFrom action fails\\n */\\nerror SafeTransferFromError();\\n\\n/**\\n * @notice Emitted when a transfer of the native token fails\\n */\\nerror SafeTransferNativeError();\\n\\n/**\\n * @notice Safely approve the token to the account\\n * @param _token The token address\\n * @param _to The token approval recipient address\\n * @param _value The token approval amount\\n */\\nfunction safeApprove(address _token, address _to, uint256 _value) {\\n    // 0x095ea7b3 is the selector for \\\"approve(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x095ea7b3, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeApproveError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token to the account\\n * @param _token The token address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransfer(address _token, address _to, uint256 _value) {\\n    // 0xa9059cbb is the selector for \\\"transfer(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0xa9059cbb, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token between the accounts\\n * @param _token The token address\\n * @param _from The token transfer source address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransferFrom(address _token, address _from, address _to, uint256 _value) {\\n    // 0x23b872dd is the selector for \\\"transferFrom(address,address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x23b872dd, _from, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferFromError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the native token to the account\\n * @param _to The native token transfer recipient address\\n * @param _value The native token transfer amount\\n */\\nfunction safeTransferNative(address _to, uint256 _value) {\\n    (bool success, ) = _to.call{ value: _value }(new bytes(0));\\n\\n    if (!success) {\\n        revert SafeTransferNativeError();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IActionDataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IActionDataStructures\\n * @notice Action data structure declarations\\n */\\ninterface IActionDataStructures {\\n    /**\\n     * @notice Single-chain action data structure\\n     * @param fromTokenAddress The address of the input token\\n     * @param toTokenAddress The address of the output token\\n     * @param swapInfo The data for the single-chain swap\\n     * @param recipient The address of the recipient\\n     */\\n    struct LocalAction {\\n        address fromTokenAddress;\\n        address toTokenAddress;\\n        SwapInfo swapInfo;\\n        address recipient;\\n    }\\n\\n    /**\\n     * @notice Cross-chain action data structure\\n     * @param gatewayType The numeric type of the cross-chain gateway\\n     * @param vaultType The numeric type of the vault\\n     * @param sourceTokenAddress The address of the input token on the source chain\\n     * @param sourceSwapInfo The data for the source chain swap\\n     * @param targetChainId The action target chain ID\\n     * @param targetTokenAddress The address of the output token on the destination chain\\n     * @param targetSwapInfoOptions The list of data options for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     * @param gatewaySettings The gateway-specific settings data\\n     */\\n    struct Action {\\n        uint256 gatewayType;\\n        uint256 vaultType;\\n        address sourceTokenAddress;\\n        SwapInfo sourceSwapInfo;\\n        uint256 targetChainId;\\n        address targetTokenAddress;\\n        SwapInfo[] targetSwapInfoOptions;\\n        address targetRecipient;\\n        bytes gatewaySettings;\\n    }\\n\\n    /**\\n     * @notice Token swap data structure\\n     * @param fromAmount The quantity of the token\\n     * @param routerType The numeric type of the swap router\\n     * @param routerData The data for the swap router call\\n     */\\n    struct SwapInfo {\\n        uint256 fromAmount;\\n        uint256 routerType;\\n        bytes routerData;\\n    }\\n\\n    /**\\n     * @notice Cross-chain message data structure\\n     * @param actionId The unique identifier of the cross-chain action\\n     * @param sourceSender The address of the sender on the source chain\\n     * @param vaultType The numeric type of the vault\\n     * @param targetTokenAddress The address of the output token on the target chain\\n     * @param targetSwapInfo The data for the target chain swap\\n     * @param targetRecipient The address of the recipient on the target chain\\n     */\\n    struct TargetMessage {\\n        uint256 actionId;\\n        address sourceSender;\\n        uint256 vaultType;\\n        address targetTokenAddress;\\n        SwapInfo targetSwapInfo;\\n        address targetRecipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ISettings } from './ISettings.sol';\\n\\ninterface IRegistry is ISettings {\\n    /**\\n     * @notice Getter of the registered gateway flag by the account address\\n     * @param _account The account address\\n     * @return The registered gateway flag\\n     */\\n    function isGatewayAddress(address _account) external view returns (bool);\\n\\n    /**\\n     * @notice Settings for a single-chain swap\\n     * @param _caller The user's account address\\n     * @param _routerType The type of the swap router\\n     * @return Settings for a single-chain swap\\n     */\\n    function localSettings(\\n        address _caller,\\n        uint256 _routerType\\n    ) external view returns (LocalSettings memory);\\n\\n    /**\\n     * @notice Getter of source chain settings for a cross-chain swap\\n     * @param _caller The user's account address\\n     * @param _targetChainId The target chain ID\\n     * @param _gatewayType The type of the cross-chain gateway\\n     * @param _routerType The type of the swap router\\n     * @param _vaultType The type of the vault\\n     * @return Source chain settings for a cross-chain swap\\n     */\\n    function sourceSettings(\\n        address _caller,\\n        uint256 _targetChainId,\\n        uint256 _gatewayType,\\n        uint256 _routerType,\\n        uint256 _vaultType\\n    ) external view returns (SourceSettings memory);\\n\\n    /**\\n     * @notice Getter of target chain settings for a cross-chain swap\\n     * @param _vaultType The type of the vault\\n     * @param _routerType The type of the swap router\\n     * @return Target chain settings for a cross-chain swap\\n     */\\n    function targetSettings(\\n        uint256 _vaultType,\\n        uint256 _routerType\\n    ) external view returns (TargetSettings memory);\\n\\n    /**\\n     * @notice Getter of variable balance repayment settings\\n     * @param _vaultType The type of the vault\\n     * @return Variable balance repayment settings\\n     */\\n    function variableBalanceRepaymentSettings(\\n        uint256 _vaultType\\n    ) external view returns (VariableBalanceRepaymentSettings memory);\\n\\n    /**\\n     * @notice Getter of cross-chain message fee estimation settings\\n     * @param _gatewayType The type of the cross-chain gateway\\n     * @return Cross-chain message fee estimation settings\\n     */\\n    function messageFeeEstimateSettings(\\n        uint256 _gatewayType\\n    ) external view returns (MessageFeeEstimateSettings memory);\\n\\n    /**\\n     * @notice Getter of swap result calculation settings for a single-chain swap\\n     * @param _caller The user's account address\\n     * @return Swap result calculation settings for a single-chain swap\\n     */\\n    function localAmountCalculationSettings(\\n        address _caller\\n    ) external view returns (LocalAmountCalculationSettings memory);\\n\\n    /**\\n     * @notice Getter of swap result calculation settings for a cross-chain swap\\n     * @param _caller The user's account address\\n     * @param _vaultType The type of the vault\\n     * @param _fromChainId The ID of the swap source chain\\n     * @param _toChainId The ID of the swap target chain\\n     * @return Swap result calculation settings for a cross-chain swap\\n     */\\n    function vaultAmountCalculationSettings(\\n        address _caller,\\n        uint256 _vaultType,\\n        uint256 _fromChainId,\\n        uint256 _toChainId\\n    ) external view returns (VaultAmountCalculationSettings memory);\\n\\n    /**\\n     * @notice Getter of amount limits in USD for cross-chain swaps\\n     * @param _vaultType The type of the vault\\n     * @return min Minimum cross-chain swap amount in USD, with decimals = 18\\n     * @return max Maximum cross-chain swap amount in USD, with decimals = 18\\n     */\\n    function swapAmountLimits(uint256 _vaultType) external view returns (uint256 min, uint256 max);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ISettings\\n * @notice Settings data structure declarations\\n */\\ninterface ISettings {\\n    /**\\n     * @notice Settings for a single-chain swap\\n     * @param router The swap router contract address\\n     * @param routerTransfer The swap router transfer contract address\\n     * @param systemFeeLocal The system fee value in milli-percent, e.g., 100 is 0.1%\\n     * @param feeCollectorLocal The address of the single-chain action fee collector\\n     * @param isWhitelist The whitelist flag\\n     */\\n    struct LocalSettings {\\n        address router;\\n        address routerTransfer;\\n        uint256 systemFeeLocal;\\n        address feeCollectorLocal;\\n        bool isWhitelist;\\n    }\\n\\n    /**\\n     * @notice Source chain settings for a cross-chain swap\\n     * @param gateway The cross-chain gateway contract address\\n     * @param router The swap router contract address\\n     * @param routerTransfer The swap router transfer contract address\\n     * @param vault The vault contract address\\n     * @param sourceVaultDecimals The value of the vault decimals on the source chain\\n     * @param targetVaultDecimals The value of the vault decimals on the target chain\\n     * @param systemFee The system fee value in milli-percent, e.g., 100 is 0.1%\\n     * @param feeCollector The address of the cross-chain action fee collector\\n     * @param isWhitelist The whitelist flag\\n     * @param swapAmountMin The minimum cross-chain swap amount in USD, with decimals = 18\\n     * @param swapAmountMax The maximum cross-chain swap amount in USD, with decimals = 18\\n     */\\n    struct SourceSettings {\\n        address gateway;\\n        address router;\\n        address routerTransfer;\\n        address vault;\\n        uint256 sourceVaultDecimals;\\n        uint256 targetVaultDecimals;\\n        uint256 systemFee;\\n        address feeCollector;\\n        bool isWhitelist;\\n        uint256 swapAmountMin;\\n        uint256 swapAmountMax;\\n    }\\n\\n    /**\\n     * @notice Target chain settings for a cross-chain swap\\n     * @param router The swap router contract address\\n     * @param routerTransfer The swap router transfer contract address\\n     * @param vault The vault contract address\\n     * @param gasReserve The target chain gas reserve value\\n     */\\n    struct TargetSettings {\\n        address router;\\n        address routerTransfer;\\n        address vault;\\n        uint256 gasReserve;\\n    }\\n\\n    /**\\n     * @notice Variable balance repayment settings\\n     * @param vault The vault contract address\\n     */\\n    struct VariableBalanceRepaymentSettings {\\n        address vault;\\n    }\\n\\n    /**\\n     * @notice Cross-chain message fee estimation settings\\n     * @param gateway The cross-chain gateway contract address\\n     */\\n    struct MessageFeeEstimateSettings {\\n        address gateway;\\n    }\\n\\n    /**\\n     * @notice Swap result calculation settings for a single-chain swap\\n     * @param systemFee The system fee value in milli-percent, e.g., 100 is 0.1%\\n     * @param isWhitelist The whitelist flag\\n     */\\n    struct LocalAmountCalculationSettings {\\n        uint256 systemFeeLocal;\\n        bool isWhitelist;\\n    }\\n\\n    /**\\n     * @notice Swap result calculation settings for a cross-chain swap\\n     * @param fromDecimals The value of the vault decimals on the source chain\\n     * @param toDecimals The value of the vault decimals on the target chain\\n     * @param systemFee The system fee value in milli-percent, e.g., 100 is 0.1%\\n     * @param isWhitelist The whitelist flag\\n     */\\n    struct VaultAmountCalculationSettings {\\n        uint256 fromDecimals;\\n        uint256 toDecimals;\\n        uint256 systemFee;\\n        bool isWhitelist;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ITokenBalance\\n * @notice Token balance interface\\n */\\ninterface ITokenBalance {\\n    /**\\n     * @notice Getter of the token balance by the account\\n     * @param _account The account address\\n     * @return Token balance\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ITokenMint\\n * @notice Token minting interface\\n */\\ninterface ITokenMint {\\n    /**\\n     * @notice Mints tokens to the account, increasing the total supply\\n     * @param _to The token receiver account address\\n     * @param _amount The number of tokens to mint\\n     * @return Token burning success status\\n     */\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableBalanceRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IVariableBalanceRecords\\n * @notice Variable balance records interface\\n */\\ninterface IVariableBalanceRecords {\\n    /**\\n     * @notice Increases the variable balance for the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     * @param _amount The amount by which to increase the variable balance\\n     */\\n    function increaseBalance(address _account, uint256 _vaultType, uint256 _amount) external;\\n\\n    /**\\n     * @notice Clears the variable balance for the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     */\\n    function clearBalance(address _account, uint256 _vaultType) external;\\n\\n    /**\\n     * @notice Getter of the variable balance by the account\\n     * @param _account The account address\\n     * @param _vaultType The vault type\\n     */\\n    function getAccountBalance(\\n        address _account,\\n        uint256 _vaultType\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IVault\\n * @notice Vault interface\\n */\\ninterface IVault {\\n    /**\\n     * @notice The getter of the vault asset address\\n     */\\n    function asset() external view returns (address);\\n\\n    /**\\n     * @notice Checks the status of the variable token and balance actions and the variable token address\\n     * @return The address of the variable token\\n     */\\n    function checkVariableTokenState() external view returns (address);\\n\\n    /**\\n     * @notice Requests the vault asset tokens\\n     * @param _amount The amount of the vault asset tokens\\n     * @param _to The address of the vault asset tokens receiver\\n     * @param _forVariableBalance True if the request is made for a variable balance repayment, otherwise false\\n     * @return assetAddress The address of the vault asset token\\n     */\\n    function requestAsset(\\n        uint256 _amount,\\n        address _to,\\n        bool _forVariableBalance\\n    ) external returns (address assetAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Pausable as PausableBase } from '@openzeppelin/contracts/security/Pausable.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\n\\n/**\\n * @title Pausable\\n * @notice Base contract that implements the emergency pause mechanism\\n */\\nabstract contract Pausable is PausableBase, ManagerRole {\\n    /**\\n     * @notice Enter pause state\\n     */\\n    function pause() external onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Exit pause state\\n     */\\n    function unpause() external onlyManager whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { RoleBearers } from './RoleBearers.sol';\\n\\n/**\\n * @title ManagerRole\\n * @notice Base contract that implements the Manager role.\\n * The manager role is a high-permission role for core team members only.\\n * Managers can set vaults and routers addresses, fees, cross-chain protocols,\\n * and other parameters for Interchain (cross-chain) swaps and single-network swaps.\\n * Please note, the manager role is unique for every contract,\\n * hence different addresses may be assigned as managers for different contracts.\\n */\\nabstract contract ManagerRole is Ownable, RoleBearers {\\n    bytes32 private constant ROLE_KEY = keccak256('Manager');\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is updated\\n     * @param account The account address\\n     * @param value The Manager role status flag\\n     */\\n    event SetManager(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is renounced\\n     * @param account The account address\\n     */\\n    event RenounceManagerRole(address indexed account);\\n\\n    /**\\n     * @notice Emitted when the caller is not a Manager role bearer\\n     */\\n    error OnlyManagerError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a Manager role bearer\\n     */\\n    modifier onlyManager() {\\n        if (!isManager(msg.sender)) {\\n            revert OnlyManagerError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the Manager role status for the account\\n     * @param _account The account address\\n     * @param _value The Manager role status flag\\n     */\\n    function setManager(address _account, bool _value) public onlyOwner {\\n        _setRoleBearer(ROLE_KEY, _account, _value);\\n\\n        emit SetManager(_account, _value);\\n    }\\n\\n    /**\\n     * @notice Renounces the Manager role\\n     */\\n    function renounceManagerRole() external onlyManager {\\n        _setRoleBearer(ROLE_KEY, msg.sender, false);\\n\\n        emit RenounceManagerRole(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer count\\n     * @return The Manager role bearer count\\n     */\\n    function managerCount() external view returns (uint256) {\\n        return _roleBearerCount(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the Manager role bearers\\n     * @return The complete list of the Manager role bearers\\n     */\\n    function fullManagerList() external view returns (address[] memory) {\\n        return _fullRoleBearerList(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer status\\n     * @param _account The account address\\n     */\\n    function isManager(address _account) public view returns (bool) {\\n        return _isRoleBearer(ROLE_KEY, _account);\\n    }\\n\\n    function _initRoles(\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) internal {\\n        address ownerAddress = _owner == address(0) ? msg.sender : _owner;\\n\\n        for (uint256 index; index < _managers.length; index++) {\\n            setManager(_managers[index], true);\\n        }\\n\\n        if (_addOwnerToManagers && !isManager(ownerAddress)) {\\n            setManager(ownerAddress, true);\\n        }\\n\\n        if (ownerAddress != msg.sender) {\\n            transferOwnership(ownerAddress);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RoleBearers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title RoleBearers\\n * @notice Base contract that implements role-based access control\\n * @dev A custom implementation providing full role bearer lists\\n */\\nabstract contract RoleBearers {\\n    mapping(bytes32 /*roleKey*/ => address[] /*roleBearers*/) private roleBearerTable;\\n    mapping(bytes32 /*roleKey*/ => mapping(address /*account*/ => DataStructures.OptionalValue /*status*/))\\n        private roleBearerIndexTable;\\n\\n    function _setRoleBearer(bytes32 _roleKey, address _account, bool _value) internal {\\n        DataStructures.uniqueAddressListUpdate(\\n            roleBearerTable[_roleKey],\\n            roleBearerIndexTable[_roleKey],\\n            _account,\\n            _value,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n    }\\n\\n    function _isRoleBearer(bytes32 _roleKey, address _account) internal view returns (bool) {\\n        return roleBearerIndexTable[_roleKey][_account].isSet;\\n    }\\n\\n    function _roleBearerCount(bytes32 _roleKey) internal view returns (uint256) {\\n        return roleBearerTable[_roleKey].length;\\n    }\\n\\n    function _fullRoleBearerList(bytes32 _roleKey) internal view returns (address[] memory) {\\n        return roleBearerTable[_roleKey];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SystemVersionId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title SystemVersionId\\n * @notice Base contract providing the system version identifier\\n */\\nabstract contract SystemVersionId {\\n    /**\\n     * @dev The system version identifier\\n     */\\n    uint256 public constant SYSTEM_VERSION_ID = uint256(keccak256('2023-03'));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract IVariableBalanceRecords\",\"name\":\"_variableBalanceRecords\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionIdOffset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_addOwnerToManagers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerGuardError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GatewayNotSetError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListSizeLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageFeeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenValueError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NonContractAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGatewayError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelfError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotSetError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeApproveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferNativeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameChainIdError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAmountMaxError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAmountMinError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetSwapInfoError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMintError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotSetError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ActionLocal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gatewayType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ActionSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ActionTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RenounceManagerRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"callerGuardMode\",\"type\":\"uint8\"}],\"name\":\"SetCallerGuardMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"SetListedCallerGuardContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recordsAddress\",\"type\":\"address\"}],\"name\":\"SetVariableBalanceRecords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isLocal\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resultAmount\",\"type\":\"uint256\"}],\"name\":\"SourceProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resultAmount\",\"type\":\"uint256\"}],\"name\":\"TargetProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VariableBalanceAllocated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYSTEM_VERSION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForward\",\"type\":\"bool\"}],\"name\":\"calculateLocalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForward\",\"type\":\"bool\"}],\"name\":\"calculateVaultAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callerGuardMode\",\"outputs\":[{\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"claimVariableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"cleanup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"convertVariableBalanceToVaultAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gatewayType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo\",\"name\":\"sourceSwapInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo[]\",\"name\":\"targetSwapInfoOptions\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"targetRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"gatewaySettings\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.Action\",\"name\":\"_action\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo\",\"name\":\"swapInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IActionDataStructures.LocalAction\",\"name\":\"_localAction\",\"type\":\"tuple\"}],\"name\":\"executeLocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullListedCallerGuardContractList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_messageSourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payloadData\",\"type\":\"bytes\"}],\"name\":\"handleExecutionPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isListedCallerGuardContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listedCallerGuardContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedCallerGuardContractIndexMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedCallerGuardContractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gatewayType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_targetRouterDataOptions\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_gatewaySettings\",\"type\":\"bytes\"}],\"name\":\"messageFeeEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerTransfer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"}],\"internalType\":\"struct ISettings.TargetSettings\",\"name\":\"_settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerData\",\"type\":\"bytes\"}],\"internalType\":\"struct IActionDataStructures.SwapInfo\",\"name\":\"targetSwapInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"targetRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IActionDataStructures.TargetMessage\",\"name\":\"_targetMessage\",\"type\":\"tuple\"}],\"name\":\"selfCallTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CallerGuard.CallerGuardMode\",\"name\":\"_callerGuardMode\",\"type\":\"uint8\"}],\"name\":\"setCallerGuardMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"internalType\":\"struct AccountToFlag[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"setListedCallerGuardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"variableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableBalanceRecords\",\"outputs\":[{\"internalType\":\"contract IVariableBalanceRecords\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ActionExecutor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f19ea8e63256992a823262c71568b0bb27ce146f000000000000000000000000bfc3b856b9bcc792875e79fc8ffcc09028aad40600000000000000000000000000000000000000000000000000000000000001f400000000000000000000000072e28c7f34100afefc399fcc0ae041b8fe5841ae00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f35dc3505b2b150369bb267ca48a8eac36b9217c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}