{"SourceCode": "/**************************************************\r\n*\r\n*\r\n* Meet 1st Meme NFTs auction house and BEP20 token\r\n* Burned liquidity / Ownership renounced\r\n* Fees: 5% liquidity / 5% rewards\r\n*\r\n* DogeNFTcollector.com\r\n*   \r\n***************************************************/\r\n\r\npragma solidity ^\r\n0.6\r\n.12\r\n;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IERC20 {\r\n    \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the amount of tokens owned by `account`.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress account\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nMoves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress recipient, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nallowance\r\n(\r\naddress owner, address spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nSets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\napprove\r\n(\r\naddress spender, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nMoves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\n/**\r\n     * \r\n@dev \r\nEmitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n\r\n    event Transfer(address indexed \r\nfrom\r\n, address indexed to, uint256 value);\r\n    \r\n/**\r\n     * \r\n@dev \r\nEmitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * \r\n@dev \r\nWrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nadd\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        uint256 c = a + b;\r\n        \r\nrequire\r\n(c >= a, \r\n\"SafeMath: addition overflow\"\r\n);\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nsub\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n sub(a, b, \r\n\"SafeMath: subtraction overflow\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nsub\r\n(\r\nuint256 a, uint256 b, string memory errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nmul\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        \r\n// benefit is lost if 'b' is also tested.\r\n\r\n        \r\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        \r\nif\r\n (a == \r\n0\r\n) {\r\n            \r\nreturn\r\n \r\n0\r\n;\r\n        }\r\n        uint256 c = a * b;\r\n        \r\nrequire\r\n(c / a == b, \r\n\"SafeMath: multiplication overflow\"\r\n);\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n div(a, b, \r\n\"SafeMath: division by zero\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256 a, uint256 b, string memory errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(b > \r\n0\r\n, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nmod\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n mod(a, b, \r\n\"SafeMath: modulo by zero\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nmod\r\n(\r\nuint256 a, uint256 b, string memory errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(b != \r\n0\r\n, errorMessage);\r\n        \r\nreturn\r\n a % b;\r\n    }\r\n}\r\nabstract contract Context {\r\n    \r\nfunction\r\n \r\n_msgSender\r\n(\r\n) \r\ninternal\r\n \r\nview\r\n \r\nvirtual\r\n \r\nreturns\r\n (\r\naddress payable\r\n) \r\n{\r\n        \r\nreturn\r\n msg.sender;\r\n    }\r\n    \r\nfunction\r\n \r\n_msgData\r\n(\r\n) \r\ninternal\r\n \r\nview\r\n \r\nvirtual\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n        \r\nthis\r\n; \r\n// silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        \r\nreturn\r\n msg.data;\r\n    }\r\n}\r\n/**\r\n * \r\n@dev \r\nCollection of functions related to the address type\r\n */\r\n\r\nlibrary Address {\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nisContract\r\n(\r\naddress account\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\n// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\r\n        \r\n// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\r\n        \r\n// for accounts without code, i.e. `keccak256('')`\r\n\r\n        bytes32 codehash;\r\n        bytes32 accountHash = \r\n0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\r\n;\r\n        \r\n// solhint-disable-next-line no-inline-assembly\r\n\r\n        assembly { \r\ncodehash\r\n := extcodehash(account) }\r\n        \r\nreturn\r\n (codehash != accountHash && codehash != \r\n0x0\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReplacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nsendValue\r\n(\r\naddress payable recipient, uint256 amount\r\n) \r\ninternal\r\n \r\n{\r\n        \r\nrequire\r\n(address(\r\nthis\r\n).balance >= amount, \r\n\"Address: insufficient balance\"\r\n);\r\n        \r\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\r\n        (bool success, ) = recipient.call{ \r\nvalue\r\n: amount }(\r\n\"\"\r\n);\r\n        \r\nrequire\r\n(success, \r\n\"Address: unable to send value, recipient may have reverted\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nPerforms a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nfunctionCall\r\n(\r\naddress target, bytes memory data\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n      \r\nreturn\r\n functionCall(target, data, \r\n\"Address: low-level call failed\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nSame as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nfunctionCall\r\n(\r\naddress target, bytes memory data, string memory errorMessage\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n        \r\nreturn\r\n _functionCallWithValue(target, data, \r\n0\r\n, errorMessage);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nSame as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nfunctionCallWithValue\r\n(\r\naddress target, bytes memory data, uint256 value\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n        \r\nreturn\r\n functionCallWithValue(target, data, value, \r\n\"Address: low-level call with value failed\"\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nSame as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nfunctionCallWithValue\r\n(\r\naddress target, bytes memory data, uint256 value, string memory errorMessage\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n        \r\nrequire\r\n(address(\r\nthis\r\n).balance >= value, \r\n\"Address: insufficient balance for call\"\r\n);\r\n        \r\nreturn\r\n _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    \r\nfunction\r\n \r\n_functionCallWithValue\r\n(\r\naddress target, bytes memory data, uint256 weiValue, string memory errorMessage\r\n) \r\nprivate\r\n \r\nreturns\r\n (\r\nbytes memory\r\n) \r\n{\r\n        \r\nrequire\r\n(isContract(target), \r\n\"Address: call to non-contract\"\r\n);\r\n        \r\n// solhint-disable-next-line avoid-low-level-calls\r\n\r\n        (bool success, bytes memory returndata) = target.call{ \r\nvalue\r\n: weiValue }(data);\r\n        \r\nif\r\n (success) {\r\n            \r\nreturn\r\n returndata;\r\n        } \r\nelse\r\n {\r\n            \r\n// Look for revert reason and bubble it up if present\r\n\r\n            \r\nif\r\n (returndata.length > \r\n0\r\n) {\r\n                \r\n// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                \r\n// solhint-disable-next-line no-inline-assembly\r\n\r\n                assembly {\r\n                    \r\nlet\r\n returndata_size := mload(returndata)\r\n                    revert(add(\r\n32\r\n, returndata), returndata_size)\r\n                }\r\n            } \r\nelse\r\n {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * \r\n@dev \r\nContract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n/**\r\n     * \r\n@dev \r\nInitializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    \r\nconstructor\r\n (\r\n) \r\ninternal\r\n {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(\r\n0\r\n), msgSender);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nReturns the address of the current owner.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nowner\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n) \r\n{\r\n        \r\nreturn\r\n _owner;\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nThrows if called by any account other than the owner.\r\n     */\r\n\r\n    modifier \r\nonlyOwner\r\n(\r\n)\r\n {\r\n        \r\nrequire\r\n(_owner == _msgSender(), \r\n\"Ownable: caller is not the owner\"\r\n);\r\n        _;\r\n    }\r\n     \r\n/**\r\n     * \r\n@dev \r\nLeaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \r\nNOTE:\r\n Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nrenounceOwnership\r\n(\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\nonlyOwner\r\n \r\n{\r\n        emit OwnershipTransferred(_owner, address(\r\n0\r\n));\r\n        _owner = address(\r\n0\r\n);\r\n    }\r\n    \r\n/**\r\n     * \r\n@dev \r\nTransfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ntransferOwnership\r\n(\r\naddress newOwner\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\nonlyOwner\r\n \r\n{\r\n        \r\nrequire\r\n(newOwner != address(\r\n0\r\n), \r\n\"Ownable: new owner is the zero address\"\r\n);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\nfunction\r\n \r\ngeUnlockTime\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _lockTime;\r\n    }\r\n    \r\n//Locks the contract for owner for the amount of time provided\r\n\r\n    \r\nfunction\r\n \r\nlock\r\n(\r\nuint256 time\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\nonlyOwner\r\n \r\n{\r\n        _previousOwner = _owner;\r\n        _owner = address(\r\n0\r\n);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(\r\n0\r\n));\r\n    }\r\n    \r\n//Unlocks the contract for owner when _lockTime is exceeds\r\n\r\n    \r\nfunction\r\n \r\nunlock\r\n(\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\n{\r\n        \r\nrequire\r\n(_previousOwner == msg.sender, \r\n\"You don't have permission to unlock\"\r\n);\r\n        \r\nrequire\r\n(now > _lockTime , \r\n\"Contract is locked until 7 days\"\r\n);\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    \r\nfunction\r\n \r\nfeeTo\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nfeeToSetter\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetPair\r\n(\r\naddress tokenA, address tokenB\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress pair\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nallPairs\r\n(\r\nuint\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress pair\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nallPairsLength\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ncreatePair\r\n(\r\naddress tokenA, address tokenB\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\naddress pair\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nsetFeeTo\r\n(\r\naddress\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nsetFeeToSetter\r\n(\r\naddress\r\n) \r\nexternal\r\n;\r\n}\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed \r\nfrom\r\n, address indexed to, uint value);\r\n    \r\nfunction\r\n \r\nname\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nstring memory\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nstring memory\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint8\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress owner\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nallowance\r\n(\r\naddress owner, address spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\napprove\r\n(\r\naddress spender, uint value\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress to, uint value\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress \r\nfrom\r\n, address to, uint value\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nDOMAIN_SEPARATOR\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbytes32\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nPERMIT_TYPEHASH\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nbytes32\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nnonces\r\n(\r\naddress owner\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\npermit\r\n(\r\naddress owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s\r\n) \r\nexternal\r\n;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    \r\nfunction\r\n \r\nMINIMUM_LIQUIDITY\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nfactory\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntoken0\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntoken1\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetReserves\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint112 reserve0, uint112 reserve1, uint32 blockTimestampLast\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nprice0CumulativeLast\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nprice1CumulativeLast\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nkLast\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nmint\r\n(\r\naddress to\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint liquidity\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nburn\r\n(\r\naddress to\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amount0, uint amount1\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswap\r\n(\r\nuint amount0Out, uint amount1Out, address to, bytes calldata data\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nskim\r\n(\r\naddress to\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nsync\r\n(\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\ninitialize\r\n(\r\naddress, address\r\n) \r\nexternal\r\n;\r\n}\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    \r\nfunction\r\n \r\nfactory\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nWETH\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\naddLiquidity\r\n(\r\n\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountA, uint amountB, uint liquidity\r\n)\r\n;\r\n    \r\nfunction\r\n \r\naddLiquidityETH\r\n(\r\n\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\npayable\r\n \r\nreturns\r\n (\r\nuint amountToken, uint amountETH, uint liquidity\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nremoveLiquidity\r\n(\r\n\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountA, uint amountB\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nremoveLiquidityETH\r\n(\r\n\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountToken, uint amountETH\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nremoveLiquidityWithPermit\r\n(\r\n\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountA, uint amountB\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nremoveLiquidityETHWithPermit\r\n(\r\n\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountToken, uint amountETH\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForTokens\r\n(\r\n\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapTokensForExactTokens\r\n(\r\n\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapExactETHForTokens\r\n(\r\nuint amountOutMin, address[] calldata path, address to, uint deadline\r\n)\r\n        \r\nexternal\r\n\r\n        \r\npayable\r\n\r\n        \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapTokensForExactETH\r\n(\r\nuint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline\r\n)\r\n        \r\nexternal\r\n\r\n        \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForETH\r\n(\r\nuint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n)\r\n        \r\nexternal\r\n\r\n        \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapETHForExactTokens\r\n(\r\nuint amountOut, address[] calldata path, address to, uint deadline\r\n)\r\n        \r\nexternal\r\n\r\n        \r\npayable\r\n\r\n        \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nquote\r\n(\r\nuint amountA, uint reserveA, uint reserveB\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint amountB\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetAmountOut\r\n(\r\nuint amountIn, uint reserveIn, uint reserveOut\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint amountOut\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetAmountIn\r\n(\r\nuint amountOut, uint reserveIn, uint reserveOut\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint amountIn\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetAmountsOut\r\n(\r\nuint amountIn, address[] calldata path\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetAmountsIn\r\n(\r\nuint amountOut, address[] calldata path\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint[] memory amounts\r\n)\r\n;\r\n}\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    \r\nfunction\r\n \r\nremoveLiquidityETHSupportingFeeOnTransferTokens\r\n(\r\n\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountETH\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nremoveLiquidityETHWithPermitSupportingFeeOnTransferTokens\r\n(\r\n\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountETH\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForTokensSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nswapExactETHForTokensSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\npayable\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForETHSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n;\r\n}\r\ncontract DogeNFTcollector is Context, IERC20, Ownable {\r\n    using SafeMath \r\nfor\r\n uint256;\r\n    using Address \r\nfor\r\n address;\r\n    mapping (\r\naddress\r\n =>\r\n uint256) private _rOwned;\r\n    mapping (\r\naddress\r\n =>\r\n uint256) private _tOwned;\r\n    mapping (\r\naddress\r\n =>\r\n mapping (\r\naddress\r\n =>\r\n uint256)) private _allowances;\r\n    mapping (\r\naddress\r\n =>\r\n bool) private _isExcludedFromFee;\r\n    mapping (\r\naddress\r\n =>\r\n bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    uint256 private constant MAX = ~uint256(\r\n0\r\n);\r\n    uint256 private _tTotal = \r\n1000000000\r\n * \r\n10\r\n**\r\n6\r\n * \r\n10\r\n**\r\n9\r\n;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    string private _name = \r\n\"DogeNFTcollector.com\"\r\n;\r\n    string private _symbol = \r\n\"DOGENFT\"\r\n;\r\n    uint8 private _decimals = \r\n9\r\n;\r\n    uint256 public _taxFee = \r\n5\r\n;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    uint256 public _liquidityFee = \r\n5\r\n;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = \r\ntrue\r\n;\r\n    uint256 public _maxTxAmount = \r\n5000000\r\n * \r\n10\r\n**\r\n6\r\n * \r\n10\r\n**\r\n9\r\n;\r\n    uint256 private numTokensSellToAddToLiquidity = \r\n500000\r\n * \r\n10\r\n**\r\n6\r\n * \r\n10\r\n**\r\n9\r\n;\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = \r\ntrue\r\n;\r\n        _;\r\n        inSwapAndLiquify = \r\nfalse\r\n;\r\n    }\r\n    \r\nconstructor\r\n (\r\n) \r\npublic\r\n {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n);\r\n         \r\n// Create a uniswap pair for this new token\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(\r\nthis\r\n), _uniswapV2Router.WETH());\r\n        \r\n// set the rest of the contract variables\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n//exclude owner and this contract from fee\r\n\r\n        _isExcludedFromFee[owner()] = \r\ntrue\r\n;\r\n        _isExcludedFromFee[address(\r\nthis\r\n)] = \r\ntrue\r\n;\r\n        emit Transfer(address(\r\n0\r\n), _msgSender(), _tTotal);\r\n    }\r\n    \r\nfunction\r\n \r\nname\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring memory\r\n) \r\n{\r\n        \r\nreturn\r\n _name;\r\n    }\r\n    \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring memory\r\n) \r\n{\r\n        \r\nreturn\r\n _symbol;\r\n    }\r\n    \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint8\r\n) \r\n{\r\n        \r\nreturn\r\n _decimals;\r\n    }\r\n    \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _tTotal;\r\n    }\r\n    \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nif\r\n (_isExcluded[account]) \r\nreturn\r\n _tOwned[account];\r\n        \r\nreturn\r\n tokenFromReflection(_rOwned[account]);\r\n    }\r\n    \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress recipient, uint256 amount\r\n) \r\npublic\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _transfer(_msgSender(), recipient, amount);\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nallowance\r\n(\r\naddress owner, address spender\r\n) \r\npublic\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _allowances[owner][spender];\r\n    }\r\n    \r\nfunction\r\n \r\napprove\r\n(\r\naddress spender, uint256 amount\r\n) \r\npublic\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _approve(_msgSender(), spender, amount);\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\npublic\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \r\n\"ERC20: transfer amount exceeds allowance\"\r\n));\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nincreaseAllowance\r\n(\r\naddress spender, uint256 addedValue\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\ndecreaseAllowance\r\n(\r\naddress spender, uint256 subtractedValue\r\n) \r\npublic\r\n \r\nvirtual\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \r\n\"ERC20: decreased allowance below zero\"\r\n));\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nisExcludedFromReward\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n _isExcluded[account];\r\n    }\r\n    \r\nfunction\r\n \r\ntotalFees\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _tFeeTotal;\r\n    }\r\n    \r\nfunction\r\n \r\ndeliver\r\n(\r\nuint256 tAmount\r\n) \r\npublic\r\n \r\n{\r\n        address sender = _msgSender();\r\n        \r\nrequire\r\n(!_isExcluded[sender], \r\n\"Excluded addresses cannot call this function\"\r\n);\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n    \r\nfunction\r\n \r\nreflectionFromToken\r\n(\r\nuint256 tAmount, bool deductTransferFee\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n(\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(tAmount <= _tTotal, \r\n\"Amount must be less than supply\"\r\n);\r\n        \r\nif\r\n (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            \r\nreturn\r\n rAmount;\r\n        } \r\nelse\r\n {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            \r\nreturn\r\n rTransferAmount;\r\n        }\r\n    }\r\n    \r\nfunction\r\n \r\ntokenFromReflection\r\n(\r\nuint256 rAmount\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n(\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(rAmount <= _rTotal, \r\n\"Amount must be less than total reflections\"\r\n);\r\n        uint256 currentRate =  _getRate();\r\n        \r\nreturn\r\n rAmount.div(currentRate);\r\n    }\r\n    \r\nfunction\r\n \r\nexcludeFromReward\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        \r\n// require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n\r\n        \r\nrequire\r\n(!_isExcluded[account], \r\n\"Account is already excluded\"\r\n);\r\n        \r\nif\r\n(_rOwned[account] > \r\n0\r\n) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = \r\ntrue\r\n;\r\n        _excluded.push(account);\r\n    }\r\n    \r\nfunction\r\n \r\nincludeInReward\r\n(\r\naddress account\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        \r\nrequire\r\n(_isExcluded[account], \r\n\"Account is already excluded\"\r\n);\r\n        \r\nfor\r\n (uint256 i = \r\n0\r\n; i < _excluded.length; i++) {\r\n            \r\nif\r\n (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - \r\n1\r\n];\r\n                _tOwned[account] = \r\n0\r\n;\r\n                _isExcluded[account] = \r\nfalse\r\n;\r\n                _excluded.pop();\r\n                \r\nbreak\r\n;\r\n            }\r\n        }\r\n    }\r\n        \r\nfunction\r\n \r\n_transferBothExcluded\r\n(\r\naddress sender, address recipient, uint256 tAmount\r\n) \r\nprivate\r\n \r\n{\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n        \r\nfunction\r\n \r\nexcludeFromFee\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        _isExcludedFromFee[account] = \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nincludeInFee\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        _isExcludedFromFee[account] = \r\nfalse\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nsetTaxFeePercent\r\n(\r\nuint256 taxFee\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        _taxFee = taxFee;\r\n    }\r\n    \r\nfunction\r\n \r\nsetLiquidityFeePercent\r\n(\r\nuint256 liquidityFee\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n    \r\nfunction\r\n \r\nsetMaxTxPercent\r\n(\r\nuint256 maxTxPercent\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            \r\n10\r\n**\r\n2\r\n\r\n        );\r\n    }\r\n    \r\nfunction\r\n \r\nsetSwapAndLiquifyEnabled\r\n(\r\nbool _enabled\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n     \r\n//to recieve ETH from uniswapV2Router when swaping\r\n\r\n    receive() external payable {}\r\n    \r\nfunction\r\n \r\n_reflectFee\r\n(\r\nuint256 rFee, uint256 tFee\r\n) \r\nprivate\r\n \r\n{\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    \r\nfunction\r\n \r\n_getValues\r\n(\r\nuint256 tAmount\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256, uint256, uint256, uint256, uint256, uint256\r\n) \r\n{\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        \r\nreturn\r\n (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    \r\nfunction\r\n \r\n_getTValues\r\n(\r\nuint256 tAmount\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256, uint256, uint256\r\n) \r\n{\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        \r\nreturn\r\n (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    \r\nfunction\r\n \r\n_getRValues\r\n(\r\nuint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate\r\n) \r\nprivate\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256, uint256, uint256\r\n) \r\n{\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        \r\nreturn\r\n (rAmount, rTransferAmount, rFee);\r\n    }\r\n    \r\nfunction\r\n \r\n_getRate\r\n(\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n(\r\nuint256\r\n) \r\n{\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        \r\nreturn\r\n rSupply.div(tSupply);\r\n    }\r\n    \r\nfunction\r\n \r\n_getCurrentSupply\r\n(\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n(\r\nuint256, uint256\r\n) \r\n{\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        \r\nfor\r\n (uint256 i = \r\n0\r\n; i < _excluded.length; i++) {\r\n            \r\nif\r\n (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) \r\nreturn\r\n (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        \r\nif\r\n (rSupply < _rTotal.div(_tTotal)) \r\nreturn\r\n (_rTotal, _tTotal);\r\n        \r\nreturn\r\n (rSupply, tSupply);\r\n    }\r\n    \r\nfunction\r\n \r\n_takeLiquidity\r\n(\r\nuint256 tLiquidity\r\n) \r\nprivate\r\n \r\n{\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(\r\nthis\r\n)] = _rOwned[address(\r\nthis\r\n)].add(rLiquidity);\r\n        \r\nif\r\n(_isExcluded[address(\r\nthis\r\n)])\r\n            _tOwned[address(\r\nthis\r\n)] = _tOwned[address(\r\nthis\r\n)].add(tLiquidity);\r\n    }\r\n    \r\nfunction\r\n \r\ncalculateTaxFee\r\n(\r\nuint256 _amount\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _amount.mul(_taxFee).div(\r\n            \r\n10\r\n**\r\n2\r\n\r\n        );\r\n    }\r\n    \r\nfunction\r\n \r\ncalculateLiquidityFee\r\n(\r\nuint256 _amount\r\n) \r\nprivate\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _amount.mul(_liquidityFee).div(\r\n            \r\n10\r\n**\r\n2\r\n\r\n        );\r\n    }\r\n    \r\nfunction\r\n \r\nremoveAllFee\r\n(\r\n) \r\nprivate\r\n \r\n{\r\n        \r\nif\r\n(_taxFee == \r\n0\r\n && _liquidityFee == \r\n0\r\n) \r\nreturn\r\n;\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _taxFee = \r\n0\r\n;\r\n        _liquidityFee = \r\n0\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\nrestoreAllFee\r\n(\r\n) \r\nprivate\r\n \r\n{\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n    \r\nfunction\r\n \r\nisExcludedFromFee\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n(\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n _isExcludedFromFee[account];\r\n    }\r\n    \r\nfunction\r\n \r\n_approve\r\n(\r\naddress owner, address spender, uint256 amount\r\n) \r\nprivate\r\n \r\n{\r\n        \r\nrequire\r\n(owner != address(\r\n0\r\n), \r\n\"ERC20: approve from the zero address\"\r\n);\r\n        \r\nrequire\r\n(spender != address(\r\n0\r\n), \r\n\"ERC20: approve to the zero address\"\r\n);\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\nfunction\r\n \r\n_transfer\r\n(\r\n\r\n        address \r\nfrom\r\n,\r\n        address to,\r\n        uint256 amount\r\n    \r\n) \r\nprivate\r\n \r\n{\r\n        \r\nrequire\r\n(\r\nfrom\r\n != address(\r\n0\r\n), \r\n\"ERC20: transfer from the zero address\"\r\n);\r\n        \r\nrequire\r\n(to != address(\r\n0\r\n), \r\n\"ERC20: transfer to the zero address\"\r\n);\r\n        \r\nrequire\r\n(amount > \r\n0\r\n, \r\n\"Transfer amount must be greater than zero\"\r\n);\r\n        \r\nif\r\n(\r\nfrom\r\n != owner() && to != owner())\r\n            \r\nrequire\r\n(amount <= _maxTxAmount, \r\n\"Transfer amount exceeds the maxTxAmount.\"\r\n);\r\n        \r\n// is the token balance of this contract address over the min number of\r\n\r\n        \r\n// tokens that we need to initiate a swap + liquidity lock?\r\n\r\n        \r\n// also, don't get caught in a circular liquidity event.\r\n\r\n        \r\n// also, don't swap & liquify if sender is uniswap pair.\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(\r\nthis\r\n));\r\n        \r\nif\r\n(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        \r\nif\r\n (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            \r\nfrom\r\n != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            \r\n//add liquidity\r\n\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n//indicates if fee should be deducted from transfer\r\n\r\n        bool takeFee = \r\ntrue\r\n;\r\n        \r\n//if any account belongs to _isExcludedFromFee account then remove the fee\r\n\r\n        \r\nif\r\n(_isExcludedFromFee[\r\nfrom\r\n] || _isExcludedFromFee[to]){\r\n            takeFee = \r\nfalse\r\n;\r\n        }\r\n        \r\n//transfer amount, it will take tax, burn, liquidity fee\r\n\r\n        _tokenTransfer(\r\nfrom\r\n,to,amount,takeFee);\r\n    }\r\n    \r\nfunction\r\n \r\nswapAndLiquify\r\n(\r\nuint256 contractTokenBalance\r\n) \r\nprivate\r\n \r\nlockTheSwap\r\n \r\n{\r\n        \r\n// split the contract balance into halves\r\n\r\n        uint256 half = contractTokenBalance.div(\r\n2\r\n);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        \r\n// capture the contract's current ETH balance.\r\n\r\n        \r\n// this is so that we can capture exactly the amount of ETH that the\r\n\r\n        \r\n// swap creates, and not make the liquidity event include any ETH that\r\n\r\n        \r\n// has been manually sent to the contract\r\n\r\n        uint256 initialBalance = address(\r\nthis\r\n).balance;\r\n        \r\n// swap tokens for ETH\r\n\r\n        swapTokensForEth(half); \r\n// <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        \r\n// how much ETH did we just swap into?\r\n\r\n        uint256 newBalance = address(\r\nthis\r\n).balance.sub(initialBalance);\r\n        \r\n// add liquidity to uniswap\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n    \r\nfunction\r\n \r\nswapTokensForEth\r\n(\r\nuint256 tokenAmount\r\n) \r\nprivate\r\n \r\n{\r\n        \r\n// generate the uniswap pair path of token -> weth\r\n\r\n        address[] memory path = \r\nnew\r\n address[](\r\n2\r\n);\r\n        path[\r\n0\r\n] = address(\r\nthis\r\n);\r\n        path[\r\n1\r\n] = uniswapV2Router.WETH();\r\n        _approve(address(\r\nthis\r\n), address(uniswapV2Router), tokenAmount);\r\n        \r\n// make the swap\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            \r\n0\r\n, \r\n// accept any amount of ETH\r\n\r\n            path,\r\n            address(\r\nthis\r\n),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\nfunction\r\n \r\naddLiquidity\r\n(\r\nuint256 tokenAmount, uint256 ethAmount\r\n) \r\nprivate\r\n \r\n{\r\n        \r\n// approve token transfer to cover all possible scenarios\r\n\r\n        _approve(address(\r\nthis\r\n), address(uniswapV2Router), tokenAmount);\r\n        \r\n// add the liquidity\r\n\r\n        uniswapV2Router.addLiquidityETH{\r\nvalue\r\n: ethAmount}(\r\n            address(\r\nthis\r\n),\r\n            tokenAmount,\r\n            \r\n0\r\n, \r\n// slippage is unavoidable\r\n\r\n            \r\n0\r\n, \r\n// slippage is unavoidable\r\n\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n//this method is responsible for taking all fee, if takeFee is true\r\n\r\n    \r\nfunction\r\n \r\n_tokenTransfer\r\n(\r\naddress sender, address recipient, uint256 amount,bool takeFee\r\n) \r\nprivate\r\n \r\n{\r\n        \r\nif\r\n(!takeFee)\r\n            removeAllFee();\r\n        \r\nif\r\n (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } \r\nelse\r\n \r\nif\r\n (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } \r\nelse\r\n \r\nif\r\n (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } \r\nelse\r\n \r\nif\r\n (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } \r\nelse\r\n {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\nif\r\n(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n    \r\nfunction\r\n \r\n_transferStandard\r\n(\r\naddress sender, address recipient, uint256 tAmount\r\n) \r\nprivate\r\n \r\n{\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\nfunction\r\n \r\n_transferToExcluded\r\n(\r\naddress sender, address recipient, uint256 tAmount\r\n) \r\nprivate\r\n \r\n{\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\nfunction\r\n \r\n_transferFromExcluded\r\n(\r\naddress sender, address recipient, uint256 tAmount\r\n) \r\nprivate\r\n \r\n{\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeNFTcollector", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8be8c9a13ce1babb2c2b5e0ce62cac718139485223c3f4d08b3ece89580a5f10"}