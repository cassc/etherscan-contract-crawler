{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmartStepts_swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\\ninterface IBEP20Token\\n{\\n    function mintTokens(address receipient, uint256 tokenAmount) external returns(bool);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function balanceOf(address user) external view returns(uint256);\\n    function totalSupply() external view returns (uint256);\\n    function burnInternal(address _user, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n}\\n\\ninterface Master_Contract\\n{\\n    function getUserInfo(address receipient) external returns(address,uint,uint);\\n    function getUserRegisterStatus(address receipient) external returns(bool,bool);\\n}\\n\\n/**\\n     * Network: bsc\\n     * Aggregator: BNB/USD\\n     * Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE  // Test - 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526\\n     */\\n\\n\\ncontract SmartSteps_SwapV2{\\n\\n    AggregatorV3Interface internal priceFeed;\\n    IBEP20Token public tokenContract;\\n    Master_Contract public master_Contract;\\n     using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    struct UserTX {\\n    uint tokenAmount;\\n    uint bnbAmount;\\n    uint time;\\n    uint price;\\n    string action;\\n  }\\n\\n  struct UserInfo{\\n    uint totalTokenMinted;\\n    uint totalTokenBurn;\\n  }\\n\\n    bool public started;\\n    bool private IsInitinalized;\\n    address payable public admin;\\n    address public  masterContract;\\n    uint public tokenPriceBNB;\\n    uint public totalMinted;\\n    uint public totalBurned;\\n    uint public totalBNBFlowed;\\n    mapping(address=>UserTX[]) public userTXDetails;\\n    mapping(address=>UserInfo) public userInfo;\\n    uint public platformFee;\\n    uint public baseDiveder;\\n\\n    function initinalize(address payable _admin,IBEP20Token _tokenContract,address _masterContract,Master_Contract _add) external{\\n        require(IsInitinalized ==false );\\n        admin = _admin;\\n        tokenContract = _tokenContract;\\n        masterContract = _masterContract;\\n        master_Contract = _add;\\n        platformFee = 200;\\n        baseDiveder= 10000;\\n        priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);\\n        IsInitinalized = true ;\\n    }\\n\\n    function swap(uint _token) public{\\n        (address isreff,,) = master_Contract.getUserInfo(msg.sender);\\n        require(isreff != address(0),\\\"you can not swap\\\");\\n        require(tokenContract.balanceOf(msg.sender)>=_token,\\\"No funds\\\");\\n        (,uint bnb,uint charge) = getSwapData( _token);\\n        require(bnb>0,\\\"wr\\\");\\n        require(address(this).balance >= bnb,\\\"No liquidity funds\\\");\\n        tokenContract.burnInternal(msg.sender,_token);\\n        totalBurned += _token;\\n        payable(msg.sender).transfer(bnb);\\n        admin.transfer(charge);\\n        totalBNBFlowed += bnb;\\n        userInfo[msg.sender].totalTokenBurn += _token;\\n        userTXDetails[msg.sender].push(UserTX(_token,bnb,block.timestamp,tokenPriceBNB,\\\"BOLTYZ TO BNB\\\"));\\n    }\\n\\n    function getSwapData(uint _token) public view returns(uint tokenAmount,uint bnbAmount,uint charge) {\\n          if(tokenPriceBNB>0){\\n          uint tokenPrice = tokenPriceBNB;\\n          uint usd = uint256(TotalusdPrice(int(tokenPrice)));\\n          uint givenUsd = (_token.mul(usd)).div(1e8);\\n          uint bnb = getCalculatedBnbRecieved(givenUsd);\\n          charge = bnb.mul(platformFee).div(baseDiveder);\\n          bnbAmount = bnb.sub(charge);\\n          tokenAmount = _token;\\n          }   \\n    }\\n\\n    function addFunds() public payable{\\n      require(msg.sender==masterContract, \\\"No Permission\\\");\\n    }\\n\\n    function updateTokenPrice(uint _price) public {\\n      require(msg.sender==admin, \\\"No Permission\\\");\\n      tokenPriceBNB = _price;\\n    }\\n\\n    function getusertxlength(address _user) public view returns(uint count){\\n      count = userTXDetails[_user].length;\\n    }\\n\\n    function getUserTxdata(address _user) public view returns(UserTX[] memory data){\\n      data = userTXDetails[_user];\\n    }\\n\\n    function changeplatformFee(uint fee) public {\\n      require(msg.sender==admin, \\\"No Permission\\\");\\n      platformFee = fee;\\n    }\\n\\n    function mintTokens(address _to,uint tokenAmount) public {\\n      require(msg.sender==admin, \\\"No Permission\\\");\\n      tokenContract.mintTokens(_to,tokenAmount);\\n      userInfo[_to].totalTokenMinted += tokenAmount;\\n      totalMinted += tokenAmount;\\n    }\\n\\n\\n function getLatestPrice() public view returns (int) {\\n        (\\n            /* uint80 roundID */,\\n            int price,\\n            /*uint startedAt */,\\n            /*uint timeStamp*/,\\n           /* uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n    function TotalusdPrice(int _amount) public view returns (int) {\\n        int usdt = getLatestPrice();\\n        return (usdt * _amount)/1e18;\\n    }\\n\\n\\n\\n function getCalculatedBnbRecieved(uint256 _amount) public view returns(uint256) {\\n\\t\\tuint256 usdt = uint256(getLatestPrice());\\n\\t\\tuint256 recieved_bnb = (_amount*1e18/usdt*1e18)/1e18;\\n\\t\\treturn recieved_bnb;\\n\\t  }\\n\\t\\n       \\n       \\n} \\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n        return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath mul failed');\\n    return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, 'SafeMath sub failed');\\n    return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath add failed');\\n    return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b == 0, 'SafeMath add failed');\\n        return (a % b);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"TotalusdPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseDiveder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeplatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCalculatedBnbRecieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"getSwapData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTxdata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"internalType\":\"struct SmartSteps_SwapV2.UserTX[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getusertxlength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20Token\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterContract\",\"type\":\"address\"},{\"internalType\":\"contract Master_Contract\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"initinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master_Contract\",\"outputs\":[{\"internalType\":\"contract Master_Contract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IBEP20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBFlowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTXDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartSteps_SwapV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}