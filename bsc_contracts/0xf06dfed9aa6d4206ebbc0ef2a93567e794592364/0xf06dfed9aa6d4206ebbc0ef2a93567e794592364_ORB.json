{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\r\n\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\r\n\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\r\n\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\r\n\r\n*/\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                 assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ORB is Context, IERC20, Ownable { \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n\r\n    // Tracking status of wallets\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromFee; \r\n\r\n   \r\n    /*\r\n\r\n    WALLETS\r\n\r\n    */\r\n    \r\n    address payable private Developmentwallet; \r\n    address payable private NFTFarm; \r\n\r\n    address public MagicverseBridge;\r\n\r\n    /*\r\n\r\n    TOKEN DETAILS\r\n\r\n    */\r\n\r\n\r\n    string private _name = \"ORB Token\"; \r\n    string private _symbol = \"ORB\";  \r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    // Counter for liquify trigger\r\n    uint8 private txCount = 0;\r\n    uint8 private swapTrigger = 3; \r\n \r\n\r\n\r\n    // Setting the initial fees\r\n    uint256 private _TotalFee = 5;\r\n    uint256 public _buyFee = 5;\r\n    uint256 public _sellFee = 5;\r\n\r\n    //Fees distribution\r\n    uint256 public LiquidityFee = 2000;\r\n    uint256 public NFTFarmFee = 6000;\r\n    uint256 public DevelopmentFee = 2000;\r\n    \r\n    uint256 private TotalfeeforDistribution = 10000;\r\n\r\n    // 'Previous fees' are used to keep track of fee settings when removing and restoring fees\r\n    uint256 private _previousTotalFee = _TotalFee; \r\n    uint256 private _previousBuyFee = _buyFee; \r\n    uint256 private _previousSellFee = _sellFee; \r\n\r\n    /*\r\n\r\n    WALLET LIMITS \r\n    \r\n    */\r\n\r\n    // Maximum swap amount \r\n    uint256 public _maxSwapAmount = 1000000000 * 10**18; \r\n    /* \r\n\r\n    Swap Router SET UP\r\n\r\n    */\r\n                                     \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    bool public TradingInitialized;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    \r\n    event TradingStarted(\r\n        address TokenAddress,\r\n        address PairAddress,\r\n        uint256 TokenAmount,\r\n        uint256 EthAmount\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 nativeReceived\r\n    );\r\n\r\n    event LiquiditySent(\r\n        uint256 tokensIntoLiquidity,\r\n        uint256 CROintoLiquidity\r\n    );\r\n\r\n   event NFTFarmSent(\r\n       address to, \r\n       uint256 nativeSent\r\n    );\r\n\r\n     event DevelopmentSent(\r\n       address to, \r\n       uint256 nativeSent\r\n    );\r\n\r\n    /*\r\n\r\n   MODIFIERS\r\n\r\n    */\r\n\r\n    // Prevent processing while already processing! \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n   \r\n    \r\n     // Mint and burn functions can only be called by bridge!\r\n\r\n    modifier onlyBridge {\r\n    require(msg.sender == MagicverseBridge);\r\n    _;\r\n    }\r\n\r\n    /*\r\n\r\n    \r\n\r\n    */\r\n    \r\n  constructor () {\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n    \r\n    }\r\n\r\n\r\n    /*\r\n\r\n    STANDARD ERC20 COMPLIANCE FUNCTIONS\r\n\r\n    */\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function bridgeMint(address to, uint256 amount) public onlyBridge() {\r\n        _tOwned[to] = _tOwned[to].add(amount);\r\n        _tTotal = _tTotal.add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n    \r\n    function bridgeBurn(address from, uint256 amount) public onlyBridge() {\r\n        _tOwned[from] = _tOwned[from].sub(amount);\r\n        _tTotal = _tTotal.sub(amount);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n    /*\r\n\r\n    END OF STANDARD ERC20 COMPLIANCE FUNCTIONS\r\n\r\n    */\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    FEES\r\n\r\n    */\r\n    \r\n    // Set a wallet address so that it does not have to pay transaction fees\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    // Set a wallet address so that it has to pay transaction fees\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    \r\n    /*\r\n\r\n    SETTING FEES\r\n\r\n    Initial fees are set to 5% buy 5% sell\r\n\r\n    */\r\n    \r\n\r\n    function _set_Fees(uint256 Buy_Fee, uint256 Sell_Fee) external onlyOwner() {\r\n\r\n        _sellFee = Sell_Fee;\r\n        _buyFee = Buy_Fee;\r\n\r\n    }\r\n    \r\n    function _set_Distribution_Fees(uint256 LiquidityFeex1000, uint256 NFTFarmFeex1000,uint256 DevelopmentFeex1000) external onlyOwner() {\r\n\r\n         LiquidityFee = LiquidityFeex1000;\r\n         NFTFarmFee = NFTFarmFeex1000;\r\n         DevelopmentFee = DevelopmentFeex1000;\r\n    \r\n         TotalfeeforDistribution = LiquidityFee.add(NFTFarmFee).add(DevelopmentFee);\r\n\r\n    }\r\n\r\n\r\n    // Update NFT Farm wallet\r\n    function Wallet_Update_NFTFarm(address payable NFTFarm_Wallet) public onlyOwner() {\r\n        NFTFarm = NFTFarm_Wallet;\r\n        _isExcludedFromFee[NFTFarm_Wallet] = true;\r\n    }\r\n    \r\n    // Update Development wallet\r\n    function Wallet_Update_Development(address payable Development_Wallet) public onlyOwner() {\r\n        Developmentwallet = Development_Wallet;\r\n        _isExcludedFromFee[Development_Wallet] = true;\r\n    }\r\n\r\n    // Update Bridge address\r\n    function Wallet_Bridge(address Bridge_Wallet) public onlyOwner() {\r\n       MagicverseBridge = Bridge_Wallet;\r\n       _isExcludedFromFee[Bridge_Wallet] = true;\r\n    }\r\n\r\n    /*\r\n\r\n    PROCESSING TOKENS - SET UP\r\n\r\n    */\r\n    \r\n    // Toggle on and off to auto process tokens to BNB wallet \r\n    function set_Swap_And_Liquify_Enabled(bool true_or_false) public onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit SwapAndLiquifyEnabledUpdated(true_or_false);\r\n    }\r\n\r\n    // This will set the number of transactions required before the 'swapAndLiquify' function triggers\r\n    function set_Number_Of_Transactions_Before_Liquify_Trigger(uint8 number_of_transactions) public onlyOwner {\r\n        swapTrigger = number_of_transactions;\r\n    }\r\n    \r\n\r\n\r\n    // This function is required so that the contract can receive Native Coin\r\n    receive() external payable {}\r\n\r\n  \r\n    /*\r\n    \r\n    When sending tokens to another wallet (not buying or selling) if noFeeToTransfer is true there will be no fee\r\n\r\n    */\r\n\r\n    bool public noFeeToTransfer = true;\r\n\r\n    // Option to set fee or no fee for transfer (just in case the no fee transfer option is exploited in future!)\r\n    // True = there will be no fees when moving tokens around or giving them to friends! (There will only be a fee to buy or sell)\r\n    // False = there will be a fee when buying/selling/tranfering tokens\r\n    // Default is true\r\n    function set_Transfers_Without_Fees(bool true_or_false) external onlyOwner {\r\n        noFeeToTransfer = true_or_false;\r\n    }\r\n\r\n    /*\r\n\r\n    WALLET LIMITS\r\n\r\n    Wallets are limited in two ways. The amount of tokens that can be purchased in one transaction\r\n    and the total amount of tokens a wallet can buy. Limiting a wallet prevents one wallet from holding too\r\n    many tokens, which can scare away potential buyers that worry that a whale might dump!\r\n\r\n    */\r\n\r\n    \r\n\r\n    // Remove all fees\r\n    function removeAllFee() private {\r\n        if(_TotalFee == 0 && _buyFee == 0 && _sellFee == 0) return;\r\n\r\n\r\n        _previousBuyFee = _buyFee; \r\n        _previousSellFee = _sellFee; \r\n        _previousTotalFee = _TotalFee;\r\n        _buyFee = 0;\r\n        _sellFee = 0;\r\n        _TotalFee = 0;\r\n\r\n    }\r\n    \r\n    // Restore all fees\r\n    function restoreAllFee() private {\r\n    \r\n    _TotalFee = _previousTotalFee;\r\n    _buyFee = _previousBuyFee; \r\n    _sellFee = _previousSellFee; \r\n\r\n    }\r\n\r\n\r\n    // Approve a wallet to sell tokens\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0) && spender != address(0), \"ERR: zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        \r\n\r\n        /*\r\n\r\n        PROCESSING\r\n\r\n        */\r\n\r\n\r\n        // SwapAndLiquify is triggered after every X transactions - this number can be adjusted using swapTrigger\r\n\r\n        if(\r\n            txCount >= swapTrigger && \r\n            !inSwapAndLiquify &&\r\n            to == uniswapV2Pair &&\r\n            swapAndLiquifyEnabled \r\n            )\r\n        {  \r\n            \r\n            txCount = 0;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance > _maxSwapAmount) {contractTokenBalance = _maxSwapAmount;}\r\n            if(contractTokenBalance > 0){\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        }\r\n\r\n\r\n        /*\r\n\r\n        REMOVE FEES IF REQUIRED\r\n\r\n        Fee removed if the to or from address is excluded from fee.\r\n        Fee removed if the transfer is NOT a buy or sell.\r\n        Change fee amount for buy or sell.\r\n\r\n        */\r\n\r\n        \r\n        bool takeFee = true;\r\n         \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeToTransfer && from != uniswapV2Pair && to != uniswapV2Pair)){\r\n            takeFee = false;\r\n        } else if (from == uniswapV2Pair){_TotalFee = _buyFee;} else if (to == uniswapV2Pair){_TotalFee = _sellFee;}\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    PROCESSING FEES\r\n\r\n    Fees are added to the contract as tokens, these functions exchange the tokens for Native coins and send to different wallets.\r\n\r\n    */\r\n\r\n\r\n    // Send Native coin to external wallet\r\n    function sendToWallet(address payable wallet, uint256 amount) private {\r\n            wallet.transfer(amount);\r\n        }\r\n\r\n\r\n    // Processing tokens from contract\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        \r\n        uint256 tokensforlp = contractTokenBalance.mul(LiquidityFee).div(TotalfeeforDistribution).div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(tokensforlp);\r\n\r\n        swapTokensForNative(amountToSwap);\r\n        \r\n        \r\n        uint256 amountNative = address(this).balance;\r\n        emit SwapAndLiquify (amountToSwap,amountNative);\r\n\r\n        //calcute payout shares\r\n        uint256 totalNativeFee = TotalfeeforDistribution.sub(LiquidityFee.div(2));        \r\n        uint256 amountForLiquidity = amountNative.mul(LiquidityFee).div(totalNativeFee).div(2);\r\n        uint256 amountForNFTFarm = amountNative.mul(NFTFarmFee).div(totalNativeFee);\r\n        uint256 amountForDevelopment = amountNative.sub(amountForLiquidity).sub(amountForNFTFarm);\r\n\r\n         if (amountForLiquidity > 0) {\r\n            addLiquidity(tokensforlp, amountForLiquidity);\r\n            emit LiquiditySent(tokensforlp, amountForLiquidity);\r\n        }\r\n        \r\n         if (amountForNFTFarm > 0) {\r\n             sendToWallet(NFTFarm,amountForNFTFarm);\r\n            emit NFTFarmSent(NFTFarm, amountForNFTFarm);\r\n         }\r\n            \r\n         \r\n         if (amountForDevelopment > 0) {\r\n             sendToWallet(Developmentwallet,amountForDevelopment);\r\n            emit DevelopmentSent(Developmentwallet, amountForDevelopment);\r\n         }\r\n            \r\n\r\n        \r\n    }\r\n\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 nativeAmount) private returns (uint256, uint256) {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        (uint amountToken, uint amountETH, ) = uniswapV2Router.addLiquidityETH{value: nativeAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        return (uint256(amountToken), uint256(amountETH));\r\n    }\r\n\r\n    // Manual Token Process Trigger - Enter the percent of the tokens that you'd like to send to process\r\n    function process_Tokens_Now (uint256 percent_Of_Tokens_To_Process) public onlyOwner {\r\n        // Do not trigger if already in swap\r\n        require(!inSwapAndLiquify, \"Currently processing, try later.\"); \r\n        if (percent_Of_Tokens_To_Process > 100){percent_Of_Tokens_To_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract*percent_Of_Tokens_To_Process/100;\r\n        swapAndLiquify(sendTokens);\r\n    }\r\n\r\n\r\n    // Swapping tokens for Native coin using Chains Swap \r\n    function swapTokensForNative(uint256 tokenAmount) private {\r\n    \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of Native\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /*\r\n\r\n    PURGE RANDOM TOKENS - Add the random token address and a wallet to send them to\r\n\r\n    */\r\n\r\n    // Remove random tokens from the contract and send to a wallet\r\n    function remove_Random_Tokens(address random_Token_Address, address send_to_wallet, uint256 number_of_tokens) public onlyOwner returns(bool _sent){\r\n        require(random_Token_Address != address(this), \"Can not remove native token\");\r\n        uint256 randomBalance = IERC20(random_Token_Address).balanceOf(address(this));\r\n        if (number_of_tokens > randomBalance){number_of_tokens = randomBalance;}\r\n        _sent = IERC20(random_Token_Address).transfer(send_to_wallet, number_of_tokens);\r\n    }\r\n\r\n    /*\r\n    \r\n    INITIALIZE TRADING\r\n\r\n    */\r\n\r\n    // Sets Router,Pair and adds LP. Can only executed once by the owner\r\n    function startTrading(address Router) public onlyOwner() {\r\n        require(!TradingInitialized);\r\n        TradingInitialized = true;\r\n        IUniswapV2Router02 _newuniswapV2Router = IUniswapV2Router02(Router);\r\n        uniswapV2Pair = IUniswapV2Factory(_newuniswapV2Router.factory()).createPair(address(this), _newuniswapV2Router.WETH());\r\n        uniswapV2Router = _newuniswapV2Router;\r\n        \r\n        uint256 TokenForInitialLp = balanceOf(address(this));\r\n        uint256 ETHForInitialLp = address(this).balance;\r\n        _approve(address(this), address(uniswapV2Router), TokenForInitialLp);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ETHForInitialLp}(\r\n            address(this),\r\n            TokenForInitialLp,\r\n            TokenForInitialLp,\r\n            ETHForInitialLp,\r\n            msg.sender,\r\n            block.timestamp+1800\r\n        );\r\n        \r\n        emit TradingStarted(address(this),uniswapV2Pair,TokenForInitialLp,ETHForInitialLp);\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    UPDATE ROUTER AND LIQUIDITY PAIRING\r\n\r\n    */\r\n\r\n\r\n    // Set new router and make the new pair address\r\n    function set_New_Router_and_Make_Pair(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newuniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newuniswapV2Router.factory()).createPair(address(this), _newuniswapV2Router.WETH());\r\n        uniswapV2Router = _newuniswapV2Router;\r\n    }\r\n   \r\n    // Set new router\r\n    function set_New_Router_Address(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newuniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Router = _newuniswapV2Router;\r\n    }\r\n    \r\n    function set_New_Pair_Address(address newPair) public onlyOwner() {\r\n        uniswapV2Pair = newPair;\r\n    }\r\n\r\n    /*\r\n\r\n    TOKEN TRANSFERS\r\n\r\n    */\r\n\r\n    // Check if token transfer needs to process fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        \r\n        \r\n        if(!takeFee){\r\n            removeAllFee();\r\n            } else {\r\n                txCount++;\r\n            }\r\n            _transferTokens(sender, recipient, amount);\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    // Redistributing tokens and adding the fee to the contract address\r\n    function _transferTokens(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tFee);   \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n\r\n    // Calculating the fee in tokens\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tFee = tAmount*_TotalFee/100;\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeSent\",\"type\":\"uint256\"}],\"name\":\"DevelopmentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CROintoLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquiditySent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeSent\",\"type\":\"uint256\"}],\"name\":\"NFTFarmSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"name\":\"TradingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MagicverseBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTFarmFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradingInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Bridge_Wallet\",\"type\":\"address\"}],\"name\":\"Wallet_Bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Development_Wallet\",\"type\":\"address\"}],\"name\":\"Wallet_Update_Development\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"NFTFarm_Wallet\",\"type\":\"address\"}],\"name\":\"Wallet_Update_NFTFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LiquidityFeex1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFTFarmFeex1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DevelopmentFeex1000\",\"type\":\"uint256\"}],\"name\":\"_set_Distribution_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Buy_Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sell_Fee\",\"type\":\"uint256\"}],\"name\":\"_set_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFeeToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_Of_Tokens_To_Process\",\"type\":\"uint256\"}],\"name\":\"process_Tokens_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"send_to_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_tokens\",\"type\":\"uint256\"}],\"name\":\"remove_Random_Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"set_New_Pair_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"set_New_Router_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"set_New_Router_and_Make_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"number_of_transactions\",\"type\":\"uint8\"}],\"name\":\"set_Number_Of_Transactions_Before_Liquify_Trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"set_Swap_And_Liquify_Enabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"set_Transfers_Without_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Router\",\"type\":\"address\"}],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ORB", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec795346660535d7c836921003d6d52641c9a0f014975436358df4cb9c0c67f5"}