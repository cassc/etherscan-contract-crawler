{"SourceCode": "pragma solidity >=0.6.0 <0.9.0;\r\n//\u6ce8\u610f\u6b64\u5904\r\npragma experimental ABIEncoderV2;  \r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nstruct userSc {\r\n     uint   date;\r\n     uint   number;\r\n     uint   status;\r\n}\r\n\r\ncontract worSc{\r\n      event RecWor(address indexed addr, uint num);\r\n      event ScWor(address indexed addr, uint num);\r\n       bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n       address private admin;//\u7ba1\u7406\u5458 \r\n       using SafeMath for uint;\r\n       address public WOR = address(0xd6edbB510af7901b2C049ce778b65a740c4aeB7f);\r\n       function _safeTransfer(address token, address to, uint value) private {\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'Pancake: TRANSFER_FAILED');\r\n       }\r\n       mapping(address => userSc[]) userList;\r\n       mapping(uint => userSc) countList;\r\n       uint zong = 50000000000000000000000 ;\r\n       uint day90 = 90 ;\r\n       uint daycount = 0 ;\r\n       uint count = 0 ;\r\n       modifier isAdmin() {\r\n        require(msg.sender == admin, 'FORBIDDEN');\r\n        _;\r\n       }\r\n\r\n       constructor (){\r\n            admin = msg.sender;\r\n       }\r\n\r\n       \r\n     //   function extractWor(uint _value) external isAdmin{\r\n       //     uint b = IBEP20(WOR).balanceOf(address(this));\r\n     //       require(b >= _value,\"Extraction failure\");\r\n     //        _safeTransfer(WOR,msg.sender,_value);\r\n     //  }\r\n\r\n       function getZong() public view returns(uint){\r\n           return zong;\r\n       }\r\n\r\n       function getCount() public view returns(uint){\r\n           return count;\r\n       }\r\n\r\n       function getCount(uint _count) public view returns(userSc memory){\r\n           return countList[_count];\r\n       }\r\n\r\n\r\n       function getBalanceWor(address _address) public view returns(uint){\r\n           return IBEP20(WOR).balanceOf(_address);\r\n       }\r\n\r\n       function gerZong(uint _value) public isAdmin {\r\n           daycount = _value;\r\n       }\r\n\r\n         //\u83b7\u5f97rg\r\n        function addressList(address _address) public view returns(userSc[] memory){\r\n            return  userList[_address];\r\n        }\r\n\r\n        function scWor(uint _value) public {\r\n            require(IBEP20(WOR).balanceOf(msg.sender) >= _value,\"Wor balance deficiency\");\r\n            uint jv = _value*5/100;\r\n            require(zong - jv >= 0,\"Wor underreward\");\r\n            userSc[] storage com =  userList[msg.sender];   \r\n            userSc memory sc = userSc(block.timestamp,_value,0);\r\n            com.push(sc);\r\n            zong -=jv;\r\n            IBEP20(WOR).transferFrom(msg.sender, address(this), _value);\r\n            count ++;\r\n            countList[count] = sc;\r\n            _safeTransfer(WOR,msg.sender,jv);\r\n            emit ScWor(msg.sender,_value);\r\n        }\r\n\r\n        function gSc(address _address) public view returns(uint,uint){\r\n            userSc[] storage com =  userList[_address]; \r\n            uint r = 0;\r\n            uint k = 0;\r\n            for (uint i = 0; i < com.length; i ++) {\r\n                    uint day = block.timestamp.sub(com[i].date).div(86400);\r\n                    uint c =  day.div(day90) + daycount;\r\n                    if(c > 0 && com[i].status == 0){\r\n                         k += com[i].number; \r\n                    }else if(com[i].status == 0){\r\n                         r += com[i].number;\r\n                    }\r\n            } \r\n            return (r,k);\r\n        }\r\n\r\n\r\n        function recWor() public {\r\n            userSc[] storage com =  userList[msg.sender]; \r\n            uint k;\r\n            for (uint i = 0; i < com.length; i ++) {\r\n                    uint day = block.timestamp.sub(com[i].date).div(86400);\r\n                    uint c =  day.div(day90) + daycount;\r\n                    if(c > 0 && com[i].status == 0){\r\n                         k += com[i].number; \r\n                         com[i].status = 1;\r\n                    }\r\n            } \r\n            require(k > 0,\"no reward\");\r\n            _safeTransfer(WOR,msg.sender,k);\r\n            emit RecWor(msg.sender,k);\r\n        }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"RecWor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"ScWor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"internalType\":\"struct userSc[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"gSc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"gerZong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceWor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getCount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"internalType\":\"struct userSc\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recWor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"scWor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "worSc", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9dd9e1851fecbedf63a81e32041a6a9d0a29edce83426f1bce93feeaec8de662"}