{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint256 reserve0, uint256 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { \r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            \r\n            set._indexes[lastvalue] = toDeleteIndex + 1; \r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract BaseToken is IERC20, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    uint8 private _decimals;  \r\n    uint8 private _sellRate;\r\n    uint8 private _buyRate;\r\n    uint8 private _transferRate;\r\n\r\n    uint32 private _startTradeBlock;\r\n    uint32 private _burnPeriod; \r\n    uint32 private _burnRate1; \r\n    uint32 private _burnRate2; \r\n    uint32 private _rate1Times; \r\n    uint256 private _addPriceTokenAmount; \r\n    uint256 private _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    address private _addressA; \r\n    address private _address2; \r\n    address private _addressB; \r\n    address private _usdtAddress;\r\n    address private _usdtPairAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _swapPairMap;\r\n    mapping(address => uint32) public _lastTradeTime;\r\n    EnumerableSet.AddressSet private _excludeFeeSet;\r\n    EnumerableSet.AddressSet private _tradeSet;\r\n    \r\n    constructor (string memory Name, string memory Symbol, uint256 Supply, address RouterAddress, address UsdtAddress, address addressA, address addressB, address address2){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = 18;\r\n        _usdtAddress = UsdtAddress;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(ISwapRouter(RouterAddress).factory());\r\n        _usdtPairAddress = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairMap[_usdtPairAddress] = true;\r\n\r\n        uint256 total = Supply * 1e18;\r\n        _totalSupply = total;\r\n\r\n        \r\n        _addressA = addressA;\r\n        _addressB = addressB;\r\n        _address2 = address2;\r\n\r\n        _balances[msg.sender] = total; \r\n        emit Transfer(address(0), msg.sender, total);\r\n\r\n        _excludeFeeSet.add(msg.sender);\r\n        _excludeFeeSet.add(addressA);\r\n        _excludeFeeSet.add(addressB);\r\n        _excludeFeeSet.add(address2);\r\n        _excludeFeeSet.add(address(this));\r\n        _excludeFeeSet.add(RouterAddress);\r\n        _excludeFeeSet.add(address(0x000000000000000000000000000000000000dEaD));\r\n        _addPriceTokenAmount=1e14;\r\n        _burnPeriod = 900;\r\n        _burnRate1 = 999865;  \r\n        _burnRate2 = 999844; \r\n        _sellRate = 4;\r\n        _buyRate = 4;\r\n        _transferRate = 4;\r\n        _rate1Times = 97;\r\n    }\r\n\r\n    function getAllParams() external view returns(\r\n        uint8  sellRate,\r\n        uint8  buyRate,\r\n        uint8  transferRate,\r\n        uint32  startTradeBlock,\r\n        uint32  burnPeriod,\r\n        uint32  burnRate1,\r\n        uint32  burnRate2,\r\n        uint32  rate1Times,\r\n        uint256  addPriceTokenAmount,\r\n        address  addressA,\r\n        address  address2,\r\n        address addressB\r\n        ){\r\n            sellRate = _sellRate;\r\n            buyRate = _buyRate;\r\n            transferRate = _transferRate;\r\n            startTradeBlock = _startTradeBlock;\r\n            burnPeriod = _burnPeriod;\r\n            burnRate1 = _burnRate1;\r\n            burnRate2 = _burnRate2;\r\n            rate1Times = _rate1Times;\r\n            addPriceTokenAmount = _addPriceTokenAmount;\r\n            addressA = _addressA;\r\n            address2 = _address2;\r\n            addressB = _addressB;\r\n    }\r\n\r\n    function pairAddress() external view returns (address) {\r\n        return _usdtPairAddress;\r\n    }\r\n\r\n    function usdtAddress() external view returns (address) {\r\n        return _usdtAddress;\r\n    }\r\n    \r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        if(_swapPairMap[account] || _excludeFeeSet.contains(account)){\r\n            return _balances[account];\r\n        }\r\n        return _viewBalance(account, block.timestamp);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function rpow(uint256 x,uint256 n,uint256 scalar) internal pure returns (uint256 z) {\r\n        \r\n        assembly {\r\n            switch x\r\n            case 0 {\r\n                switch n\r\n                case 0 {\r\n                    \r\n                    z := scalar\r\n                }\r\n                default {\r\n                    \r\n                    z := 0\r\n                }\r\n            }\r\n            default {\r\n                switch mod(n, 2)\r\n                case 0 {\r\n                    \r\n                    z := scalar\r\n                }\r\n                default {\r\n                    \r\n                    z := x\r\n                }\r\n\r\n                \r\n                let half := shr(1, scalar)\r\n\r\n                for {\r\n                    \r\n                    n := shr(1, n)\r\n                } n {\r\n                    \r\n                    n := shr(1, n)\r\n                } {\r\n                    \r\n                    \r\n                    if shr(128, x) {\r\n                        revert(0, 0)\r\n                    }\r\n\r\n                    \r\n                    let xx := mul(x, x)\r\n\r\n                    \r\n                    let xxRound := add(xx, half)\r\n\r\n                    \r\n                    if lt(xxRound, xx) {\r\n                        revert(0, 0)\r\n                    }\r\n\r\n                    \r\n                    x := div(xxRound, scalar)\r\n\r\n                    \r\n                    if mod(n, 2) {\r\n                        \r\n                        let zx := mul(z, x)\r\n\r\n                        \r\n                        if iszero(eq(div(zx, x), z)) {\r\n                            \r\n                            if iszero(iszero(x)) {\r\n                                revert(0, 0)\r\n                            }\r\n                        }\r\n\r\n                        \r\n                        let zxRound := add(zx, half)\r\n\r\n                        \r\n                        if lt(zxRound, zx) {\r\n                            revert(0, 0)\r\n                        }\r\n\r\n                        \r\n                        z := div(zxRound, scalar)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRemainBalance(uint balance, uint256 r, uint n) public pure returns(uint){\r\n        return balance*rpow(r,n,1000000)/1000000;\r\n    }\r\n\r\n    function getBalanceChangeInfo(address account, uint256 time) public view returns(uint32 burnRate, uint256 burnTimes){\r\n        uint256 burnPeriod = _burnPeriod;\r\n        uint256 lastTradeTime = uint256(_lastTradeTime[account]);\r\n        uint256 begin = lastTradeTime - lastTradeTime%burnPeriod;\r\n        burnTimes = (time - time%burnPeriod - begin)/burnPeriod; \r\n        uint256 endTime = begin+_rate1Times*burnPeriod;  \r\n        if(time<endTime){\r\n            \r\n            burnRate = _burnRate1; \r\n        }else{\r\n            burnRate = _burnRate2; \r\n        }\r\n    }\r\n\r\n    function _viewBalance(address account,uint256 time) internal view returns(uint){\r\n\r\n        uint balance = _balances[account];\r\n        if( balance > 0 ){\r\n            (uint32 burnRate, uint256 burnTimes) = getBalanceChangeInfo(account, time);\r\n            uint remainBalance;\r\n            if(burnTimes<_rate1Times) remainBalance=getRemainBalance(balance, burnRate, burnTimes);\r\n            else{\r\n                remainBalance=getRemainBalance(balance, _burnRate1, _rate1Times-1); \r\n                remainBalance=getRemainBalance(remainBalance, burnRate, burnTimes-_rate1Times+1); \r\n            }\r\n            return remainBalance;\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function _updateBalance(address account,uint256 time) internal {\r\n        if(_swapPairMap[account] || _excludeFeeSet.contains(account)) return; \r\n        uint balance = _balances[account];\r\n        if( balance > 0 ){\r\n            uint viewBalance = _viewBalance(account,time);\r\n            if( balance > viewBalance){\r\n                _lastTradeTime[account] = uint32(time);\r\n                uint burnAmount = balance - viewBalance;\r\n                _tokenTransfer(account, address(0), burnAmount/2); \r\n                _tokenTransfer(account, _addressA, burnAmount/4); \r\n                _tokenTransfer(account, _addressB, burnAmount/4); \r\n            }\r\n        }else{\r\n            _lastTradeTime[account] = uint32(time); \r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){        \r\n        (uint r0,uint r1,) = IUniswapV2Pair(_usdtPairAddress).getReserves();\r\n        uint rUsdt = r0;  \r\n        uint bUsdt = IERC20(_usdtAddress).balanceOf(_usdtPairAddress);      \r\n        if(address(this)<_usdtAddress){ \r\n            rUsdt = r1; \r\n        }\r\n        if( _swapPairMap[to] ){ \r\n            if( bUsdt >= rUsdt ){\r\n                isAdd = bUsdt - rUsdt >= _addPriceTokenAmount; \r\n            }\r\n        }\r\n        if( _swapPairMap[from] ){   \r\n            isDel = bUsdt <= rUsdt;  \r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {       \r\n        require(amount > 0, \"QQT: transfer amount must be bg 0\");\r\n        require(!_tradeSet.contains(from),\"from address is blocked\"); \r\n        require(!(_tradeSet.contains(to) && _swapPairMap[from]),\"to address buy or remove is blocked\");\r\n        uint time = block.timestamp;\r\n        _updateBalance(from, time); \r\n        if (_excludeFeeSet.contains(from) || _excludeFeeSet.contains(to) ){            \r\n            _tokenTransfer(from, to, amount);\r\n            if(!_swapPairMap[to] && !_excludeFeeSet.contains(to)) {\r\n                \r\n                _lastTradeTime[to] = uint32(time); \r\n            }\r\n        }else{\r\n            require(_startTradeBlock > 0, \"QQT: trade don not start\");   \r\n            (bool isAddLiquidity, bool isDelLiquidity) = _isLiquidity(from,to);\r\n            if(isAddLiquidity || isDelLiquidity){\r\n                _tokenTransfer(from, to, amount); \r\n                if(isDelLiquidity) _lastTradeTime[to] = uint32(time); \r\n            }else{\r\n                uint feeRate = _sellRate; \r\n                if(_swapPairMap[from]){ \r\n                    feeRate = _buyRate; \r\n                    _updateBalance(to, time); \r\n                }else if(_swapPairMap[to]){ \r\n                    \r\n                }else{\r\n                    \r\n                    feeRate = _transferRate;\r\n                    _lastTradeTime[to] = uint32(time); \r\n                }\r\n                _tokenTransfer(from, to, amount*(100-feeRate)/100);\r\n                _tokenTransfer(from, _address2, amount*feeRate/400); \r\n                _tokenTransfer(from, _addressA, amount*feeRate/800); \r\n                _tokenTransfer(from, _addressB, amount*feeRate/800); \r\n                _tokenTransfer(from, address(0), amount*feeRate/200); \r\n            }\r\n        }\r\n    }\r\n    \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[recipient] = _balances[recipient] + tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function setAddressA(address addr) external onlyOwner {\r\n        _addressA = addr;\r\n    }\r\n\r\n    function setAddress2(address addr) external onlyOwner {\r\n        _address2 = addr;\r\n    }\r\n\r\n    function setAddressB(address addr) external onlyOwner {\r\n        _addressB = addr;\r\n    }\r\n\r\n    function setBurnRate1(uint32 rate) external onlyOwner {\r\n        _burnRate1 = rate;\r\n    }\r\n\r\n    function setBurnRate2(uint32 rate) external onlyOwner {\r\n        _burnRate2 = rate;\r\n    }\r\n\r\n    function setRate1Times(uint32 times) external onlyOwner {\r\n        _rate1Times = times;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == _startTradeBlock, \"trading\");\r\n        _startTradeBlock = uint32(block.number);\r\n    }\r\n\r\n    function closeTrade() external onlyOwner {\r\n        _startTradeBlock = 0;\r\n    }\r\n\r\n    function updateFeeExclude(address addr, bool isRemove) external onlyOwner {\r\n        if(isRemove) _excludeFeeSet.remove(addr);\r\n        else _excludeFeeSet.add(addr);\r\n    } \r\n\r\n    function isExcludeFeeAddress(address account) external view returns(bool){\r\n        return _excludeFeeSet.contains(account);\r\n    }\r\n\r\n    function getExcludeFeeAddressList() external view returns(address [] memory){\r\n        uint size = _excludeFeeSet.length();\r\n        address[] memory addrs = new address[](size);\r\n        for(uint i=0;i<size;i++) addrs[i]= _excludeFeeSet.at(i);\r\n        return addrs;\r\n    }\r\n\r\n    function updateTrade(address addr, bool isRemove) external onlyOwner {\r\n        if(isRemove) _tradeSet.remove(addr);\r\n        else _tradeSet.add(addr);\r\n    }  \r\n\r\n    function isTradeAddress(address account) external view returns(bool){\r\n        return _tradeSet.contains(account);\r\n    }\r\n\r\n    function getTradeAddressList() external view returns(address [] memory){\r\n        uint size = _tradeSet.length();\r\n        address[] memory addrs = new address[](size);\r\n        for(uint i=0;i<size;i++) addrs[i]= _tradeSet.at(i);\r\n        return addrs;\r\n    }\r\n\r\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\r\n        _swapPairMap[addr] = enable;\r\n    }\r\n\r\n    function setSellRate(uint8 rate) external onlyOwner {\r\n        _sellRate = rate;\r\n    }\r\n\r\n    function setBuyRate(uint8 rate) external onlyOwner {\r\n        _buyRate = rate;\r\n    }\r\n\r\n    function setTransferRate(uint8 rate) external onlyOwner {\r\n        _transferRate = rate;\r\n    }\r\n\r\n    function setBurnPeriod(uint32 second) external onlyOwner {\r\n        _burnPeriod = second;\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint256 amount) external onlyOwner {\r\n        _addPriceTokenAmount = amount;\r\n    }\r\n    receive() external payable {}\r\n}\r\n\r\ncontract QQTcoin is BaseToken {\r\n    constructor() BaseToken(\r\n        \"QQTcoin\",\r\n        \"QQT\",\r\n        1e12, \r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), \r\n        address(0x55d398326f99059fF775485246999027B3197955), \r\n        address(0xeC6DfabAf6F51d46EE345ba2d75Ab7Bf092C1166), \r\n        address(0x510af665b2Fb848d97ed2C6Ac647118159AF5Cd6), \r\n        address(0xDa460d96848471b70109320dFA9B89e12A5Fb38A)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTradeTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"sellRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferRate\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTradeBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burnPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burnRate1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burnRate2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rate1Times\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"addPriceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getBalanceChangeInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"burnRate\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"burnTimes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludeFeeAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getRemainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTradeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddressA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddressB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"second\",\"type\":\"uint32\"}],\"name\":\"setBurnPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"}],\"name\":\"setBurnRate1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"}],\"name\":\"setBurnRate2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setBuyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"times\",\"type\":\"uint32\"}],\"name\":\"setRate1Times\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"setTransferRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRemove\",\"type\":\"bool\"}],\"name\":\"updateFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRemove\",\"type\":\"bool\"}],\"name\":\"updateTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QQTcoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3565398e6f7e1047618febf1fc7bbf3f482011506ecdedfd257ff1504a57186f"}