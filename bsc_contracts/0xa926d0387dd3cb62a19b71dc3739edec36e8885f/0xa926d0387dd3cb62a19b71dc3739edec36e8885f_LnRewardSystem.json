{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnCollateralSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnCollateralSystem {\\r\\n    function getUserLinaCollateralBreakdown(address _user) external view returns (uint256 staked, uint256 locked);\\r\\n\\r\\n    function IsSatisfyTargetRatio(address _user) external view returns (bool);\\r\\n\\r\\n    function GetUserTotalCollateralInUsd(address _user) external view returns (uint256 rTotal);\\r\\n\\r\\n    function MaxRedeemableInUsd(address _user) external view returns (uint256);\\r\\n\\r\\n    function getFreeCollateralInUsd(address user) external view returns (uint256);\\r\\n\\r\\n    function moveCollateral(\\r\\n        address fromUser,\\r\\n        address toUser,\\r\\n        bytes32 currency,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function collateralFromUnlockReward(\\r\\n        address user,\\r\\n        address rewarder,\\r\\n        bytes32 currency,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILnRewardLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\ninterface ILnRewardLocker {\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function totalLockedAmount() external view returns (uint256);\\r\\n\\r\\n    function addReward(\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        uint256 unlockTime\\r\\n    ) external;\\r\\n\\r\\n    function moveReward(\\r\\n        address from,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256[] calldata rewardEntryIds\\r\\n    ) external;\\r\\n\\r\\n    function moveRewardProRata(\\r\\n        address from,\\r\\n        address recipient1,\\r\\n        uint256 amount1,\\r\\n        address recipient2,\\r\\n        uint256 amount2,\\r\\n        uint256[] calldata rewardEntryIds\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/LnRewardSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./interfaces/ILnCollateralSystem.sol\\\";\\r\\nimport \\\"./interfaces/ILnRewardLocker.sol\\\";\\r\\nimport \\\"./upgradeable/LnAdminUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LnRewardSystem\\r\\n *\\r\\n * @dev A contract for distributing staking rewards and exchange fees based on\\r\\n * amounts calculated and signed off-chain.\\r\\n *\\r\\n * This contract only performs basic signature validation and re-entrance prevention\\r\\n * to minimize the cost of claming rewards.\\r\\n *\\r\\n * Period ID starts from 1, not zero.\\r\\n */\\r\\ncontract LnRewardSystem is LnAdminUpgradeable {\\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    event RewardSignersChanged(address[] newSigners);\\r\\n    event RewardLockerAddressChanged(address oldAddress, address newAddress);\\r\\n    event RewardClaimed(address recipient, uint256 periodId, uint256 stakingReward, uint256 feeReward);\\r\\n\\r\\n    event PauseRewardsUntilUpdated(uint256 oldPauseRewardsUntil, uint256 newPauseRewardsUntil);\\r\\n    event PeriodLengthUpdated(uint256 oldPeriodLength, uint256 newPeriodLength);\\r\\n    event ClaimWindowPeriodCountUpdated(uint256 oldClaimWindowPeriodCount, uint256 newClaimWindowPeriodCount);\\r\\n    event StakingRewardLockPeriodUpdated(uint256 oldStakingRewardLockPeriod, uint256 newStakingRewardLockPeriod);\\r\\n    \\r\\n    uint256 public firstPeriodStartTime;\\r\\n\\r\\n    mapping(address => uint256) public userLastClaimPeriodIds;\\r\\n\\r\\n    IERC20Upgradeable public lusd;\\r\\n    ILnCollateralSystem public collateralSystem;\\r\\n    ILnRewardLocker public rewardLocker;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR; // For EIP-712\\r\\n\\r\\n    address[] public rewardSigners;\\r\\n\\r\\n    /* EIP-712 type hashes */\\r\\n    bytes32 public constant REWARD_TYPEHASH =\\r\\n        keccak256(\\\"Reward(uint256 periodId,address recipient,uint256 stakingReward,uint256 feeReward)\\\");\\r\\n\\r\\n    uint256 public periodLength;//= 1 weeks;\\r\\n    uint256 public claimWindowPeriodCount;// = 2;\\r\\n    uint256 public stakingRewardLockPeriod;// = 52 weeks;\\r\\n    uint256 public pauseRewardsUntil;\\r\\n\\r\\n    function getSignerCount() public view returns (uint256) {\\r\\n        return rewardSigners.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentPeriodId() public view returns (uint256) {\\r\\n        require(block.timestamp >= firstPeriodStartTime, \\\"LnRewardSystem: first period not started\\\");\\r\\n        return (block.timestamp - firstPeriodStartTime) / periodLength + 1; // No SafeMath needed\\r\\n    }\\r\\n\\r\\n    function getPeriodStartTime(uint256 periodId) public view returns (uint256) {\\r\\n        require(periodId > 0, \\\"LnRewardSystem: period ID must be positive\\\");\\r\\n        return firstPeriodStartTime.add(periodId.sub(1).mul(periodLength));\\r\\n    } \\r\\n\\r\\n    function getPeriodEndTime(uint256 periodId) public view returns (uint256) {\\r\\n        require(periodId > 0, \\\"LnRewardSystem: period ID must be positive\\\");\\r\\n        return firstPeriodStartTime.add(periodId.mul(periodLength));\\r\\n    }\\r\\n\\r\\n    function __LnRewardSystem_init(\\r\\n        uint256 _firstPeriodStartTime,\\r\\n        address[] calldata _rewardSigners,\\r\\n        address _lusdAddress,\\r\\n        address _collateralSystemAddress,\\r\\n        address _rewardLockerAddress,\\r\\n        address _admin,\\r\\n        uint256 _periodLength,\\r\\n        uint256 _claimWindowPeriodCount,\\r\\n        uint256 _stakingRewardLockPeriod\\r\\n    ) public initializer {\\r\\n        __LnAdminUpgradeable_init(_admin);\\r\\n\\r\\n        /**\\r\\n         * The next line is commented out to make migration from Ethereum to Binance Smart\\r\\n         * chain possible.\\r\\n         */\\r\\n        // require(block.timestamp < _firstPeriodStartTime + PERIOD_LENGTH, \\\"LnRewardSystem: first period already ended\\\");\\r\\n\\r\\n        firstPeriodStartTime = _firstPeriodStartTime;\\r\\n\\r\\n        _setRewardSigners(_rewardSigners);\\r\\n        _SetClaimWindowPeriodCount(_claimWindowPeriodCount);\\r\\n        _SetStakingRewardLockPeriod(_stakingRewardLockPeriod);\\r\\n        _SetPeriodLength(_periodLength);\\r\\n\\r\\n        require(\\r\\n            _lusdAddress != address(0) && _collateralSystemAddress != address(0) && _rewardLockerAddress != address(0), \\r\\n            \\\"LnRewardSystem: zero address\\\"\\r\\n        );\\r\\n        \\r\\n        lusd = IERC20Upgradeable(_lusdAddress);\\r\\n        collateralSystem = ILnCollateralSystem(_collateralSystemAddress);\\r\\n        rewardLocker = ILnRewardLocker(_rewardLockerAddress);\\r\\n\\r\\n        // While we could in-theory calculate the EIP-712 domain separator off-chain, doing\\r\\n        // it on-chain simplifies deployment and the cost here is one-off and acceptable.\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(\\\"Linear\\\")),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function SetPeriodLength(uint256 length) external onlyAdmin {\\r\\n        _SetPeriodLength(length);\\r\\n    }  \\r\\n\\r\\n    function UnpauseRewards() external onlyAdmin\\r\\n    {\\r\\n        _SetPauseRewardsUntil(0);\\r\\n    }\\r\\n\\r\\n    function PauseRewardsUntil(uint256 pauseRewardsUntil) external onlyAdmin {\\r\\n        _SetPauseRewardsUntil(pauseRewardsUntil);\\r\\n    }\\r\\n    function SetClaimWindowPeriodCount(uint256 count) external onlyAdmin {\\r\\n        _SetClaimWindowPeriodCount(count);\\r\\n    }  \\r\\n    \\r\\n    function SetStakingRewardLockPeriod(uint256 length) external onlyAdmin {\\r\\n        _SetStakingRewardLockPeriod(length);\\r\\n    }  \\r\\n\\r\\n    function SetLusdTokenAddress(address _address) external onlyAdmin {\\r\\n        _setLusdTokenAddress(_address);\\r\\n    }  \\r\\n\\r\\n    function setRewardSigners(address[] calldata _rewardSigners) external onlyAdmin {\\r\\n        _setRewardSigners(_rewardSigners);\\r\\n    }\\r\\n\\r\\n    function setRewardLockerAddress(address _rewardLockerAddress) external onlyAdmin {\\r\\n        _setRewardLockerAddress(_rewardLockerAddress);\\r\\n    }\\r\\n\\r\\n    function claimReward(\\r\\n        uint256 periodId,\\r\\n        uint256 stakingReward,\\r\\n        uint256 feeReward,\\r\\n        bytes[] calldata signatures\\r\\n    ) external {\\r\\n        _claimReward(periodId, msg.sender, stakingReward, feeReward, signatures);\\r\\n    }\\r\\n\\r\\n    function claimRewardFor(\\r\\n        uint256 periodId,\\r\\n        address recipient,\\r\\n        uint256 stakingReward,\\r\\n        uint256 feeReward,\\r\\n        bytes[] calldata signatures\\r\\n    ) external {\\r\\n        _claimReward(periodId, recipient, stakingReward, feeReward, signatures);\\r\\n    }\\r\\n\\r\\n    function _setLusdTokenAddress(address _lusdAddress) private {        \\r\\n        require(_lusdAddress != address(0), \\\"IERC20Upgradeable: zero address\\\");\\r\\n        require(_lusdAddress != address(lusd), \\\"IERC20Upgradeable: address not changed\\\");\\r\\n        address oldAddress = address(lusd); \\r\\n        lusd = IERC20Upgradeable(_lusdAddress);        \\r\\n    }\\r\\n\\r\\n    function _SetStakingRewardLockPeriod(uint256 _stakingRewardLockPeriod) private \\r\\n    {        \\r\\n        require(_stakingRewardLockPeriod != 0, \\\"Cannot be 0\\\");\\r\\n        require(_stakingRewardLockPeriod != stakingRewardLockPeriod, \\\"Value has not changed\\\");\\r\\n        uint256 oldStakingRewardLockPeriod = stakingRewardLockPeriod; \\r\\n        stakingRewardLockPeriod = _stakingRewardLockPeriod;  \\r\\n        emit StakingRewardLockPeriodUpdated(stakingRewardLockPeriod, oldStakingRewardLockPeriod);\\r\\n    }\\r\\n\\r\\n    function _SetPauseRewardsUntil(uint256 _pauseRewardsUntil) private\\r\\n    {\\r\\n        require(_pauseRewardsUntil != pauseRewardsUntil, \\\"Value has not changed\\\");\\r\\n        uint256 oldPauseRewardsUntil = pauseRewardsUntil;\\r\\n        pauseRewardsUntil = _pauseRewardsUntil;\\r\\n        emit PauseRewardsUntilUpdated(oldPauseRewardsUntil, pauseRewardsUntil);\\r\\n    }\\r\\n\\r\\n    function _SetClaimWindowPeriodCount(uint256 _claimWindowPeriodCount) private \\r\\n    {        \\r\\n        require(_claimWindowPeriodCount != 0, \\\"Cannot be 0\\\");\\r\\n        require(_claimWindowPeriodCount != claimWindowPeriodCount, \\\"Value has not changed\\\");\\r\\n        uint256 oldClaimWindowPeriodCount = claimWindowPeriodCount; \\r\\n        claimWindowPeriodCount = _claimWindowPeriodCount;  \\r\\n        emit ClaimWindowPeriodCountUpdated(claimWindowPeriodCount, oldClaimWindowPeriodCount);\\r\\n    }\\r\\n\\r\\n    function _SetPeriodLength(uint256 _periodLength) private \\r\\n    {        \\r\\n        require(_periodLength != 0, \\\"Cannot be 0\\\");\\r\\n        require(_periodLength != periodLength, \\\"Value has not changed\\\");\\r\\n        uint256 oldPeriodLength = periodLength; \\r\\n        periodLength = _periodLength;  \\r\\n        emit PeriodLengthUpdated(periodLength, oldPeriodLength);\\r\\n    }\\r\\n\\r\\n    function _setRewardSigners(address[] calldata _rewardSigners) private {\\r\\n        require(_rewardSigners.length > 1, \\\"LnRewardSystem: at least 2 signers\\\");\\r\\n\\r\\n        require(_rewardSigners[0] != address(0), \\\"LnRewardSystem: zero address\\\");\\r\\n\\r\\n        // We technically don't need this ordering enforced but this would be helpful if we\\r\\n        // implement quorum in the future. Plus we need to check zero address anyways.\\r\\n        for (uint256 ind = 1; ind < _rewardSigners.length; ind++) {\\r\\n            require(_rewardSigners[ind] > _rewardSigners[ind - 1], \\\"LnRewardSystem: invalid signer order\\\");\\r\\n        }\\r\\n\\r\\n        if (rewardSigners.length > 0) {\\r\\n            uint256 deleteCount = rewardSigners.length;\\r\\n            for (uint256 ind = 0; ind < deleteCount; ind++) {\\r\\n                rewardSigners.pop();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 ind = 0; ind < _rewardSigners.length; ind++) {\\r\\n            rewardSigners.push(_rewardSigners[ind]);\\r\\n        }\\r\\n\\r\\n        emit RewardSignersChanged(_rewardSigners);\\r\\n    }\\r\\n\\r\\n    function _setRewardLockerAddress(address _rewardLockerAddress) private {\\r\\n        require(_rewardLockerAddress != address(0), \\\"LnRewardSystem: zero address\\\");\\r\\n        require(_rewardLockerAddress != address(rewardLocker), \\\"LnRewardSystem: address not changed\\\");\\r\\n\\r\\n        address oldAddress = address(rewardLocker);\\r\\n        rewardLocker = ILnRewardLocker(_rewardLockerAddress);\\r\\n\\r\\n        emit RewardLockerAddressChanged(oldAddress, address(rewardLocker));\\r\\n    }\\r\\n\\r\\n    function _claimReward(\\r\\n        uint256 periodId,\\r\\n        address recipient,\\r\\n        uint256 stakingReward,\\r\\n        uint256 feeReward,\\r\\n        bytes[] calldata signatures\\r\\n    ) private {\\r\\n        require(periodId > 0, \\\"LnRewardSystem: period ID must be positive\\\");\\r\\n        require(stakingReward > 0 || feeReward > 0, \\\"LnRewardSystem: nothing to claim\\\");\\r\\n        require(periodId > pauseRewardsUntil, \\\"Rewards cannot be claimed for this period as they are paused\\\");\\r\\n        // Check if the target period is in the claiming window\\r\\n        uint256 currentPeriodId = getCurrentPeriodId();\\r\\n        require(periodId < currentPeriodId, \\\"LnRewardSystem: period not ended\\\");\\r\\n        require(\\r\\n            currentPeriodId <= claimWindowPeriodCount \\r\\n            || periodId >= currentPeriodId - claimWindowPeriodCount,\\r\\n            \\\"LnRewardSystem: reward expired\\\"\\r\\n        );\\r\\n\\r\\n        // Re-entrance prevention\\r\\n        require(userLastClaimPeriodIds[recipient] < periodId, \\\"LnRewardSystem: reward already claimed\\\");\\r\\n        userLastClaimPeriodIds[recipient] = periodId;\\r\\n\\r\\n        // Users can only claim rewards if target ratio is satisfied\\r\\n        require(collateralSystem.IsSatisfyTargetRatio(recipient), \\\"LnRewardSystem: below target ratio\\\");\\r\\n\\r\\n        // Verify EIP-712 signature\\r\\n        require(rewardSigners.length > 0, \\\"LnRewardSystem: empty signer set\\\");\\r\\n        require(signatures.length == rewardSigners.length, \\\"LnRewardSystem: signature count mismatch\\\");\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    DOMAIN_SEPARATOR,\\r\\n                    keccak256(abi.encode(REWARD_TYPEHASH, periodId, recipient, stakingReward, feeReward))\\r\\n                )\\r\\n            );\\r\\n            \\r\\n        for (uint256 ind; ind < signatures.length; ind++) {\\r\\n            address recoveredAddress = digest.recover(signatures[ind]);\\r\\n            require(recoveredAddress == rewardSigners[ind], \\\"LnRewardSystem: invalid signature\\\");\\r\\n        }\\r\\n\\r\\n        if (stakingReward > 0) {\\r\\n            rewardLocker.addReward(recipient, stakingReward, getPeriodEndTime(periodId) + stakingRewardLockPeriod);\\r\\n        }\\r\\n\\r\\n        if (feeReward > 0) {\\r\\n            lusd.transfer(recipient, feeReward);\\r\\n        }\\r\\n\\r\\n        emit RewardClaimed(recipient, periodId, stakingReward, feeReward);\\r\\n    }\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    uint256[42] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/upgradeable/LnAdminUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LnAdminUpgradeable\\r\\n *\\r\\n * @dev This is an upgradeable version of `LnAdmin` by replacing the constructor with\\r\\n * an initializer and reserving storage slots.\\r\\n */\\r\\ncontract LnAdminUpgradeable is Initializable {\\r\\n    event CandidateChanged(address oldCandidate, address newCandidate);\\r\\n    event AdminChanged(address oldAdmin, address newAdmin);\\r\\n\\r\\n    address public admin;\\r\\n    address public candidate;\\r\\n\\r\\n    function __LnAdminUpgradeable_init(address _admin) public initializer {\\r\\n        require(_admin != address(0), \\\"LnAdminUpgradeable: zero address\\\");\\r\\n        admin = _admin;\\r\\n        emit AdminChanged(address(0), _admin);\\r\\n    }\\r\\n\\r\\n    function setCandidate(address _candidate) external onlyAdmin {\\r\\n        address old = candidate;\\r\\n        candidate = _candidate;\\r\\n        emit CandidateChanged(old, candidate);\\r\\n    }\\r\\n\\r\\n    function becomeAdmin() external {\\r\\n        require(msg.sender == candidate, \\\"LnAdminUpgradeable: only candidate can become admin\\\");\\r\\n        address old = admin;\\r\\n        admin = candidate;\\r\\n        emit AdminChanged(old, admin);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        require((msg.sender == admin), \\\"LnAdminUpgradeable: only the contract admin can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"CandidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldClaimWindowPeriodCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimWindowPeriodCount\",\"type\":\"uint256\"}],\"name\":\"ClaimWindowPeriodCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPauseRewardsUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPauseRewardsUntil\",\"type\":\"uint256\"}],\"name\":\"PauseRewardsUntilUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriodLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriodLength\",\"type\":\"uint256\"}],\"name\":\"PeriodLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeReward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RewardLockerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newSigners\",\"type\":\"address[]\"}],\"name\":\"RewardSignersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStakingRewardLockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakingRewardLockPeriod\",\"type\":\"uint256\"}],\"name\":\"StakingRewardLockPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pauseRewardsUntil\",\"type\":\"uint256\"}],\"name\":\"PauseRewardsUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"SetClaimWindowPeriodCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetLusdTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"SetPeriodLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"SetStakingRewardLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnpauseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__LnAdminUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardSigners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_lusdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralSystemAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardLockerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimWindowPeriodCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardLockPeriod\",\"type\":\"uint256\"}],\"name\":\"__LnRewardSystem_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReward\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReward\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"claimRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWindowPeriodCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralSystem\",\"outputs\":[{\"internalType\":\"contract ILnCollateralSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"getPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"getPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusd\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRewardsUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLocker\",\"outputs\":[{\"internalType\":\"contract ILnRewardLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSigners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardLockerAddress\",\"type\":\"address\"}],\"name\":\"setRewardLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardSigners\",\"type\":\"address[]\"}],\"name\":\"setRewardSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastClaimPeriodIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LnRewardSystem", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}