{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SaleExchangeRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./InitialStableCoinDeclaration.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract SaleExchangeRate is Roles, InitialStableCoinDeclaration {\\r\\n    address public SECURITIES; //address of the security token\\r\\n    uint256 public priceDecimals; //decimals of the price\\r\\n    uint256 public baseSecurityToUSDPrice; // price of the secutity token in USD => USD*(10**priceDecimals)\\r\\n    bool public status; // isActive\\r\\n\\r\\n    address public LAND;\\r\\n    address public WBNB;\\r\\n    address public PAIR_LAND_WBNB;\\r\\n    uint256 public percentage = 100;\\r\\n    uint256 public LANDpercent;\\r\\n\\r\\n    event BuyTokensEvent(\\r\\n        address buyer,\\r\\n        address securities,\\r\\n        uint256 amountSecurities,\\r\\n        uint256 securityPrice,\\r\\n        uint256 securityPriceDecimals,\\r\\n        address purchaseToken,\\r\\n        uint256 purchaseTokenAmount,\\r\\n        uint256 purchaceTokenDecimals,\\r\\n        address lAND,\\r\\n        uint256 lANDamount,\\r\\n        uint256 lANDdecimals\\r\\n    );\\r\\n\\r\\n    modifier onlyActive() {\\r\\n        require(status == true, \\\"SaleExchangeRate: not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowedTokens(address _token) {\\r\\n        require(\\r\\n            !exTokenData[_token].blocked,\\r\\n            \\\"SaleExchangeRate: this token is blocked to swap\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier ownerOrSuperAdmin() {\\r\\n        require(\\r\\n            owner() == _msgSender() ||\\r\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\r\\n            \\\"SaleExchangeRate: caller has to be the owner or SuperAdmin\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _securities,\\r\\n        uint256 _baseSecurityToUSDPrice,\\r\\n        uint256 _priceDecimals,\\r\\n        address _LAND,\\r\\n        address _WBNB,\\r\\n        address _pair_LAND_WBNB,\\r\\n        uint256 _LANDpercent,\\r\\n        //array of pairs:\\r\\n        //[0]:address of stableCoin,\\r\\n        //[1]:address of the price-contract stableCoin/USD\\r\\n        address[2][] memory stableCoinsInfo\\r\\n    ) InitialStableCoinDeclaration(stableCoinsInfo) {\\r\\n        SECURITIES = _securities;\\r\\n        baseSecurityToUSDPrice = _baseSecurityToUSDPrice;\\r\\n        priceDecimals = _priceDecimals;\\r\\n        status = true;\\r\\n\\r\\n        LAND = _LAND;\\r\\n        WBNB = _WBNB;\\r\\n        PAIR_LAND_WBNB = _pair_LAND_WBNB;\\r\\n        LANDpercent = _LANDpercent;\\r\\n    }\\r\\n\\r\\n    function changeStatus() external onlyRole(TECHNICAL_ROLE) {\\r\\n        status = !status;\\r\\n    }\\r\\n\\r\\n    /// @notice Owner of the contract has an opportunity to send any tokens from the contract to his/her wallet\\r\\n    /// @param _amount amount of the tokens to send (* decimals of token)\\r\\n    /// @param _token address of the tokens to send\\r\\n    /// @return true if the operation done successfully\\r\\n    function sendBack(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external ownerOrSuperAdmin returns (bool) {\\r\\n        IERC20(_token).transfer(_msgSender(), _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Set price and its decimals of the secutity token in USD\\r\\n    /// @param _priceInUSD price of Security in USD (price multiplied by 10**_priceDecimals)\\r\\n    /// @param _priceDecimals decimals for price in USD\\r\\n    function setPrice(\\r\\n        uint256 _priceInUSD,\\r\\n        uint256 _priceDecimals\\r\\n    ) external ownerOrSuperAdmin {\\r\\n        baseSecurityToUSDPrice = _priceInUSD;\\r\\n        priceDecimals = _priceDecimals;\\r\\n    }\\r\\n\\r\\n    function setStableCoinBlockStatus(\\r\\n        address _exToken,\\r\\n        bool _isBlocked\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        _updateExchangeToken(_exToken, _isBlocked);\\r\\n    }\\r\\n\\r\\n    function setPriceFeedForToken(\\r\\n        address _exToken,\\r\\n        address _priceContract\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        _updateExchangeToken(_exToken, _priceContract);\\r\\n        priceFeed[_exToken] = AggregatorV3Interface(_priceContract);\\r\\n    }\\r\\n\\r\\n    function addAllowedToken(\\r\\n        address _token,\\r\\n        address _priceContract\\r\\n    ) external onlyRole(TECHNICAL_ROLE) returns (bool) {\\r\\n        require(\\r\\n            _token != address(0),\\r\\n            \\\"SaleExchangeRate: You try to add zero-address\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < allowedStableCoins.length; i++) {\\r\\n            require(\\r\\n                allowedStableCoins[i].stableCoinAddress != _token,\\r\\n                \\\"SaleExchangeRate: this token is already available\\\"\\r\\n            );\\r\\n        }\\r\\n        _addAllowedToken(_token, _priceContract);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function removeTokenFromAllowed(\\r\\n        address _token\\r\\n    ) external onlyRole(TECHNICAL_ROLE) returns (bool) {\\r\\n        for (uint256 i = 0; i < allowedStableCoins.length; i++) {\\r\\n            if (allowedStableCoins[i].stableCoinAddress == _token) {\\r\\n                if (i != allowedStableCoins.length - 1) {\\r\\n                    allowedStableCoins[i] = allowedStableCoins[\\r\\n                        allowedStableCoins.length - 1\\r\\n                    ];\\r\\n                }\\r\\n                allowedStableCoins.pop();\\r\\n            }\\r\\n        }\\r\\n        delete exTokenData[_token];\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setLANDpercent(\\r\\n        uint256 _newLandPercent\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        require(\\r\\n            _newLandPercent <= 50,\\r\\n            \\\"SaleExchangeRate: percentage cannot be over 50\\\"\\r\\n        );\\r\\n        LANDpercent = _newLandPercent;\\r\\n    }\\r\\n\\r\\n    function setLAND(\\r\\n        address _newLANDaddress\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        LAND = _newLANDaddress;\\r\\n    }\\r\\n\\r\\n    function setWBNB(\\r\\n        address _newWBNBaddress\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        WBNB = _newWBNBaddress;\\r\\n    }\\r\\n\\r\\n    function setPAIR_LAND_WBNB(\\r\\n        address _newPair\\r\\n    ) external onlyRole(TECHNICAL_ROLE) {\\r\\n        PAIR_LAND_WBNB = _newPair;\\r\\n    }\\r\\n\\r\\n    /// @notice swap of the token to security.\\r\\n    /// @dev make swap, emit BuyTokensEvent\\r\\n    /// @param _amountOfSecurities amount of securities you want to buy\\r\\n    /// @param _stableCoinAddress address of the token to buy security.\\r\\n    /// Token has to be Allowed.\\r\\n    /// @return true if the operation done successfully\\r\\n    function buyToken(\\r\\n        uint256 _amountOfSecurities,\\r\\n        address _stableCoinAddress\\r\\n    ) external onlyActive onlyAllowedTokens(_stableCoinAddress) returns (bool) {\\r\\n        uint256 balanceCoinBefore = IERC20(_stableCoinAddress).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        uint256 balanceLANDBefore = IERC20(LAND).balanceOf(address(this));\\r\\n\\r\\n        (uint256 amountOfStableCoins, uint256 amountOfLAND, ) = buyTokenView(\\r\\n            _amountOfSecurities,\\r\\n            _stableCoinAddress\\r\\n        );\\r\\n\\r\\n        IERC20(_stableCoinAddress).transferFrom(\\r\\n            _msgSender(),\\r\\n            address(this),\\r\\n            amountOfStableCoins\\r\\n        );\\r\\n\\r\\n        if (amountOfLAND > 0) {\\r\\n            IERC20(LAND).transferFrom(\\r\\n                _msgSender(),\\r\\n                address(this),\\r\\n                amountOfLAND\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            IERC20(_stableCoinAddress).balanceOf(address(this)) ==\\r\\n                (balanceCoinBefore + amountOfStableCoins) ||\\r\\n                IERC20(LAND).balanceOf(address(this)) ==\\r\\n                (balanceLANDBefore + amountOfLAND),\\r\\n            \\\"SaleExchangeRate: token transfer for buying failed\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(SECURITIES).transfer(_msgSender(), _amountOfSecurities);\\r\\n\\r\\n        emit BuyTokensEvent(\\r\\n            _msgSender(),\\r\\n            SECURITIES,\\r\\n            _amountOfSecurities,\\r\\n            baseSecurityToUSDPrice,\\r\\n            priceDecimals,\\r\\n            _stableCoinAddress,\\r\\n            amountOfStableCoins,\\r\\n            IERC20(_stableCoinAddress).decimals(),\\r\\n            LAND,\\r\\n            amountOfLAND,\\r\\n            IERC20(LAND).decimals()\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice function count and return the amount of securities to be gotten for the proper amount of tokens\\r\\n    /// @param _amountOfSecurities amount of securities you want to buy\\r\\n    /// @param _stableCoinAddress address of token you want to use for buying security\\r\\n    /// Token has to be Allowed\\r\\n    /// @return amountOfStableCoin , amountOfSecurities -  tuple of uint256 - (amount of securities to get, amount of token to spend)\\r\\n    function buyTokenView(\\r\\n        uint256 _amountOfSecurities,\\r\\n        address _stableCoinAddress\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        onlyAllowedTokens(_stableCoinAddress)\\r\\n        returns (\\r\\n            uint256 amountOfStableCoin,\\r\\n            uint256 amountOfLAND,\\r\\n            uint256 amountOfSecurities\\r\\n        )\\r\\n    {\\r\\n        amountOfSecurities = _amountOfSecurities;\\r\\n\\r\\n        (\\r\\n            uint256 coinPriceInUSD,\\r\\n            uint256 coinDecimals\\r\\n        ) = getStableCoinPriceInUSD(_stableCoinAddress);\\r\\n\\r\\n        (\\r\\n            uint256 mainCoinUSDFraction,\\r\\n            uint256 landUSDFraction\\r\\n        ) = _calculateSecurityPriceCoefFractions();\\r\\n\\r\\n        amountOfStableCoin =\\r\\n            ((\\r\\n                (_scaleAmount(\\r\\n                    mainCoinUSDFraction,\\r\\n                    priceDecimals,\\r\\n                    coinDecimals\\r\\n                ) / coinPriceInUSD)\\r\\n            ) * (10 ** coinDecimals)) /\\r\\n            k;\\r\\n\\r\\n        if (landUSDFraction > 0) {\\r\\n            (uint LANDPriceInUSD, uint256 LANDDecimals) = getLANDPriceInUSD();\\r\\n\\r\\n            amountOfLAND =\\r\\n                ((\\r\\n                    (_scaleAmount(\\r\\n                        landUSDFraction,\\r\\n                        priceDecimals,\\r\\n                        LANDDecimals\\r\\n                    ) / LANDPriceInUSD)\\r\\n                ) * (10 ** LANDDecimals)) /\\r\\n                k;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getStableCoinPriceInUSD(\\r\\n        address _token\\r\\n    ) public view returns (uint256 coinPrice, uint256 coinDecimals) {\\r\\n        coinDecimals = IERC20(_token).decimals();\\r\\n        coinPrice = _getLatestPriceInUSD(_token, coinDecimals);\\r\\n    }\\r\\n\\r\\n    function getLANDPriceInUSD()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 landPrice, uint256 landDecimals)\\r\\n    {\\r\\n        uint256 landWbnbPrice;\\r\\n        (landWbnbPrice, landDecimals) = getLANDPriceInWBNB();\\r\\n\\r\\n        landPrice =\\r\\n            (landWbnbPrice * _getLatestPriceInUSD(WBNB, landDecimals)) /\\r\\n            10 ** landDecimals;\\r\\n    }\\r\\n\\r\\n    function getLANDPriceInWBNB()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 landWbnbPrice, uint256 landDecimals)\\r\\n    {\\r\\n        /// reserve0 = LAND, reserve1 = WBNB)\\r\\n        (uint112 reserve0, uint112 reserve1, ) = IPancakePair(PAIR_LAND_WBNB)\\r\\n            .getReserves();\\r\\n\\r\\n        landDecimals = uint256(IERC20(LAND).decimals());\\r\\n        landWbnbPrice = uint256((reserve1 * (10 ** landDecimals)) / reserve0);\\r\\n    }\\r\\n\\r\\n    function _calculateSecurityPriceCoefFractions()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 mainCoinUSDFraction, uint256 landUSDFraction)\\r\\n    {\\r\\n        landUSDFraction =\\r\\n            ((baseSecurityToUSDPrice * LANDpercent) * k) /\\r\\n            percentage;\\r\\n        mainCoinUSDFraction =\\r\\n            (baseSecurityToUSDPrice * (percentage - LANDpercent) * k) /\\r\\n            percentage;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract Roles is Ownable, AccessControl {\\r\\n    bytes32 public constant TECHNICAL_ROLE = keccak256(\\\"TECHNICAL_ROLE\\\");\\r\\n\\r\\n    constructor() {\\r\\n        _setRoleAdmin(TECHNICAL_ROLE, TECHNICAL_ROLE);\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _grantRole(TECHNICAL_ROLE, _msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/InitialStableCoinDeclaration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract InitialStableCoinDeclaration {\\r\\n    //coefficient `k` is used to get the proper amount without rounding an\\r\\n    //answer to a whole number\\r\\n    //multiply the numerator at first, calculate the formula &\\r\\n    //at the end, we divide the result by the coefficient\\r\\n    uint256 internal k = 10 ** 18;\\r\\n\\r\\n    struct ExchangeToken {\\r\\n        address stableCoinAddress;\\r\\n        //address of the priceFeed smart contract StableCoin/USD\\r\\n        address priceFeedAddress;\\r\\n        bool blocked;\\r\\n    }\\r\\n\\r\\n    ExchangeToken[] public allowedStableCoins;\\r\\n\\r\\n    mapping(address => ExchangeToken) exTokenData;\\r\\n    mapping(address => AggregatorV3Interface) priceFeed;\\r\\n\\r\\n    constructor(\\r\\n        //array of pairs:\\r\\n        //[0]:address of stableCoin,\\r\\n        //[1]:address of the price-contract stableCoin/USD\\r\\n        address[2][] memory stableCoinsInfo\\r\\n    ) {\\r\\n        for (uint256 i = 0; i < stableCoinsInfo.length; i++) {\\r\\n            _addAllowedToken(stableCoinsInfo[i][0], stableCoinsInfo[i][1]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice returns array of all possible stableCoins with their full data\\r\\n    function getAllStableCoinsInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (ExchangeToken[] memory)\\r\\n    {\\r\\n        return allowedStableCoins;\\r\\n    }\\r\\n\\r\\n    /// @notice the function reduces the amount to the required decimals\\r\\n    /// @param _amount amount of token you want to reduce\\r\\n    /// @param _amountDecimals decimals which amount has now\\r\\n    /// @param _decimalsToUse decimals you want to get after scaling\\r\\n    /// @return uint256 the scaled amount with proper decimals\\r\\n    function _scaleAmount(\\r\\n        uint256 _amount,\\r\\n        uint256 _amountDecimals,\\r\\n        uint256 _decimalsToUse\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (_amountDecimals < _decimalsToUse) {\\r\\n            return _amount * (10 ** (_decimalsToUse - _amountDecimals));\\r\\n        } else if (_amountDecimals > _decimalsToUse) {\\r\\n            return _amount / (10 ** (_amountDecimals - _decimalsToUse));\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function _getLatestPriceInUSD(\\r\\n        address _token,\\r\\n        uint256 _decimalsToUse\\r\\n    ) internal view returns (uint256) {\\r\\n        AggregatorV3Interface pF = priceFeed[_token];\\r\\n\\r\\n        (, int price, , , ) = pF.latestRoundData();\\r\\n        return\\r\\n            _scaleAmount(\\r\\n                uint256(price),\\r\\n                uint256(pF.decimals()),\\r\\n                _decimalsToUse\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _addAllowedToken(address _token, address _priceContract) internal {\\r\\n        ExchangeToken storage et = exTokenData[_token];\\r\\n        et.stableCoinAddress = _token;\\r\\n        et.priceFeedAddress = _priceContract;\\r\\n\\r\\n        priceFeed[_token] = AggregatorV3Interface(_priceContract);\\r\\n        allowedStableCoins.push(exTokenData[_token]);\\r\\n    }\\r\\n\\r\\n    function _updateExchangeToken(address _token, address _priceFeed) internal {\\r\\n        ExchangeToken storage et = exTokenData[_token];\\r\\n        et.priceFeedAddress = _priceFeed;\\r\\n        _updateAllowedStableCoinsList(_token);\\r\\n    }\\r\\n\\r\\n    function _updateExchangeToken(address _token, bool _isBlocked) internal {\\r\\n        ExchangeToken storage et = exTokenData[_token];\\r\\n        et.blocked = _isBlocked;\\r\\n        _updateAllowedStableCoinsList(_token);\\r\\n    }\\r\\n\\r\\n    function _updateAllowedStableCoinsList(address _token) internal {\\r\\n        for (uint256 i = 0; i < allowedStableCoins.length; i++) {\\r\\n            ExchangeToken memory et = exTokenData[_token];\\r\\n            if (allowedStableCoins[i].stableCoinAddress == _token) {\\r\\n                allowedStableCoins[i] = et;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securities\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseSecurityToUSDPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_LAND\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair_LAND_WBNB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_LANDpercent\",\"type\":\"uint256\"},{\"internalType\":\"address[2][]\",\"name\":\"stableCoinsInfo\",\"type\":\"address[2][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"securities\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSecurities\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"securityPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"securityPriceDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaceTokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lAND\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lANDamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lANDdecimals\",\"type\":\"uint256\"}],\"name\":\"BuyTokensEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAND\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LANDpercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_LAND_WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECURITIES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TECHNICAL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceContract\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedStableCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSecurityToUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfSecurities\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfSecurities\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"buyTokenView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfLAND\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfSecurities\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStableCoinsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stableCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"internalType\":\"struct InitialStableCoinDeclaration.ExchangeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLANDPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLANDPriceInWBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"landWbnbPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getStableCoinPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coinPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeTokenFromAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLANDaddress\",\"type\":\"address\"}],\"name\":\"setLAND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLandPercent\",\"type\":\"uint256\"}],\"name\":\"setLANDpercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPair\",\"type\":\"address\"}],\"name\":\"setPAIR_LAND_WBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceDecimals\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceContract\",\"type\":\"address\"}],\"name\":\"setPriceFeedForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlocked\",\"type\":\"bool\"}],\"name\":\"setStableCoinBlockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWBNBaddress\",\"type\":\"address\"}],\"name\":\"setWBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SaleExchangeRate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af4c2b007dd3bfe1c2df3e30307768764c262124000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000000040000000000000000000000009d986a3f147212327dd658f712d5264a73a1fdb0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000468cde4ad48cbafa3cdfb68fd9f2c114ddfe6c08000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000cbb98864ef56e9042e7d2efef76141f15731b82f0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000051597f405303c4377e36123cbc172b13269ea163000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}