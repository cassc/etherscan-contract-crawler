{"SourceCode": "/***\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \r\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \r\n *    \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n *    \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\r\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\r\n *    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\r\n *    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551  \u255a\u2588\u2588\u2554\u255d  \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\r\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\r\n *                                                                                  \r\n */                                                                                                   \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n// Interface of a token BEP20 - ERC20 - TRC20 - .... All functions of the standard interface are declared, even if not used\r\ninterface TOKEN20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// Interface to access Powermade contract data\r\ninterface Powermade {\r\n    // get the owner \r\n    function ownerWallet() external view returns (address owner);\r\n    // Get the token used by the Affiliation system (BUSD)\r\n    function token_addr() external view returns (address token_address);\r\n}\r\n\r\n\r\ncontract RoyaltySplitterV1 {\r\n\r\n    Powermade public powermadeContract;                         // The PowermadeAffiliation contract\r\n    bool public locked_mode;                                    // If locked there is no option to change the recipients after the deployment\r\n    \r\n    struct LastDistributionData {\r\n        uint last_distribution_balance;                         // Balance before last distribution\r\n        uint cumulative_balance;                                // Total distributed since deploy\r\n        uint distribution_ts;                                   // Last Distribution Timestamp\r\n    }\r\n\r\n    struct RoyaltyReceiver {\r\n        address recipient;                                      // The address of the user (cannot be address(0))\r\n        uint16 percentage;                                      // The percentage associated to the user (partition) - divider is 1000\r\n        uint expiration_ts;                                     // Expiration timestamp for a limited time royalty. If 0, no expiration\r\n        uint cumulative_balance_threshold;                      // Stop sending royalty to the recipient after this cumulated balance. If 0, disabled.\r\n        address after_threshold_recipient;                      // Address to use for the royalty after the expiration. Mandatory (and not address(0)) if expiration is set\r\n    }\r\n\r\n    LastDistributionData public last_distribution;                      // Last distribution data\r\n    mapping(address => uint) public total_distributed_recipient;        // Total distributed for each recipient\r\n    RoyaltyReceiver[] public royalty_receivers;                         // The array of the royalty recipients and configuration\r\n\r\n    // Events\r\n    event RecipientSet(RoyaltyReceiver royalty_receiver);\r\n    event RoyaltyDistributed(address indexed caller, uint8 indexed index, address indexed to, uint amount, bool after_expiration);\r\n\r\n\r\n    // Modifier to be used with functions that can be called only by The Owner of the Powermade Main contract\r\n    modifier onlyPowermadeOwner()\r\n    {\r\n        require(msg.sender == powermadeContract.ownerWallet(), \"Denied\");\r\n        _;\r\n    }\r\n\r\n\r\n    // Constructor called when deploying\r\n    constructor(address _powermadeAddress, address[] memory _recipients, uint16[] memory _percentages, uint[] memory _expirations_ts, uint[] memory _cumulative_balance_thresholds, address[] memory _after_threshold_recipients, bool _locked_mode) {\r\n        powermadeContract = Powermade(_powermadeAddress);\r\n        _set_recipients(_recipients, _percentages, _expirations_ts, _cumulative_balance_thresholds, _after_threshold_recipients);\r\n        locked_mode = _locked_mode;\r\n    }\r\n\r\n\r\n    // Fallback function for methods\r\n    fallback() external {\r\n        revert('FBE');\r\n    }\r\n\r\n    // Fallback function for payments\r\n    receive() external payable {\r\n        // Prevent users from using the fallback function to send money\r\n        revert('FBE');\r\n    }\r\n\r\n\r\n    // Internal function used to set the recipients\r\n    function _set_recipients(address[] memory _recipients, uint16[] memory _percentages, uint[] memory _expirations_ts, uint[] memory _cumulative_balance_thresholds, address[] memory _after_threshold_recipients) internal {\r\n        require(_recipients.length == _percentages.length && _recipients.length == _expirations_ts.length && _recipients.length == _cumulative_balance_thresholds.length && _recipients.length == _after_threshold_recipients.length, \"Size Error\");\r\n        distribute();                   // Trigger distribution first\r\n        delete royalty_receivers;       // Reset array\r\n        uint16 percentage_sum = 0;\r\n        for (uint8 i = 0; i < _recipients.length; i++) {\r\n            require(_recipients[i] != address(0), \"Recipient not valid\");\r\n            require(_percentages[i] > 0 && _percentages[i] <= 1000, \"Percentage error\");\r\n            percentage_sum += _percentages[i];\r\n            if (_expirations_ts[i] > 0 || _cumulative_balance_thresholds[i] > 0) {\r\n                require(_after_threshold_recipients[i] != address(0), \"After Expiration Recipient Error\");\r\n                if (_expirations_ts[i] > 0) {\r\n                    require(_expirations_ts[i] > block.timestamp + 24 hours, \"Timestamp error\");\r\n                }\r\n            } else {\r\n                require(_after_threshold_recipients[i] == address(0), \"After Expiration Recipient Error\");\r\n            }\r\n            \r\n            // Add the data to the local variable\r\n            RoyaltyReceiver memory receiver;\r\n            receiver.recipient = _recipients[i];\r\n            receiver.percentage = _percentages[i];\r\n            receiver.expiration_ts = _expirations_ts[i];\r\n            receiver.cumulative_balance_threshold = _cumulative_balance_thresholds[i];\r\n            receiver.after_threshold_recipient = _after_threshold_recipients[i];\r\n            // Store the data\r\n            royalty_receivers.push(receiver);\r\n            emit RecipientSet(receiver);\r\n        }\r\n        // But if sum is not correct, revert\r\n        require(percentage_sum == 1000, \"Percentage Sum not 1000\");\r\n    }\r\n\r\n\r\n    // Set/update recipients when in unlocked mode (that is set during deployment only)\r\n    function setRecipients(address[] memory _recipients, uint16[] memory _percentages, uint[] memory _expirations_ts, uint[] memory _cumulative_balance_thresholds, address[] memory _after_threshold_recipients) external onlyPowermadeOwner {\r\n        require(!locked_mode, \"Lock active\");\r\n        _set_recipients(_recipients, _percentages, _expirations_ts, _cumulative_balance_thresholds, _after_threshold_recipients);\r\n    }\r\n\r\n\r\n    // Distribute to all the royalty receivers. Can be triggered by everyone\r\n    function distribute() public {\r\n        // At least 1h between distributions\r\n        require(block.timestamp - last_distribution.distribution_ts >= 1 hours, \"Wait distribution deadtime\");\r\n        address affiliation_token_used = powermadeContract.token_addr();\r\n        uint current_balance = TOKEN20(affiliation_token_used).balanceOf(address(this));\r\n        if (current_balance > 0) {\r\n            // Process the distribution (each recipient)\r\n            for (uint8 i = 0; i < royalty_receivers.length; i++) {\r\n                uint balance_to_use = current_balance * royalty_receivers[i].percentage / 1000;     // Default is full part\r\n                // Calculate process balance\r\n                if (royalty_receivers[i].cumulative_balance_threshold > 0 && royalty_receivers[i].cumulative_balance_threshold > last_distribution.cumulative_balance && royalty_receivers[i].cumulative_balance_threshold < (last_distribution.cumulative_balance + current_balance)) {\r\n                    uint new_balance_to_use = balance_to_use * (royalty_receivers[i].cumulative_balance_threshold - last_distribution.cumulative_balance) / current_balance;\r\n                    // Send the remainder to the after_threshold_recipient\r\n                    _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].after_threshold_recipient, balance_to_use - new_balance_to_use, i, true);\r\n                    // Set new balance to use for the next steps\r\n                    balance_to_use = new_balance_to_use;\r\n                } else if (royalty_receivers[i].cumulative_balance_threshold > 0 && royalty_receivers[i].cumulative_balance_threshold <= last_distribution.cumulative_balance) {\r\n                    // Over threshold. Send all to after_threshold_recipient and continue the for cycle\r\n                    _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].after_threshold_recipient, balance_to_use, i, true);\r\n                    continue;\r\n                }\r\n                if (royalty_receivers[i].expiration_ts > 0) {\r\n                    // Check if expired\r\n                    if (last_distribution.distribution_ts >= royalty_receivers[i].expiration_ts) {\r\n                        // Already expired and everything distributed, so we will distribute to the after_threshold_recipient\r\n                        _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].after_threshold_recipient, balance_to_use, i, true);\r\n                    } else {\r\n                        if (block.timestamp <= royalty_receivers[i].expiration_ts) {\r\n                            // Full distribution of the amount to the recipient\r\n                            _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].recipient, balance_to_use, i, false);\r\n                        } else {\r\n                            uint recipient_amount = balance_to_use * (royalty_receivers[i].expiration_ts - last_distribution.distribution_ts) / (block.timestamp - last_distribution.distribution_ts);\r\n                            uint remaining_amount = balance_to_use - recipient_amount;\r\n                            _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].recipient, recipient_amount, i, false);   // Transfer to eligible recipient\r\n                            _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].after_threshold_recipient, remaining_amount, i, true);   // Transfer to after_threshold_recipient the remaining\r\n                        }\r\n                    }\r\n                } else {\r\n                    // No expiration proportion\r\n                    _do_royalty_transfer(affiliation_token_used, royalty_receivers[i].recipient, balance_to_use, i, false);\r\n                }\r\n            }\r\n            // Update data\r\n            last_distribution.last_distribution_balance = current_balance;\r\n            last_distribution.distribution_ts = block.timestamp;\r\n            last_distribution.cumulative_balance += current_balance;\r\n        }\r\n        // Here the balance should be 0, everything distributed\r\n    }\r\n\r\n\r\n    // Do a royalty transfer to a recipient\r\n    function _do_royalty_transfer(address token, address recipient, uint amount, uint8 index, bool after_expiration) private {\r\n        if (amount > 0) {\r\n            TOKEN20(token).transfer(recipient, amount);       // Transfer\r\n            emit RoyaltyDistributed(msg.sender, index, recipient, amount, after_expiration);    // Emit event\r\n            total_distributed_recipient[recipient] += amount;   // Update data\r\n        }\r\n    }\r\n\r\n\r\n    // Withdraw other tokens from the contract (in case of other tokens sent to the contract by mistake)\r\n    // Withdraw of the token used by the network is not possible\r\n    function withdrawToken(address token, uint amount, address destination) external onlyPowermadeOwner {\r\n        require(token != powermadeContract.token_addr(), \"Token not allowed\");\r\n        bool success = TOKEN20(token).transfer(destination, amount);      // Do the token transfer. The source is the contract itself\r\n        require(success, \"T20Err\");\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_powermadeAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirations_ts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cumulative_balance_thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_after_threshold_recipients\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_locked_mode\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"expiration_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulative_balance_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"after_threshold_recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct RoyaltySplitterV1.RoyaltyReceiver\",\"name\":\"royalty_receiver\",\"type\":\"tuple\"}],\"name\":\"RecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"after_expiration\",\"type\":\"bool\"}],\"name\":\"RoyaltyDistributed\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"last_distribution_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulative_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked_mode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powermadeContract\",\"outputs\":[{\"internalType\":\"contract Powermade\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalty_receivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"expiration_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulative_balance_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"after_threshold_recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_percentages\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirations_ts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cumulative_balance_thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_after_threshold_recipients\",\"type\":\"address[]\"}],\"name\":\"setRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"total_distributed_recipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RoyaltySplitterV1", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000be2ae9ee5ce82bee6b3f6d9f7b0e51409a59c8b400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000056a40dd9d19bb8625bc34d0e8189d924a160e3250000000000000000000000009c610dbb5d86be6ba48952566c561e29a8a8aa9a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001fersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fa84c0f45d5070e4e6588cd19439acf4f1d164b294b79dde2ff31e6db47a5d20"}