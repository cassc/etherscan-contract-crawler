{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/IExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @notice Exchange contract interface. Facilitates the conversion between assets\r\n *         including liquidity pool shares.\r\n */\r\ninterface IExchange\r\n{\r\n\t// view functions\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\tfunction calcJoinPoolFromInput(address _pool, address _token, uint256 _inputAmount) external view returns (uint256 _outputShares);\r\n\r\n\t// open functions\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external returns (uint256 _inputAmount);\r\n\tfunction joinPoolFromInput(address _pool, address _token, uint256 _inputAmount, uint256 _minOutputShares) external returns (uint256 _outputShares);\r\n\tfunction oracleAveragePriceFactorFromInput(address _from, address _to, uint256 _inputAmount) external returns (uint256 _factor);\r\n\tfunction oraclePoolAveragePriceFactorFromInput(address _pool, address _token, uint256 _inputAmount) external returns (uint256 _factor);\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/WhitelistGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @notice Implements a whitelist-based policy for accessing publicly available\r\n *         functions of subcontracts. Enforces that a public function can only\r\n *         be called by an External Owned Account (EOA) or a contract previously\r\n *         whitelisted.\r\n */\r\nabstract contract WhitelistGuard is Ownable\r\n{\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\tEnumerableSet.AddressSet private whitelist;\r\n\tbool private enabled = true;\r\n\r\n\t/// @dev restricts function call to be EOA or whitelist\r\n\tmodifier onlyEOAorWhitelist()\r\n\t{\r\n\t\tif (enabled) {\r\n\t\t\taddress _from = _msgSender();\r\n\t\t\trequire(tx.origin == _from || whitelist.contains(_from), \"access denied\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev restricts function call to whitelist\r\n\tmodifier onlyWhitelist()\r\n\t{\r\n\t\tif (enabled) {\r\n\t\t\taddress _from = _msgSender();\r\n\t\t\trequire(whitelist.contains(_from), \"access denied\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Adds an address to the access policy whitelist.\r\n\t *         This is a priviledged function.\r\n\t * @param _address The address to be added to the whitelist.\r\n\t */\r\n\tfunction addToWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.add(_address), \"already listed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Removes an address to the access policy whitelist.\r\n\t *         This is a priviledged function.\r\n\t * @param _address The address to be removed to the whitelist.\r\n\t */\r\n\tfunction removeFromWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.remove(_address), \"not listed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Enables/disables the whitelist access policy.\r\n\t *         This is a priviledged function.\r\n\t * @param _enabled Flag indicating whether the whitelist should be\r\n\t *                 enabled or not.\r\n\t */\r\n\tfunction setWhitelistEnabled(bool _enabled) external onlyOwner\r\n\t{\r\n\t\tenabled = _enabled;\r\n\t}\r\n}\r\n\r\n// File: contracts/DelayedActionGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract DelayedActionGuard is Ownable\r\n{\r\n\tuint64 constant DEFAULT_WAIT_INTERVAL = 1 days;\r\n\tuint64 constant DEFAULT_OPEN_INTERVAL = 1 days;\r\n\r\n\tstruct Interval {\r\n\t\tbytes32 hash;\r\n\t\tuint256 start;\r\n\t\tuint256 end;\r\n\t}\r\n\r\n\tmapping(bytes4 => Interval) private intervals;\r\n\r\n\tmodifier delayed(bytes4 _selector, bytes32 _hash)\r\n\t{\r\n\t\tInterval storage interval = intervals[_selector];\r\n\t\trequire(interval.hash == _hash, \"invalid action\");\r\n\t\trequire(interval.start <= now && now < interval.end, \"unavailable action\");\r\n\t\tinterval.hash = 0;\r\n\t\tinterval.start = 0;\r\n\t\tinterval.end = 0;\r\n\t\temit ExecuteDelayedAction(_selector, _hash);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction announceDelayedAction(bytes4 _selector, bytes memory _params) external onlyOwner\r\n\t{\r\n\t\t(uint64 _wait, uint64 _open) = _defaultIntervalParams();\r\n\t\tInterval storage interval = intervals[_selector];\r\n\t\trequire(interval.end == 0, \"ongoing action\");\r\n\t\tinterval.hash = keccak256(_params);\r\n\t\tinterval.start = now + _wait;\r\n\t\tinterval.end = interval.start + _open;\r\n\t\temit AnnounceDelayedAction(_selector, interval.hash);\r\n\t}\r\n\r\n\t/*\r\n\tfunction cancelDelayedAction(bytes4 _selector) external onlyOwner\r\n\t{\r\n\t\tInterval storage interval = intervals[_selector];\r\n\t\trequire(interval.end != 0, \"invalid action\");\r\n\t\temit CancelDelayedAction(_selector, interval.hash);\r\n\t\tinterval.hash = 0;\r\n\t\tinterval.start = 0;\r\n\t\tinterval.end = 0;\r\n\t}\r\n\t*/\r\n\r\n\tfunction _defaultIntervalParams() internal pure virtual returns (uint64 _wait, uint64 _open)\r\n\t{\r\n\t\treturn (DEFAULT_WAIT_INTERVAL, DEFAULT_OPEN_INTERVAL);\r\n\t}\r\n\r\n\tevent AnnounceDelayedAction(bytes4 _selector, bytes32 _hash);\r\n\tevent ExecuteDelayedAction(bytes4 _selector, bytes32 _hash);\r\n\t// event CancelDelayedAction(bytes4 _selector, bytes32 _hash);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations in the context of the current\r\n * contract.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/MasterChef.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Minimal set of declarations for PancakeSwap MasterChef interoperability.\r\n */\r\ninterface MasterChef\r\n{\r\n\tfunction cake() external view returns (address _cake);\r\n\tfunction syrup() external view returns (address _syrup);\r\n\tfunction pendingCake(uint256 _pid, address _user) external view returns (uint256 _pendingCake);\r\n\tfunction poolInfo(uint256 _pid) external view returns (address _lpToken, uint256 _allocPoint, uint256 _lastRewardBlock, uint256 _accCakePerShare);\r\n\tfunction poolLength() external view returns (uint256 _poolLength);\r\n\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\r\n\r\n\tfunction deposit(uint256 _pid, uint256 _amount) external;\r\n\tfunction enterStaking(uint256 _amount) external;\r\n\tfunction leaveStaking(uint256 _amount) external;\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) external;\r\n\tfunction emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\n// File: contracts/interop/UniswapV2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Uniswap V2 interoperability.\r\n */\r\ninterface Factory\r\n{\r\n\tfunction getPair(address _tokenA, address _tokenB) external view returns (address _pair);\r\n\r\n\tfunction createPair(address _tokenA, address _tokenB) external returns (address _pair);\r\n}\r\n\r\ninterface PoolToken is IERC20\r\n{\r\n}\r\n\r\ninterface Pair is PoolToken\r\n{\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\tfunction token0() external view returns (address _token0);\r\n\tfunction token1() external view returns (address _token1);\r\n\r\n\tfunction mint(address _to) external returns (uint256 _liquidity);\r\n}\r\n\r\ninterface Router01\r\n{\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction factory() external pure returns (address _factory);\r\n\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\r\n\tfunction getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\tfunction getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\r\n\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\r\n\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external;\r\n}\r\n\r\n// File: contracts/PancakeSwapCompoundingStrategyToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements a compounding strategy for PancakeSwap MasterChef.\r\n *         It basically deposits and withdraws funds from MasterChef and collects the\r\n *         reward token (CAKE). The compounding happens by calling the gulp function;\r\n *         it converts the reward into more funds which are further deposited into\r\n *         MasterChef. A performance fee is deducted from the converted funds and sent\r\n *         to the fee collector contract. This contract also allows for charging a\r\n *         deposit fee deducted from deposited funds.\r\n */\r\ncontract PancakeSwapCompoundingStrategyToken is ERC20, ReentrancyGuard, /*WhitelistGuard,*/ DelayedActionGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant DEFAULT_MINIMAL_GULP_FACTOR = 80e16; // 80%\r\n\tuint256 constant DEFAULT_FORCE_GULP_RATIO = 1e15; // 0.1%\r\n\r\n\tuint256 constant MAXIMUM_PERFORMANCE_FEE = 50e16; // 50%\r\n\tuint256 constant DEFAULT_PERFORMANCE_FEE = 10e16; // 10%\r\n\r\n\t// underlying contract configuration\r\n\taddress private immutable masterChef;\r\n\tuint256 private immutable pid;\r\n\r\n\t// strategy token configuration\r\n\taddress private immutable rewardToken;\r\n\taddress private immutable routingToken;\r\n\taddress private immutable reserveToken;\r\n\r\n\t// addresses receiving tokens\r\n\taddress private treasury;\r\n\taddress private collector;\r\n\r\n\t// exchange contract address\r\n\taddress private exchange;\r\n\r\n\t// minimal gulp factor\r\n\tuint256 private minimalGulpFactor = DEFAULT_MINIMAL_GULP_FACTOR;\r\n\r\n\t// force gulp ratio\r\n\tuint256 private forceGulpRatio = DEFAULT_FORCE_GULP_RATIO;\r\n\r\n\t// fee configuration\r\n\tuint256 private performanceFee = DEFAULT_PERFORMANCE_FEE;\r\n\r\n\t// emergency mode flag\r\n\tbool private emergencyMode;\r\n\r\n\t/// @dev Single public function to expose the private state, saves contract space\r\n\tfunction state() external view returns (\r\n\t\taddress _masterChef,\r\n\t\tuint256 _pid,\r\n\t\taddress _rewardToken,\r\n\t\taddress _routingToken,\r\n\t\taddress _reserveToken,\r\n\t\taddress _treasury,\r\n\t\taddress _collector,\r\n\t\taddress _exchange,\r\n\t\tuint256 _minimalGulpFactor,\r\n\t\tuint256 _forceGulpRatio,\r\n\t\tuint256 _performanceFee,\r\n\t\tbool _emergencyMode\r\n\t)\r\n\t{\r\n\t\treturn (\r\n\t\t\tmasterChef,\r\n\t\t\tpid,\r\n\t\t\trewardToken,\r\n\t\t\troutingToken,\r\n\t\t\treserveToken,\r\n\t\t\ttreasury,\r\n\t\t\tcollector,\r\n\t\t\texchange,\r\n\t\t\tminimalGulpFactor,\r\n\t\t\tforceGulpRatio,\r\n\t\t\tperformanceFee,\r\n\t\t\temergencyMode\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Constructor for this strategy contract.\r\n\t * @param _name The ERC-20 token name.\r\n\t * @param _symbol The ERC-20 token symbol.\r\n\t * @param _decimals The ERC-20 token decimals.\r\n\t * @param _masterChef The MasterChef contract address.\r\n\t * @param _pid The MasterChef Pool ID (pid).\r\n\t * @param _routingToken The ERC-20 token address to be used as routing\r\n\t *                      token, must be either the reserve token itself\r\n\t *                      or one of the tokens that make up a liquidity pool.\r\n\t * @param _treasury The treasury address used to recover lost funds.\r\n\t * @param _collector The fee collector address to collect the performance fee.\r\n\t * @param _exchange The exchange contract used to convert funds.\r\n\t */\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals,\r\n\t\taddress _masterChef, uint256 _pid, address _routingToken,\r\n\t\taddress _treasury, address _collector, address _exchange)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t\t(address _reserveToken, address _rewardToken) = _getTokens(_masterChef, _pid);\r\n\t\trequire(_routingToken == _reserveToken || _routingToken == Pair(_reserveToken).token0() || _routingToken == Pair(_reserveToken).token1(), \"invalid token\");\r\n\t\tmasterChef = _masterChef;\r\n\t\tpid = _pid;\r\n\t\trewardToken = _rewardToken;\r\n\t\troutingToken = _routingToken;\r\n\t\treserveToken = _reserveToken;\r\n\t\ttreasury = _treasury;\r\n\t\tcollector = _collector;\r\n\t\texchange = _exchange;\r\n\t\t_mint(address(1), 1); // avoids division by zero\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Provides the amount of reserve tokens currently being help by\r\n\t *         this contract.\r\n\t * @return _totalReserve The amount of the reserve token corresponding\r\n\t *                       to this contract's balance.\r\n\t */\r\n\tfunction totalReserve() public view returns (uint256 _totalReserve)\r\n\t{\r\n\t\t_totalReserve = emergencyMode ? Transfers._getBalance(reserveToken) : _getReserveAmount();\r\n\t\tif (_totalReserve == uint256(-1)) return _totalReserve;\r\n\t\treturn _totalReserve + 1; // avoids division by zero\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of shares to be\r\n\t *         received/minted upon depositing to the contract.\r\n\t * @param _amount The amount of reserve token being deposited.\r\n\t * @return _shares The net amount of shares being received.\r\n\t */\r\n\tfunction calcSharesFromAmount(uint256 _amount) external view returns (uint256 _shares)\r\n\t{\r\n\t\treturn _calcSharesFromAmount(_amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token to be withdrawn given the desired amount of\r\n\t *         shares.\r\n\t * @param _shares The amount of shares to provide.\r\n\t * @return _amount The amount of the reserve token to be received.\r\n\t */\r\n\tfunction calcAmountFromShares(uint256 _shares) external view returns (uint256 _amount)\r\n\t{\r\n\t\treturn _calcAmountFromShares(_shares);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reward token to be collected as performance fee on the next\r\n\t *         gulp call.\r\n\t * @return _feeReward The amount of the reward token to be collected.\r\n\t */\r\n\t/*\r\n\tfunction pendingPerformanceFee() external view returns (uint256 _feeReward)\r\n\t{\r\n\t\tuint256 _pendingReward = _getPendingReward();\r\n\t\tuint256 _balanceReward = Transfers._getBalance(rewardToken);\r\n\t\tuint256 _totalReward = _pendingReward.add(_balanceReward);\r\n\t\t_feeReward = _totalReward.mul(performanceFee) / 1e18;\r\n\t\treturn _feeReward;\r\n\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * @notice Allows for the beforehand calculation of the amount of\r\n\t *         reserve token, converted from the reward token accumulated,\r\n\t *         to be incorporated into the reserve on the next gulp call.\r\n\t * @return _rewardAmount The amount of the reserve token to be collected.\r\n\t */\r\n\t/*\r\n\tfunction pendingReward() external view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\tuint256 _pendingReward = _getPendingReward();\r\n\t\tuint256 _balanceReward = Transfers._getBalance(rewardToken);\r\n\t\tuint256 _totalReward = _pendingReward.add(_balanceReward);\r\n\t\tuint256 _feeReward = _totalReward.mul(performanceFee) / 1e18;\r\n\t\tuint256 _netReward = _totalReward - _feeReward;\r\n\t\tuint256 _totalRouting = _netReward;\r\n\t\tif (rewardToken != routingToken) {\r\n\t\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\t\t_totalRouting = IExchange(exchange).calcConversionFromInput(rewardToken, routingToken, _netReward);\r\n\t\t}\r\n\t\tuint256 _totalBalance = _totalRouting;\r\n\t\tif (routingToken != reserveToken) {\r\n\t\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\t\t_totalBalance = IExchange(exchange).calcJoinPoolFromInput(reserveToken, routingToken, _totalRouting);\r\n\t\t}\r\n\t\treturn _totalBalance;\r\n\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * @notice Performs the minting of shares upon the deposit of the\r\n\t *         reserve token. The actual number of shares being minted can\r\n\t *         be calculated using the calcSharesFromAmount function.\r\n\t *         In every deposit, a portion of the shares is retained in\r\n\t *         terms of deposit fee and sent to the dev address.\r\n\t * @param _amount The amount of reserve token being deposited in the\r\n\t *                operation.\r\n\t * @param _minShares The minimum number of shares expected to be\r\n\t *                   received in the operation.\r\n\t */\r\n\tfunction deposit(uint256 _amount, uint256 _minShares, bool _execGulp) external /*onlyEOAorWhitelist*/ nonReentrant\r\n\t{\r\n\t\trequire(!emergencyMode, \"not allowed\");\r\n\t\tif (_execGulp || _amount.mul(1e18) / totalReserve() > forceGulpRatio) {\r\n\t\t\trequire(_gulp(), \"unavailable\");\r\n\t\t}\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _shares = _calcSharesFromAmount(_amount);\r\n\t\trequire(_shares >= _minShares, \"high slippage\");\r\n\t\tTransfers._pullFunds(reserveToken, _from, _amount);\r\n\t\t_deposit(_amount);\r\n\t\t_mint(_from, _shares);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Performs the burning of shares upon the withdrawal of\r\n\t *         the reserve token. The actual amount of the reserve token to\r\n\t *         be received can be calculated using the\r\n\t *         calcAmountFromShares function.\r\n\t * @param _shares The amount of this shares being redeemed in the operation.\r\n\t * @param _minAmount The minimum amount of the reserve token expected\r\n\t *                   to be received in the operation.\r\n\t */\r\n\tfunction withdraw(uint256 _shares, uint256 _minAmount, bool _execGulp) external /*onlyEOAorWhitelist*/ nonReentrant\r\n\t{\r\n\t\tif (_execGulp) {\r\n\t\t\trequire(!emergencyMode, \"not allowed\");\r\n\t\t\trequire(_gulp(), \"unavailable\");\r\n\t\t}\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _amount = _calcAmountFromShares(_shares);\r\n\t\trequire(_amount >= _minAmount, \"high slippage\");\r\n\t\t_burn(_from, _shares);\r\n\t\tif (!emergencyMode) {\r\n\t\t\t_withdraw(_amount);\r\n\t\t}\r\n\t\tTransfers._pushFunds(reserveToken, _from, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the conversion of the accumulated reward token into more of\r\n\t * the reserve token. This function allows the compounding of rewards.\r\n\t * Part of the reward accumulated is collected and sent to the fee collector\r\n\t * contract as performance fee.\r\n\t */\r\n\tfunction gulp() external /*onlyEOAorWhitelist*/ nonReentrant\r\n\t{\r\n\t\trequire(!emergencyMode, \"not allowed\");\r\n\t\trequire(_gulp(), \"unavailable\");\r\n\t}\r\n\r\n\t/// @dev Actual gulp implementation\r\n\tfunction _gulp() internal returns (bool _success)\r\n\t{\r\n\t\tuint256 _pendingReward = _getPendingReward();\r\n\t\tif (_pendingReward > 0) {\r\n\t\t\t_withdraw(0);\r\n\t\t}\r\n\t\t{\r\n\t\t\tuint256 _totalReward = Transfers._getBalance(rewardToken);\r\n\t\t\tif (_totalReward == 0) return true;\r\n\t\t\tuint256 _feeReward = _totalReward.mul(performanceFee) / 1e18;\r\n\t\t\tTransfers._pushFunds(rewardToken, collector, _feeReward);\r\n\t\t}\r\n\t\tif (rewardToken != routingToken) {\r\n\t\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\t\tuint256 _totalReward = Transfers._getBalance(rewardToken);\r\n\t\t\tuint256 _factor = IExchange(exchange).oracleAveragePriceFactorFromInput(rewardToken, routingToken, _totalReward);\r\n\t\t\tif (_factor < minimalGulpFactor) return false;\r\n\t\t\tTransfers._approveFunds(rewardToken, exchange, _totalReward);\r\n\t\t\tIExchange(exchange).convertFundsFromInput(rewardToken, routingToken, _totalReward, 1);\r\n\t\t}\r\n\t\tif (routingToken != reserveToken) {\r\n\t\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\t\tuint256 _totalRouting = Transfers._getBalance(routingToken);\r\n\t\t\tuint256 _factor = IExchange(exchange).oraclePoolAveragePriceFactorFromInput(reserveToken, routingToken, _totalRouting);\r\n\t\t\tif (_factor < minimalGulpFactor || _factor > 2e18 - minimalGulpFactor) return false;\r\n\t\t\tTransfers._approveFunds(routingToken, exchange, _totalRouting);\r\n\t\t\tIExchange(exchange).joinPoolFromInput(reserveToken, routingToken, _totalRouting, 1);\r\n\t\t}\r\n\t\tuint256 _totalBalance = Transfers._getBalance(reserveToken);\r\n\t\t_deposit(_totalBalance);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows withdrawing funds from the underlying protocol using\r\n\t *         the emergency withdrawal functionality. It halts the\r\n\t *         contract for deposits and gulp, only allowing withdrawals\r\n\t *         to take place.\r\n\t *         This is a privileged function.\r\n\t */\r\n\tfunction enterEmergencyMode() external onlyOwner\r\n\t{\r\n\t\temergencyMode = true;\r\n\t\t_emergencyWithdraw();\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Allows the recovery of tokens sent by mistake to this\r\n\t *         contract, excluding tokens relevant to its operations.\r\n\t *         The full balance is sent to the treasury address.\r\n\t *         This is a privileged function.\r\n\t * @param _token The address of the token to be recovered.\r\n\t */\r\n\tfunction recoverLostFunds(address _token) external onlyOwner nonReentrant\r\n\t\t// delayed(this.recoverLostFunds.selector, keccak256(abi.encode(_token)))\r\n\t{\r\n\t\trequire(_token != reserveToken, \"invalid token\");\r\n\t\trequire(_token != routingToken, \"invalid token\");\r\n\t\trequire(_token != rewardToken, \"invalid token\");\r\n\t\tuint256 _balance = Transfers._getBalance(_token);\r\n\t\tTransfers._pushFunds(_token, treasury, _balance);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the treasury address used to recover lost funds.\r\n\t *         This is a privileged function.\r\n\t * @param _newTreasury The new treasury address.\r\n\t */\r\n\tfunction setTreasury(address _newTreasury) external onlyOwner\r\n\t\t// delayed(this.setTreasury.selector, keccak256(abi.encode(_newTreasury)))\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the fee collector address used to collect the performance fee.\r\n\t *         This is a privileged function.\r\n\t * @param _newCollector The new fee collector address.\r\n\t */\r\n\tfunction setCollector(address _newCollector) external onlyOwner\r\n\t\tdelayed(this.setCollector.selector, keccak256(abi.encode(_newCollector)))\r\n\t{\r\n\t\trequire(_newCollector != address(0), \"invalid address\");\r\n\t\taddress _oldCollector = collector;\r\n\t\tcollector = _newCollector;\r\n\t\temit ChangeCollector(_oldCollector, _newCollector);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the exchange address used to convert funds. A zero\r\n\t *         address can be used to temporarily pause conversions.\r\n\t *         This is a privileged function.\r\n\t * @param _newExchange The new exchange address.\r\n\t */\r\n\tfunction setExchange(address _newExchange) external onlyOwner\r\n\t\tdelayed(this.setExchange.selector, keccak256(abi.encode(_newExchange)))\r\n\t{\r\n\t\taddress _oldExchange = exchange;\r\n\t\texchange = _newExchange;\r\n\t\temit ChangeExchange(_oldExchange, _newExchange);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the minimal gulp factor which defines the tolerance\r\n\t *         for gulping when below the average price. Default is 99%,\r\n\t *         which implies accepting up to 1% below the average price.\r\n\t *         This is a privileged function.\r\n\t * @param _newMinimalGulpFactor The new minimal gulp factor.\r\n\t */\r\n\tfunction setMinimalGulpFactor(uint256 _newMinimalGulpFactor) external onlyOwner\r\n\t\tdelayed(this.setMinimalGulpFactor.selector, keccak256(abi.encode(_newMinimalGulpFactor)))\r\n\t{\r\n\t\trequire(_newMinimalGulpFactor <= 1e18, \"invalid factor\");\r\n\t\tuint256 _oldMinimalGulpFactor = minimalGulpFactor;\r\n\t\tminimalGulpFactor = _newMinimalGulpFactor;\r\n\t\temit ChangeMinimalGulpFactor(_oldMinimalGulpFactor, _newMinimalGulpFactor);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the force gulp ratio. Any deposit larger then the\r\n\t *         ratio, relative to the reserve, forces gulp.\r\n\t *         This is a privileged function.\r\n\t * @param _newForceGulpRatio The new force gulp ratio.\r\n\t */\r\n\tfunction setForceGulpRatio(uint256 _newForceGulpRatio) external onlyOwner\r\n\t\tdelayed(this.setForceGulpRatio.selector, keccak256(abi.encode(_newForceGulpRatio)))\r\n\t{\r\n\t\trequire(_newForceGulpRatio <= 1e18, \"invalid rate\");\r\n\t\tuint256 _oldForceGulpRatio = forceGulpRatio;\r\n\t\tforceGulpRatio = _newForceGulpRatio;\r\n\t\temit ChangeForceGulpRatio(_oldForceGulpRatio, _newForceGulpRatio);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Updates the performance fee rate.\r\n\t *         This is a privileged function.\r\n\t * @param _newPerformanceFee The new performance fee rate.\r\n\t */\r\n\tfunction setPerformanceFee(uint256 _newPerformanceFee) external onlyOwner\r\n\t\tdelayed(this.setPerformanceFee.selector, keccak256(abi.encode(_newPerformanceFee)))\r\n\t{\r\n\t\trequire(_newPerformanceFee <= MAXIMUM_PERFORMANCE_FEE, \"invalid rate\");\r\n\t\tuint256 _oldPerformanceFee = performanceFee;\r\n\t\tperformanceFee = _newPerformanceFee;\r\n\t\temit ChangePerformanceFee(_oldPerformanceFee, _newPerformanceFee);\r\n\t}\r\n\r\n\t/// @dev Calculation of shares from amount given the share price (ratio between reserve and supply)\r\n\tfunction _calcSharesFromAmount(uint256 _amount) internal view returns (uint256 _shares)\r\n\t{\r\n\t\treturn _amount.mul(totalSupply()) / totalReserve();\r\n\t}\r\n\r\n\t/// @dev Calculation of amount from shares given the share price (ratio between reserve and supply)\r\n\tfunction _calcAmountFromShares(uint256 _shares) internal view returns (uint256 _amount)\r\n\t{\r\n\t\treturn _shares.mul(totalReserve()) / totalSupply();\r\n\t}\r\n\r\n\t// ----- BEGIN: underlying contract abstraction\r\n\r\n\t/// @dev Lists the reserve and reward tokens of the MasterChef pool\r\n\tfunction _getTokens(address _masterChef, uint256 _pid) internal view returns (address _reserveToken, address _rewardToken)\r\n\t{\r\n\t\tuint256 _poolLength = MasterChef(_masterChef).poolLength();\r\n\t\trequire(_pid < _poolLength, \"invalid pid\");\r\n\t\t(_reserveToken,,,) = MasterChef(_masterChef).poolInfo(_pid);\r\n\t\t_rewardToken = MasterChef(_masterChef).cake();\r\n\t\treturn (_reserveToken, _rewardToken);\r\n\t}\r\n\r\n\t/// @dev Retrieves the current pending reward for the MasterChef pool\r\n\tfunction _getPendingReward() internal view returns (uint256 _pendingReward)\r\n\t{\r\n\t\treturn MasterChef(masterChef).pendingCake(pid, address(this));\r\n\t}\r\n\r\n\t/// @dev Retrieves the deposited reserve for the MasterChef pool\r\n\tfunction _getReserveAmount() internal view returns (uint256 _reserveAmount)\r\n\t{\r\n\t\t(_reserveAmount,) = MasterChef(masterChef).userInfo(pid, address(this));\r\n\t\treturn _reserveAmount;\r\n\t}\r\n\r\n\t/// @dev Performs a deposit into the MasterChef pool\r\n\tfunction _deposit(uint256 _amount) internal\r\n\t{\r\n\t\tTransfers._approveFunds(reserveToken, masterChef, _amount);\r\n\t\tif (pid == 0) {\r\n\t\t\tMasterChef(masterChef).enterStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(masterChef).deposit(pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Performs an withdrawal from the MasterChef pool\r\n\tfunction _withdraw(uint256 _amount) internal\r\n\t{\r\n\t\tif (pid == 0) {\r\n\t\t\tMasterChef(masterChef).leaveStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(masterChef).withdraw(pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Performs an emergency withdrawal from the MasterChef pool\r\n\tfunction _emergencyWithdraw() internal\r\n\t{\r\n\t\tMasterChef(masterChef).emergencyWithdraw(pid);\r\n\t}\r\n\r\n\t// ----- END: underlying contract abstraction\r\n\r\n\t// events emitted by this contract\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangeCollector(address _oldCollector, address _newCollector);\r\n\tevent ChangeExchange(address _oldExchange, address _newExchange);\r\n\tevent ChangeMinimalGulpFactor(uint256 _oldMinimalGulpFactor, uint256 _newMinimalGulpFactor);\r\n\tevent ChangeForceGulpRatio(uint256 _oldForceGulpRatio, uint256 _newForceGulpRatio);\r\n\tevent ChangePerformanceFee(uint256 _oldPerformanceFee, uint256 _newPerformanceFee);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"AnnounceDelayedAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"ChangeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldExchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newExchange\",\"type\":\"address\"}],\"name\":\"ChangeExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldForceGulpRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newForceGulpRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeForceGulpRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinimalGulpFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinimalGulpFactor\",\"type\":\"uint256\"}],\"name\":\"ChangeMinimalGulpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPerformanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"ChangePerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"ChangeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"ExecuteDelayedAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"announceDelayedAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcAmountFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcSharesFromAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_execGulp\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gulp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newForceGulpRatio\",\"type\":\"uint256\"}],\"name\":\"setForceGulpRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimalGulpFactor\",\"type\":\"uint256\"}],\"name\":\"setMinimalGulpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimalGulpFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forceGulpRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_emergencyMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_execGulp\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakeSwapCompoundingStrategyToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001200000000000000000000000095fabae2e9fb0a269ce307550cac3093a3cdb44800000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ab63309f85df5d4c3351ff8eacb87980e05da4e000000000000000000000000392681eaf8ad9bc65e74be37afe7503d92802b7d000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7374616b65642057484541542076330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a73746b5748454154763300000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://298975f2d4764edca17e0fd8c722194786d64e372f79303cd782ed72fed4c68b"}