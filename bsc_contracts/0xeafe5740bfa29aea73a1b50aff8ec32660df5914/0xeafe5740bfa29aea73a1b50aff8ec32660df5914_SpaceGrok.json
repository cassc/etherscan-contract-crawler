{"SourceCode": "pragma solidity 0.8.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// https://t.me/SpaceGrok\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one _account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Dex Factory contract interface\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// Dex Router02 contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any _account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new _account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev set the owner for the first time.\r\n     * Can only be called by the contract or deployer.\r\n     */\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SpaceGrok is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // all private variables and functions are only for contract use\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromReward;\r\n    mapping(address => bool) private _isExcludedFromMaxHoldLimit;\r\n    mapping(address => bool) private _isExcludedFromMinBuyLimit;\r\n    mapping(address => bool) public isSniper;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 6900000000 * 1e9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"Space Grok\"; // token name\r\n    string private _symbol = \"SPACEGROK\"; // token ticker\r\n    uint8 private _decimals = 9; // token decimals\r\n\r\n    IDexRouter public dexRouter; // Dex router address\r\n    address public dexPair; // LP token address\r\n    address payable public marketWallet; // market wallet address\r\n    address public burnAddress = (0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 public minTokenToSwap = 1000000 * 1e9; // 100k amount will trigger the swap and add liquidity\r\n    uint256 public maxHoldingAmount = 20000000 * 1e9;\r\n    uint256 public minBuyLimit = 20000000 * 1e9;\r\n\r\n    uint256 private excludedTSupply; // for contract use\r\n    uint256 private excludedRSupply; // for contract use\r\n\r\n    bool public swapAndLiquifyEnabled = true; // should be true to turn on to liquidate the pool\r\n    bool public Fees = true;\r\n    bool public antiBotStopEnabled = false;\r\n    bool public isMaxHoldLimitValid = true; // max Holding Limit is valid if it's true\r\n\r\n    // buy tax fee\r\n    uint256 public reflectionFeeOnBuying = 10;\r\n    uint256 public liquidityFeeOnBuying = 10;\r\n    uint256 public marketWalletFeeOnBuying = 50;\r\n    uint256 public burnFeeOnBuying = 15;\r\n\r\n    // sell tax fee\r\n    uint256 public reflectionFeeOnSelling = 10;\r\n    uint256 public liquidityFeeOnSelling = 10;\r\n    uint256 public marketWalletFeeOnSelling = 50;\r\n    uint256 public burnFeeOnSelling = 15;\r\n\r\n    // for smart contract use\r\n    uint256 private _currentReflectionFee;\r\n    uint256 private _currentLiquidityFee;\r\n    uint256 private _currentmarketWalletFee;\r\n    uint256 private _currentBurnFee;\r\n\r\n    uint256 private _accumulatedLiquidity;\r\n    uint256 private _accumulatedMarketWallet;\r\n\r\n    //Events for blockchain\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event AntiBotStopEnableUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    // constructor for initializing the contract\r\n    constructor(address payable _marketWallet) {\r\n        _rOwned[owner()] = _rTotal;\r\n        marketWallet = _marketWallet;\r\n\r\n        IDexRouter _dexRouter = IDexRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            // 0x10ED43C718714eb63d5aA57B78B54704E256024E //testnet\r\n        );\r\n        // Create a Dex pair for this new token\r\n        dexPair = IDexFactory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            _dexRouter.WETH()\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        dexRouter = _dexRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n       // exclude addresses from max holding limit\r\n        _isExcludedFromMaxHoldLimit[owner()] = true;\r\n        _isExcludedFromMaxHoldLimit[address(this)] = true;\r\n        _isExcludedFromMaxHoldLimit[dexPair] = true;\r\n        _isExcludedFromMaxHoldLimit[burnAddress] = true;\r\n\r\n        _isExcludedFromMinBuyLimit[owner()] = true;\r\n        _isExcludedFromMinBuyLimit[dexPair] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    // token standards by Blockchain\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (_isExcludedFromReward[_account]) return _tOwned[_account];\r\n        return tokenFromReflection(_rOwned[_account]);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(!isSniper[sender], \"Sniper detected\");\r\n        require(!isSniper[recipient], \"Sniper detected\");\r\n        require(!antiBotStopEnabled, \"Trading shifted for bot deletion.\");\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"Token: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"Token: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // public view able functions\r\n\r\n    // to check wether the address is excluded from reward or not\r\n    function isExcludedFromReward(address _account) public view returns (bool) {\r\n        return _isExcludedFromReward[_account];\r\n    }\r\n\r\n    // to check how much tokens get redistributed among holders till now\r\n    function totalHolderDistribution() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    // to check wether the address is excluded from fee or not\r\n    function isExcludedFromFee(address _account) public view returns (bool) {\r\n        return _isExcludedFromFee[_account];\r\n    }\r\n    // to check wether the address is excluded from max Holding or not\r\n    function isExcludedFromMaxHoldLimit(address _account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMaxHoldLimit[_account];\r\n    }\r\n\r\n    // to check wether the address is excluded from max txn or not\r\n    function isExcludedFromMaxTxnLimit(address _account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMinBuyLimit[_account];\r\n    }\r\n\r\n    // For manual distribution to the holders\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcludedFromReward[sender],\r\n            \"Token: Excluded addresses cannot call this function\"\r\n        );\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"BEP20: Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            return rAmount;\r\n        } else {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            uint256 rTransferAmount = rAmount.sub(\r\n                totalFeePerTx(tAmount).mul(_getRate())\r\n            );\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Token: Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    //to include or exludde  any address from max hold limit\r\n    function includeOrExcludeFromMaxHoldLimit(address _address, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromMaxHoldLimit[_address] = value;\r\n    }\r\n\r\n    //to include or exludde  any address from max hold limit\r\n    function includeOrExcludeFromMaxTxnLimit(address _address, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromMinBuyLimit[_address] = value;\r\n    }\r\n\r\n    //only owner can change sniper shift\r\n    function setAntiBotStopEnabled(bool _state) public onlyOwner {\r\n        antiBotStopEnabled = _state;\r\n        emit AntiBotStopEnableUpdated(_state);\r\n    }\r\n\r\n    //only owner can change MaxHoldingAmount\r\n    function setMaxHoldingAmount(uint256 _amount) public onlyOwner {\r\n        maxHoldingAmount = _amount;\r\n    }\r\n\r\n    //only owner can change MaxHoldingAmount\r\n    function setMinBuyLimit(uint256 _amount) public onlyOwner {\r\n        minBuyLimit = _amount;\r\n    }\r\n\r\n    // owner can remove stuck tokens in case of any issue\r\n    function removeStuckToken(address _token, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        IBEP20(_token).transfer(owner(), _amount);\r\n    }\r\n    \r\n    //only owner can change SellFeePercentages any time after deployment\r\n    function setSellFeePercent(\r\n        uint256 _redistributionFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketWalletFee,\r\n        uint256 _burnFee\r\n    ) external onlyOwner {\r\n        reflectionFeeOnSelling = _redistributionFee;\r\n        liquidityFeeOnSelling = _liquidityFee;\r\n        marketWalletFeeOnSelling = _marketWalletFee;\r\n        burnFeeOnSelling = _burnFee;\r\n    }\r\n\r\n    //to include or exludde  any address from fee\r\n    function includeOrExcludeFromFee(address _account, bool _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[_account] = _value;\r\n    }\r\n\r\n    //only owner can change MinTokenToSwap\r\n    function setMinTokenToSwap(uint256 _amount) public onlyOwner {\r\n        minTokenToSwap = _amount;\r\n    }\r\n\r\n    //only owner can change BuyFeePercentages any time after deployment\r\n    function setBuyFeePercent(\r\n        uint256 _redistributionFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketWalletFee,\r\n        uint256 _burnFee\r\n    ) external onlyOwner {\r\n        reflectionFeeOnBuying = _redistributionFee;\r\n        liquidityFeeOnBuying = _liquidityFee;\r\n        marketWalletFeeOnBuying = _marketWalletFee;\r\n        burnFeeOnBuying = _burnFee;\r\n    }\r\n\r\n    \r\n    //only owner can change state of swapping, he can turn it in to true or false any time after deployment\r\n    function enableOrDisableSwapAndLiquify(bool _state) public onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        emit SwapAndLiquifyEnabledUpdated(_state);\r\n    }\r\n\r\n    //To enable or disable all fees when set it to true fees will be disabled\r\n    function enableOrDisableFees(bool _state) external onlyOwner {\r\n        Fees = _state;\r\n    }\r\n\r\n    // owner can change market address\r\n    function setmarketWalletAddress(address payable _newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketWallet = _newAddress;\r\n    }\r\n\r\n    //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    // internal functions for contract use\r\n\r\n    function totalFeePerTx(uint256 tAmount) internal view returns (uint256) {\r\n        uint256 percentage = tAmount\r\n            .mul(\r\n                _currentReflectionFee.add(_currentLiquidityFee).add(\r\n                    _currentmarketWalletFee.add(_currentBurnFee)\r\n                )\r\n            )\r\n            .div(1e3);\r\n        return percentage;\r\n    }\r\n\r\n    function _checkMaxWalletAmount(address to, uint256 amount) private view{\r\n        if (\r\n            !_isExcludedFromMaxHoldLimit[to] // by default false\r\n        ) {\r\n            if (isMaxHoldLimitValid) {\r\n                require(\r\n                    balanceOf(to).add(amount) <= maxHoldingAmount,\r\n                    \"BEP20: amount exceed max holding limit\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        _currentReflectionFee = reflectionFeeOnBuying;\r\n        _currentLiquidityFee = liquidityFeeOnBuying;\r\n        _currentmarketWalletFee = marketWalletFeeOnBuying;\r\n        _currentBurnFee = burnFeeOnBuying; \r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        rSupply = rSupply.sub(excludedRSupply);\r\n        tSupply = tSupply.sub(excludedTSupply);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _currentReflectionFee = 0;\r\n        _currentLiquidityFee = 0;\r\n        _currentmarketWalletFee = 0;\r\n        _currentBurnFee = 0;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _currentReflectionFee = reflectionFeeOnSelling;\r\n        _currentLiquidityFee = liquidityFeeOnSelling;\r\n        _currentmarketWalletFee = marketWalletFeeOnSelling;\r\n        _currentBurnFee = burnFeeOnSelling;\r\n    }\r\n\r\n     function addSniperInList(address _account) external onlyOwner {\r\n        require(_account != address(dexRouter), \"We can not blacklist router\");\r\n        require(!isSniper[_account], \"Sniper already exist\");\r\n        isSniper[_account] = true;\r\n    }\r\n\r\n    function removeSniperFromList(address _account) external onlyOwner {\r\n        require(isSniper[_account], \"Not a sniper\");\r\n        isSniper[_account] = false;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"Token: approve from the zero address\");\r\n        require(spender != address(0), \"Token: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // base function to transfer tokens\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"Token: transfer from the zero address\");\r\n        require(to != address(0), \"Token: transfer to the zero address\");\r\n        require(amount > 0, \"Token: transfer amount must be greater than zero\");\r\n        \r\n        // swap and liquify\r\n        swapAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any _account belongs to _isExcludedFromFee _account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || !Fees) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        // buying handler\r\n        require(!isSniper[sender], \"Sniper detected\");\r\n        require(!isSniper[recipient], \"Sniper detected\");\r\n        require(!antiBotStopEnabled, \"Trading shifted for bot deletion.\");\r\n\r\n        if(!_isExcludedFromMinBuyLimit[recipient]){\r\n            require(amount <= minBuyLimit,\"Amount must be greater than minimum buy Limit\" );\r\n        }\r\n        if (sender == dexPair && takeFee) {\r\n            setBuyFee();\r\n        }\r\n        // selling handler\r\n        else if (recipient == dexPair && takeFee) {\r\n            setSellFee();\r\n        }\r\n        // normal transaction handler\r\n        else {\r\n            removeAllFee();\r\n        }\r\n\r\n        // check if sender or reciver excluded from reward then do transfer accordingly\r\n        if (\r\n            _isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (\r\n            !_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (\r\n            _isExcludedFromReward[sender] && _isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    // if both sender and receiver are not excluded from reward\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(\r\n            totalFeePerTx(tAmount).mul(currentRate)\r\n        );\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(sender,tAmount, currentRate);\r\n        _takeBurnFee(sender,tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if sender is excluded from reward\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(\r\n            totalFeePerTx(tAmount).mul(currentRate)\r\n        );\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        excludedTSupply = excludedTSupply.sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(sender,tAmount, currentRate);\r\n        _takeBurnFee(sender,tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if both sender and receiver are excluded from reward\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        excludedTSupply = excludedTSupply.sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        excludedTSupply = excludedTSupply.add(tAmount);\r\n        _takeAllFee(sender,tAmount, currentRate);\r\n        _takeBurnFee(sender,tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if receiver is excluded from reward\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        excludedTSupply = excludedTSupply.add(tAmount);\r\n        _takeAllFee(sender,tAmount, currentRate);\r\n        _takeBurnFee(sender,tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // for automatic redistribution among all holders on each tx\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = tAmount.mul(_currentReflectionFee).div(1e3);\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n     // take fees for liquidity, market/dev\r\n    function _takeAllFee(address sender,uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 tFee = tAmount\r\n            .mul(_currentLiquidityFee.add(_currentmarketWalletFee))\r\n            .div(1e3);\r\n\r\n        if (tFee > 0) {\r\n            _accumulatedLiquidity = _accumulatedLiquidity.add(\r\n                tAmount.mul(_currentLiquidityFee).div(1e3)\r\n            );\r\n            _accumulatedMarketWallet = _accumulatedMarketWallet.add(\r\n                tAmount.mul(_currentmarketWalletFee).div(1e3)\r\n            );\r\n\r\n            uint256 rFee = tFee.mul(currentRate);\r\n            if (_isExcludedFromReward[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(tFee);\r\n            else _rOwned[address(this)] = _rOwned[address(this)].add(rFee);\r\n\r\n            emit Transfer(sender, address(this), tFee);\r\n        }\r\n    }\r\n   function _takeBurnFee(address sender,uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 burnFee = tAmount.mul(_currentBurnFee).div(1e3);\r\n        uint256 rBurnFee = burnFee.mul(currentRate);\r\n        _rOwned[burnAddress] = _rOwned[burnAddress].add(rBurnFee);\r\n\r\n        emit Transfer(sender, burnAddress, burnFee);\r\n    }\r\n\r\n    \r\n    function swapAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is Dex pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenToSwap;\r\n\r\n        if (\r\n            shouldSell &&\r\n            from != dexPair &&\r\n            swapAndLiquifyEnabled &&\r\n            !(from == address(this) && to == address(dexPair)) // swap 1 time\r\n        ) {\r\n            // approve contract\r\n            _approve(address(this), address(dexRouter), contractTokenBalance);\r\n\r\n            uint256 halfLiquid = _accumulatedLiquidity.div(2);\r\n            uint256 otherHalfLiquid = _accumulatedLiquidity.sub(halfLiquid);\r\n\r\n            uint256 tokenAmountToBeSwapped = contractTokenBalance.sub(\r\n                otherHalfLiquid\r\n            );\r\n\r\n            // now is to lock into liquidty pool\r\n            Utils.swapTokensForEth(address(dexRouter), tokenAmountToBeSwapped);\r\n\r\n            uint256 deltaBalance = address(this).balance;\r\n            uint256 bnbToBeAddedToLiquidity = deltaBalance.mul(halfLiquid).div(tokenAmountToBeSwapped);\r\n            uint256 bnbFormarketWallet = deltaBalance.sub(bnbToBeAddedToLiquidity);  \r\n\r\n            // sending bnb to award pool wallet\r\n            if(bnbFormarketWallet > 0)\r\n                marketWallet.transfer(bnbFormarketWallet); \r\n\r\n            // add liquidity to Dex\r\n            if(bnbToBeAddedToLiquidity > 0){\r\n                Utils.addLiquidity(\r\n                    address(dexRouter),\r\n                    owner(),\r\n                    otherHalfLiquid,\r\n                    bnbToBeAddedToLiquidity\r\n                );\r\n\r\n                emit SwapAndLiquify(\r\n                    halfLiquid,\r\n                    bnbToBeAddedToLiquidity,\r\n                    otherHalfLiquid\r\n                );\r\n            }\r\n\r\n            // Reset current accumulated amount\r\n            _accumulatedLiquidity = 0; \r\n            _accumulatedMarketWallet = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Library for doing a swap on Dex\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        internal\r\n    {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // generate the Dex pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AntiBotStopEnableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Fees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addSniperInList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotStopEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableOrDisableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTxnLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxHoldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxnLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaxHoldLimitValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWalletFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWalletFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeSniperFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAntiBotStopEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setmarketWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpaceGrok", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008136ca5f6a8b4f9ede2ada23c966af6471117c31", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2bf7dd983badf4dd5020ce4a8d708d81b96d86f3de6e423e7d4b13cd480ead4a"}