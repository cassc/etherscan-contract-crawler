{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bridge/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            address lpToken\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/interfaces/ISwapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/BridgeStructs.sol\\\";\\n\\ninterface ISwapAdapter {\\n    /**\\n     * @notice Performs a tokenIn -> tokenOut swap, according to the provided params.\\n     * If tokenIn is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\\n     * If tokenIn is ERC20, the tokens should be already transferred to this contract (using `msg.value = 0`).\\n     * If tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\\n     * If tokenOut is ERC20, the tokens will be transferred to the recipient.\\n     * @dev Contracts implementing {ISwapAdapter} interface are required to enforce the above restrictions.\\n     * On top of that, they must ensure that exactly `amountOut` worth of `tokenOut` is transferred to the recipient.\\n     * Swap deadline and slippage is checked outside of this contract.\\n     * @param to            Address to receive the swapped token\\n     * @param tokenIn       Token to sell (use ETH_ADDRESS to start from native ETH)\\n     * @param amountIn      Amount of tokens to sell\\n     * @param tokenOut      Token to buy (use ETH_ADDRESS to end with native ETH)\\n     * @param rawParams     Additional swap parameters\\n     * @return amountOut    Amount of bought tokens\\n     */\\n    function adapterSwap(\\n        address to,\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        bytes calldata rawParams\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/interfaces/ISwapQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/BridgeStructs.sol\\\";\\n\\ninterface ISwapQuoter {\\n    function findConnectedTokens(LimitedToken[] memory tokensIn, address tokenOut)\\n        external\\n        view\\n        returns (uint256 amountFound, bool[] memory isConnected);\\n\\n    function getAmountOut(\\n        LimitedToken memory tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (SwapQuery memory query);\\n\\n    function allPools() external view returns (Pool[] memory pools);\\n\\n    function poolsAmount() external view returns (uint256 tokens);\\n\\n    function poolInfo(address pool) external view returns (uint256 tokens, address lpToken);\\n\\n    function poolTokens(address pool) external view returns (PoolToken[] memory tokens);\\n\\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256 amountOut);\\n\\n    function calculateSwap(\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut);\\n\\n    function calculateRemoveLiquidity(address pool, uint256 amount) external view returns (uint256[] memory amountsOut);\\n\\n    function calculateWithdrawOneToken(\\n        address pool,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/interfaces/ISynapseBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ninterface ISynapseBridge {\\n    using SafeERC20 for IERC20;\\n\\n    function deposit(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external;\\n\\n    function depositAndSwap(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external;\\n\\n    function redeem(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemv2(\\n        bytes32 to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemAndSwap(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external;\\n\\n    function redeemAndRemove(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 liqTokenIndex,\\n        uint256 liqMinAmount,\\n        uint256 liqDeadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/libraries/BridgeStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @notice Struct representing a request for SynapseRouter.\\n/// @dev tokenIn is supplied separately.\\n/// @param swapAdapter      Adapter address that will perform the swap. Address(0) specifies a \\\"no swap\\\" query.\\n/// @param tokenOut         Token address to swap to.\\n/// @param minAmountOut     Minimum amount of tokens to receive after the swap, or tx will be reverted.\\n/// @param deadline         Latest timestamp for when the transaction needs to be executed, or tx will be reverted.\\n/// @param rawParams        ABI-encoded params for the swap that will be passed to `swapAdapter`.\\n///                         Should be SynapseParams for swaps via SynapseAdapter.\\nstruct SwapQuery {\\n    address swapAdapter;\\n    address tokenOut;\\n    uint256 minAmountOut;\\n    uint256 deadline;\\n    bytes rawParams;\\n}\\n\\n/// @notice Struct representing parameters for swapping via SynapseAdapter.\\n/// @param action           Action that SynapseAdapter needs to perform.\\n/// @param pool             Liquidity pool that will be used for Swap/AddLiquidity/RemoveLiquidity actions.\\n/// @param tokenIndexFrom   Token index to swap from. Used for swap/addLiquidity actions.\\n/// @param tokenIndexTo     Token index to swap to. Used for swap/removeLiquidity actions.\\nstruct SynapseParams {\\n    Action action;\\n    address pool;\\n    uint8 tokenIndexFrom;\\n    uint8 tokenIndexTo;\\n}\\n\\n/// @notice All possible actions that SynapseAdapter could perform.\\nenum Action {\\n    Swap, // swap between two pools tokens\\n    AddLiquidity, // add liquidity in a form of a single pool token\\n    RemoveLiquidity, // remove liquidity in a form of a single pool token\\n    HandleEth // ETH <> WETH interaction\\n}\\n\\n/// @notice Struct representing a token, and the available Actions for performing a swap.\\n/// @param actionMask   Bitmask representing what actions (see ActionLib) are available for swapping a token\\n/// @param token        Token address\\nstruct LimitedToken {\\n    uint256 actionMask;\\n    address token;\\n}\\n\\n/// @notice Struct representing a bridge token. Used as the return value in view functions.\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param token    Bridge token address\\nstruct BridgeToken {\\n    string symbol;\\n    address token;\\n}\\n\\n/// @notice Struct representing how pool tokens are stored by `SwapQuoter`.\\n/// @param isWeth   Whether the token represents Wrapped ETH.\\n/// @param token    Token address.\\nstruct PoolToken {\\n    bool isWeth;\\n    address token;\\n}\\n\\n/// @notice Struct representing a request for a swap quote from a bridge token.\\n/// @dev tokenOut is passed externally\\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\\n/// @param amountIn Amount of bridge token to start with, before the bridge fee is applied\\nstruct DestRequest {\\n    string symbol;\\n    uint256 amountIn;\\n}\\n\\n/// @notice Struct representing a liquidity pool. Used as the return value in view functions.\\n/// @param pool         Pool address.\\n/// @param lpToken      Address of pool's LP token.\\n/// @param tokens       List of pool's tokens.\\nstruct Pool {\\n    address pool;\\n    address lpToken;\\n    PoolToken[] tokens;\\n}\\n\\n/// @notice Library for dealing with bit masks, describing what Actions are available.\\nlibrary ActionLib {\\n    /// @notice Returns a bitmask with all possible actions set to True.\\n    function allActions() internal pure returns (uint256 actionMask) {\\n        actionMask = type(uint256).max;\\n    }\\n\\n    /// @notice Returns whether the given action is set to True in the bitmask.\\n    function includes(uint256 actionMask, Action action) internal pure returns (bool) {\\n        return actionMask & mask(action) != 0;\\n    }\\n\\n    /// @notice Returns a bitmask with only the given action set to True.\\n    function mask(Action action) internal pure returns (uint256) {\\n        return 1 << uint256(action);\\n    }\\n\\n    /// @notice Returns a bitmask with only two given actions set to True.\\n    function mask(Action a, Action b) internal pure returns (uint256) {\\n        return mask(a) | mask(b);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/libraries/UniversalToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./BridgeStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * Library to unify handling of ETH/WETH and ERC20 tokens.\\n */\\nlibrary UniversalToken {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    /// @notice Returns token balance for the given account.\\n    function universalBalanceOf(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    /// @notice Compares two tokens. ETH_ADDRESS and WETH are deemed equal.\\n    function universalEquals(address token, PoolToken memory poolToken) internal pure returns (bool) {\\n        if (token == ETH_ADDRESS) {\\n            return poolToken.isWeth;\\n        } else {\\n            return token == poolToken.token;\\n        }\\n    }\\n\\n    function universalApproveInfinity(address token, address spender) internal {\\n        // ETH Chad doesn't require your approval\\n        if (token == ETH_ADDRESS) return;\\n        // No need to approve own tokens\\n        if (spender == address(this)) return;\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        // Set allowance to MAX_UINT if needed\\n        if (allowance != MAX_UINT) {\\n            // if allowance is neither zero nor infinity, reset if first\\n            if (allowance != 0) {\\n                IERC20(token).safeApprove(spender, 0);\\n            }\\n            IERC20(token).safeApprove(spender, MAX_UINT);\\n        }\\n    }\\n\\n    /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\\n    /// @dev This might trigger fallback, if ETH is transferred to the contract.\\n    /// Make sure this can not lead to reentrancy attacks.\\n    function universalTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // Don't do anything, if need to send tokens to this address\\n        if (to == address(this)) return;\\n        if (token == ETH_ADDRESS) {\\n            /// @dev Note: this can potentially lead to executing code in `to`.\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: value}(\\\"\\\");\\n            require(success, \\\"ETH transfer failed\\\");\\n        } else {\\n            IERC20(token).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/router/LocalBridgeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract LocalBridgeConfig is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Indicates the type of the supported bridge token on the local chain.\\n     * - TokenType.Redeem: token is burnt in order to initiate a bridge tx (bridge.redeem)\\n     * - TokenType.Deposit: token is locked in order to initiate a bridge tx (bridge.deposit)\\n     */\\n    enum TokenType {\\n        Redeem,\\n        Deposit\\n    }\\n\\n    /**\\n     * @notice Config for a supported bridge token.\\n     * @dev Some of the tokens require a wrapper token to make them conform SynapseERC20 interface.\\n     * In these cases, `bridgeToken` will feature a different address.\\n     * Otherwise, the token address is saved.\\n     * @param tokenType     Method of bridging for the token: Redeem or Deposit\\n     * @param bridgeToken   Bridge token address\\n     */\\n    struct TokenConfig {\\n        TokenType tokenType;\\n        address bridgeToken;\\n    }\\n\\n    /**\\n     * @notice Fee structure for a supported bridge token, optimized to fit in a single storage word.\\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\\n     */\\n    struct FeeStructure {\\n        uint40 bridgeFee;\\n        uint104 minFee;\\n        uint112 maxFee;\\n    }\\n\\n    /**\\n     * @notice Struct defining a supported bridge token. This is not supposed to be stored on-chain,\\n     * so this is not optimized in terms of storage words.\\n     * @param id            ID for token used in BridgeConfigV3\\n     * @param token         \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @param decimals      Amount ot decimals used for `token`\\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\\n     */\\n    struct BridgeTokenConfig {\\n        string id;\\n        address token;\\n        uint256 decimals;\\n        LocalBridgeConfig.TokenType tokenType;\\n        address bridgeToken;\\n        uint256 bridgeFee;\\n        uint256 minFee;\\n        uint256 maxFee;\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                              CONSTANTS                               \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @dev Denominator used to calculate the bridge fee: amount.mul(bridgeFee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                               STORAGE                                \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @notice Config for each supported token.\\n    /// @dev If wrapper token is required for bridging, its address is stored in `.bridgeToken`\\n    /// i.e. for GMX: config[GMX].bridgeToken = GMXWrapper\\n    mapping(address => TokenConfig) public config;\\n    /// @notice Fee structure for each supported token.\\n    /// @dev If wrapper token is required for bridging, its underlying is used as key here\\n    mapping(address => FeeStructure) public fee;\\n    /// @notice Maps bridge token address into bridge token symbol\\n    mapping(address => string) public tokenToSymbol;\\n    /// @notice Maps bridge token symbol into bridge token address\\n    mapping(string => address) public symbolToToken;\\n    /// @dev A list of all supported bridge tokens\\n    EnumerableSet.AddressSet internal _bridgeTokens;\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                              ONLY OWNER                              \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Adds a bridge token and its fee structure to the local config, if it was not added before.\\n     * @param token         \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\\n     * @return wasAdded     True, if token was added to the config\\n     */\\n    function addToken(\\n        string memory symbol,\\n        address token,\\n        TokenType tokenType,\\n        address bridgeToken,\\n        uint256 bridgeFee,\\n        uint256 minFee,\\n        uint256 maxFee\\n    ) external onlyOwner returns (bool wasAdded) {\\n        wasAdded = _addToken(symbol, token, tokenType, bridgeToken, bridgeFee, minFee, maxFee);\\n    }\\n\\n    /// @notice Adds a bunch of bridge tokens and their fee structure to the local config, if it was not added before.\\n    function addTokens(BridgeTokenConfig[] memory tokens) external onlyOwner {\\n        uint256 amount = tokens.length;\\n        for (uint256 i = 0; i < amount; ++i) {\\n            BridgeTokenConfig memory token = tokens[i];\\n            _addToken(\\n                token.id,\\n                token.token,\\n                token.tokenType,\\n                token.bridgeToken,\\n                token.bridgeFee,\\n                token.minFee,\\n                token.maxFee\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the bridge config for an already added bridge token.\\n     * @dev Will revert if token was not added before.\\n     * @param token         \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\\n     */\\n    function setTokenConfig(\\n        address token,\\n        TokenType tokenType,\\n        address bridgeToken\\n    ) external onlyOwner {\\n        require(config[token].bridgeToken != address(0), \\\"Unknown token\\\");\\n        _setTokenConfig(token, tokenType, bridgeToken);\\n    }\\n\\n    /**\\n     * @notice Updates the fee structure for an already added bridge token.\\n     * @dev Will revert if token was not added before.\\n     * @param token         \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\\n     */\\n    function setTokenFee(\\n        address token,\\n        uint256 bridgeFee,\\n        uint256 minFee,\\n        uint256 maxFee\\n    ) external onlyOwner {\\n        require(config[token].bridgeToken != address(0), \\\"Unknown token\\\");\\n        _setTokenFee(token, bridgeFee, minFee, maxFee);\\n    }\\n\\n    /**\\n     * @notice Removes tokens from the local config, and deletes the associated bridge fee structure.\\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for removing.\\n     * @param token         \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @return wasRemoved   True, if token was removed from the config\\n     */\\n    function removeToken(address token) external onlyOwner returns (bool wasRemoved) {\\n        wasRemoved = _removeToken(token);\\n    }\\n\\n    /**\\n     * @notice Removes a list of tokens from the local config, and deletes their associated bridge fee structure.\\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for removing.\\n     * @param tokens    List of \\\"end\\\" tokens, supported by SynapseBridge. These are the tokens user is receiving/sending.\\n     */\\n    function removeTokens(address[] calldata tokens) external onlyOwner {\\n        uint256 amount = tokens.length;\\n        for (uint256 i = 0; i < amount; ++i) {\\n            _removeToken(tokens[i]);\\n        }\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                                VIEWS                                 \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @notice Returns a list of all supported bridge tokens.\\n    function bridgeTokens() external view returns (address[] memory tokens) {\\n        uint256 amount = bridgeTokensAmount();\\n        tokens = new address[](amount);\\n        for (uint256 i = 0; i < amount; ++i) {\\n            tokens[i] = _bridgeTokens.at(i);\\n        }\\n    }\\n\\n    /// @notice Returns the amount of the supported bridge tokens.\\n    function bridgeTokensAmount() public view returns (uint256 amount) {\\n        amount = _bridgeTokens.length();\\n    }\\n\\n    /**\\n     * @notice Calculates a fee for bridging a token to this chain.\\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for getting a fee quote.\\n     * @param token     \\\"End\\\" token, supported by SynapseBridge. This is the token user is receiving/sending.\\n     * @param amount    Amount of tokens to bridge to this chain.\\n     */\\n    function calculateBridgeFee(address token, uint256 amount) external view returns (uint256 feeAmount) {\\n        feeAmount = _calculateBridgeFee(token, amount);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                 INTERNAL: ADD & REMOVE BRIDGE TOKENS                 \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @dev Adds a bridge token config, if it's not present and updates its fee structure.\\n    /// Child contract could implement additional logic upon adding a token.\\n    function _addToken(\\n        string memory _symbol,\\n        address token,\\n        TokenType tokenType,\\n        address bridgeToken,\\n        uint256 bridgeFee,\\n        uint256 minFee,\\n        uint256 maxFee\\n    ) internal virtual returns (bool wasAdded) {\\n        wasAdded = _bridgeTokens.add(token);\\n        if (wasAdded) {\\n            // Need to save config only once. Need to use \\\"end user\\\" address for symbol mappings.\\n            _setTokenSymbol(_symbol, token);\\n            _setTokenConfig(token, tokenType, bridgeToken);\\n            _setTokenFee(token, bridgeFee, minFee, maxFee);\\n        }\\n    }\\n\\n    /// @dev Sets the symbol for the bridge token\\n    function _setTokenSymbol(string memory symbol, address token) internal {\\n        // tokenToSymbol[token] is guaranteed to be empty, as token was just added\\n        require(bytes(symbol).length != 0, \\\"Empty symbol\\\");\\n        require(symbolToToken[symbol] == address(0), \\\"Symbol already in use\\\");\\n        symbolToToken[symbol] = token;\\n        tokenToSymbol[token] = symbol;\\n    }\\n\\n    /// @dev Updates the token config for an already known bridge token.\\n    function _setTokenConfig(\\n        address token,\\n        TokenType tokenType,\\n        address bridgeToken\\n    ) internal {\\n        // Sanity checks for the provided token values\\n        require(token != address(0) && bridgeToken != address(0), \\\"Token can't be zero address\\\");\\n        config[token] = TokenConfig(tokenType, bridgeToken);\\n    }\\n\\n    /// @dev Updates the fee structure for an already known bridge token.\\n    function _setTokenFee(\\n        address token,\\n        uint256 bridgeFee,\\n        uint256 minFee,\\n        uint256 maxFee\\n    ) internal {\\n        // Sanity checks for the provided fee values\\n        require(bridgeFee < FEE_DENOMINATOR, \\\"bridgeFee >= 100%\\\");\\n        require(minFee <= maxFee, \\\"minFee > maxFee\\\");\\n        fee[token] = FeeStructure(uint40(bridgeFee), uint104(minFee), uint112(maxFee));\\n    }\\n\\n    /// @dev Removes a bridge token config along with its fee structure.\\n    /// Child contract could implement additional logic upon removing a token.\\n    function _removeToken(address token) internal virtual returns (bool wasRemoved) {\\n        wasRemoved = _bridgeTokens.remove(token);\\n        if (wasRemoved) {\\n            string memory symbol = tokenToSymbol[token];\\n            delete tokenToSymbol[token];\\n            delete symbolToToken[symbol];\\n            delete config[token];\\n            delete fee[token];\\n        }\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                           INTERNAL: VIEWS                            \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @dev Returns the amount of tokens received after applying the bridge fee.\\n    /// Will return 0, if bridged amount is lower than a minimum bridge fee.\\n    function _calculateBridgeAmountOut(address token, uint256 amount) internal view returns (uint256 amountOut) {\\n        uint256 feeAmount = _calculateBridgeFee(token, amount);\\n        if (feeAmount < amount) {\\n            // No need for SafeMath here\\n            amountOut = amount - feeAmount;\\n        }\\n        // Return 0, if fee amount >= amount\\n    }\\n\\n    /// @dev Returns the fee for bridging a given token to this chain.\\n    function _calculateBridgeFee(address token, uint256 amount) internal view returns (uint256 feeAmount) {\\n        require(config[token].bridgeToken != address(0), \\\"Token not supported\\\");\\n        FeeStructure memory tokenFee = fee[token];\\n        feeAmount = amount.mul(tokenFee.bridgeFee).div(FEE_DENOMINATOR);\\n        if (feeAmount < tokenFee.minFee) {\\n            feeAmount = tokenFee.minFee;\\n        } else if (feeAmount > tokenFee.maxFee) {\\n            feeAmount = tokenFee.maxFee;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/router/SynapseAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/ISwapAdapter.sol\\\";\\nimport \\\"../interfaces/ISwapQuoter.sol\\\";\\nimport \\\"../interfaces/IWETH9.sol\\\";\\nimport \\\"../libraries/UniversalToken.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract SynapseAdapter is Ownable, ISwapAdapter {\\n    using SafeERC20 for IERC20;\\n    using UniversalToken for address;\\n\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                               STORAGE                                \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @notice Address of the local SwapQuoter contract\\n    ISwapQuoter public swapQuoter;\\n\\n    /// @notice Receive function to enable unwrapping ETH into this contract\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                              OWNER ONLY                              \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @notice Sets the Swap Quoter address to get the swap quotes from.\\n    function setSwapQuoter(ISwapQuoter _swapQuoter) external onlyOwner {\\n        swapQuoter = _swapQuoter;\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                          EXTERNAL FUNCTIONS                          \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Performs a tokenIn -> tokenOut swap, according to the provided params.\\n     * If tokenIn is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\\n     * If tokenIn is ERC20, the tokens should be already transferred to this contract (using `msg.value = 0`).\\n     * If tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\\n     * If tokenOut is ERC20, the tokens will be transferred to the recipient.\\n     * @dev Contracts implementing {ISwapAdapter} interface are required to enforce the above restrictions.\\n     * On top of that, they must ensure that exactly `amountOut` worth of `tokenOut` is transferred to the recipient.\\n     * Swap deadline and slippage is checked outside of this contract.\\n     * @dev Applied to SynapseAdapter only:\\n     * Use `params.pool = address(this)` for ETH handling without swaps:\\n     * 1. For wrapping ETH: tokenIn = ETH_ADDRESS, tokenOut = WETH, params.pool = address(this)\\n     * 2. For unwrapping WETH: tokenIn = WETH, tokenOut = ETH_ADDRESS, params.pool = address(this)\\n     * If `params.pool != address(this)`, and ETH_ADDRESS was supplied as tokenIn or tokenOut,\\n     * a corresponding pool token will be treated as WETH.\\n     * @param to            Address to receive the swapped token\\n     * @param tokenIn       Token to sell (use ETH_ADDRESS to start from native ETH)\\n     * @param amountIn      Amount of tokens to sell\\n     * @param tokenOut      Token to buy (use ETH_ADDRESS to end with native ETH)\\n     * @param rawParams     Additional swap parameters\\n     * @return amountOut    Amount of bought tokens\\n     */\\n    function adapterSwap(\\n        address to,\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        bytes calldata rawParams\\n    ) external payable override returns (uint256 amountOut) {\\n        // We define a few phases for the whole swap process.\\n        // (?) means the phase is optional.\\n        // (!) means the phase is mandatory.\\n\\n        // ============================== PHASE 0(!): CHECK ALL THE PARAMS =========================\\n        require(tokenIn != tokenOut, \\\"Swap tokens should differ\\\");\\n        // Decode params for swapping via a Synapse pool\\n        SynapseParams memory params = abi.decode(rawParams, (SynapseParams));\\n        // Swap pool should exist, if action other than HandleEth was requested\\n        require(params.pool != address(0) || params.action == Action.HandleEth, \\\"!pool\\\");\\n\\n        // ============================== PHASE 1(?): WRAP RECEIVED ETH ============================\\n        // tokenIn was already transferred to this contract, check if we start from native ETH\\n        if (tokenIn == UniversalToken.ETH_ADDRESS) {\\n            // Determine WETH address: this is either tokenOut (if no swap is needed),\\n            // or a pool token with index `tokenIndexFrom` (if swap is needed).\\n            tokenIn = _deriveWethAddress({token: tokenOut, params: params, isWethIn: true});\\n            // Wrap ETH into WETH and leave it in this contract\\n            _wrapETH(tokenIn, amountIn);\\n        } else {\\n            // For ERC20 tokens msg.value should be zero\\n            require(msg.value == 0, \\\"Incorrect tokenIn for ETH swap\\\");\\n        }\\n        // Either way, this contract has `amountIn` worth of `tokenIn`; tokenIn != ETH_ADDRESS\\n\\n        // ============================== PHASE 2(?): PREPARE TO UNWRAP SWAPPED WETH ===============\\n        address tokenSwapTo = tokenOut;\\n        // Check if swap to native ETH was requested\\n        if (tokenOut == UniversalToken.ETH_ADDRESS) {\\n            // Determine WETH address: this is either tokenIn (if no swap is needed),\\n            // or a pool token with index `tokenIndexTo` (if swap is needed).\\n            tokenSwapTo = _deriveWethAddress({token: tokenIn, params: params, isWethIn: false});\\n        }\\n        // Either way, we need to perform tokenIn -> tokenSwapTo swap.\\n        // Then we need to send tokenOut to the recipient.\\n        // The last step includes WETH unwrapping, if tokenOut is ETH_ADDRESS\\n\\n        // ============================== PHASE 3(?): PERFORM A REQUESTED SWAP =====================\\n        // Determine if we need to perform a swap\\n        if (params.action == Action.HandleEth) {\\n            // If no swap is required, amountOut doesn't change\\n            amountOut = amountIn;\\n        } else {\\n            // Approve token for spending if needed\\n            tokenIn.universalApproveInfinity(params.pool);\\n            if (params.action == Action.Swap) {\\n                // Perform a swap through the pool\\n                amountOut = _swap(ISwap(params.pool), params, amountIn, tokenSwapTo);\\n            } else if (params.action == Action.AddLiquidity) {\\n                // Add liquidity to the pool\\n                amountOut = _addLiquidity(ISwap(params.pool), params, amountIn, tokenSwapTo);\\n            } else {\\n                // Remove liquidity to the pool\\n                amountOut = _removeLiquidity(ISwap(params.pool), params, amountIn, tokenSwapTo);\\n            }\\n        }\\n        // Either way, this contract has `amountOut` worth of `tokenSwapTo`\\n\\n        // ============================== PHASE 4(?): UNWRAP SWAPPED WETH ==========================\\n        // Check if swap to native ETH was requested\\n        if (tokenOut == UniversalToken.ETH_ADDRESS) {\\n            // We stored WETH address in `tokenSwapTo` previously, let's unwrap it\\n            _unwrapETH(tokenSwapTo, amountOut);\\n        }\\n        // Either way, we need to transfer `amountOut` worth of `tokenOut`\\n\\n        // ============================== PHASE 5(!): TRANSFER SWAPPED TOKENS ======================\\n        tokenOut.universalTransfer(to, amountOut);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                            VIEWS: QUOTES                             \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Finds the best pool for tokenIn -> tokenOut swap from the list of supported pools.\\n     * Returns the `SwapQuery` struct, that can be used on SynapseRouter.\\n     * minAmountOut and deadline fields will need to be adjusted based on the swap settings.\\n     */\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (SwapQuery memory) {\\n        // All actions are allowed by default\\n        LimitedToken memory _tokenIn = LimitedToken(ActionLib.allActions(), tokenIn);\\n        return swapQuoter.getAmountOut(_tokenIn, tokenOut, amountIn);\\n    }\\n\\n    /**\\n     * @notice Returns the exact quote for adding liquidity to a given pool\\n     * in a form of a single token.\\n     * @param pool      The pool to add tokens to\\n     * @param amounts   An array of token amounts to deposit.\\n     *                  The amount should be in each pooled token's native precision.\\n     *                  If a token charges a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return LP token amount the user will receive\\n     */\\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256) {\\n        return swapQuoter.calculateAddLiquidity(pool, amounts);\\n    }\\n\\n    /**\\n     * @notice Returns the exact quote for swapping between two given tokens.\\n     * @param pool              The pool to use for the swap\\n     * @param tokenIndexFrom    The token the user wants to sell\\n     * @param tokenIndexTo      The token the user wants to buy\\n     * @param dx                The amount of tokens the user wants to sell. If the token charges a fee on transfers,\\n     *                          use the amount that gets transferred after the fee.\\n     * @return amountOut        amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        address pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut) {\\n        amountOut = swapQuoter.calculateSwap(pool, tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    /**\\n     * @notice Returns the exact quote for withdrawing pools tokens in a balanced way.\\n     * @param pool          The pool to withdraw tokens from\\n     * @param amount        The amount of LP tokens that would be burned on withdrawal\\n     * @return amountsOut   Array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(address pool, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = swapQuoter.calculateRemoveLiquidity(pool, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the exact quote for withdrawing a single pool token.\\n     * @param pool          The pool to withdraw a token from\\n     * @param tokenAmount   The amount of LP token to burn\\n     * @param tokenIndex    Index of which token will be withdrawn\\n     * @return amountOut    Calculated amount of underlying token available to withdraw\\n     */\\n    function calculateWithdrawOneToken(\\n        address pool,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 amountOut) {\\n        amountOut = swapQuoter.calculateWithdrawOneToken(pool, tokenAmount, tokenIndex);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                             VIEWS: POOLS                             \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Returns a list of all supported pools.\\n     */\\n    function allPools() public view returns (Pool[] memory pools) {\\n        pools = swapQuoter.allPools();\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens the given pool supports and the pool's LP token.\\n     */\\n    function poolInfo(address pool) public view returns (uint256, address) {\\n        return swapQuoter.poolInfo(pool);\\n    }\\n\\n    /**\\n     * @notice Returns a list of pool tokens for the given pool.\\n     */\\n    function poolTokens(address pool) public view returns (PoolToken[] memory tokens) {\\n        tokens = swapQuoter.poolTokens(pool);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of supported pools.\\n     */\\n    function poolsAmount() public view returns (uint256 amount) {\\n        amount = swapQuoter.poolsAmount();\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                           INTERNAL HELPERS                           \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Performs a swap through the given pool.\\n     * The pool token is already approved for spending.\\n     */\\n    function _swap(\\n        ISwap pool,\\n        SynapseParams memory params,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) internal returns (uint256 amountOut) {\\n        // tokenOut should match the \\\"swap to\\\" token\\n        require(pool.getToken(params.tokenIndexTo) == IERC20(tokenOut), \\\"!tokenOut\\\");\\n        // amountOut and deadline are not checked in SwapAdapter\\n        amountOut = pool.swap({\\n            tokenIndexFrom: params.tokenIndexFrom,\\n            tokenIndexTo: params.tokenIndexTo,\\n            dx: amountIn,\\n            minDy: 0,\\n            deadline: MAX_UINT\\n        });\\n    }\\n\\n    /**\\n     * @notice Adds liquidity in a form of a single token to the given pool.\\n     * The pool token is already approved for spending.\\n     */\\n    function _addLiquidity(\\n        ISwap pool,\\n        SynapseParams memory params,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) internal returns (uint256 amountOut) {\\n        (uint256 tokens, address lpToken) = swapQuoter.poolInfo(address(pool));\\n        // tokenOut should match the LP token\\n        require(tokenOut == lpToken, \\\"!tokenOut\\\");\\n        uint256[] memory amounts = new uint256[](tokens);\\n        amounts[params.tokenIndexFrom] = amountIn;\\n        // amountOut and deadline are not checked in SwapAdapter\\n        amountOut = pool.addLiquidity({amounts: amounts, minToMint: 0, deadline: MAX_UINT});\\n    }\\n\\n    /**\\n     * @notice Removes liquidity in a form of a single token from the given pool.\\n     * The pool LP token is already approved for spending.\\n     */\\n    function _removeLiquidity(\\n        ISwap pool,\\n        SynapseParams memory params,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) internal returns (uint256 amountOut) {\\n        // tokenOut should match the \\\"swap to\\\" token\\n        require(pool.getToken(params.tokenIndexTo) == IERC20(tokenOut), \\\"!tokenOut\\\");\\n        // amountOut and deadline are not checked in SwapAdapter\\n        amountOut = pool.removeLiquidityOneToken({\\n            tokenAmount: amountIn,\\n            tokenIndex: params.tokenIndexTo,\\n            minAmount: 0,\\n            deadline: MAX_UINT\\n        });\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                         INTERNAL: WETH LOGIC                         \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @dev Derives WETH address from swap parameters.\\n    function _deriveWethAddress(\\n        address token,\\n        SynapseParams memory params,\\n        bool isWethIn\\n    ) internal view returns (address weth) {\\n        if (params.action == Action.HandleEth) {\\n            // If we only need to wrap/unwrap ETH, WETH address should be specified as the other token\\n            weth = token;\\n        } else {\\n            // Otherwise, we need to get WETH address from the liquidity pool\\n            weth = address(ISwap(params.pool).getToken(isWethIn ? params.tokenIndexFrom : params.tokenIndexTo));\\n        }\\n    }\\n\\n    /// @dev Wraps ETH into WETH.\\n    function _wrapETH(address weth, uint256 amount) internal {\\n        require(msg.value == amount, \\\"!msg.value\\\");\\n        // Deposit in order to have WETH in this contract\\n        IWETH9(payable(weth)).deposit{value: amount}();\\n    }\\n\\n    /// @dev Unwraps WETH into ETH.\\n    function _unwrapETH(address weth, uint256 amount) internal {\\n        // Withdraw ETH to this contract\\n        IWETH9(payable(weth)).withdraw(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/router/SynapseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/ISynapseBridge.sol\\\";\\nimport \\\"./LocalBridgeConfig.sol\\\";\\nimport \\\"./SynapseAdapter.sol\\\";\\nimport \\\"../utils/MulticallView.sol\\\";\\n\\n/**\\n * @notice SynapseRouter contract that can be used together with SynapseBridge on any chain.\\n * On every supported chain:\\n * - SynapseRouter and SwapQuoter contracts need to be deployed.\\n * - Chain pools that are present in the global BridgeConfig should be added to SwapQuoter.\\n * - All supported bridge tokens should be added to SynapseRouter contract.\\n * - router.setSwapQuoter(swapQuoter) should be executed to link these contracts.\\n *\\n * @dev Bridging workflow with SynapseRouter contract.\\n * Initial assumptions:\\n * - `routerOrigin` and `routerDest` are SynapseRouter deployments on origin and destination chain respectively.\\n * - User wants to send `tokenIn` on origin chain, and receive `tokenOut` on destination chain.\\n * - The amount of `tokenIn` tokens user wishes to send is `amountIn`.\\n * - User wants to receives tokens to `userDest` address on destination chain.\\n * - User has no idea what bridge tokens are supported on origin and destination chains.\\n *\\n * Under the hood, the cross-chain swap from `tokenIn` to `tokenOut` is:\\n * 1. [*] `tokenIn` gets swapped to `bridgeToken` on origin chain. `bridgeToken` is a token supported by Synapse:Bridge.\\n * 2. `bridgeToken` gets bridged from origin to destination chain\\n * 3. [**] `bridgeToken` gets swapped to `tokenOut` on destination chain.\\n * 4. `tokenOut` is transferred to the user on destination chain.\\n * [*] : \\\"origin swap\\\" is skipped, if `tokenIn == bridgeToken` on origin chain.\\n * [**]: \\\"destination swap\\\" is skipped, if `tokenOut == bridgeToken` on destination chain.\\n *\\n * Following set of actions is required (be aware, provided code is a pseudo code):\\n * 1. Determine the set of bridge tokens that could fulfill \\\"receive tokenOut on destination chain\\\":\\n *      // This will return a list of (string symbol, address token) tuples.\\n *      bridgeTokens = routerDest.getConnectedBridgeTokens(tokenOut);\\n * 2. Get the list of symbols for these tokens\\n *      symbols = bridgeTokens.map(token => token.symbol);\\n * 3. Get the list of structs with instructions for possible \\\"origin swap\\\":\\n *      // This will return queries for all possible (tokenIn -> symbols[i]) swaps\\n *      originQueries = routerOrigin.getOriginAmountOut(tokenIn, symbols, amountIn);\\n * 4. Form the list of requests for the \\\"destination swap\\\" quotes:\\n *      // Use symbols[i] and originQueries[i].minAmountOut to form a \\\"request\\\":\\n *      requests = zipWith(symbols, originQueries, (symbol, query) => { return [symbol, query.minAmountOut] });\\n * 5. Get the list of structs with instructions for possible \\\"destination swap\\\":\\n *      // This will return quotes for all (symbols[i] => tokenOut) swaps\\n *      // This will also take into account the bridge fee for getting a token to destination chain\\n *      destQueries = routerDest.getDestinationAmountOut(requests, tokenOut);\\n * 6. Pick any pair of (originQuery, destQuery):\\n *      // For instance pick the one with the best destQuery.minAmountOut\\n *      maxIndex = destQueries.indexOf(destQueries.maxBy, (query) => { return query.minAmountOut });\\n *      originQuery = originQueries[maxIndex];\\n *      // destQuery.minAmountOut is the full quote for tokenIn => tokenOut cross-chain swap\\n *      destQuery = destQueries[maxIndex];\\n * 7. Apply slippage, and set deadlines as per user settings:\\n *      originQuery = applyUserSettings(originQuery);\\n *      destQuery = applyUserSettings(destQuery);\\n * 8. Call SynapseRouter using the obtained structs:\\n *      // Check if user wants to send native ETH\\n *      amountETH = (tokenIn == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ? amountIn : 0;\\n *      routerOrigin.bridge{value: amountETH}(userDest, chainIdDest, tokenIn, amountIn, originQuery, destQuery);\\n */\\ncontract SynapseRouter is LocalBridgeConfig, SynapseAdapter, MulticallView {\\n    // SynapseRouter is also the Adapter for the Synapse pools (this reduces the amount of token transfers).\\n    // SynapseRouter address will be used as swapAdapter in SwapQueries returned by a local SwapQuoter.\\n\\n    using SafeERC20 for IERC20;\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                        CONSTANTS & IMMUTABLES                        \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @notice Synapse:Bridge address\\n    ISynapseBridge public immutable synapseBridge;\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                      CONSTRUCTOR & INITIALIZER                       \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Deploys a Synapse Router implementation, saves local Synapse:Bridge address and transfers ownership.\\n     */\\n    constructor(address _synapseBridge, address owner_) public {\\n        synapseBridge = ISynapseBridge(_synapseBridge);\\n        transferOwnership(owner_);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                              OWNER ONLY                              \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Sets a custom allowance for the given token.\\n     * @dev To be used for the wrapper token setups.\\n     */\\n    function setAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeApprove(spender, amount);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                            BRIDGE & SWAP                             \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Initiate a bridge transaction with an optional swap on both origin and destination chains.\\n     * @dev Note that method is payable.\\n     * If token is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\\n     * If token is ERC20, the tokens will be pulled from msg.sender (use `msg.value = 0`).\\n     * Make sure to approve this contract for spending `token` beforehand.\\n     * originQuery.tokenOut should never be ETH_ADDRESS, bridge only works with ERC20 tokens.\\n     *\\n     * `token` is always a token user is sending. In case token requires a wrapper token to be bridge,\\n     * use underlying address for `token` instead of the wrapper one.\\n     *\\n     * `originQuery` contains instructions for the swap on origin chain. As above, originQuery.tokenOut\\n     * should always use the underlying address. In other words, the concept of wrapper token is fully\\n     * abstracted away from the end user.\\n     *\\n     * `originQuery` is supposed to be fetched using SynapseRouter.getOriginAmountOut().\\n     * Alternatively one could use an external adapter for more complex swaps on the origin chain.\\n     *\\n     * `destQuery` is supposed to be fetched using SynapseRouter.getDestinationAmountOut().\\n     * Complex swaps on destination chain are not supported for the time being.\\n     * Check contract description above for more details.\\n     *\\n     * @param to            Address to receive tokens on destination chain\\n     * @param chainId       Destination chain id\\n     * @param token         Initial token for the bridge transaction to be pulled from the user\\n     * @param amount        Amount of the initial tokens for the bridge transaction\\n     * @param originQuery   Origin swap query. Empty struct indicates no swap is required\\n     * @param destQuery     Destination swap query. Empty struct indicates no swap is required\\n     */\\n    function bridge(\\n        address to,\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        SwapQuery memory originQuery,\\n        SwapQuery memory destQuery\\n    ) external payable {\\n        if (_hasAdapter(originQuery)) {\\n            // Perform a swap using the swap adapter, transfer the swapped tokens to this contract\\n            (token, amount) = _adapterSwap(address(this), token, amount, originQuery);\\n        } else {\\n            // Pull initial token from the user to this contract\\n            _pullToken(address(this), token, amount);\\n        }\\n        // Either way, this contract has `amount` worth of `token`\\n        TokenConfig memory _config = config[token];\\n        require(_config.bridgeToken != address(0), \\\"Token not supported\\\");\\n        token = _config.bridgeToken;\\n        // Decode params for swapping via a Synapse pool on the destination chain, if they were requested.\\n        SynapseParams memory destParams;\\n        if (_hasAdapter(destQuery)) destParams = abi.decode(destQuery.rawParams, (SynapseParams));\\n        // Check if Swap/RemoveLiquidity Action on destination chain is required.\\n        // Swap adapter needs to be specified.\\n        // HandleETH action is done automatically by SynapseBridge.\\n        if (_hasAdapter(destQuery) && destParams.action != Action.HandleEth) {\\n            if (_config.tokenType == TokenType.Deposit) {\\n                require(destParams.action == Action.Swap, \\\"Unsupported dest action\\\");\\n                // Case 1: token needs to be deposited on origin chain.\\n                // We need to perform AndSwap() on destination chain.\\n                synapseBridge.depositAndSwap({\\n                    to: to,\\n                    chainId: chainId,\\n                    token: IERC20(token),\\n                    amount: amount,\\n                    tokenIndexFrom: destParams.tokenIndexFrom,\\n                    tokenIndexTo: destParams.tokenIndexTo,\\n                    minDy: destQuery.minAmountOut,\\n                    deadline: destQuery.deadline\\n                });\\n            } else if (destParams.action == Action.Swap) {\\n                // Case 2: token needs to be redeemed on origin chain.\\n                // We need to perform AndSwap() on destination chain.\\n                synapseBridge.redeemAndSwap({\\n                    to: to,\\n                    chainId: chainId,\\n                    token: IERC20(token),\\n                    amount: amount,\\n                    tokenIndexFrom: destParams.tokenIndexFrom,\\n                    tokenIndexTo: destParams.tokenIndexTo,\\n                    minDy: destQuery.minAmountOut,\\n                    deadline: destQuery.deadline\\n                });\\n            } else {\\n                require(destParams.action == Action.RemoveLiquidity, \\\"Unsupported dest action\\\");\\n                // Case 3: token needs to be redeemed on origin chain.\\n                // We need to perform AndRemove() on destination chain.\\n                synapseBridge.redeemAndRemove({\\n                    to: to,\\n                    chainId: chainId,\\n                    token: IERC20(token),\\n                    amount: amount,\\n                    liqTokenIndex: destParams.tokenIndexTo,\\n                    liqMinAmount: destQuery.minAmountOut,\\n                    liqDeadline: destQuery.deadline\\n                });\\n            }\\n        } else {\\n            if (_config.tokenType == TokenType.Deposit) {\\n                // Case 1 (Deposit): token needs to be deposited on origin chain\\n                synapseBridge.deposit(to, chainId, IERC20(token), amount);\\n            } else {\\n                // Case 2 (Redeem): token needs to be redeemed on origin chain\\n                synapseBridge.redeem(to, chainId, IERC20(token), amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Perform a swap using the supplied parameters.\\n     * @dev Note that method is payable.\\n     * If token is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\\n     * If token is ERC20, the tokens will be pulled from msg.sender (use `msg.value = 0`).\\n     * Make sure to approve this contract for spending `token` beforehand.\\n     * If query.tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\\n     * If query.tokenOut is ERC20, the tokens will be transferred to the recipient.\\n     * @param to            Address to receive swapped tokens\\n     * @param token         Token to swap\\n     * @param amount        Amount of tokens to swap\\n     * @param query         Query with the swap parameters (see BridgeStructs.sol)\\n     * @return amountOut    Amount of swapped tokens received by the user\\n     */\\n    function swap(\\n        address to,\\n        address token,\\n        uint256 amount,\\n        SwapQuery memory query\\n    ) external payable returns (uint256 amountOut) {\\n        require(to != address(0), \\\"!recipient: zero address\\\");\\n        require(to != address(this), \\\"!recipient: router address\\\");\\n        require(_hasAdapter(query), \\\"!swapAdapter\\\");\\n        // Perform a swap through the Adapter. Adapter will be the one handling ETH/WETH interactions.\\n        (, amountOut) = _adapterSwap(to, token, amount, query);\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                         VIEWS: BRIDGE QUOTES                         \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Finds the best path between `tokenIn` and every supported bridge token from the given list,\\n     * treating the swap as \\\"origin swap\\\", without putting any restrictions on the swap.\\n     * @dev Will NOT revert if any of the tokens are not supported, instead will return an empty query for that symbol.\\n     * Check (query.minAmountOut != 0): this is true only if the swap is possible and bridge token is supported.\\n     * The returned queries with minAmountOut != 0 could be used as `originQuery` with SynapseRouter.\\n     * Note: it is possible to form a SwapQuery off-chain using alternative SwapAdapter for the origin swap.\\n     * @param tokenIn       Initial token that user wants to bridge/swap\\n     * @param tokenSymbols  List of symbols representing bridge tokens\\n     * @param amountIn      Amount of tokens user wants to bridge/swap\\n     * @return originQueries    List of structs that could be used as `originQuery` in SynapseRouter.\\n     *                          minAmountOut and deadline fields will need to be adjusted based on the user settings.\\n     */\\n    function getOriginAmountOut(\\n        address tokenIn,\\n        string[] memory tokenSymbols,\\n        uint256 amountIn\\n    ) external view returns (SwapQuery[] memory originQueries) {\\n        uint256 length = tokenSymbols.length;\\n        originQueries = new SwapQuery[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            // Check if token with given symbol is supported on this chain\\n            address bridgeToken = symbolToToken[tokenSymbols[i]];\\n            // Skip not supported tokens\\n            if (bridgeToken == address(0)) continue;\\n            // Every possible action is supported for origin swap\\n            LimitedToken memory _tokenIn = LimitedToken(ActionLib.allActions(), tokenIn);\\n            originQueries[i] = swapQuoter.getAmountOut(_tokenIn, bridgeToken, amountIn);\\n        }\\n    }\\n\\n    /**\\n     * @notice Finds the best path between every supported bridge token from the given list and `tokenOut`,\\n     * treating the swap as \\\"destination swap\\\", limiting possible actions to those available for every bridge token.\\n     * @dev Will NOT revert if any of the tokens are not supported, instead will return an empty query for that symbol.\\n     * Note: it is NOT possible to form a SwapQuery off-chain using alternative SwapAdapter for the destination swap.\\n     * For the time being, only swaps through the Synapse-supported pools are available on destination chain.\\n     * @param requests  List of structs with following information:\\n     *                  - symbol: unique token ID consistent among all chains\\n     *                  - amountIn: amount of bridge token to start with, before the bridge fee is applied\\n     * @param tokenOut  Token user wants to receive on destination chain\\n     * @return destQueries  List of structs that could be used as `destQuery` in SynapseRouter.\\n     *                      minAmountOut and deadline fields will need to be adjusted based on the user settings.\\n     */\\n    function getDestinationAmountOut(DestRequest[] memory requests, address tokenOut)\\n        external\\n        view\\n        returns (SwapQuery[] memory destQueries)\\n    {\\n        uint256 length = requests.length;\\n        destQueries = new SwapQuery[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            address token = symbolToToken[requests[i].symbol];\\n            // Skip if token is not supported\\n            if (token == address(0)) continue;\\n            // token is confirmed to be a supported bridge token at this point\\n            uint256 amountIn = _calculateBridgeAmountOut(token, requests[i].amountIn);\\n            // Skip if fee is greater than amountIn\\n            if (amountIn == 0) continue;\\n            TokenType bridgeTokenType = config[token].tokenType;\\n            // See what kind of \\\"Actions\\\" are available for the given bridge token:\\n            LimitedToken memory tokenIn = LimitedToken(_bridgeTokenActions(bridgeTokenType), token);\\n            destQueries[i] = swapQuoter.getAmountOut(tokenIn, tokenOut, amountIn);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the list of all bridge tokens (and their symbols), such that destination swap\\n     * from a bridge token to `tokenOut` is possible.\\n     * @param tokenOut  Token address to swap to on destination chain\\n     * @return tokens   List of structs with following information:\\n     *                  - symbol: unique token ID consistent among all chains\\n     *                  - token: bridge token address\\n     */\\n    function getConnectedBridgeTokens(address tokenOut) external view returns (BridgeToken[] memory tokens) {\\n        uint256 amount = bridgeTokensAmount();\\n        // Try connecting every supported bridge token to tokenOut\\n        LimitedToken[] memory allTokens = new LimitedToken[](amount);\\n        for (uint256 i = 0; i < amount; ++i) {\\n            address token = _bridgeTokens.at(i);\\n            // Make sure only \\\"supported actions\\\" for destination swap are included\\n            allTokens[i].actionMask = _bridgeTokenActions(config[token].tokenType);\\n            allTokens[i].token = token;\\n        }\\n        (uint256 amountFound, bool[] memory isConnected) = swapQuoter.findConnectedTokens(allTokens, tokenOut);\\n        tokens = new BridgeToken[](amountFound);\\n        // This will now track amount of found connected tokens so far during the next for loop\\n        amountFound = 0;\\n        for (uint256 i = 0; i < amount; ++i) {\\n            if (isConnected[i]) {\\n                // Record the connected token\\n                address token = allTokens[i].token;\\n                tokens[amountFound].symbol = tokenToSymbol[token];\\n                tokens[amountFound].token = token;\\n                // Increase the counter\\n                ++amountFound;\\n            }\\n        }\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                            INTERNAL: SWAP                            \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /**\\n     * @notice Performs a swap from `token` using the provided query,\\n     * which includes the swap adapter, tokenOut and the swap execution parameters.\\n     * Swapped token is transferred to the specified recipient.\\n     */\\n    function _adapterSwap(\\n        address recipient,\\n        address token,\\n        uint256 amount,\\n        SwapQuery memory query\\n    ) internal returns (address tokenOut, uint256 amountOut) {\\n        // First, check the deadline for the swap\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= query.deadline, \\\"Deadline not met\\\");\\n        // Pull initial token from the user to specified swap adapter\\n        _pullToken(query.swapAdapter, token, amount);\\n        tokenOut = query.tokenOut;\\n        // If swapAdapter is this contract (which is the case for the supported Synapse pools),\\n        // this will be an external call to address(this), which we are fine with.\\n        // The external call is used because additional Adapters will be established in the future.\\n        // We are forwarding `msg.value` and are expecting the Adapter to handle ETH/WETH interactions.\\n        amountOut = ISwapAdapter(query.swapAdapter).adapterSwap{value: msg.value}({\\n            to: recipient,\\n            tokenIn: token,\\n            amountIn: amount,\\n            tokenOut: tokenOut,\\n            rawParams: query.rawParams\\n        });\\n        // We can trust the supported adapters to return the exact swapped amount\\n        // Finally, check that the recipient received at least as much as they wanted\\n        require(amountOut >= query.minAmountOut, \\\"Swap didn't result in min tokens\\\");\\n    }\\n\\n    /**\\n     * Pulls a requested token from the user to the requested recipient.\\n     * Or, if msg.value was provided, check that ETH_ADDRESS was used and msg.value is correct.\\n     */\\n    function _pullToken(\\n        address recipient,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (msg.value == 0) {\\n            // Token needs to be pulled only if msg.value is zero\\n            // This way user can specify WETH as the origin asset\\n            IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\\n        } else {\\n            // Otherwise, we need to check that ETH was specified\\n            require(token == UniversalToken.ETH_ADDRESS, \\\"!eth\\\");\\n            // And that amount matches msg.value\\n            require(msg.value == amount, \\\"!msg.value\\\");\\n            // We will forward msg.value in the external call to the recipient\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the swap adapter was specified in the query.\\n     * Query without a swap adapter specifies that no action needs to be taken.\\n     */\\n    function _hasAdapter(SwapQuery memory query) internal pure returns (bool) {\\n        return query.swapAdapter != address(0);\\n    }\\n\\n    function _bridgeTokenActions(TokenType tokenType) internal pure returns (uint256 actionMask) {\\n        if (tokenType == TokenType.Redeem) {\\n            // For tokens that are minted on destination chain\\n            // possible bridge functions are mint() and mintAndSwap(). Thus:\\n            // Swap: available via mintAndSwap()\\n            // (Add/Remove)Liquidity is unavailable\\n            // HandleETH is unavailable, as WETH could only be withdrawn by SynapseBridge\\n            actionMask = ActionLib.mask(Action.Swap);\\n        } else {\\n            // For tokens that are withdrawn on destination chain\\n            // possible bridge functions are withdraw() and withdrawAndRemove().\\n            // Swap/AddLiquidity: not available\\n            // RemoveLiquidity: available via withdrawAndRemove()\\n            // HandleETH: available via withdraw(). SwapQuoter will check if the bridge token is WETH or not.\\n            actionMask = ActionLib.mask(Action.RemoveLiquidity, Action.HandleEth);\\n        }\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557*\\\\\\n    \u258f*\u2551                 INTERNAL: ADD & REMOVE BRIDGE TOKENS                 \u2551*\u2595\\n    \\\\*\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /// @dev Adds a bridge token config and its fee structure, if it's not present.\\n    /// If a token was added, approves it for spending by SynapseBridge.\\n    function _addToken(\\n        string memory symbol,\\n        address token,\\n        TokenType tokenType,\\n        address bridgeToken,\\n        uint256 bridgeFee,\\n        uint256 minFee,\\n        uint256 maxFee\\n    ) internal override returns (bool wasAdded) {\\n        // Add token and its fee structure\\n        wasAdded = LocalBridgeConfig._addToken(symbol, token, tokenType, bridgeToken, bridgeFee, minFee, maxFee);\\n        if (wasAdded) {\\n            // Approve token only if it wasn't previously added\\n            // Underlying token should always implement allowance(), approve()\\n            if (token == bridgeToken) token.universalApproveInfinity(address(synapseBridge));\\n            // Use {setAllowance} for custom wrapper token setups\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/utils/MulticallView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Multicall utility for view/pure functions. Inspired by Multicall3:\\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\\nabstract contract MulticallView {\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    /// @notice Aggregates a few static calls to this contract into one multicall.\\n    /// Any of the calls could revert without having impact on other calls. That includes the scenario,\\n    /// where a data for state modifying call was supplied, which would lead to one of the calls being reverted.\\n    function multicallView(bytes[] memory data) external view returns (Result[] memory callResults) {\\n        uint256 amount = data.length;\\n        callResults = new Result[](amount);\\n        for (uint256 i = 0; i < amount; ++i) {\\n            // We perform a static call to ourselves here. This will record `success` as false,\\n            // should the static call be reverted. The other calls will still be performed regardless.\\n            // Note: `success` will be set to false, if data for state modifying call was supplied.\\n            // No data will be modified, as this is a view function.\\n            (callResults[i].success, callResults[i].returnData) = address(this).staticcall(data[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@boringcrypto/=node_modules/@boringcrypto/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"sol-explore/=node_modules/sol-explore/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"synthetix/=node_modules/synthetix/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_synapseBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"name\":\"adapterSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum LocalBridgeConfig.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAdded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"enum LocalBridgeConfig.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"internalType\":\"struct LocalBridgeConfig.BridgeTokenConfig[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct PoolToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery\",\"name\":\"originQuery\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery\",\"name\":\"destQuery\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateWithdrawOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"enum LocalBridgeConfig.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"bridgeFee\",\"type\":\"uint40\"},{\"internalType\":\"uint104\",\"name\":\"minFee\",\"type\":\"uint104\"},{\"internalType\":\"uint112\",\"name\":\"maxFee\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getConnectedBridgeTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct BridgeToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct DestRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getDestinationAmountOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery[]\",\"name\":\"destQueries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"tokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getOriginAmountOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery[]\",\"name\":\"originQueries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallView\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MulticallView.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWeth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct PoolToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasRemoved\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapQuoter\",\"name\":\"_swapQuoter\",\"type\":\"address\"}],\"name\":\"setSwapQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum LocalBridgeConfig.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"rawParams\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapQuoter\",\"outputs\":[{\"internalType\":\"contract ISwapQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbolToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synapseBridge\",\"outputs\":[{\"internalType\":\"contract ISynapseBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SynapseRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d123f70ae324d34a9e76b67a27bf77593ba8749f000000000000000000000000b73acb429ba868984c0236bdf940d4fe1e643f27", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}