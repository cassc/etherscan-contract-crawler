{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// powered by Shah BHUDHAI\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IBEP20Metadata is IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function softcapDeadline() external view returns (uint256);\r\n    function softCapTokens() external view returns (uint256);\r\n    function hardCapTokens() external view returns (uint256);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract BMONEY is Context, IBEP20, IBEP20Metadata {\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _deposits;\r\n\r\n    address payable _owner;\r\n    uint256 private _totalSupply;\r\n    uint256 private _softCapTokens;\r\n    uint256 private _hardCapTokens;\r\n    uint256 private _totalSold;\r\n\r\n    bool internal marketing = false;\r\n    bool internal developers =false;\r\n    bool internal seed_investors = false;\r\n    bool internal wei_dai =false;\r\n    bool internal founder = false;\r\n    bool internal DexPool = false;\r\n    bool internal Salefinished = false;\r\n\r\n    string private _name;\r\n    uint256 private _softcapDeadline;\r\n    uint256 private _burningTime;\r\n    string private _symbol;\r\n    uint256 startOfSalesPeriod;\r\n\r\n    constructor (address payable owner_) {\r\n        _name = \"B-MONEY\";\r\n        _symbol = \"BMNY\";\r\n        _totalSupply = 808400e8;\r\n        _softCapTokens = 118220e8;\r\n        _hardCapTokens = 788190e8;\r\n        _owner =  owner_;\r\n        startOfSalesPeriod =1624863600;\r\n        _softcapDeadline = startOfSalesPeriod + 7889229;\r\n        _burningTime = startOfSalesPeriod+ 34186659;\r\n    }\r\n\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    function softcapDeadline() public view virtual override returns (uint256) {\r\n        return _softcapDeadline;\r\n    }\r\n\r\n    function softCapTokens() public view virtual override returns (uint256) {\r\n        return _softCapTokens;\r\n    }\r\n\r\n    function hardCapTokens() public view virtual override returns (uint256) {\r\n        return _hardCapTokens;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 amount = msg.value*50/1e10;\r\n        require(block.timestamp <= startOfSalesPeriod + 31556926 ,\"Sale finished \");\r\n        require(block.timestamp >= startOfSalesPeriod,\"Sale period did not started\");\r\n        require(_totalSold <=788190e8, \"Sold out\");\r\n        require(_totalSold + amount <=788190e8, \"Not enough tokens left\");\r\n        require(_balances[msg.sender]+amount<=500e8, \"You reached the personal cap\");\r\n        require(msg.value <= 10e18, \"Maximum buying is limited to 10 bnb\");\r\n        _totalSold=_totalSold+amount;\r\n        _mint(msg.sender,amount);\r\n        _deposits[msg.sender] = _deposits[msg.sender] + msg.value;\r\n    }\r\n\r\n    //The contract stores funds and gives refund option to the investor if soft cap not reached\r\n\t//For refund, users must have tokens in their wallet which they bought\r\n\t//If user refunds, tokens will be burned and deducted from the total supply\r\n\r\n    function refundNBurn (address payable recipient) external{\r\n        require(msg.sender == recipient , \"Check the address\");\r\n        require((_totalSold < 118220e8) , \"Soft cap reached\");\r\n        require(block.timestamp > startOfSalesPeriod + 7889229 ,\"Time limit not reached. Wait until soft cap deadline\");\r\n        require(_deposits[msg.sender]>0, \"You do not have tokens to refund\");\r\n        require(_deposits[msg.sender]*50 ==_balances[msg.sender], \"Please check your token balance\");\r\n        recipient.transfer(_deposits[msg.sender]);\r\n        _deposits[msg.sender]=0;\r\n        _burn(msg.sender, _balances[msg.sender]);\r\n        _balances[msg.sender]=0;\r\n     }\r\n\r\n    //There are theree ways to create tokens; minting by using the buy function, \r\n\t//sending direct bnb to the contract and claiming locked tokens.\r\n\t//The personal cap is 500 tokens. The token price for the ICO period is 0,02 bnb.\r\n\t//If total sold reaches hard cap, buy function will not mint tokens\r\n\r\n     function buy()payable public returns(bool){\r\n         uint256 amount = msg.value*50/1e10; \r\n         require(block.timestamp <= startOfSalesPeriod + 31556926 ,\"Sale finished \"); \r\n         require(block.timestamp >= startOfSalesPeriod,\"Sale period did not started \");\r\n         require(_totalSold <=788190e8, \"Sold out\"); \r\n         require(_totalSold + amount <=788190e8, \"Not enough token left\"); \r\n         require(_balances[msg.sender]+amount<=500e8, \"You reached the personal cap\"); \r\n         require(msg.value <= 10e18, \"Maximum buying is limited to 10 bnb\"); \r\n         _totalSold=_totalSold+amount; \r\n         _mint(msg.sender,amount); \r\n         _deposits[msg.sender] = _deposits[msg.sender] + msg.value; \r\n         return (true);\r\n    \r\n    }\r\n\r\n     function finalizeSale() public returns(bool){\r\n         require(msg.sender == _owner , \"NOT Accessable\"); \r\n         uint256 amount = _hardCapTokens - _totalSold; \r\n         require(amount>0, \"Hardcap reached\"); \r\n         require(block.timestamp > startOfSalesPeriod + 31556926 && Salefinished,\"Sale not finished \"); \r\n         require (_totalSold <=788190e8, \"Sold out\"); \r\n         _totalSold=_totalSold+amount; \r\n         _mint(0x3737373737373737373737373737373737373737,amount); \r\n         Salefinished=true; \r\n         return (true);\r\n     }\r\n\r\n    //Burn function is especially designed for the tokens of Wei DAI, if he did not claimed before lock time + 1 months\r\n\t//his tokens are going to be burned and deducted from total supply.\r\n\t//Address 0x3737373737373737373737373737373737373737 will be used as a stove\r\n\t//If a user wants to burn tokens, they will send tokens to stove\r\n\t//Once a month, this function will be called and burn tokens inside.\r\n    function stove() public virtual {\r\n     require(block.timestamp > _burningTime ,\"Burning time not reached, tokens are staying in the stove\");\r\n        if (_balances[0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B]>0) {\r\n            _burn(0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B, _balances[0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B]);\r\n            _burn(0x3737373737373737373737373737373737373737, _balances[0x3737373737373737373737373737373737373737]);\r\n            _burningTime=_burningTime+2629743;\r\n        } else {\r\n            _burn(0x3737373737373737373737373737373737373737, _balances[0x3737373737373737373737373737373737373737]);\r\n            _burningTime=_burningTime+2629743;\r\n        }\r\n    }\r\n\r\n    function getPrice(uint256 TokenQuantity)public pure returns (uint256){\r\n        uint256 price = 1e18/50;\r\n        return TokenQuantity*price;\r\n    }\r\n\r\n    function totalSoldTokens()public view returns (uint256){\r\n        return _totalSold;\r\n    }\r\n\r\n    function sale_finished()public view returns (bool){\r\n        return Salefinished;\r\n    }\r\n\r\n\r\n    //There are six locks,\r\n\t//Dex Pool tokens will be available after contract deployment. \r\n\t//That tokens will be used for creating pool on dexes.\r\n    //Marketing tokens are locked until softcap reached 25%.\r\n\t//Developer tokens are locked for 6 months.\r\n    //Seed investors tokens are locked for 9 months.\r\n\t//Wei DAI tokens are locked for 1 year.\r\n\t//Founder team tokens are locked for 2 years\r\n    function claimLocked()public returns(bool success){\r\n        require(msg.sender == _owner || \r\n        msg.sender == 0x9A34767F3f742B20d354183689bB953A45Ac6ACE ||\r\n        msg.sender == 0x7203FAC48E911B397cc8bb29E55f4C1c06a57Fe8 ||\r\n        msg.sender == 0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B || \r\n        msg.sender == 0x114f8D89b4a5072C25FAd7E110AcB09827cEB5Eb || \r\n        msg.sender == 0x3515f46d4E06b7Dd7C22DDE1357CD1aee8E74Bc7,\"Invalid User \");\r\n        if(msg.sender == 0x9A34767F3f742B20d354183689bB953A45Ac6ACE ){\r\n            require(_totalSold>=29705e8 && !marketing,\"Target limit is not reached or tokens are already taken\");\r\n            _mint(msg.sender,1500e8);\r\n            marketing = true;\r\n            return(true);\r\n        } else if(msg.sender == 0x3515f46d4E06b7Dd7C22DDE1357CD1aee8E74Bc7 ){\r\n            require(block.timestamp >=startOfSalesPeriod + 15778458  && !developers,\"Time limit is not reached or tokens are already taken\");\r\n            _mint(msg.sender,2730e8);\r\n            developers = true;\r\n            return(true);\r\n        } else if(msg.sender == 0x7203FAC48E911B397cc8bb29E55f4C1c06a57Fe8 ){\r\n            require(!DexPool,\"Tokens are already taken\");\r\n            _mint(msg.sender,500e8);\r\n            DexPool = true;\r\n            return(true);\r\n        }else if(msg.sender == 0x114f8D89b4a5072C25FAd7E110AcB09827cEB5Eb ){\r\n            require(block.timestamp >= startOfSalesPeriod + 23667687 && !seed_investors,\"Time limit is not reached or tokens are already taken\");\r\n            _mint(msg.sender,1000e8);\r\n            seed_investors = true;\r\n            return(true);\r\n        }\r\n        else if(msg.sender == 0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B ){\r\n            require(block.timestamp >= startOfSalesPeriod + 31556926 && !wei_dai,\"Time limit is not reached or tokens are already taken\");\r\n            _mint(msg.sender,9200e8);\r\n            wei_dai = true;\r\n            return(true);\r\n        }\r\n        else if(msg.sender == _owner ){\r\n            require(block.timestamp >= startOfSalesPeriod + 63113832 && !founder,\"Time limit is not reached or tokens are already taken\");\r\n            _mint(msg.sender,5280e8);\r\n            founder = true;\r\n            return(true);\r\n        }\r\n    }\r\n\r\n    function withdraw (uint256 amount) public returns(bool){\r\n        require(msg.sender == _owner , \"NOT Accessable\");\r\n        require((_totalSold >= 118220e8) , \"Soft cap did not reached\");\r\n        if (amount >= address(this).balance) {\r\n            _owner.transfer(address(this).balance);\r\n        } else{\r\n            _owner.transfer(amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\"); \r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n      }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n      }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenQuantity\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"refundNBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sale_finished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softcapDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BMONEY", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c17ecceb85174a6a35774becb547d93d388e450f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79ed4e2fe58f315da7923fc437ee7da43d3f303d1ac114d67caebff013fa9179"}