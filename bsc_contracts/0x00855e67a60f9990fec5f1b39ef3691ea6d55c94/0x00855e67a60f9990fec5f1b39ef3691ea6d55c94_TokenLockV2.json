{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenLockV2.sol\": {\r\n      \"content\": \"// Sources flattened with hardhat v2.10.1 https://hardhat.org\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface ITokenLock {\\r\\n    function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external returns (uint256 lockId);\\r\\n\\r\\n    function vestingLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external returns (uint256 lockId);\\r\\n\\r\\n    function multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function unlock(uint256 lockId) external payable;\\r\\n\\r\\n    function editLock(\\r\\n        uint256 lockId,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amountA,\\r\\n      uint256 amountB,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint256 amountTokenDesired,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n      uint256 amountToken,\\r\\n      uint256 amountETH,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountOut(\\r\\n    uint256 amountIn,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountOut);\\r\\n\\r\\n  function getAmountIn(\\r\\n    uint256 amountOut,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountIn);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n  event Burn(\\r\\n    address indexed sender,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint256 amount0In,\\r\\n    uint256 amount1In,\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function kLast() external view returns (uint256);\\r\\n\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(\\r\\n    address indexed token0,\\r\\n    address indexed token1,\\r\\n    address pair,\\r\\n    uint256\\r\\n  );\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (address pair);\\r\\n\\r\\n  function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n  function allPairsLength() external view returns (uint256);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    returns (address pair);\\r\\n\\r\\n  function setFeeTo(address) external;\\r\\n\\r\\n  function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint256 prod0; // Least significant 256 bits of the product\\r\\n    uint256 prod1; // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod0 := mul(a, b)\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    uint256 remainder;\\r\\n    assembly {\\r\\n      remainder := mulmod(a, b, denominator)\\r\\n    }\\r\\n    // Subtract 256 bit number from 512 bit number\\r\\n    assembly {\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    unchecked {\\r\\n      uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the precoditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenLockV2 is ITokenLock, Ownable {\\r\\n    using Address for address payable;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 id;\\r\\n        address token;\\r\\n        address owner;\\r\\n        uint256 amount;\\r\\n        uint256 lockDate;\\r\\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\\r\\n        uint256 tgeBps; // In bips. Is 0 for normal locks\\r\\n        uint256 cycle; // Is 0 for normal locks\\r\\n        uint256 cycleBps; // In bips. Is 0 for normal locks\\r\\n        uint256 unlockedAmount;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct CumulativeLockInfo {\\r\\n        address token;\\r\\n        address factory;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    // ID padding from PinkLock v1, as there is a lack of a pausing mechanism\\r\\n    // as of now the lastest id from v1 is about 22K, so this is probably a safe padding value.\\r\\n    uint256 private constant ID_PADDING = 1_000_000;\\r\\n    uint256 public editFee;\\r\\n    uint256 public withdrawFee;\\r\\n    address public fundAddress;\\r\\n\\r\\n    Lock[] private _locks;\\r\\n    mapping(address => EnumerableSet.UintSet) private _userLpLockIds;\\r\\n    mapping(address => EnumerableSet.UintSet) private _userNormalLockIds;\\r\\n\\r\\n    EnumerableSet.AddressSet private _lpLockedTokens;\\r\\n    EnumerableSet.AddressSet private _normalLockedTokens;\\r\\n    mapping(address => CumulativeLockInfo) public cumulativeLockInfo;\\r\\n    mapping(address => EnumerableSet.UintSet) private _tokenToLockIds;\\r\\n\\r\\n    event LockAdded(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate\\r\\n    );\\r\\n    event LockUpdated(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    );\\r\\n    event LockRemoved(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 unlockedAt\\r\\n    );\\r\\n    event LockVested(\\r\\n        uint256 indexed id,\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount,\\r\\n        uint256 remaining,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event LockDescriptionChanged(uint256 lockId);\\r\\n    event LockOwnerChanged(uint256 lockId, address owner, address newOwner);\\r\\n    event EditFeeChanged(address _operator, uint256 _editFee);\\r\\n    event WithdrawFeeChanged(address _operator, uint256 _withdrawFee);\\r\\n    event FundAddressChanged(address _operator, address _newAddress);\\r\\n\\r\\n    modifier validLock(uint256 lockId) {\\r\\n        _getActualIndex(lockId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 _editFee, uint256 _withdrawFee, address _fundAddress) {\\r\\n        editFee = _editFee;\\r\\n        withdrawFee = _withdrawFee;\\r\\n        fundAddress = _fundAddress;\\r\\n    }\\r\\n\\r\\n    function lock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 unlockDate,\\r\\n        string memory description\\r\\n    ) external override returns (uint256 id) {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\r\\n        require(\\r\\n            unlockDate > block.timestamp,\\r\\n            \\\"Unlock date should be in the future\\\"\\r\\n        );\\r\\n        id = _createLock(\\r\\n            owner,\\r\\n            token,\\r\\n            isLpToken,\\r\\n            amount,\\r\\n            unlockDate,\\r\\n            0,\\r\\n            0,\\r\\n            0,\\r\\n            description\\r\\n        );\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit LockAdded(id, token, owner, amount, unlockDate);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function setEditFee(uint256 _editFee) external onlyOwner {\\r\\n        editFee = _editFee;\\r\\n        emit EditFeeChanged(msg.sender, _editFee);\\r\\n    }\\r\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\\r\\n        withdrawFee = _withdrawFee;\\r\\n        emit WithdrawFeeChanged(msg.sender, _withdrawFee);\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address _newAddress) external onlyOwner {\\r\\n        require(fundAddress != _newAddress, \\\"same addr\\\");\\r\\n        fundAddress = _newAddress;\\r\\n        emit FundAddressChanged(msg.sender, _newAddress);\\r\\n    }\\r\\n\\r\\n    function vestingLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external override returns (uint256 id) {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\r\\n        require(tgeDate > block.timestamp, \\\"TGE date should be in the future\\\");\\r\\n        require(cycle > 0, \\\"Invalid cycle\\\");\\r\\n        require(tgeBps > 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\r\\n        require(cycleBps > 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\r\\n        require(\\r\\n            tgeBps + cycleBps <= 10_000,\\r\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\r\\n        );\\r\\n        id = _createLock(\\r\\n            owner,\\r\\n            token,\\r\\n            isLpToken,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit LockAdded(id, token, owner, amount, tgeDate);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) external override returns (uint256[] memory) {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        require(owners.length == amounts.length, \\\"Length mismatched\\\");\\r\\n        require(tgeDate > block.timestamp, \\\"TGE date should be in the future\\\");\\r\\n        require(cycle > 0, \\\"Invalid cycle\\\");\\r\\n        require(tgeBps > 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\r\\n        require(cycleBps > 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\r\\n        require(\\r\\n            tgeBps + cycleBps <= 10_000,\\r\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\r\\n        );\\r\\n        return\\r\\n            _multipleVestingLock(\\r\\n                owners,\\r\\n                amounts,\\r\\n                token,\\r\\n                isLpToken,\\r\\n                [tgeDate, tgeBps, cycle, cycleBps],\\r\\n                description\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _multipleVestingLock(\\r\\n        address[] calldata owners,\\r\\n        uint256[] calldata amounts,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256[4] memory vestingSettings, // avoid stack too deep\\r\\n        string memory description\\r\\n    ) internal returns (uint256[] memory) {\\r\\n        require(token != address(0), \\\"Invalid token\\\");\\r\\n        uint256 sumAmount = _sumAmount(amounts);\\r\\n        uint256 count = owners.length;\\r\\n        uint256[] memory ids = new uint256[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            ids[i] = _createLock(\\r\\n                owners[i],\\r\\n                token,\\r\\n                isLpToken,\\r\\n                amounts[i],\\r\\n                vestingSettings[0], // TGE date\\r\\n                vestingSettings[1], // TGE bps\\r\\n                vestingSettings[2], // cycle\\r\\n                vestingSettings[3], // cycle bps\\r\\n                description\\r\\n            );\\r\\n            emit LockAdded(\\r\\n                ids[i],\\r\\n                token,\\r\\n                owners[i],\\r\\n                amounts[i],\\r\\n                vestingSettings[0] // TGE date\\r\\n            );\\r\\n        }\\r\\n        _safeTransferFromEnsureExactAmount(\\r\\n            token,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            sumAmount\\r\\n        );\\r\\n        return ids;\\r\\n    }\\r\\n\\r\\n    function _sumAmount(uint256[] calldata amounts)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            if (amounts[i] == 0) {\\r\\n                revert(\\\"Amount cant be zero\\\");\\r\\n            }\\r\\n            sum += amounts[i];\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    function _createLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        bool isLpToken,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) internal returns (uint256 id) {\\r\\n        if (isLpToken) {\\r\\n            address possibleFactoryAddress = _parseFactoryAddress(token);\\r\\n            id = _lockLpToken(\\r\\n                owner,\\r\\n                token,\\r\\n                possibleFactoryAddress,\\r\\n                amount,\\r\\n                tgeDate,\\r\\n                tgeBps,\\r\\n                cycle,\\r\\n                cycleBps,\\r\\n                description\\r\\n            );\\r\\n        } else {\\r\\n            id = _lockNormalToken(\\r\\n                owner,\\r\\n                token,\\r\\n                amount,\\r\\n                tgeDate,\\r\\n                tgeBps,\\r\\n                cycle,\\r\\n                cycleBps,\\r\\n                description\\r\\n            );\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    function _lockLpToken(\\r\\n        address owner,\\r\\n        address token,\\r\\n        address factory,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private returns (uint256 id) {\\r\\n        id = _registerLock(\\r\\n            owner,\\r\\n            token,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _userLpLockIds[owner].add(id);\\r\\n        _lpLockedTokens.add(token);\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\r\\n        if (tokenInfo.token == address(0)) {\\r\\n            tokenInfo.token = token;\\r\\n            tokenInfo.factory = factory;\\r\\n        }\\r\\n        tokenInfo.amount = tokenInfo.amount + amount;\\r\\n\\r\\n        _tokenToLockIds[token].add(id);\\r\\n    }\\r\\n\\r\\n    function _lockNormalToken(\\r\\n        address owner,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private returns (uint256 id) {\\r\\n        id = _registerLock(\\r\\n            owner,\\r\\n            token,\\r\\n            amount,\\r\\n            tgeDate,\\r\\n            tgeBps,\\r\\n            cycle,\\r\\n            cycleBps,\\r\\n            description\\r\\n        );\\r\\n        _userNormalLockIds[owner].add(id);\\r\\n        _normalLockedTokens.add(token);\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\r\\n        if (tokenInfo.token == address(0)) {\\r\\n            tokenInfo.token = token;\\r\\n            tokenInfo.factory = address(0);\\r\\n        }\\r\\n        tokenInfo.amount = tokenInfo.amount + amount;\\r\\n\\r\\n        _tokenToLockIds[token].add(id);\\r\\n    }\\r\\n\\r\\n    function _registerLock(\\r\\n        address owner,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 tgeDate,\\r\\n        uint256 tgeBps,\\r\\n        uint256 cycle,\\r\\n        uint256 cycleBps,\\r\\n        string memory description\\r\\n    ) private returns (uint256 id) {\\r\\n        id = _locks.length + ID_PADDING;\\r\\n        Lock memory newLock = Lock({\\r\\n            id: id,\\r\\n            token: token,\\r\\n            owner: owner,\\r\\n            amount: amount,\\r\\n            lockDate: block.timestamp,\\r\\n            tgeDate: tgeDate,\\r\\n            tgeBps: tgeBps,\\r\\n            cycle: cycle,\\r\\n            cycleBps: cycleBps,\\r\\n            unlockedAmount: 0,\\r\\n            description: description\\r\\n        });\\r\\n        _locks.push(newLock);\\r\\n    }\\r\\n\\r\\n    function unlock(uint256 lockId) external payable override validLock(lockId) {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n        require(msg.value >= withdrawFee, \\\"has no enough fee\\\");\\r\\n        if(withdrawFee > 0){\\r\\n            payable(fundAddress).transfer(withdrawFee);\\r\\n        }\\r\\n\\r\\n        if (userLock.tgeBps > 0) {\\r\\n            _vestingUnlock(userLock);\\r\\n        } else {\\r\\n            _normalUnlock(userLock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _normalUnlock(Lock storage userLock) internal {\\r\\n        require(\\r\\n            block.timestamp >= userLock.tgeDate,\\r\\n            \\\"It is not time to unlock\\\"\\r\\n        );\\r\\n        require(userLock.unlockedAmount == 0, \\\"Nothing to unlock\\\");\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (isLpToken) {\\r\\n            _userLpLockIds[msg.sender].remove(userLock.id);\\r\\n        } else {\\r\\n            _userNormalLockIds[msg.sender].remove(userLock.id);\\r\\n        }\\r\\n\\r\\n        uint256 unlockAmount = userLock.amount;\\r\\n\\r\\n        if (tokenInfo.amount <= unlockAmount) {\\r\\n            tokenInfo.amount = 0;\\r\\n        } else {\\r\\n            tokenInfo.amount = tokenInfo.amount - unlockAmount;\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount == 0) {\\r\\n            if (isLpToken) {\\r\\n                _lpLockedTokens.remove(userLock.token);\\r\\n            } else {\\r\\n                _normalLockedTokens.remove(userLock.token);\\r\\n            }\\r\\n        }\\r\\n        userLock.unlockedAmount = unlockAmount;\\r\\n\\r\\n        _tokenToLockIds[userLock.token].remove(userLock.id);\\r\\n\\r\\n        IERC20(userLock.token).safeTransfer(msg.sender, unlockAmount);\\r\\n\\r\\n        emit LockRemoved(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            msg.sender,\\r\\n            unlockAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _vestingUnlock(Lock storage userLock) internal {\\r\\n        uint256 withdrawable = _withdrawableTokens(userLock);\\r\\n        uint256 newTotalUnlockAmount = userLock.unlockedAmount + withdrawable;\\r\\n        require(\\r\\n            withdrawable > 0 && newTotalUnlockAmount <= userLock.amount,\\r\\n            \\\"Nothing to unlock\\\"\\r\\n        );\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (newTotalUnlockAmount == userLock.amount) {\\r\\n            if (isLpToken) {\\r\\n                _userLpLockIds[msg.sender].remove(userLock.id);\\r\\n            } else {\\r\\n                _userNormalLockIds[msg.sender].remove(userLock.id);\\r\\n            }\\r\\n            _tokenToLockIds[userLock.token].remove(userLock.id);\\r\\n            emit LockRemoved(\\r\\n                userLock.id,\\r\\n                userLock.token,\\r\\n                msg.sender,\\r\\n                newTotalUnlockAmount,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount <= withdrawable) {\\r\\n            tokenInfo.amount = 0;\\r\\n        } else {\\r\\n            tokenInfo.amount = tokenInfo.amount - withdrawable;\\r\\n        }\\r\\n\\r\\n        if (tokenInfo.amount == 0) {\\r\\n            if (isLpToken) {\\r\\n                _lpLockedTokens.remove(userLock.token);\\r\\n            } else {\\r\\n                _normalLockedTokens.remove(userLock.token);\\r\\n            }\\r\\n        }\\r\\n        userLock.unlockedAmount = newTotalUnlockAmount;\\r\\n\\r\\n        IERC20(userLock.token).safeTransfer(userLock.owner, withdrawable);\\r\\n\\r\\n        emit LockVested(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            msg.sender,\\r\\n            withdrawable,\\r\\n            userLock.amount - userLock.unlockedAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawableTokens(uint256 lockId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Lock memory userLock = getLockById(lockId);\\r\\n        return _withdrawableTokens(userLock);\\r\\n    }\\r\\n\\r\\n    function _withdrawableTokens(Lock memory userLock)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (userLock.amount == 0) return 0;\\r\\n        if (userLock.unlockedAmount >= userLock.amount) return 0;\\r\\n        if (block.timestamp < userLock.tgeDate) return 0;\\r\\n        if (userLock.cycle == 0) return 0;\\r\\n\\r\\n        uint256 tgeReleaseAmount = FullMath.mulDiv(\\r\\n            userLock.amount,\\r\\n            userLock.tgeBps,\\r\\n            10_000\\r\\n        );\\r\\n        uint256 cycleReleaseAmount = FullMath.mulDiv(\\r\\n            userLock.amount,\\r\\n            userLock.cycleBps,\\r\\n            10_000\\r\\n        );\\r\\n        uint256 currentTotal = 0;\\r\\n        if (block.timestamp >= userLock.tgeDate) {\\r\\n            currentTotal =\\r\\n                (((block.timestamp - userLock.tgeDate) / userLock.cycle) *\\r\\n                    cycleReleaseAmount) +\\r\\n                tgeReleaseAmount; // Truncation is expected here\\r\\n        }\\r\\n        uint256 withdrawable = 0;\\r\\n        if (currentTotal > userLock.amount) {\\r\\n            withdrawable = userLock.amount - userLock.unlockedAmount;\\r\\n        } else {\\r\\n            withdrawable = currentTotal - userLock.unlockedAmount;\\r\\n        }\\r\\n        return withdrawable;\\r\\n    }\\r\\n\\r\\n    function editLock(\\r\\n        uint256 lockId,\\r\\n        uint256 newAmount,\\r\\n        uint256 newUnlockDate\\r\\n    ) external payable override validLock(lockId) {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n        require(userLock.unlockedAmount == 0, \\\"Lock was unlocked\\\");\\r\\n        require(msg.value >= editFee, \\\"has no enough fee\\\");\\r\\n        if(editFee > 0){\\r\\n            payable(fundAddress).transfer(editFee);\\r\\n        }\\r\\n\\r\\n        if (newUnlockDate > 0) {\\r\\n            require(\\r\\n                newUnlockDate >= userLock.tgeDate &&\\r\\n                    newUnlockDate > block.timestamp,\\r\\n                \\\"New unlock time should not be before old unlock time or current time\\\"\\r\\n            );\\r\\n            userLock.tgeDate = newUnlockDate;\\r\\n        }\\r\\n\\r\\n        if (newAmount > 0) {\\r\\n            require(\\r\\n                newAmount >= userLock.amount,\\r\\n                \\\"New amount should not be less than current amount\\\"\\r\\n            );\\r\\n\\r\\n            uint256 diff = newAmount - userLock.amount;\\r\\n\\r\\n            if (diff > 0) {\\r\\n                userLock.amount = newAmount;\\r\\n                CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n                    userLock.token\\r\\n                ];\\r\\n                tokenInfo.amount = tokenInfo.amount + diff;\\r\\n                _safeTransferFromEnsureExactAmount(\\r\\n                    userLock.token,\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    diff\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LockUpdated(\\r\\n            userLock.id,\\r\\n            userLock.token,\\r\\n            userLock.owner,\\r\\n            userLock.amount,\\r\\n            userLock.tgeDate\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function editLockDescription(uint256 lockId, string memory description)\\r\\n        external\\r\\n        validLock(lockId)\\r\\n    {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        require(\\r\\n            userLock.owner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n        userLock.description = description;\\r\\n        emit LockDescriptionChanged(lockId);\\r\\n    }\\r\\n\\r\\n    function transferLockOwnership(uint256 lockId, address newOwner)\\r\\n        public\\r\\n        validLock(lockId)\\r\\n    {\\r\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\r\\n        address currentOwner = userLock.owner;\\r\\n        require(\\r\\n            currentOwner == msg.sender,\\r\\n            \\\"You are not the owner of this lock\\\"\\r\\n        );\\r\\n\\r\\n        userLock.owner = newOwner;\\r\\n\\r\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\r\\n            userLock.token\\r\\n        ];\\r\\n\\r\\n        bool isLpToken = tokenInfo.factory != address(0);\\r\\n\\r\\n        if (isLpToken) {\\r\\n            _userLpLockIds[currentOwner].remove(lockId);\\r\\n            _userLpLockIds[newOwner].add(lockId);\\r\\n        } else {\\r\\n            _userNormalLockIds[currentOwner].remove(lockId);\\r\\n            _userNormalLockIds[newOwner].add(lockId);\\r\\n        }\\r\\n\\r\\n        emit LockOwnerChanged(lockId, currentOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceLockOwnership(uint256 lockId) external {\\r\\n        transferLockOwnership(lockId, address(0));\\r\\n    }\\r\\n\\r\\n    function _safeTransferFromEnsureExactAmount(\\r\\n        address token,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 oldRecipientBalance = IERC20(token).balanceOf(recipient);\\r\\n        IERC20(token).safeTransferFrom(sender, recipient, amount);\\r\\n        uint256 newRecipientBalance = IERC20(token).balanceOf(recipient);\\r\\n        require(\\r\\n            newRecipientBalance - oldRecipientBalance == amount,\\r\\n            \\\"Not enough token was transfered\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function getTotalLockCount() external view returns (uint256) {\\r\\n        // Returns total lock count, regardless of whether it has been unlocked or not\\r\\n        return _locks.length;\\r\\n    }\\r\\n\\r\\n    function getLockAt(uint256 index) external view returns (Lock memory) {\\r\\n        return _locks[index];\\r\\n    }\\r\\n\\r\\n    function getLockById(uint256 lockId) public view returns (Lock memory) {\\r\\n        return _locks[_getActualIndex(lockId)];\\r\\n    }\\r\\n\\r\\n    function allLpTokenLockedCount() public view returns (uint256) {\\r\\n        return _lpLockedTokens.length();\\r\\n    }\\r\\n\\r\\n    function allNormalTokenLockedCount() public view returns (uint256) {\\r\\n        return _normalLockedTokens.length();\\r\\n    }\\r\\n\\r\\n    function getCumulativeLpTokenLockInfoAt(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo memory)\\r\\n    {\\r\\n        return cumulativeLockInfo[_lpLockedTokens.at(index)];\\r\\n    }\\r\\n\\r\\n    function getCumulativeNormalTokenLockInfoAt(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo memory)\\r\\n    {\\r\\n        return cumulativeLockInfo[_normalLockedTokens.at(index)];\\r\\n    }\\r\\n\\r\\n    function getCumulativeLpTokenLockInfo(uint256 start, uint256 end)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo[] memory)\\r\\n    {\\r\\n        if (end >= _lpLockedTokens.length()) {\\r\\n            end = _lpLockedTokens.length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            lockInfo[currentIndex] = cumulativeLockInfo[_lpLockedTokens.at(i)];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return lockInfo;\\r\\n    }\\r\\n\\r\\n    function getCumulativeNormalTokenLockInfo(uint256 start, uint256 end)\\r\\n        external\\r\\n        view\\r\\n        returns (CumulativeLockInfo[] memory)\\r\\n    {\\r\\n        if (end >= _normalLockedTokens.length()) {\\r\\n            end = _normalLockedTokens.length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            lockInfo[currentIndex] = cumulativeLockInfo[\\r\\n                _normalLockedTokens.at(i)\\r\\n            ];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return lockInfo;\\r\\n    }\\r\\n\\r\\n    function totalTokenLockedCount() external view returns (uint256) {\\r\\n        return allLpTokenLockedCount() + allNormalTokenLockedCount();\\r\\n    }\\r\\n\\r\\n    function lpLockCountForUser(address user) public view returns (uint256) {\\r\\n        return _userLpLockIds[user].length();\\r\\n    }\\r\\n\\r\\n    function lpLocksForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock[] memory)\\r\\n    {\\r\\n        uint256 length = _userLpLockIds[user].length();\\r\\n        Lock[] memory userLocks = new Lock[](length);\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            userLocks[i] = getLockById(_userLpLockIds[user].at(i));\\r\\n        }\\r\\n        return userLocks;\\r\\n    }\\r\\n\\r\\n    function lpLockForUserAtIndex(address user, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock memory)\\r\\n    {\\r\\n        require(lpLockCountForUser(user) > index, \\\"Invalid index\\\");\\r\\n        return getLockById(_userLpLockIds[user].at(index));\\r\\n    }\\r\\n\\r\\n    function normalLockCountForUser(address user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _userNormalLockIds[user].length();\\r\\n    }\\r\\n\\r\\n    function normalLocksForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock[] memory)\\r\\n    {\\r\\n        uint256 length = _userNormalLockIds[user].length();\\r\\n        Lock[] memory userLocks = new Lock[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            userLocks[i] = getLockById(_userNormalLockIds[user].at(i));\\r\\n        }\\r\\n        return userLocks;\\r\\n    }\\r\\n\\r\\n    function normalLockForUserAtIndex(address user, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (Lock memory)\\r\\n    {\\r\\n        require(normalLockCountForUser(user) > index, \\\"Invalid index\\\");\\r\\n        return getLockById(_userNormalLockIds[user].at(index));\\r\\n    }\\r\\n\\r\\n    function totalLockCountForUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return normalLockCountForUser(user) + lpLockCountForUser(user);\\r\\n    }\\r\\n\\r\\n    function totalLockCountForToken(address token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _tokenToLockIds[token].length();\\r\\n    }\\r\\n\\r\\n    function getLocksForToken(\\r\\n        address token,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) public view returns (Lock[] memory) {\\r\\n        if (end >= _tokenToLockIds[token].length()) {\\r\\n            end = _tokenToLockIds[token].length() - 1;\\r\\n        }\\r\\n        uint256 length = end - start + 1;\\r\\n        Lock[] memory locks = new Lock[](length);\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            locks[currentIndex] = getLockById(_tokenToLockIds[token].at(i));\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return locks;\\r\\n    }\\r\\n\\r\\n    function _getActualIndex(uint256 lockId) internal view returns (uint256) {\\r\\n        if (lockId < ID_PADDING) {\\r\\n            revert(\\\"Invalid lock id\\\");\\r\\n        }\\r\\n        uint256 actualIndex = lockId - ID_PADDING;\\r\\n        require(actualIndex < _locks.length, \\\"Invalid lock id\\\");\\r\\n        return actualIndex;\\r\\n    }\\r\\n\\r\\n    function _parseFactoryAddress(address token)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        address possibleFactoryAddress;\\r\\n        try IUniswapV2Pair(token).factory() returns (address factory) {\\r\\n            possibleFactoryAddress = factory;\\r\\n        } catch {\\r\\n            revert(\\\"This token is not a LP token\\\");\\r\\n        }\\r\\n        require(\\r\\n            possibleFactoryAddress != address(0) &&\\r\\n                _isValidLpToken(token, possibleFactoryAddress),\\r\\n            \\\"This token is not a LP token.\\\"\\r\\n        );\\r\\n        return possibleFactoryAddress;\\r\\n    }\\r\\n\\r\\n    function _isValidLpToken(address token, address factory)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n        address factoryPair = IUniswapV2Factory(factory).getPair(\\r\\n            pair.token0(),\\r\\n            pair.token1()\\r\\n        );\\r\\n        return factoryPair == token;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_editFee\",\"type\":\"uint256\"}],\"name\":\"EditFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"FundAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"LockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"LockDescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LockOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"LockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allLpTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNormalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeLockInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"editLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"editLockDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeLpTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLockV2.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCumulativeLpTokenLockInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLockV2.CumulativeLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLockV2.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLockV2.CumulativeLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLockById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getLocksForToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lpLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lpLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lpLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"multipleVestingLock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"normalLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLockV2.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"renounceLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editFee\",\"type\":\"uint256\"}],\"name\":\"setEditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalLockCountForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"vestingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenLockV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000a209769826f0058935d282a7cf5bf8a9e3f791ae", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}