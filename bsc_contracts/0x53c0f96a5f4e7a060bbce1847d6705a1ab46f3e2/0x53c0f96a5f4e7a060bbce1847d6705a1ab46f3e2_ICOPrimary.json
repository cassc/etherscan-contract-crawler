{"SourceCode": "// Sources flattened with hardhat v2.12.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.3\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.3\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol@v0.6.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.3\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeCast.sol@v4.3.3\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/AddressHandler.sol\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract AddressHandler {\r\n    function stringToAddress(string memory _address) public pure returns (address) {\r\n        string memory cleanAddress = remove0xPrefix(_address);\r\n        bytes20 _addressBytes = parseHexStringToBytes20(cleanAddress);\r\n        return address(_addressBytes);\r\n    }\r\n\r\n    function remove0xPrefix(string memory _hexString) internal pure returns (string memory) {\r\n        if (bytes(_hexString).length >= 2 && bytes(_hexString)[0] == '0' && (bytes(_hexString)[1] == 'x' || bytes(_hexString)[1] == 'X')) {\r\n            return substring(_hexString, 2, bytes(_hexString).length);\r\n        }\r\n        return _hexString;\r\n    }\r\n\r\n    function substring(string memory _str, uint256 _start, uint256 _end) internal pure returns (string memory) {\r\n        bytes memory _strBytes = bytes(_str);\r\n        bytes memory _result = new bytes(_end - _start);\r\n        for (uint256 i = _start; i < _end; i++) {\r\n            _result[i - _start] = _strBytes[i];\r\n        }\r\n        return string(_result);\r\n    }\r\n\r\n    function parseHexStringToBytes20(string memory _hexString) internal pure returns (bytes20) {\r\n        bytes memory _bytesString = bytes(_hexString);\r\n        uint160 _parsedBytes = 0;\r\n        for (uint256 i = 0; i < _bytesString.length; i += 2) {\r\n            _parsedBytes *= 256;\r\n            uint8 _byteValue = parseByteToUint8(_bytesString[i]);\r\n            _byteValue *= 16;\r\n            _byteValue += parseByteToUint8(_bytesString[i + 1]);\r\n            _parsedBytes += _byteValue;\r\n        }\r\n        return bytes20(_parsedBytes);\r\n    }\r\n\r\n    function parseByteToUint8(bytes1 _byte) internal pure returns (uint8) {\r\n        if (uint8(_byte) >= 48 && uint8(_byte) <= 57) {\r\n            return uint8(_byte) - 48;\r\n        } else if (uint8(_byte) >= 65 && uint8(_byte) <= 70) {\r\n            return uint8(_byte) - 55;\r\n        } else if (uint8(_byte) >= 97 && uint8(_byte) <= 102) {\r\n            return uint8(_byte) - 87;\r\n        } else {\r\n            revert(string(abi.encodePacked(\"Invalid byte value: \", _byte)));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ICOPrimary.sol\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IBEP20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ncontract ICOPrimary is ReentrancyGuard, Ownable {\r\n\r\n    using SafeCast for int256;\r\n\r\n    mapping (address => mapping (CurrencyType => uint256)) private TokenBought;\r\n\r\n    enum CurrencyType {\r\n        PRIMARYCURRENCY,\r\n        PRIMARYUSDT,\r\n        SECONDARYCURRENCY,\r\n        SECONDARYUSDT\r\n    }\r\n\r\n        IBEP20 public immutable _token;\r\n    IBEP20 public immutable _usdtToken;\r\n        address payable public _wallet;\r\n    address payable public _bridge;\r\n        uint256 public _startPrice;\r\n    uint256 public _endPrice;\r\n        uint256 public _time_unit = 1 minutes;\r\n\r\n        uint256 public usdtRaised;\r\n    uint256 public suppliedTokens;\r\n    uint256 public tokenHold;\r\n        uint256 public hardCap;\r\n\r\n        uint256 public startICOTimestamp;\r\n        uint256 public endICOTimestamp;\r\n\r\n    uint8 public stageCount;\r\n\r\n        uint256 public minPurchase;\r\n        uint256 public maxPurchase;\r\n    bool private stopIcoRun;\r\n\r\n        uint256 public availableTokens;\r\n\r\n    AddressHandler public addressHandler;\r\n\r\n    AggregatorV3Interface internal immutable primaryCurrencyPriceFeed;\r\n    AggregatorV3Interface internal immutable secondaryCurrencyPriceFeed;\r\n\r\n        event TokensPurchased(address indexed purchaser, uint256 indexed purchased_token_amount, uint256 token_amount, uint256 usdtRaised);\r\n    event TokensDelivered(address indexed purchaser, uint256 token_amount);\r\n    event HardCapUpdated(uint256 newValue);\r\n    event MaxPurchaseUpdated(uint256 newValue);\r\n    event MinPurchaseUpdated(uint256 newValue);\r\n    event WalletUpdated(address newWallet);\r\n\r\n    constructor(address payable wallet, address payable bridge, address tokenAddress, address usdtAddress, address _primaryCurrencyPriceFeed, address _secondaryCurrencyPriceFeed) {\r\n        require(wallet != address(0), \"wallet is the zero address\");\r\n        require(bridge != address(0), \"bridge is the zero address\");\r\n        require(tokenAddress != address(0), \"token address is the zero\");\r\n        require(usdtAddress != address(0), \"usdt address is the zero\");\r\n        require(_primaryCurrencyPriceFeed != address(0), \"Eth primaryCurrencyPriceFeed is the zero address\");\r\n        require(_secondaryCurrencyPriceFeed != address(0), \"Bsc primaryCurrencyPriceFeed is the zero address\");\r\n\r\n        _wallet = wallet;\r\n        _bridge = bridge;\r\n        _token = IBEP20(tokenAddress);\r\n        _usdtToken = IBEP20(usdtAddress);\r\n        primaryCurrencyPriceFeed = AggregatorV3Interface(_primaryCurrencyPriceFeed);\r\n        secondaryCurrencyPriceFeed = AggregatorV3Interface(_secondaryCurrencyPriceFeed);\r\n        addressHandler = new AddressHandler();\r\n        }\r\n\r\n        receive() external payable {\r\n        buyTokensByPrimaryCurrencyWithoutReferral(_msgSender());\r\n        }\r\n\r\n    fallback() external payable {\r\n        buyTokensByPrimaryCurrencyWithoutReferral(_msgSender());\r\n    }\r\n\r\n    function buyTokensByPrimaryCurrencyWithoutReferral(address beneficiary) public nonReentrant icoActive payable {\r\n        uint256 usdtAmount = getPrimaryCurrencyPrice() * msg.value / ( 10 ** 8);\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        _preValidatePurchase(beneficiary, usdtAmount, tokens);\r\n        _purchaseTokens(usdtAmount, tokens, beneficiary, CurrencyType.PRIMARYCURRENCY);\r\n    }\r\n\r\n    function buyTokensByPrimaryCurrency(string memory addressString) public nonReentrant icoActive payable {\r\n        address beneficiary = _msgSender();\r\n        address referral = getAddressFromString(addressString);\r\n        uint256 usdtAmount = getPrimaryCurrencyPrice() * msg.value / ( 10 ** 8);\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        _preValidatePurchase(beneficiary, usdtAmount, tokens);\r\n        _purchaseTokens(usdtAmount, tokens, beneficiary, CurrencyType.PRIMARYCURRENCY);\r\n        if (!isZeroAddress(referral) && (referral != beneficiary) && (referral != address(this)))\r\n            _purchaseTokens(0, tokens / 10, referral, CurrencyType.PRIMARYCURRENCY);\r\n    }\r\n\r\n    function buyTokensByPrimaryUSDT(uint256 usdtAmount, string memory addressString) public nonReentrant icoActive {\r\n        address beneficiary = _msgSender();\r\n        address referral = getAddressFromString(addressString);\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        _preValidatePurchase(beneficiary, usdtAmount, tokens);\r\n\r\n        uint256 ourAllowance = _usdtToken.allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n\r\n        require(usdtAmount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        (bool success, ) = address(_usdtToken).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                address(this),\r\n                usdtAmount\r\n            )\r\n        );\r\n        require(success, \"Token payment failed\");\r\n        _purchaseTokens(usdtAmount, tokens, beneficiary, CurrencyType.PRIMARYUSDT);\r\n        if (!isZeroAddress(referral) && (referral != beneficiary) && (referral != address(this)))\r\n            _purchaseTokens(0, tokens / 10, referral, CurrencyType.PRIMARYUSDT);\r\n    }\r\n\r\n    function getAddressFromString(string memory addressString) public view returns (address) {\r\n        try addressHandler.stringToAddress(addressString) returns (address newAddress) {\r\n            return newAddress;\r\n        } catch {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function isZeroAddress(address _address) public pure returns (bool) {\r\n        return _address == address(0);\r\n    }\r\n\r\n    function checkIfPurchaseEnabledBySecondaryCurrency(uint256 currencyAmount, address beneficiary) public view returns (uint8) {\r\n        uint256 usdtAmount = getSecondaryCurrencyPrice() * currencyAmount / ( 10 ** 8);\r\n        return checkIfPurchaseEnabledBySecondaryUSDT(usdtAmount, beneficiary);\r\n    }\r\n\r\n    function checkIfPurchaseEnabledBySecondaryUSDT(uint256 usdtAmount, address beneficiary) public view returns (uint8) {\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        if (_isIcoActive() == false) return 0;\r\n        else if (beneficiary == address(0)) return 1;\r\n        else if (usdtAmount == 0) return 2;\r\n        else if (tokens < minPurchase) return 3;\r\n        else if (getTokenBoughtFor(beneficiary) + tokens > maxPurchase) return 4;\r\n        else if (usdtRaised + usdtAmount > hardCap) return 5;\r\n        return 6;\r\n    }\r\n\r\n    function buyTokensBySecondaryCurrency(uint256 secondaryCurrencyAmount, address beneficiary, address referral) public nonReentrant icoActive onlyBridge {\r\n        uint256 usdtAmount = getSecondaryCurrencyPrice() * secondaryCurrencyAmount / ( 10 ** 8);\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        _preValidatePurchase(beneficiary, usdtAmount, tokens);\r\n        _purchaseTokens(usdtAmount, tokens, beneficiary, CurrencyType.SECONDARYCURRENCY);\r\n        if (!isZeroAddress(referral) && (referral != beneficiary) && (referral != address(this)))\r\n            _purchaseTokens(0, tokens / 10, referral, CurrencyType.PRIMARYCURRENCY);\r\n    }\r\n\r\n    function buyTokensBySecondaryUSDT(uint256 usdtAmount, address beneficiary, address referral) public nonReentrant icoActive onlyBridge {\r\n        uint256 tokens = _getTokenAmountFromUSDT(usdtAmount);\r\n        _preValidatePurchase(beneficiary, usdtAmount, tokens);\r\n        _purchaseTokens(usdtAmount, tokens, beneficiary, CurrencyType.SECONDARYUSDT);\r\n        if (!isZeroAddress(referral) && (referral != beneficiary) && (referral != address(this)))\r\n            _purchaseTokens(0, tokens / 10, referral, CurrencyType.PRIMARYCURRENCY);\r\n    }\r\n\r\n    function _purchaseTokens(uint256 usdtAmount, uint256 tokens, address beneficiary, CurrencyType _currencyType) internal {\r\n        usdtRaised = usdtRaised + usdtAmount;\r\n        tokenHold = tokenHold + tokens;\r\n        availableTokens = availableTokens - tokens;\r\n        TokenBought[beneficiary][_currencyType] = TokenBought[beneficiary][_currencyType] + tokens;\r\n        emit TokensPurchased(beneficiary, tokens, getTokenBoughtFor(beneficiary), usdtRaised);\r\n    }\r\n\r\n    function getTokenBoughtFor(address beneficiary) public view returns (uint256) {\r\n        return TokenBought[beneficiary][CurrencyType.PRIMARYCURRENCY] + TokenBought[beneficiary][CurrencyType.PRIMARYUSDT] + TokenBought[beneficiary][CurrencyType.SECONDARYCURRENCY] + TokenBought[beneficiary][CurrencyType.SECONDARYUSDT];\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 usdtAmount, uint256 tokens) internal view {\r\n        require(beneficiary != address(0), \"beneficiary is the zero address\");\r\n        require(usdtAmount != 0, \"weiAmount is 0\");\r\n        require(tokens != 0, \"trying to purchase 0 tokens\");\r\n        require(tokens >= minPurchase, 'have to send at least: minPurchase');\r\n        require(getTokenBoughtFor(beneficiary) + tokens <= maxPurchase, 'can\\'t buy more than: maxPurchase');\r\n        require(usdtRaised + usdtAmount <= hardCap, 'Hard Cap reached');\r\n    }\r\n\r\n    function _getTokenAmountFromUSDT(uint256 usdtAmount) internal view returns (uint256) {\r\n        uint256 currentPrice = _getCurrentTokenPrice();\r\n        require(currentPrice > 0, \"current price is wrongly 0\");\r\n        uint256 tokenAmount = usdtAmount * 10 ** 18 / currentPrice;\r\n        return tokenAmount;\r\n    }\r\n\r\n    function getMaximumUSDTAmount() external view returns (uint256) {\r\n        require(_startPrice > 0, \"start price need to be set above 0\");\r\n        uint256 tokenAmount = maxPurchase * _startPrice / (10 ** 18);\r\n        return tokenAmount;\r\n    } \r\n\r\n    function getPrimaryCurrencyPrice() public view returns (uint256) {\r\n        (\r\n            /* uint80 roundID */,\r\n            int256 price,\r\n            /* uint256 startedAt */,\r\n            /* uint256 timeStamp */,\r\n            /* uint80 answeredInRound */\r\n        ) = primaryCurrencyPriceFeed.latestRoundData();\r\n\r\n        // int256 price = 31100000000;\r\n        return price.toUint256();\r\n    }\r\n\r\n    function getSecondaryCurrencyPrice() public view returns (uint256) {\r\n        (\r\n            /* uint80 roundID */,\r\n            int256 price,\r\n            /* uint256 startedAt */,\r\n            /* uint256 timeStamp */,\r\n            /* uint80 answeredInRound */\r\n        ) = secondaryCurrencyPriceFeed.latestRoundData();\r\n\r\n        return price.toUint256();\r\n    }\r\n\r\n    function declareCurrentAvailableTokensAsSuppliedTokens() external onlyOwner {\r\n        suppliedTokens = _token.balanceOf(address(this));\r\n    }\r\n\r\n    function startICO(uint duration_, uint8 stageCount_, uint256 startPrice_, uint256 endPrice_, uint minPurchase_, uint maxPurchase_, uint256 hardCap_) external onlyOwner icoNotActive() {    \r\n        require(duration_ > 0, 'duration is 0');\r\n        require(stageCount_ > 0, 'stageCount is 0');\r\n        require(startPrice_ > 0, 'ICO startprice is 0');\r\n        require(endPrice_ >= startPrice_, 'ICO endPrice is lower than startPrice');\r\n        require(minPurchase_ > 0, 'minPurchase is 0');\r\n        require(minPurchase_ < maxPurchase_, \"minPurchase must be lower than maxPurchase\");\r\n        require(hardCap_ > 0, 'hardCap is 0');\r\n\r\n        startICOTimestamp = block.timestamp;\r\n        endICOTimestamp = startICOTimestamp + duration_ * _time_unit;\r\n        availableTokens = _token.balanceOf(address(this));\r\n        minPurchase = minPurchase_;\r\n        maxPurchase = maxPurchase_;\r\n        hardCap = hardCap_;\r\n        stageCount = stageCount_;\r\n        _startPrice = startPrice_;\r\n        _endPrice = endPrice_;\r\n        usdtRaised = 0;\r\n        stopIcoRun = false;\r\n    }\r\n\r\n    function stopICO() external onlyOwner {\r\n        endICOTimestamp = 0;\r\n        startICOTimestamp = 0;\r\n        availableTokens = 0;\r\n        stopIcoRun = true;\r\n    }\r\n\r\n    function withdrawUsdt() external onlyOwner onlyContractHasUSDT {\r\n        uint balance = _usdtToken.balanceOf(address(this));\r\n        _usdtToken.transfer(_wallet, balance);\r\n    }\r\n\r\n    function withdrawCurrency() external onlyOwner onlyContractHasCurrency {\r\n        payable(_wallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function getAvailableTokenAmount() public view returns (uint256) {\r\n        return availableTokens;\r\n    }\r\n\r\n    function _getCurrentTokenPrice() internal view returns (uint256) {\r\n        uint256 timestamp = block.timestamp;\r\n\r\n        if (endICOTimestamp > 0 && timestamp < endICOTimestamp) {\r\n            require(endICOTimestamp > startICOTimestamp, \"Exception: end date is below start time\");\r\n            uint256 duration = endICOTimestamp - startICOTimestamp;\r\n            for (uint8 i = 0; i <= stageCount; i++) {\r\n                if (timestamp >= startICOTimestamp + duration * i / (stageCount + 1) && timestamp < startICOTimestamp + duration * (i + 1) / (stageCount + 1)) {\r\n                    return _startPrice + i * (_endPrice - _startPrice) / (stageCount + 1) ;\r\n                }\r\n            }\r\n        }\r\n        return _endPrice;\r\n    }\r\n\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        require(_token.balanceOf(address(this)) >= tokenAmount, 'No sufficient tokens to deliver in contract');\r\n        _token.transfer(beneficiary, tokenAmount);\r\n        emit TokensDelivered(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function retakeRemainingTokens() public onlyOwner icoNotActive {\r\n        uint256 tokenAmount = suppliedTokens - tokenHold;\r\n        require(tokenAmount > 0, 'No Remaining tokens');\r\n        _deliverTokens(_wallet, tokenAmount);\r\n    }\r\n\r\n    function invokeTokensAfterPresale() public icoNotActive nonReentrant {\r\n        address beneficiary = _msgSender();\r\n        uint256 tokenAmount  = getTokenBoughtFor(beneficiary);\r\n        require(tokenAmount > 0, 'No tokens to claim');\r\n        TokenBought[beneficiary][CurrencyType.PRIMARYCURRENCY] = 0;\r\n        TokenBought[beneficiary][CurrencyType.PRIMARYUSDT] = 0;\r\n        TokenBought[beneficiary][CurrencyType.SECONDARYCURRENCY] = 0;\r\n        TokenBought[beneficiary][CurrencyType.SECONDARYUSDT] = 0;\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    function getIcoStatus() external view returns (uint8) {\r\n        return _isIcoActive() ? 3 : 2;\r\n    }\r\n\r\n    function _isIcoActive() internal view returns (bool) {\r\n        if (endICOTimestamp > 0 && startICOTimestamp < endICOTimestamp && block.timestamp < endICOTimestamp && availableTokens > 0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    function getUsdtRaised() external view returns (uint256) {\r\n        return usdtRaised;\r\n    }\r\n\r\n    function getToken() public view returns (IBEP20) {\r\n        return _token;\r\n    }\r\n\r\n    function getStopIcoRun() external view returns (bool) {\r\n        return stopIcoRun;\r\n    }\r\n\r\n    function getHardCap() external view icoActive returns (uint256) {\r\n        return hardCap;\r\n    }\r\n\r\n    function getMaxPurchase() external view icoActive returns (uint256) {\r\n        return maxPurchase;\r\n    }\r\n\r\n    function getMinPurchase() external view icoActive returns (uint256) {\r\n        return minPurchase;\r\n    }\r\n\r\n    function getStartTimestamp() external view icoActive returns (uint256) {\r\n        return startICOTimestamp;\r\n    }\r\n\r\n    function getEndTimestamp() external view icoActive returns (uint256) {\r\n        return endICOTimestamp;\r\n    }\r\n\r\n    function getStartPrice() external view icoActive returns (uint256) {\r\n        return _startPrice;\r\n    }\r\n\r\n    function getEndPrice() external view icoActive returns (uint256) {\r\n        return _endPrice;\r\n    }\r\n\r\n    function getStageCount() external view icoActive returns (uint8) {\r\n        return stageCount;\r\n    }\r\n\r\n    function setWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"Pre-Sale: newWallet is the zero address\");\r\n        _wallet = newWallet;\r\n        emit WalletUpdated(_wallet);\r\n    }\r\n\r\n    function setHardCap(uint256 value) external onlyOwner icoActive {\r\n        require(value > 0, \"HardCap is incorrect\");\r\n        hardCap = value;\r\n        emit HardCapUpdated(hardCap);\r\n    }\r\n\r\n    function setMaxPurchase(uint256 value) external onlyOwner icoActive {\r\n        require(value > 0, \"MaxPurchase is incorrect\");\r\n        maxPurchase = value;\r\n        emit MaxPurchaseUpdated(maxPurchase);\r\n    }\r\n\r\n    function setMinPurchase(uint256 value) external onlyOwner icoActive {\r\n        require(value > 0, \"MinPurchase is incorrect\");\r\n        minPurchase = value;\r\n        emit MinPurchaseUpdated(minPurchase);\r\n    }\r\n\r\n    modifier icoActive() {\r\n        require(endICOTimestamp > 0 && startICOTimestamp < endICOTimestamp, \"ICO must be active.\");\r\n        require(block.timestamp < endICOTimestamp, \"current Time should be lower than end time.\");\r\n        require(availableTokens > 0, \"available tokens must exist.\");\r\n        _;\r\n    }\r\n\r\n    modifier icoNotActive() {\r\n        require(_isIcoActive() == false, 'ICO should not be active');\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractHasUSDT() {\r\n        require(_usdtToken.balanceOf(address(this)) > 0, 'Pre-Sale: Contract has no usdt.');\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractHasCurrency() {\r\n        require(address(this).balance > 0, 'Pre-Sale: Contract has no main currency.');\r\n        _;\r\n    }\r\n\r\n    modifier onlyBridge() {\r\n        require(_bridge == _msgSender(), 'Only bridge can invoke this function.');\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primaryCurrencyPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondaryCurrencyPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"HardCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPurchaseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinPurchaseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"TokensDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchased_token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtRaised\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_bridge\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_endPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_time_unit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressHandler\",\"outputs\":[{\"internalType\":\"contract AddressHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressString\",\"type\":\"string\"}],\"name\":\"buyTokensByPrimaryCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensByPrimaryCurrencyWithoutReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"addressString\",\"type\":\"string\"}],\"name\":\"buyTokensByPrimaryUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondaryCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTokensBySecondaryCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTokensBySecondaryUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"checkIfPurchaseEnabledBySecondaryCurrency\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"checkIfPurchaseEnabledBySecondaryUSDT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareCurrentAvailableTokensAsSuppliedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endICOTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressString\",\"type\":\"string\"}],\"name\":\"getAddressFromString\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIcoStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumUSDTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimaryCurrencyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondaryCurrencyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStageCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStopIcoRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getTokenBoughtFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invokeTokensAfterPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isZeroAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retakeRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stageCount_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap_\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startICOTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suppliedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ICOPrimary", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f91cac93e07ae97642fd22ac053346279d95b1c900000000000000000000000059977789cfe751d4c4dced65838f696e3f95c164000000000000000000000000a1d22c7392a446efea69fd3e1115c940d9c2a90900000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee0000000000000000000000009ef1b8c0e4f7dc8bf5719ea496883dc6401d5b2e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36e212bdc59a1dcb350578d55ef1b1839bbef3f9c306edac76c96cdc33c165a9"}