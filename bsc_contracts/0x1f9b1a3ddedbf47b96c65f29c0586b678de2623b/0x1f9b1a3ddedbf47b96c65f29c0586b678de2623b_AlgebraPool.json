{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IAlgebraPool.sol';\\nimport './interfaces/IDataStorageOperator.sol';\\nimport './interfaces/IAlgebraVirtualPool.sol';\\n\\nimport './base/PoolState.sol';\\nimport './base/PoolImmutables.sol';\\n\\nimport './libraries/TokenDeltaMath.sol';\\nimport './libraries/PriceMovementMath.sol';\\nimport './libraries/TickManager.sol';\\nimport './libraries/TickTable.sol';\\n\\nimport './libraries/LowGasSafeMath.sol';\\nimport './libraries/SafeCast.sol';\\n\\nimport './libraries/FullMath.sol';\\nimport './libraries/Constants.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './libraries/TickMath.sol';\\nimport './libraries/LiquidityMath.sol';\\n\\nimport './interfaces/IAlgebraPoolDeployer.sol';\\nimport './interfaces/IAlgebraFactory.sol';\\nimport './interfaces/IERC20Minimal.sol';\\nimport './interfaces/callback/IAlgebraMintCallback.sol';\\nimport './interfaces/callback/IAlgebraSwapCallback.sol';\\nimport './interfaces/callback/IAlgebraFlashCallback.sol';\\n\\ncontract AlgebraPool is PoolState, PoolImmutables, IAlgebraPool {\\n  using LowGasSafeMath for uint256;\\n  using LowGasSafeMath for int256;\\n  using LowGasSafeMath for uint128;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using TickTable for mapping(int16 => uint256);\\n  using TickManager for mapping(int24 => TickManager.Tick);\\n\\n  struct Position {\\n    uint128 liquidity; // The amount of liquidity concentrated in the range\\n    uint32 lastLiquidityAddTimestamp; // Timestamp of last adding of liquidity\\n    uint256 innerFeeGrowth0Token; // The last updated fee growth per unit of liquidity\\n    uint256 innerFeeGrowth1Token;\\n    uint128 fees0; // The amount of token0 owed to a LP\\n    uint128 fees1; // The amount of token1 owed to a LP\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  mapping(bytes32 => Position) public override positions;\\n\\n  /// @dev Restricts everyone calling a function except factory owner\\n  modifier onlyFactoryOwner() {\\n    require(msg.sender == IAlgebraFactory(factory).owner());\\n    _;\\n  }\\n\\n  modifier onlyValidTicks(int24 bottomTick, int24 topTick) {\\n    require(topTick < TickMath.MAX_TICK + 1, 'TUM');\\n    require(topTick > bottomTick, 'TLU');\\n    require(bottomTick > TickMath.MIN_TICK - 1, 'TLM');\\n    _;\\n  }\\n\\n  constructor() PoolImmutables(msg.sender) {\\n    globalState.fee = Constants.BASE_FEE;\\n    globalState.communityFeeToken0 = Constants.MAX_COMMUNITY_FEE;\\n    globalState.communityFeeToken1 = Constants.MAX_COMMUNITY_FEE;\\n  }\\n\\n  function balanceToken0() private view returns (uint256) {\\n    return IERC20Minimal(token0).balanceOf(address(this));\\n  }\\n\\n  function balanceToken1() private view returns (uint256) {\\n    return IERC20Minimal(token1).balanceOf(address(this));\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    override\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    )\\n  {\\n    return IDataStorageOperator(dataStorageOperator).timepoints(index);\\n  }\\n\\n  struct Cumulatives {\\n    int56 tickCumulative;\\n    uint160 outerSecondPerLiquidity;\\n    uint32 outerSecondsSpent;\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolDerivedState\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\n    external\\n    view\\n    override\\n    onlyValidTicks(bottomTick, topTick)\\n    returns (\\n      int56 innerTickCumulative,\\n      uint160 innerSecondsSpentPerLiquidity,\\n      uint32 innerSecondsSpent\\n    )\\n  {\\n    Cumulatives memory lower;\\n    {\\n      TickManager.Tick storage _lower = ticks[bottomTick];\\n      (lower.tickCumulative, lower.outerSecondPerLiquidity, lower.outerSecondsSpent) = (\\n        _lower.outerTickCumulative,\\n        _lower.outerSecondsPerLiquidity,\\n        _lower.outerSecondsSpent\\n      );\\n      require(_lower.initialized);\\n    }\\n\\n    Cumulatives memory upper;\\n    {\\n      TickManager.Tick storage _upper = ticks[topTick];\\n      (upper.tickCumulative, upper.outerSecondPerLiquidity, upper.outerSecondsSpent) = (\\n        _upper.outerTickCumulative,\\n        _upper.outerSecondsPerLiquidity,\\n        _upper.outerSecondsSpent\\n      );\\n\\n      require(_upper.initialized);\\n    }\\n\\n    (int24 currentTick, uint16 currentTimepointIndex) = (globalState.tick, globalState.timepointIndex);\\n\\n    if (currentTick < bottomTick) {\\n      return (\\n        lower.tickCumulative - upper.tickCumulative,\\n        lower.outerSecondPerLiquidity - upper.outerSecondPerLiquidity,\\n        lower.outerSecondsSpent - upper.outerSecondsSpent\\n      );\\n    }\\n\\n    if (currentTick < topTick) {\\n      uint32 globalTime = _blockTimestamp();\\n      (int56 globalTickCumulative, uint160 globalSecondsPerLiquidityCumulative, , ) = _getSingleTimepoint(\\n        globalTime,\\n        0,\\n        currentTick,\\n        currentTimepointIndex,\\n        liquidity\\n      );\\n      return (\\n        globalTickCumulative - lower.tickCumulative - upper.tickCumulative,\\n        globalSecondsPerLiquidityCumulative - lower.outerSecondPerLiquidity - upper.outerSecondPerLiquidity,\\n        globalTime - lower.outerSecondsSpent - upper.outerSecondsSpent\\n      );\\n    }\\n\\n    return (\\n      upper.tickCumulative - lower.tickCumulative,\\n      upper.outerSecondPerLiquidity - lower.outerSecondPerLiquidity,\\n      upper.outerSecondsSpent - lower.outerSecondsSpent\\n    );\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolDerivedState\\n  function getTimepoints(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    override\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    )\\n  {\\n    return\\n      IDataStorageOperator(dataStorageOperator).getTimepoints(\\n        _blockTimestamp(),\\n        secondsAgos,\\n        globalState.tick,\\n        globalState.timepointIndex,\\n        liquidity\\n      );\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function initialize(uint160 initialPrice) external override {\\n    require(globalState.price == 0, 'AI');\\n    // getTickAtSqrtRatio checks validity of initialPrice inside\\n    int24 tick = TickMath.getTickAtSqrtRatio(initialPrice);\\n\\n    uint32 timestamp = _blockTimestamp();\\n    IDataStorageOperator(dataStorageOperator).initialize(timestamp, tick);\\n\\n    globalState.price = initialPrice;\\n    globalState.unlocked = true;\\n    globalState.tick = tick;\\n\\n    emit Initialize(initialPrice, tick);\\n  }\\n\\n  /**\\n   * @notice Increases amounts of tokens owed to owner of the position\\n   * @param _position The position object to operate with\\n   * @param liquidityDelta The amount on which to increase\\\\decrease the liquidity\\n   * @param innerFeeGrowth0Token Total fee token0 fee growth per 1/liquidity between position's lower and upper ticks\\n   * @param innerFeeGrowth1Token Total fee token1 fee growth per 1/liquidity between position's lower and upper ticks\\n   */\\n  function _recalculatePosition(\\n    Position storage _position,\\n    int128 liquidityDelta,\\n    uint256 innerFeeGrowth0Token,\\n    uint256 innerFeeGrowth1Token\\n  ) internal {\\n    (uint128 currentLiquidity, uint32 lastLiquidityAddTimestamp) = (_position.liquidity, _position.lastLiquidityAddTimestamp);\\n\\n    if (liquidityDelta == 0) {\\n      require(currentLiquidity > 0, 'NP'); // Do not recalculate the empty ranges\\n    } else {\\n      if (liquidityDelta < 0) {\\n        uint32 _liquidityCooldown = liquidityCooldown;\\n        if (_liquidityCooldown > 0) {\\n          require((_blockTimestamp() - lastLiquidityAddTimestamp) >= _liquidityCooldown);\\n        }\\n      }\\n\\n      // change position liquidity\\n      uint128 liquidityNext = LiquidityMath.addDelta(currentLiquidity, liquidityDelta);\\n      (_position.liquidity, _position.lastLiquidityAddTimestamp) = (\\n        liquidityNext,\\n        liquidityNext > 0 ? (liquidityDelta > 0 ? _blockTimestamp() : lastLiquidityAddTimestamp) : 0\\n      );\\n    }\\n\\n    // update the position\\n    uint256 _innerFeeGrowth0Token = _position.innerFeeGrowth0Token;\\n    uint256 _innerFeeGrowth1Token = _position.innerFeeGrowth1Token;\\n    uint128 fees0;\\n    if (innerFeeGrowth0Token != _innerFeeGrowth0Token) {\\n      _position.innerFeeGrowth0Token = innerFeeGrowth0Token;\\n      fees0 = uint128(FullMath.mulDiv(innerFeeGrowth0Token - _innerFeeGrowth0Token, currentLiquidity, Constants.Q128));\\n    }\\n    uint128 fees1;\\n    if (innerFeeGrowth1Token != _innerFeeGrowth1Token) {\\n      _position.innerFeeGrowth1Token = innerFeeGrowth1Token;\\n      fees1 = uint128(FullMath.mulDiv(innerFeeGrowth1Token - _innerFeeGrowth1Token, currentLiquidity, Constants.Q128));\\n    }\\n\\n    // To avoid overflow owner has to collect fee before it\\n    if (fees0 | fees1 != 0) {\\n      _position.fees0 += fees0;\\n      _position.fees1 += fees1;\\n    }\\n  }\\n\\n  struct UpdatePositionCache {\\n    uint160 price; // The square root of the current price in Q64.96 format\\n    int24 tick; // The current tick\\n    uint16 timepointIndex; // The index of the last written timepoint\\n  }\\n\\n  /**\\n   * @dev Updates position's ticks and its fees\\n   * @return position The Position object to operate with\\n   * @return amount0 The amount of token0 the caller needs to send, negative if the pool needs to send it\\n   * @return amount1 The amount of token1 the caller needs to send, negative if the pool needs to send it\\n   */\\n  function _updatePositionTicksAndFees(\\n    address owner,\\n    int24 bottomTick,\\n    int24 topTick,\\n    int128 liquidityDelta\\n  )\\n    private\\n    returns (\\n      Position storage position,\\n      int256 amount0,\\n      int256 amount1\\n    )\\n  {\\n    UpdatePositionCache memory cache = UpdatePositionCache(globalState.price, globalState.tick, globalState.timepointIndex);\\n\\n    position = getOrCreatePosition(owner, bottomTick, topTick);\\n\\n    (uint256 _totalFeeGrowth0Token, uint256 _totalFeeGrowth1Token) = (totalFeeGrowth0Token, totalFeeGrowth1Token);\\n\\n    bool toggledBottom;\\n    bool toggledTop;\\n    if (liquidityDelta != 0) {\\n      uint32 time = _blockTimestamp();\\n      (int56 tickCumulative, uint160 secondsPerLiquidityCumulative, , ) = _getSingleTimepoint(time, 0, cache.tick, cache.timepointIndex, liquidity);\\n\\n      if (\\n        ticks.update(\\n          bottomTick,\\n          cache.tick,\\n          liquidityDelta,\\n          _totalFeeGrowth0Token,\\n          _totalFeeGrowth1Token,\\n          secondsPerLiquidityCumulative,\\n          tickCumulative,\\n          time,\\n          false // isTopTick\\n        )\\n      ) {\\n        toggledBottom = true;\\n        tickTable.toggleTick(bottomTick);\\n      }\\n\\n      if (\\n        ticks.update(\\n          topTick,\\n          cache.tick,\\n          liquidityDelta,\\n          _totalFeeGrowth0Token,\\n          _totalFeeGrowth1Token,\\n          secondsPerLiquidityCumulative,\\n          tickCumulative,\\n          time,\\n          true // isTopTick\\n        )\\n      ) {\\n        toggledTop = true;\\n        tickTable.toggleTick(topTick);\\n      }\\n    }\\n\\n    (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getInnerFeeGrowth(\\n      bottomTick,\\n      topTick,\\n      cache.tick,\\n      _totalFeeGrowth0Token,\\n      _totalFeeGrowth1Token\\n    );\\n\\n    _recalculatePosition(position, liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\\n\\n    if (liquidityDelta != 0) {\\n      // if liquidityDelta is negative and the tick was toggled, it means that it should not be initialized anymore, so we delete it\\n      if (liquidityDelta < 0) {\\n        if (toggledBottom) delete ticks[bottomTick];\\n        if (toggledTop) delete ticks[topTick];\\n      }\\n\\n      int128 globalLiquidityDelta;\\n      (amount0, amount1, globalLiquidityDelta) = _getAmountsForLiquidity(bottomTick, topTick, liquidityDelta, cache.tick, cache.price);\\n      if (globalLiquidityDelta != 0) {\\n        uint128 liquidityBefore = liquidity;\\n        uint16 newTimepointIndex = _writeTimepoint(cache.timepointIndex, _blockTimestamp(), cache.tick, liquidityBefore, volumePerLiquidityInBlock);\\n        if (cache.timepointIndex != newTimepointIndex) {\\n          globalState.fee = _getNewFee(_blockTimestamp(), cache.tick, newTimepointIndex, liquidityBefore);\\n          globalState.timepointIndex = newTimepointIndex;\\n          volumePerLiquidityInBlock = 0;\\n        }\\n        liquidity = LiquidityMath.addDelta(liquidityBefore, liquidityDelta);\\n      }\\n    }\\n  }\\n\\n  function _getAmountsForLiquidity(\\n    int24 bottomTick,\\n    int24 topTick,\\n    int128 liquidityDelta,\\n    int24 currentTick,\\n    uint160 currentPrice\\n  )\\n    private\\n    pure\\n    returns (\\n      int256 amount0,\\n      int256 amount1,\\n      int128 globalLiquidityDelta\\n    )\\n  {\\n    // If current tick is less than the provided bottom one then only the token0 has to be provided\\n    if (currentTick < bottomTick) {\\n      amount0 = TokenDeltaMath.getToken0Delta(TickMath.getSqrtRatioAtTick(bottomTick), TickMath.getSqrtRatioAtTick(topTick), liquidityDelta);\\n    } else if (currentTick < topTick) {\\n      amount0 = TokenDeltaMath.getToken0Delta(currentPrice, TickMath.getSqrtRatioAtTick(topTick), liquidityDelta);\\n      amount1 = TokenDeltaMath.getToken1Delta(TickMath.getSqrtRatioAtTick(bottomTick), currentPrice, liquidityDelta);\\n\\n      globalLiquidityDelta = liquidityDelta;\\n    }\\n    // If current tick is greater than the provided top one then only the token1 has to be provided\\n    else {\\n      amount1 = TokenDeltaMath.getToken1Delta(TickMath.getSqrtRatioAtTick(bottomTick), TickMath.getSqrtRatioAtTick(topTick), liquidityDelta);\\n    }\\n  }\\n\\n  /**\\n   * @notice This function fetches certain position object\\n   * @param owner The address owing the position\\n   * @param bottomTick The position's bottom tick\\n   * @param topTick The position's top tick\\n   * @return position The Position object\\n   */\\n  function getOrCreatePosition(\\n    address owner,\\n    int24 bottomTick,\\n    int24 topTick\\n  ) private view returns (Position storage) {\\n    bytes32 key;\\n    assembly {\\n      key := or(shl(24, or(shl(24, owner), and(bottomTick, 0xFFFFFF))), and(topTick, 0xFFFFFF))\\n    }\\n    return positions[key];\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function mint(\\n    address sender,\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 liquidityDesired,\\n    bytes calldata data\\n  )\\n    external\\n    override\\n    lock\\n    onlyValidTicks(bottomTick, topTick)\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint128 liquidityActual\\n    )\\n  {\\n    require(liquidityDesired > 0, 'IL');\\n    {\\n      (int256 amount0Int, int256 amount1Int, ) = _getAmountsForLiquidity(\\n        bottomTick,\\n        topTick,\\n        int256(liquidityDesired).toInt128(),\\n        globalState.tick,\\n        globalState.price\\n      );\\n\\n      amount0 = uint256(amount0Int);\\n      amount1 = uint256(amount1Int);\\n    }\\n\\n    uint256 receivedAmount0;\\n    uint256 receivedAmount1;\\n    {\\n      if (amount0 > 0) receivedAmount0 = balanceToken0();\\n      if (amount1 > 0) receivedAmount1 = balanceToken1();\\n      IAlgebraMintCallback(msg.sender).algebraMintCallback(amount0, amount1, data);\\n      if (amount0 > 0) require((receivedAmount0 = balanceToken0() - receivedAmount0) > 0, 'IIAM');\\n      if (amount1 > 0) require((receivedAmount1 = balanceToken1() - receivedAmount1) > 0, 'IIAM');\\n    }\\n\\n    liquidityActual = liquidityDesired;\\n    if (receivedAmount0 < amount0) {\\n      liquidityActual = uint128(FullMath.mulDiv(uint256(liquidityActual), receivedAmount0, amount0));\\n    }\\n    if (receivedAmount1 < amount1) {\\n      uint128 liquidityForRA1 = uint128(FullMath.mulDiv(uint256(liquidityActual), receivedAmount1, amount1));\\n      if (liquidityForRA1 < liquidityActual) {\\n        liquidityActual = liquidityForRA1;\\n      }\\n    }\\n\\n    require(liquidityActual > 0, 'IIL2');\\n\\n    {\\n      (, int256 amount0Int, int256 amount1Int) = _updatePositionTicksAndFees(recipient, bottomTick, topTick, int256(liquidityActual).toInt128());\\n\\n      require((amount0 = uint256(amount0Int)) <= receivedAmount0, 'IIAM2');\\n      require((amount1 = uint256(amount1Int)) <= receivedAmount1, 'IIAM2');\\n    }\\n\\n    if (receivedAmount0 > amount0) {\\n      TransferHelper.safeTransfer(token0, sender, receivedAmount0 - amount0);\\n    }\\n    if (receivedAmount1 > amount1) {\\n      TransferHelper.safeTransfer(token1, sender, receivedAmount1 - amount1);\\n    }\\n    emit Mint(msg.sender, recipient, bottomTick, topTick, liquidityActual, amount0, amount1);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function collect(\\n    address recipient,\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external override lock returns (uint128 amount0, uint128 amount1) {\\n    Position storage position = getOrCreatePosition(msg.sender, bottomTick, topTick);\\n    (uint128 positionFees0, uint128 positionFees1) = (position.fees0, position.fees1);\\n\\n    amount0 = amount0Requested > positionFees0 ? positionFees0 : amount0Requested;\\n    amount1 = amount1Requested > positionFees1 ? positionFees1 : amount1Requested;\\n\\n    if (amount0 | amount1 != 0) {\\n      position.fees0 = positionFees0 - amount0;\\n      position.fees1 = positionFees1 - amount1;\\n\\n      if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\\n      if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\\n    }\\n\\n    emit Collect(msg.sender, recipient, bottomTick, topTick, amount0, amount1);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function burn(\\n    int24 bottomTick,\\n    int24 topTick,\\n    uint128 amount\\n  ) external override lock onlyValidTicks(bottomTick, topTick) returns (uint256 amount0, uint256 amount1) {\\n    (Position storage position, int256 amount0Int, int256 amount1Int) = _updatePositionTicksAndFees(\\n      msg.sender,\\n      bottomTick,\\n      topTick,\\n      -int256(amount).toInt128()\\n    );\\n\\n    amount0 = uint256(-amount0Int);\\n    amount1 = uint256(-amount1Int);\\n\\n    if (amount0 | amount1 != 0) {\\n      (position.fees0, position.fees1) = (position.fees0.add128(uint128(amount0)), position.fees1.add128(uint128(amount1)));\\n    }\\n\\n    emit Burn(msg.sender, bottomTick, topTick, amount, amount0, amount1);\\n  }\\n\\n  /// @dev Returns new fee according combination of sigmoids\\n  function _getNewFee(\\n    uint32 _time,\\n    int24 _tick,\\n    uint16 _index,\\n    uint128 _liquidity\\n  ) private returns (uint16 newFee) {\\n    newFee = IDataStorageOperator(dataStorageOperator).getFee(_time, _tick, _index, _liquidity);\\n    emit Fee(newFee);\\n  }\\n\\n  function _payCommunityFee(address token, uint256 amount) private {\\n    address vault = IAlgebraFactory(factory).vaultAddress();\\n    TransferHelper.safeTransfer(token, vault, amount);\\n  }\\n\\n  function _writeTimepoint(\\n    uint16 timepointIndex,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint128 volumePerLiquidityInBlock\\n  ) private returns (uint16 newTimepointIndex) {\\n    return IDataStorageOperator(dataStorageOperator).write(timepointIndex, blockTimestamp, tick, liquidity, volumePerLiquidityInBlock);\\n  }\\n\\n  function _getSingleTimepoint(\\n    uint32 blockTimestamp,\\n    uint32 secondsAgo,\\n    int24 startTick,\\n    uint16 timepointIndex,\\n    uint128 liquidityStart\\n  )\\n    private\\n    view\\n    returns (\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint112 volatilityCumulative,\\n      uint256 volumePerAvgLiquidity\\n    )\\n  {\\n    return IDataStorageOperator(dataStorageOperator).getSingleTimepoint(blockTimestamp, secondsAgo, startTick, timepointIndex, liquidityStart);\\n  }\\n\\n  function _swapCallback(\\n    int256 amount0,\\n    int256 amount1,\\n    bytes calldata data\\n  ) private {\\n    IAlgebraSwapCallback(msg.sender).algebraSwapCallback(amount0, amount1, data);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function swap(\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountRequired,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external override returns (int256 amount0, int256 amount1) {\\n    uint160 currentPrice;\\n    int24 currentTick;\\n    uint128 currentLiquidity;\\n    uint256 communityFee;\\n    // function _calculateSwapAndLock locks globalState.unlocked and does not release\\n    (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwapAndLock(zeroToOne, amountRequired, limitSqrtPrice);\\n\\n    if (zeroToOne) {\\n      if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1)); // transfer to recipient\\n\\n      uint256 balance0Before = balanceToken0();\\n      _swapCallback(amount0, amount1, data); // callback to get tokens from the caller\\n      require(balance0Before.add(uint256(amount0)) <= balanceToken0(), 'IIA');\\n    } else {\\n      if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0)); // transfer to recipient\\n\\n      uint256 balance1Before = balanceToken1();\\n      _swapCallback(amount0, amount1, data); // callback to get tokens from the caller\\n      require(balance1Before.add(uint256(amount1)) <= balanceToken1(), 'IIA');\\n    }\\n\\n    if (communityFee > 0) {\\n      _payCommunityFee(zeroToOne ? token0 : token1, communityFee);\\n    }\\n\\n    emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\\n    globalState.unlocked = true; // release after lock in _calculateSwapAndLock\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function swapSupportingFeeOnInputTokens(\\n    address sender,\\n    address recipient,\\n    bool zeroToOne,\\n    int256 amountRequired,\\n    uint160 limitSqrtPrice,\\n    bytes calldata data\\n  ) external override returns (int256 amount0, int256 amount1) {\\n    // Since the pool can get less tokens then sent, firstly we are getting tokens from the\\n    // original caller of the transaction. And change the _amountRequired_\\n    require(globalState.unlocked, 'LOK');\\n    globalState.unlocked = false;\\n    if (zeroToOne) {\\n      uint256 balance0Before = balanceToken0();\\n      _swapCallback(amountRequired, 0, data);\\n      require((amountRequired = int256(balanceToken0().sub(balance0Before))) > 0, 'IIA');\\n    } else {\\n      uint256 balance1Before = balanceToken1();\\n      _swapCallback(0, amountRequired, data);\\n      require((amountRequired = int256(balanceToken1().sub(balance1Before))) > 0, 'IIA');\\n    }\\n    globalState.unlocked = true;\\n\\n    uint160 currentPrice;\\n    int24 currentTick;\\n    uint128 currentLiquidity;\\n    uint256 communityFee;\\n    // function _calculateSwapAndLock locks 'globalState.unlocked' and does not release\\n    (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwapAndLock(zeroToOne, amountRequired, limitSqrtPrice);\\n\\n    // only transfer to the recipient\\n    if (zeroToOne) {\\n      if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n      // return the leftovers\\n      if (amount0 < amountRequired) TransferHelper.safeTransfer(token0, sender, uint256(amountRequired.sub(amount0)));\\n    } else {\\n      if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n      // return the leftovers\\n      if (amount1 < amountRequired) TransferHelper.safeTransfer(token1, sender, uint256(amountRequired.sub(amount1)));\\n    }\\n\\n    if (communityFee > 0) {\\n      _payCommunityFee(zeroToOne ? token0 : token1, communityFee);\\n    }\\n\\n    emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\\n    globalState.unlocked = true; // release after lock in _calculateSwapAndLock\\n  }\\n\\n  struct SwapCalculationCache {\\n    uint256 communityFee; // The community fee of the selling token, uint256 to minimize casts\\n    uint128 volumePerLiquidityInBlock;\\n    int56 tickCumulative; // The global tickCumulative at the moment\\n    uint160 secondsPerLiquidityCumulative; // The global secondPerLiquidity at the moment\\n    bool computedLatestTimepoint; //  if we have already fetched _tickCumulative_ and _secondPerLiquidity_ from the DataOperator\\n    int256 amountRequiredInitial; // The initial value of the exact input\\\\output amount\\n    int256 amountCalculated; // The additive amount of total output\\\\input calculated trough the swap\\n    uint256 totalFeeGrowth; // The initial totalFeeGrowth + the fee growth during a swap\\n    uint256 totalFeeGrowthB;\\n    IAlgebraVirtualPool.Status incentiveStatus; // If there is an active incentive at the moment\\n    bool exactInput; // Whether the exact input or output is specified\\n    uint16 fee; // The current dynamic fee\\n    int24 startTick; // The tick at the start of a swap\\n    uint16 timepointIndex; // The index of last written timepoint\\n  }\\n\\n  struct PriceMovementCache {\\n    uint160 stepSqrtPrice; // The Q64.96 sqrt of the price at the start of the step\\n    int24 nextTick; // The tick till the current step goes\\n    bool initialized; // True if the _nextTick is initialized\\n    uint160 nextTickPrice; // The Q64.96 sqrt of the price calculated from the _nextTick\\n    uint256 input; // The additive amount of tokens that have been provided\\n    uint256 output; // The additive amount of token that have been withdrawn\\n    uint256 feeAmount; // The total amount of fee earned within a current step\\n  }\\n\\n  /// @notice For gas optimization, locks 'globalState.unlocked' and does not release.\\n  function _calculateSwapAndLock(\\n    bool zeroToOne,\\n    int256 amountRequired,\\n    uint160 limitSqrtPrice\\n  )\\n    private\\n    returns (\\n      int256 amount0,\\n      int256 amount1,\\n      uint160 currentPrice,\\n      int24 currentTick,\\n      uint128 currentLiquidity,\\n      uint256 communityFeeAmount\\n    )\\n  {\\n    uint32 blockTimestamp;\\n    SwapCalculationCache memory cache;\\n    {\\n      // load from one storage slot\\n      currentPrice = globalState.price;\\n      currentTick = globalState.tick;\\n      cache.fee = globalState.fee;\\n      cache.timepointIndex = globalState.timepointIndex;\\n      uint256 _communityFeeToken0 = globalState.communityFeeToken0;\\n      uint256 _communityFeeToken1 = globalState.communityFeeToken1;\\n      bool unlocked = globalState.unlocked;\\n\\n      globalState.unlocked = false; // lock will not be released in this function\\n      require(unlocked, 'LOK');\\n\\n      require(amountRequired != 0, 'AS');\\n      (cache.amountRequiredInitial, cache.exactInput) = (amountRequired, amountRequired > 0);\\n\\n      (currentLiquidity, cache.volumePerLiquidityInBlock) = (liquidity, volumePerLiquidityInBlock);\\n\\n      if (zeroToOne) {\\n        require(limitSqrtPrice < currentPrice && limitSqrtPrice > TickMath.MIN_SQRT_RATIO, 'SPL');\\n        cache.totalFeeGrowth = totalFeeGrowth0Token;\\n        cache.communityFee = _communityFeeToken0;\\n      } else {\\n        require(limitSqrtPrice > currentPrice && limitSqrtPrice < TickMath.MAX_SQRT_RATIO, 'SPL');\\n        cache.totalFeeGrowth = totalFeeGrowth1Token;\\n        cache.communityFee = _communityFeeToken1;\\n      }\\n\\n      cache.startTick = currentTick;\\n\\n      blockTimestamp = _blockTimestamp();\\n\\n      if (activeIncentive != address(0)) {\\n        IAlgebraVirtualPool.Status _status = IAlgebraVirtualPool(activeIncentive).increaseCumulative(blockTimestamp);\\n        if (_status == IAlgebraVirtualPool.Status.NOT_EXIST) {\\n          activeIncentive = address(0);\\n        } else if (_status == IAlgebraVirtualPool.Status.ACTIVE) {\\n          cache.incentiveStatus = IAlgebraVirtualPool.Status.ACTIVE;\\n        } else if (_status == IAlgebraVirtualPool.Status.NOT_STARTED) {\\n          cache.incentiveStatus = IAlgebraVirtualPool.Status.NOT_STARTED;\\n        }\\n      }\\n\\n      uint16 newTimepointIndex = _writeTimepoint(\\n        cache.timepointIndex,\\n        blockTimestamp,\\n        cache.startTick,\\n        currentLiquidity,\\n        cache.volumePerLiquidityInBlock\\n      );\\n\\n      // new timepoint appears only for first swap in block\\n      if (newTimepointIndex != cache.timepointIndex) {\\n        cache.timepointIndex = newTimepointIndex;\\n        cache.volumePerLiquidityInBlock = 0;\\n        cache.fee = _getNewFee(blockTimestamp, currentTick, newTimepointIndex, currentLiquidity);\\n      }\\n    }\\n\\n    PriceMovementCache memory step;\\n    // swap until there is remaining input or output tokens or we reach the price limit\\n    while (true) {\\n      step.stepSqrtPrice = currentPrice;\\n\\n      (step.nextTick, step.initialized) = tickTable.nextTickInTheSameRow(currentTick, zeroToOne);\\n\\n      step.nextTickPrice = TickMath.getSqrtRatioAtTick(step.nextTick);\\n\\n      // calculate the amounts needed to move the price to the next target if it is possible or as much as possible\\n      (currentPrice, step.input, step.output, step.feeAmount) = PriceMovementMath.movePriceTowardsTarget(\\n        zeroToOne,\\n        currentPrice,\\n        (zeroToOne == (step.nextTickPrice < limitSqrtPrice)) // move the price to the target or to the limit\\n          ? limitSqrtPrice\\n          : step.nextTickPrice,\\n        currentLiquidity,\\n        amountRequired,\\n        cache.fee\\n      );\\n\\n      if (cache.exactInput) {\\n        amountRequired -= (step.input + step.feeAmount).toInt256(); // decrease remaining input amount\\n        cache.amountCalculated = cache.amountCalculated.sub(step.output.toInt256()); // decrease calculated output amount\\n      } else {\\n        amountRequired += step.output.toInt256(); // increase remaining output amount (since its negative)\\n        cache.amountCalculated = cache.amountCalculated.add((step.input + step.feeAmount).toInt256()); // increase calculated input amount\\n      }\\n\\n      if (cache.communityFee > 0) {\\n        uint256 delta = (step.feeAmount.mul(cache.communityFee)) / Constants.COMMUNITY_FEE_DENOMINATOR;\\n        step.feeAmount -= delta;\\n        communityFeeAmount += delta;\\n      }\\n\\n      if (currentLiquidity > 0) cache.totalFeeGrowth += FullMath.mulDiv(step.feeAmount, Constants.Q128, currentLiquidity);\\n\\n      if (currentPrice == step.nextTickPrice) {\\n        // if the reached tick is initialized then we need to cross it\\n        if (step.initialized) {\\n          // once at a swap we have to get the last timepoint of the observation\\n          if (!cache.computedLatestTimepoint) {\\n            (cache.tickCumulative, cache.secondsPerLiquidityCumulative, , ) = _getSingleTimepoint(\\n              blockTimestamp,\\n              0,\\n              cache.startTick,\\n              cache.timepointIndex,\\n              currentLiquidity // currentLiquidity can be changed only after computedLatestTimepoint\\n            );\\n            cache.computedLatestTimepoint = true;\\n            cache.totalFeeGrowthB = zeroToOne ? totalFeeGrowth1Token : totalFeeGrowth0Token;\\n          }\\n          // every tick cross is needed to be duplicated in a virtual pool\\n          if (cache.incentiveStatus != IAlgebraVirtualPool.Status.NOT_EXIST) {\\n            IAlgebraVirtualPool(activeIncentive).cross(step.nextTick, zeroToOne);\\n          }\\n          int128 liquidityDelta;\\n          if (zeroToOne) {\\n            liquidityDelta = -ticks.cross(\\n              step.nextTick,\\n              cache.totalFeeGrowth, // A == 0\\n              cache.totalFeeGrowthB, // B == 1\\n              cache.secondsPerLiquidityCumulative,\\n              cache.tickCumulative,\\n              blockTimestamp\\n            );\\n          } else {\\n            liquidityDelta = ticks.cross(\\n              step.nextTick,\\n              cache.totalFeeGrowthB, // B == 0\\n              cache.totalFeeGrowth, // A == 1\\n              cache.secondsPerLiquidityCumulative,\\n              cache.tickCumulative,\\n              blockTimestamp\\n            );\\n          }\\n\\n          currentLiquidity = LiquidityMath.addDelta(currentLiquidity, liquidityDelta);\\n        }\\n\\n        currentTick = zeroToOne ? step.nextTick - 1 : step.nextTick;\\n      } else if (currentPrice != step.stepSqrtPrice) {\\n        // if the price has changed but hasn't reached the target\\n        currentTick = TickMath.getTickAtSqrtRatio(currentPrice);\\n        break; // since the price hasn't reached the target, amountRequired should be 0\\n      }\\n\\n      // check stop condition\\n      if (amountRequired == 0 || currentPrice == limitSqrtPrice) {\\n        break;\\n      }\\n    }\\n\\n    (amount0, amount1) = zeroToOne == cache.exactInput // the amount to provide could be less then initially specified (e.g. reached limit)\\n      ? (cache.amountRequiredInitial - amountRequired, cache.amountCalculated) // the amount to get could be less then initially specified (e.g. reached limit)\\n      : (cache.amountCalculated, cache.amountRequiredInitial - amountRequired);\\n\\n    (globalState.price, globalState.tick, globalState.fee, globalState.timepointIndex) = (currentPrice, currentTick, cache.fee, cache.timepointIndex);\\n\\n    (liquidity, volumePerLiquidityInBlock) = (\\n      currentLiquidity,\\n      cache.volumePerLiquidityInBlock + IDataStorageOperator(dataStorageOperator).calculateVolumePerLiquidity(currentLiquidity, amount0, amount1)\\n    );\\n\\n    if (zeroToOne) {\\n      totalFeeGrowth0Token = cache.totalFeeGrowth;\\n    } else {\\n      totalFeeGrowth1Token = cache.totalFeeGrowth;\\n    }\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolActions\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external override lock {\\n    uint128 _liquidity = liquidity;\\n    require(_liquidity > 0, 'L');\\n\\n    uint16 _fee = globalState.fee;\\n\\n    uint256 fee0;\\n    uint256 balance0Before = balanceToken0();\\n    if (amount0 > 0) {\\n      fee0 = FullMath.mulDivRoundingUp(amount0, _fee, 1e6);\\n      TransferHelper.safeTransfer(token0, recipient, amount0);\\n    }\\n\\n    uint256 fee1;\\n    uint256 balance1Before = balanceToken1();\\n    if (amount1 > 0) {\\n      fee1 = FullMath.mulDivRoundingUp(amount1, _fee, 1e6);\\n      TransferHelper.safeTransfer(token1, recipient, amount1);\\n    }\\n\\n    IAlgebraFlashCallback(msg.sender).algebraFlashCallback(fee0, fee1, data);\\n\\n    address vault = IAlgebraFactory(factory).vaultAddress();\\n\\n    uint256 paid0 = balanceToken0();\\n    require(balance0Before.add(fee0) <= paid0, 'F0');\\n    paid0 -= balance0Before;\\n\\n    if (paid0 > 0) {\\n      uint16 _communityFeeToken0 = globalState.communityFeeToken0;\\n      uint256 fees0;\\n      if (_communityFeeToken0 > 0) {\\n        fees0 = (paid0 * _communityFeeToken0) / Constants.COMMUNITY_FEE_DENOMINATOR;\\n        TransferHelper.safeTransfer(token0, vault, fees0);\\n      }\\n      totalFeeGrowth0Token += FullMath.mulDiv(paid0 - fees0, Constants.Q128, _liquidity);\\n    }\\n\\n    uint256 paid1 = balanceToken1();\\n    require(balance1Before.add(fee1) <= paid1, 'F1');\\n    paid1 -= balance1Before;\\n\\n    if (paid1 > 0) {\\n      uint16 _communityFeeToken1 = globalState.communityFeeToken1;\\n      uint256 fees1;\\n      if (_communityFeeToken1 > 0) {\\n        fees1 = (paid1 * _communityFeeToken1) / Constants.COMMUNITY_FEE_DENOMINATOR;\\n        TransferHelper.safeTransfer(token1, vault, fees1);\\n      }\\n      totalFeeGrowth1Token += FullMath.mulDiv(paid1 - fees1, Constants.Q128, _liquidity);\\n    }\\n\\n    emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\n  function setCommunityFee(uint16 communityFee0, uint16 communityFee1) external override lock onlyFactoryOwner {\\n    require((communityFee0 <= Constants.MAX_COMMUNITY_FEE) && (communityFee1 <= Constants.MAX_COMMUNITY_FEE));\\n    (globalState.communityFeeToken0, globalState.communityFeeToken1) = (communityFee0, communityFee1);\\n    emit CommunityFee(communityFee0, communityFee1);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\n  function setIncentive(address virtualPoolAddress) external override {\\n    require(msg.sender == IAlgebraFactory(factory).farmingAddress());\\n    activeIncentive = virtualPoolAddress;\\n\\n    emit Incentive(virtualPoolAddress);\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external override onlyFactoryOwner {\\n    require(newLiquidityCooldown <= Constants.MAX_LIQUIDITY_COOLDOWN && liquidityCooldown != newLiquidityCooldown);\\n    liquidityCooldown = newLiquidityCooldown;\\n    emit LiquidityCooldown(newLiquidityCooldown);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolDerivedState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolDerivedState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraVirtualPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IAlgebraVirtualPool {\\r\\n  enum Status {\\r\\n    NOT_EXIST,\\r\\n    ACTIVE,\\r\\n    NOT_STARTED\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This function is called by the main pool when an initialized tick is crossed there.\\r\\n   * If the tick is also initialized in a virtual pool it should be crossed too\\r\\n   * @param nextTick The crossed tick\\r\\n   * @param zeroToOne The direction\\r\\n   */\\r\\n  function cross(int24 nextTick, bool zeroToOne) external;\\r\\n\\r\\n  /**\\r\\n   * @dev This function is called from the main pool before every swap To increase seconds per liquidity\\r\\n   * cumulative considering previous timestamp and liquidity. The liquidity is stored in a virtual pool\\r\\n   * @param currentTimestamp The timestamp of the current swap\\r\\n   * @return Status The status of virtual pool\\r\\n   */\\r\\n  function increaseCumulative(uint32 currentTimestamp) external returns (Status);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '../libraries/AdaptiveFee.sol';\\r\\n\\r\\ninterface IDataStorageOperator {\\r\\n  event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data belonging to a certain timepoint\\r\\n   * @param index The index of timepoint in the array\\r\\n   * @dev There is more convenient function to fetch a timepoint: getTimepoints(). Which requires not an index but seconds\\r\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\r\\n   * blockTimestamp The timestamp of the observation,\\r\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\r\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\r\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\r\\n   * averageTick Time-weighted average tick,\\r\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n  /// @param tick Initial tick\\r\\n  function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\r\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n  /// at exactly the timestamp between the two timepoints.\\r\\n  /// @param time The current block timestamp\\r\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\r\\n  function getSingleTimepoint(\\r\\n    uint32 time,\\r\\n    uint32 secondsAgo,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint112 volatilityCumulative,\\r\\n      uint256 volumePerAvgLiquidity\\r\\n    );\\r\\n\\r\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\r\\n  function getTimepoints(\\r\\n    uint32 time,\\r\\n    uint32[] memory secondsAgos,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\r\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\r\\n  function getAverages(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\r\\n\\r\\n  /// @notice Writes an dataStorage timepoint to the array\\r\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param blockTimestamp The timestamp of the new timepoint\\r\\n  /// @param tick The active tick at the time of the new timepoint\\r\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\r\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\r\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n  function write(\\r\\n    uint16 index,\\r\\n    uint32 blockTimestamp,\\r\\n    int24 tick,\\r\\n    uint128 liquidity,\\r\\n    uint128 volumePerLiquidity\\r\\n  ) external returns (uint16 indexUpdated);\\r\\n\\r\\n  /// @notice Changes fee configuration for the pool\\r\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata feeConfig) external;\\r\\n\\r\\n  /// @notice Calculates gmean(volume/liquidity) for block\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @param amount0 Total amount of swapped token0\\r\\n  /// @param amount1 Total amount of swapped token1\\r\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\r\\n  function calculateVolumePerLiquidity(\\r\\n    uint128 liquidity,\\r\\n    int256 amount0,\\r\\n    int256 amount1\\r\\n  ) external pure returns (uint128 volumePerLiquidity);\\r\\n\\r\\n  /// @return windowLength Length of window used to calculate averages\\r\\n  function window() external view returns (uint32 windowLength);\\r\\n\\r\\n  /// @notice Calculates fee based on combination of sigmoids\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\r\\n  function getFee(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint16 fee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/PriceMovementMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './FullMath.sol';\\r\\nimport './TokenDeltaMath.sol';\\r\\n\\r\\n/// @title Computes the result of price movement\\r\\n/// @notice Contains methods for computing the result of price movement within a single tick price range.\\r\\nlibrary PriceMovementMath {\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price, i.e., before accounting for the input amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param input How much of token0, or token1, is being swapped in\\r\\n  /// @param zeroToOne Whether the amount in is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after adding the input amount to token0 or token1\\r\\n  function getNewPriceAfterInput(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 input,\\r\\n    bool zeroToOne\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, input, zeroToOne, true);\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price before accounting for the output amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param output How much of token0, or token1, is being swapped out\\r\\n  /// @param zeroToOne Whether the amount out is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after removing the output amount of token0 or token1\\r\\n  function getNewPriceAfterOutput(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 output,\\r\\n    bool zeroToOne\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, output, zeroToOne, false);\\r\\n  }\\r\\n\\r\\n  function getNewPrice(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 amount,\\r\\n    bool zeroToOne,\\r\\n    bool fromInput\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    require(price > 0);\\r\\n    require(liquidity > 0);\\r\\n\\r\\n    if (zeroToOne == fromInput) {\\r\\n      // rounding up or down\\r\\n      if (amount == 0) return price;\\r\\n      uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n      if (fromInput) {\\r\\n        uint256 product;\\r\\n        if ((product = amount * price) / amount == price) {\\r\\n          uint256 denominator = liquidityShifted + product;\\r\\n          if (denominator >= liquidityShifted) return uint160(FullMath.mulDivRoundingUp(liquidityShifted, price, denominator)); // always fits in 160 bits\\r\\n        }\\r\\n\\r\\n        return uint160(FullMath.divRoundingUp(liquidityShifted, (liquidityShifted / price).add(amount)));\\r\\n      } else {\\r\\n        uint256 product;\\r\\n        require((product = amount * price) / amount == price); // if the product overflows, we know the denominator underflows\\r\\n        require(liquidityShifted > product); // in addition, we must check that the denominator does not underflow\\r\\n        return FullMath.mulDivRoundingUp(liquidityShifted, price, liquidityShifted - product).toUint160();\\r\\n      }\\r\\n    } else {\\r\\n      // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\r\\n      // in both cases, avoid a mulDiv for most inputs\\r\\n      if (fromInput) {\\r\\n        return\\r\\n          uint256(price)\\r\\n            .add(amount <= type(uint160).max ? (amount << Constants.RESOLUTION) / liquidity : FullMath.mulDiv(amount, Constants.Q96, liquidity))\\r\\n            .toUint160();\\r\\n      } else {\\r\\n        uint256 quotient = amount <= type(uint160).max\\r\\n          ? FullMath.divRoundingUp(amount << Constants.RESOLUTION, liquidity)\\r\\n          : FullMath.mulDivRoundingUp(amount, Constants.Q96, liquidity);\\r\\n\\r\\n        require(price > quotient);\\r\\n        return uint160(price - quotient); // always fits 160 bits\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getTokenADelta01(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(to, from, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getTokenADelta10(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(from, to, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getTokenBDelta01(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(to, from, liquidity, false);\\r\\n  }\\r\\n\\r\\n  function getTokenBDelta10(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(from, to, liquidity, false);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\r\\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\r\\n  /// @param currentPrice The current Q64.96 sqrt price of the pool\\r\\n  /// @param targetPrice The Q64.96 sqrt price that cannot be exceeded, from which the direction of the swap is inferred\\r\\n  /// @param liquidity The usable liquidity\\r\\n  /// @param amountAvailable How much input or output amount is remaining to be swapped in/out\\r\\n  /// @param fee The fee taken from the input amount, expressed in hundredths of a bip\\r\\n  /// @return resultPrice The Q64.96 sqrt price after swapping the amount in/out, not to exceed the price target\\r\\n  /// @return input The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return output The amount to be received, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return feeAmount The amount of input that will be taken as a fee\\r\\n  function movePriceTowardsTarget(\\r\\n    bool zeroToOne,\\r\\n    uint160 currentPrice,\\r\\n    uint160 targetPrice,\\r\\n    uint128 liquidity,\\r\\n    int256 amountAvailable,\\r\\n    uint16 fee\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      uint160 resultPrice,\\r\\n      uint256 input,\\r\\n      uint256 output,\\r\\n      uint256 feeAmount\\r\\n    )\\r\\n  {\\r\\n    function(uint160, uint160, uint128) pure returns (uint256) getAmountA = zeroToOne ? getTokenADelta01 : getTokenADelta10;\\r\\n\\r\\n    if (amountAvailable >= 0) {\\r\\n      // exactIn or not\\r\\n      uint256 amountAvailableAfterFee = FullMath.mulDiv(uint256(amountAvailable), 1e6 - fee, 1e6);\\r\\n      input = getAmountA(targetPrice, currentPrice, liquidity);\\r\\n      if (amountAvailableAfterFee >= input) {\\r\\n        resultPrice = targetPrice;\\r\\n        feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n      } else {\\r\\n        resultPrice = getNewPriceAfterInput(currentPrice, liquidity, amountAvailableAfterFee, zeroToOne);\\r\\n        if (targetPrice != resultPrice) {\\r\\n          input = getAmountA(resultPrice, currentPrice, liquidity);\\r\\n\\r\\n          // we didn't reach the target, so take the remainder of the maximum input as fee\\r\\n          feeAmount = uint256(amountAvailable) - input;\\r\\n        } else {\\r\\n          feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      output = (zeroToOne ? getTokenBDelta01 : getTokenBDelta10)(resultPrice, currentPrice, liquidity);\\r\\n    } else {\\r\\n      function(uint160, uint160, uint128) pure returns (uint256) getAmountB = zeroToOne ? getTokenBDelta01 : getTokenBDelta10;\\r\\n\\r\\n      output = getAmountB(targetPrice, currentPrice, liquidity);\\r\\n      amountAvailable = -amountAvailable;\\r\\n      if (uint256(amountAvailable) >= output) resultPrice = targetPrice;\\r\\n      else {\\r\\n        resultPrice = getNewPriceAfterOutput(currentPrice, liquidity, uint256(amountAvailable), zeroToOne);\\r\\n\\r\\n        if (targetPrice != resultPrice) {\\r\\n          output = getAmountB(resultPrice, currentPrice, liquidity);\\r\\n        }\\r\\n\\r\\n        // cap the output amount to not exceed the remaining output amount\\r\\n        if (output > uint256(amountAvailable)) {\\r\\n          output = uint256(amountAvailable);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      input = getAmountA(resultPrice, currentPrice, liquidity);\\r\\n      feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolImmutables.sol';\\r\\nimport '../interfaces/IAlgebraPoolDeployer.sol';\\r\\nimport '../libraries/Constants.sol';\\r\\n\\r\\nabstract contract PoolImmutables is IAlgebraPoolImmutables {\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override dataStorageOperator;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override factory;\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override token0;\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override token1;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  function tickSpacing() external pure override returns (int24) {\\r\\n    return Constants.TICK_SPACING;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  function maxLiquidityPerTick() external pure override returns (uint128) {\\r\\n    return Constants.MAX_LIQUIDITY_PER_TICK;\\r\\n  }\\r\\n\\r\\n  constructor(address deployer) {\\r\\n    (dataStorageOperator, factory, token0, token1) = IAlgebraPoolDeployer(deployer).parameters();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TokenDeltaMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './LowGasSafeMath.sol';\\r\\nimport './SafeCast.sol';\\r\\n\\r\\nimport './FullMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\r\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\r\\nlibrary TokenDeltaMath {\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the token0 delta between two prices\\r\\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper)\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up or down\\r\\n  /// @return token0Delta Amount of token0 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken0Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    uint128 liquidity,\\r\\n    bool roundUp\\r\\n  ) internal pure returns (uint256 token0Delta) {\\r\\n    uint256 priceDelta = priceUpper - priceLower;\\r\\n    require(priceDelta < priceUpper); // forbids underflow and 0 priceLower\\r\\n    uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n    token0Delta = roundUp\\r\\n      ? FullMath.divRoundingUp(FullMath.mulDivRoundingUp(priceDelta, liquidityShifted, priceUpper), priceLower)\\r\\n      : FullMath.mulDiv(priceDelta, liquidityShifted, priceUpper) / priceLower;\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the token1 delta between two prices\\r\\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up, or down\\r\\n  /// @return token1Delta Amount of token1 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken1Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    uint128 liquidity,\\r\\n    bool roundUp\\r\\n  ) internal pure returns (uint256 token1Delta) {\\r\\n    require(priceUpper >= priceLower);\\r\\n    uint256 priceDelta = priceUpper - priceLower;\\r\\n    token1Delta = roundUp ? FullMath.mulDivRoundingUp(priceDelta, liquidity, Constants.Q96) : FullMath.mulDiv(priceDelta, liquidity, Constants.Q96);\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token0 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token0 delta\\r\\n  /// @return token0Delta Amount of token0 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken0Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    int128 liquidity\\r\\n  ) internal pure returns (int256 token0Delta) {\\r\\n    token0Delta = liquidity >= 0\\r\\n      ? getToken0Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n      : -getToken0Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token1 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token1 delta\\r\\n  /// @return token1Delta Amount of token1 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken1Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    int128 liquidity\\r\\n  ) internal pure returns (int256 token1Delta) {\\r\\n    token1Delta = liquidity >= 0\\r\\n      ? getToken1Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n      : -getToken1Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TickManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './LowGasSafeMath.sol';\\r\\nimport './SafeCast.sol';\\r\\n\\r\\nimport './LiquidityMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title TickManager\\r\\n/// @notice Contains functions for managing tick processes and relevant calculations\\r\\nlibrary TickManager {\\r\\n  using LowGasSafeMath for int256;\\r\\n  using SafeCast for int256;\\r\\n\\r\\n  // info stored for each initialized individual tick\\r\\n  struct Tick {\\r\\n    uint128 liquidityTotal; // the total position liquidity that references this tick\\r\\n    int128 liquidityDelta; // amount of net liquidity added (subtracted) when tick is crossed left-right (right-left),\\r\\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\r\\n    // only has relative meaning, not absolute \u2014 the value depends on when the tick is initialized\\r\\n    uint256 outerFeeGrowth0Token;\\r\\n    uint256 outerFeeGrowth1Token;\\r\\n    int56 outerTickCumulative; // the cumulative tick value on the other side of the tick\\r\\n    uint160 outerSecondsPerLiquidity; // the seconds per unit of liquidity on the _other_ side of current tick, (relative meaning)\\r\\n    uint32 outerSecondsSpent; // the seconds spent on the other side of the current tick, only has relative meaning\\r\\n    bool initialized; // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\r\\n  }\\r\\n\\r\\n  /// @notice Retrieves fee growth data\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param bottomTick The lower tick boundary of the position\\r\\n  /// @param topTick The upper tick boundary of the position\\r\\n  /// @param currentTick The current tick\\r\\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @return innerFeeGrowth0Token The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\r\\n  /// @return innerFeeGrowth1Token The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\r\\n  function getInnerFeeGrowth(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int24 currentTick,\\r\\n    uint256 totalFeeGrowth0Token,\\r\\n    uint256 totalFeeGrowth1Token\\r\\n  ) internal view returns (uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token) {\\r\\n    Tick storage lower = self[bottomTick];\\r\\n    Tick storage upper = self[topTick];\\r\\n\\r\\n    if (currentTick < topTick) {\\r\\n      if (currentTick >= bottomTick) {\\r\\n        innerFeeGrowth0Token = totalFeeGrowth0Token - lower.outerFeeGrowth0Token;\\r\\n        innerFeeGrowth1Token = totalFeeGrowth1Token - lower.outerFeeGrowth1Token;\\r\\n      } else {\\r\\n        innerFeeGrowth0Token = lower.outerFeeGrowth0Token;\\r\\n        innerFeeGrowth1Token = lower.outerFeeGrowth1Token;\\r\\n      }\\r\\n      innerFeeGrowth0Token -= upper.outerFeeGrowth0Token;\\r\\n      innerFeeGrowth1Token -= upper.outerFeeGrowth1Token;\\r\\n    } else {\\r\\n      innerFeeGrowth0Token = upper.outerFeeGrowth0Token - lower.outerFeeGrowth0Token;\\r\\n      innerFeeGrowth1Token = upper.outerFeeGrowth1Token - lower.outerFeeGrowth1Token;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The tick that will be updated\\r\\n  /// @param currentTick The current tick\\r\\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\r\\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @param secondsPerLiquidityCumulative The all-time seconds per max(1, liquidity) of the pool\\r\\n  /// @param tickCumulative The all-time global cumulative tick\\r\\n  /// @param time The current block timestamp cast to a uint32\\r\\n  /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\r\\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\r\\n  function update(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 tick,\\r\\n    int24 currentTick,\\r\\n    int128 liquidityDelta,\\r\\n    uint256 totalFeeGrowth0Token,\\r\\n    uint256 totalFeeGrowth1Token,\\r\\n    uint160 secondsPerLiquidityCumulative,\\r\\n    int56 tickCumulative,\\r\\n    uint32 time,\\r\\n    bool upper\\r\\n  ) internal returns (bool flipped) {\\r\\n    Tick storage data = self[tick];\\r\\n\\r\\n    int128 liquidityDeltaBefore = data.liquidityDelta;\\r\\n    uint128 liquidityTotalBefore = data.liquidityTotal;\\r\\n\\r\\n    uint128 liquidityTotalAfter = LiquidityMath.addDelta(liquidityTotalBefore, liquidityDelta);\\r\\n    require(liquidityTotalAfter < Constants.MAX_LIQUIDITY_PER_TICK + 1, 'LO');\\r\\n\\r\\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\r\\n    data.liquidityDelta = upper\\r\\n      ? int256(liquidityDeltaBefore).sub(liquidityDelta).toInt128()\\r\\n      : int256(liquidityDeltaBefore).add(liquidityDelta).toInt128();\\r\\n\\r\\n    data.liquidityTotal = liquidityTotalAfter;\\r\\n\\r\\n    flipped = (liquidityTotalAfter == 0);\\r\\n    if (liquidityTotalBefore == 0) {\\r\\n      flipped = !flipped;\\r\\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\r\\n      if (tick <= currentTick) {\\r\\n        data.outerFeeGrowth0Token = totalFeeGrowth0Token;\\r\\n        data.outerFeeGrowth1Token = totalFeeGrowth1Token;\\r\\n        data.outerSecondsPerLiquidity = secondsPerLiquidityCumulative;\\r\\n        data.outerTickCumulative = tickCumulative;\\r\\n        data.outerSecondsSpent = time;\\r\\n      }\\r\\n      data.initialized = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Transitions to next tick as needed by price movement\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The destination tick of the transition\\r\\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @param secondsPerLiquidityCumulative The current seconds per liquidity\\r\\n  /// @param tickCumulative The all-time global cumulative tick\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @return liquidityDelta The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\r\\n  function cross(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 tick,\\r\\n    uint256 totalFeeGrowth0Token,\\r\\n    uint256 totalFeeGrowth1Token,\\r\\n    uint160 secondsPerLiquidityCumulative,\\r\\n    int56 tickCumulative,\\r\\n    uint32 time\\r\\n  ) internal returns (int128 liquidityDelta) {\\r\\n    Tick storage data = self[tick];\\r\\n\\r\\n    data.outerSecondsSpent = time - data.outerSecondsSpent;\\r\\n    data.outerSecondsPerLiquidity = secondsPerLiquidityCumulative - data.outerSecondsPerLiquidity;\\r\\n    data.outerTickCumulative = tickCumulative - data.outerTickCumulative;\\r\\n\\r\\n    data.outerFeeGrowth1Token = totalFeeGrowth1Token - data.outerFeeGrowth1Token;\\r\\n    data.outerFeeGrowth0Token = totalFeeGrowth0Token - data.outerFeeGrowth0Token;\\r\\n\\r\\n    return data.liquidityDelta;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport '../interfaces/pool/IAlgebraPoolState.sol';\\nimport '../libraries/TickManager.sol';\\n\\nabstract contract PoolState is IAlgebraPoolState {\\n  struct GlobalState {\\n    uint160 price; // The square root of the current price in Q64.96 format\\n    int24 tick; // The current tick\\n    uint16 fee; // The current fee in hundredths of a bip, i.e. 1e-6\\n    uint16 timepointIndex; // The index of the last written timepoint\\n    uint16 communityFeeToken0; // The community fee represented as a percent of all collected fee in thousandths (1e-3)\\n    uint16 communityFeeToken1;\\n    bool unlocked; // True if the contract is unlocked, otherwise - false\\n  }\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  uint256 public override totalFeeGrowth0Token;\\n  /// @inheritdoc IAlgebraPoolState\\n  uint256 public override totalFeeGrowth1Token;\\n  /// @inheritdoc IAlgebraPoolState\\n  GlobalState public override globalState;\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  uint128 public override liquidity;\\n  uint128 internal volumePerLiquidityInBlock;\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  uint32 public override liquidityCooldown;\\n  /// @inheritdoc IAlgebraPoolState\\n  address public override activeIncentive;\\n\\n  /// @inheritdoc IAlgebraPoolState\\n  mapping(int24 => TickManager.Tick) public override ticks;\\n  /// @inheritdoc IAlgebraPoolState\\n  mapping(int16 => uint256) public override tickTable;\\n\\n  /// @dev Reentrancy protection. Implemented in every function of the contract since there are checks of balances.\\n  modifier lock() {\\n    require(globalState.unlocked, 'LOK');\\n    globalState.unlocked = false;\\n    _;\\n    globalState.unlocked = true;\\n  }\\n\\n  /// @dev This function is created for testing by overriding it.\\n  /// @return A timestamp converted to uint32\\n  function _blockTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp); // truncation is desired\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LowGasSafeMath {\\r\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x - y) <= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x * y, reverts if overflows\\r\\n  /// @param x The multiplicand\\r\\n  /// @param y The multiplier\\r\\n  /// @return z The product of x and y\\r\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require(x == 0 || (z = x * y) / x == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x + y) >= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if overflows or underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x - y) <= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add128(uint128 x, uint128 y) internal pure returns (uint128 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TickTable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './Constants.sol';\\r\\nimport './TickMath.sol';\\r\\n\\r\\n/// @title Packed tick initialized state library\\r\\n/// @notice Stores a packed mapping of tick index to its initialized state\\r\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\r\\nlibrary TickTable {\\r\\n  /// @notice Toggles the initialized state for a given tick from false to true, or vice versa\\r\\n  /// @param self The mapping in which to toggle the tick\\r\\n  /// @param tick The tick to toggle\\r\\n  function toggleTick(mapping(int16 => uint256) storage self, int24 tick) internal {\\r\\n    require(tick % Constants.TICK_SPACING == 0, 'tick is not spaced'); // ensure that the tick is spaced\\r\\n    tick /= Constants.TICK_SPACING; // compress tick\\r\\n    int16 rowNumber;\\r\\n    uint8 bitNumber;\\r\\n\\r\\n    assembly {\\r\\n      bitNumber := and(tick, 0xFF)\\r\\n      rowNumber := shr(8, tick)\\r\\n    }\\r\\n    self[rowNumber] ^= 1 << bitNumber;\\r\\n  }\\r\\n\\r\\n  /// @notice get position of single 1-bit\\r\\n  /// @dev it is assumed that word contains exactly one 1-bit, otherwise the result will be incorrect\\r\\n  /// @param word The word containing only one 1-bit\\r\\n  function getSingleSignificantBit(uint256 word) internal pure returns (uint8 singleBitPos) {\\r\\n    assembly {\\r\\n      singleBitPos := iszero(and(word, 0x5555555555555555555555555555555555555555555555555555555555555555))\\r\\n      singleBitPos := or(singleBitPos, shl(7, iszero(and(word, 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(6, iszero(and(word, 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(5, iszero(and(word, 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(4, iszero(and(word, 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(3, iszero(and(word, 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF))))\\r\\n      singleBitPos := or(singleBitPos, shl(2, iszero(and(word, 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F))))\\r\\n      singleBitPos := or(singleBitPos, shl(1, iszero(and(word, 0x3333333333333333333333333333333333333333333333333333333333333333))))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice get position of most significant 1-bit (leftmost)\\r\\n  /// @dev it is assumed that before the call, a check will be made that the argument (word) is not equal to zero\\r\\n  /// @param word The word containing at least one 1-bit\\r\\n  function getMostSignificantBit(uint256 word) internal pure returns (uint8 mostBitPos) {\\r\\n    assembly {\\r\\n      word := or(word, shr(1, word))\\r\\n      word := or(word, shr(2, word))\\r\\n      word := or(word, shr(4, word))\\r\\n      word := or(word, shr(8, word))\\r\\n      word := or(word, shr(16, word))\\r\\n      word := or(word, shr(32, word))\\r\\n      word := or(word, shr(64, word))\\r\\n      word := or(word, shr(128, word))\\r\\n      word := sub(word, shr(1, word))\\r\\n    }\\r\\n    return (getSingleSignificantBit(word));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\r\\n  /// to the left (less than or equal to) or right (greater than) of the given tick\\r\\n  /// @param self The mapping in which to compute the next initialized tick\\r\\n  /// @param tick The starting tick\\r\\n  /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\r\\n  /// @return nextTick The next initialized or uninitialized tick up to 256 ticks away from the current tick\\r\\n  /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\r\\n  function nextTickInTheSameRow(\\r\\n    mapping(int16 => uint256) storage self,\\r\\n    int24 tick,\\r\\n    bool lte\\r\\n  ) internal view returns (int24 nextTick, bool initialized) {\\r\\n    {\\r\\n      int24 tickSpacing = Constants.TICK_SPACING;\\r\\n      // compress and round towards negative infinity if negative\\r\\n      assembly {\\r\\n        tick := sub(sdiv(tick, tickSpacing), and(slt(tick, 0), not(iszero(smod(tick, tickSpacing)))))\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (lte) {\\r\\n      // unpacking not made into a separate function for gas and contract size savings\\r\\n      int16 rowNumber;\\r\\n      uint8 bitNumber;\\r\\n      assembly {\\r\\n        bitNumber := and(tick, 0xFF)\\r\\n        rowNumber := shr(8, tick)\\r\\n      }\\r\\n      uint256 _row = self[rowNumber] << (255 - bitNumber); // all the 1s at or to the right of the current bitNumber\\r\\n\\r\\n      if (_row != 0) {\\r\\n        tick -= int24(255 - getMostSignificantBit(_row));\\r\\n        return (uncompressAndBoundTick(tick), true);\\r\\n      } else {\\r\\n        tick -= int24(bitNumber);\\r\\n        return (uncompressAndBoundTick(tick), false);\\r\\n      }\\r\\n    } else {\\r\\n      // start from the word of the next tick, since the current tick state doesn't matter\\r\\n      tick += 1;\\r\\n      int16 rowNumber;\\r\\n      uint8 bitNumber;\\r\\n      assembly {\\r\\n        bitNumber := and(tick, 0xFF)\\r\\n        rowNumber := shr(8, tick)\\r\\n      }\\r\\n\\r\\n      // all the 1s at or to the left of the bitNumber\\r\\n      uint256 _row = self[rowNumber] >> (bitNumber);\\r\\n\\r\\n      if (_row != 0) {\\r\\n        tick += int24(getSingleSignificantBit(-_row & _row)); // least significant bit\\r\\n        return (uncompressAndBoundTick(tick), true);\\r\\n      } else {\\r\\n        tick += int24(255 - bitNumber);\\r\\n        return (uncompressAndBoundTick(tick), false);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function uncompressAndBoundTick(int24 tick) private pure returns (int24 boundedTick) {\\r\\n    boundedTick = tick * Constants.TICK_SPACING;\\r\\n    if (boundedTick < TickMath.MIN_TICK) {\\r\\n      boundedTick = TickMath.MIN_TICK;\\r\\n    } else if (boundedTick > TickMath.MAX_TICK) {\\r\\n      boundedTick = TickMath.MAX_TICK;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.4.0 || ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n    uint256 prod1; // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    // Subtract 256 bit remainder from 512 bit number\\r\\n    assembly {\\r\\n      let remainder := mulmod(a, b, denominator)\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    uint256 twos = -denominator & denominator;\\r\\n    // Divide denominator by power of two\\r\\n    assembly {\\r\\n      denominator := div(denominator, twos)\\r\\n    }\\r\\n\\r\\n    // Divide [prod1 prod0] by the factors of two\\r\\n    assembly {\\r\\n      prod0 := div(prod0, twos)\\r\\n    }\\r\\n    // Shift in bits from prod1 into prod0. For this we need\\r\\n    // to flip `twos` such that it is 2**256 / twos.\\r\\n    // If twos is zero, then it becomes one\\r\\n    assembly {\\r\\n      twos := add(div(sub(0, twos), twos), 1)\\r\\n    }\\r\\n    prod0 |= prod1 * twos;\\r\\n\\r\\n    // Invert denominator mod 2**256\\r\\n    // Now that denominator is an odd number, it has an inverse\\r\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n    // Compute the inverse by starting with a seed that is correct\\r\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n    uint256 inv = (3 * denominator) ^ 2;\\r\\n    // Now use Newton-Raphson iteration to improve the precision.\\r\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n    // arithmetic, doubling the correct bits in each step.\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n    // Because the division is now exact we can divide by multiplying\\r\\n    // with the modular inverse of denominator. This will give us the\\r\\n    // correct result modulo 2**256. Since the preconditions guarantee\\r\\n    // that the outcome is less than 2**256, this is the final result.\\r\\n    // We don't need to compute the high bits of the result and prod1\\r\\n    // is no longer required.\\r\\n    result = prod0 * inv;\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    if (a == 0 || ((result = a * b) / a == b)) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n      }\\r\\n    } else {\\r\\n      result = mulDiv(a, b, denominator);\\r\\n      if (mulmod(a, b, denominator) > 0) {\\r\\n        require(result < type(uint256).max);\\r\\n        result++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Safe casting methods\\r\\n/// @notice Contains methods for safely casting between types\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary SafeCast {\\r\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\r\\n  /// @param y The uint256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type uint160\\r\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\r\\n    require((z = uint160(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\r\\n  /// @param y The int256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type int128\\r\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\r\\n    require((z = int128(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\r\\n  /// @param y The uint256 to be casted\\r\\n  /// @return z The casted integer, now type int256\\r\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\r\\n    require(y < 2**255);\\r\\n    z = int256(y);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nlibrary Constants {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n  // fee value in hundredths of a bip, i.e. 1e-6\\n  uint16 internal constant BASE_FEE = 100;\\n  int24 internal constant TICK_SPACING = 60;\\n\\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\n\\n  uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\n  uint16 internal constant MAX_COMMUNITY_FEE = 1000;\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LiquidityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Math library for liquidity\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LiquidityMath {\\r\\n  /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\r\\n  /// @param x The liquidity before change\\r\\n  /// @param y The delta by which liquidity should be changed\\r\\n  /// @return z The liquidity delta\\r\\n  function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\r\\n    if (y < 0) {\\r\\n      require((z = x - uint128(-y)) < x, 'LS');\\r\\n    } else {\\r\\n      require((z = x + uint128(y)) >= x, 'LA');\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = -887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n    // get abs value\\r\\n    int24 mask = tick >> (24 - 1);\\r\\n    uint256 absTick = uint256((tick ^ mask) - mask);\\r\\n    require(absTick <= uint256(MAX_TICK), 'T');\\r\\n\\r\\n    uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n    price = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n    // second inequality must be < because the price can never reach the price at the max tick\\r\\n    require(price >= MIN_SQRT_RATIO && price < MAX_SQRT_RATIO, 'R');\\r\\n    uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n    uint256 r = ratio;\\r\\n    uint256 msb = 0;\\r\\n\\r\\n    assembly {\\r\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(4, gt(r, 0xFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(3, gt(r, 0xFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(2, gt(r, 0xF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(1, gt(r, 0x3))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := gt(r, 0x1)\\r\\n      msb := or(msb, f)\\r\\n    }\\r\\n\\r\\n    if (msb >= 128) r = ratio >> (msb - 127);\\r\\n    else r = ratio << (127 - msb);\\r\\n\\r\\n    int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(63, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(62, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(61, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(60, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(59, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(58, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(57, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(56, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(55, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(54, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(53, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(52, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(51, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(50, f))\\r\\n    }\\r\\n\\r\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '../interfaces/IERC20Minimal.sol';\\r\\n\\r\\n/// @title TransferHelper\\r\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TransferHelper {\\r\\n  /// @notice Transfers tokens from msg.sender to a recipient\\r\\n  /// @dev Calls transfer on token contract, errors with TF if transfer fails\\r\\n  /// @param token The contract address of the token which will be transferred\\r\\n  /// @param to The recipient of the transfer\\r\\n  /// @param value The value of the transfer\\r\\n  function safeTransfer(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\\r\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraPoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title An interface for a contract that is capable of deploying Algebra Pools\\r\\n * @notice A contract that constructs a pool must implement this to pass arguments to the pool\\r\\n * @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\r\\n * of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDeployer {\\r\\n  /**\\r\\n   *  @notice Emitted when the factory address is changed\\r\\n   *  @param factory The factory address after the address was changed\\r\\n   */\\r\\n  event Factory(address indexed factory);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\r\\n   * @dev Called by the pool constructor to fetch the parameters of the pool\\r\\n   * Returns dataStorage The pools associated dataStorage\\r\\n   * Returns factory The factory address\\r\\n   * Returns token0 The first token of the pool by address sort order\\r\\n   * Returns token1 The second token of the pool by address sort order\\r\\n   */\\r\\n  function parameters()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      address dataStorage,\\r\\n      address factory,\\r\\n      address token0,\\r\\n      address token1\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then\\r\\n   * clearing it after deploying the pool.\\r\\n   * @param dataStorage The pools associated dataStorage\\r\\n   * @param factory The contract address of the Algebra factory\\r\\n   * @param token0 The first token of the pool by address sort order\\r\\n   * @param token1 The second token of the pool by address sort order\\r\\n   * @return pool The deployed pool's address\\r\\n   */\\r\\n  function deploy(\\r\\n    address dataStorage,\\r\\n    address factory,\\r\\n    address token0,\\r\\n    address token1\\r\\n  ) external returns (address pool);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the factory address to the poolDeployer for permissioned actions\\r\\n   * @param factory The address of the Algebra factory\\r\\n   */\\r\\n  function setFactory(address factory) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title The interface for the Algebra Factory\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraFactory {\\r\\n  /**\\r\\n   *  @notice Emitted when the owner of the factory is changed\\r\\n   *  @param newOwner The owner after the owner was changed\\r\\n   */\\r\\n  event Owner(address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   *  @notice Emitted when the vault address is changed\\r\\n   *  @param newVaultAddress The vault address after the address was changed\\r\\n   */\\r\\n  event VaultAddress(address indexed newVaultAddress);\\r\\n\\r\\n  /**\\r\\n   *  @notice Emitted when a pool is created\\r\\n   *  @param token0 The first token of the pool by address sort order\\r\\n   *  @param token1 The second token of the pool by address sort order\\r\\n   *  @param pool The address of the created pool\\r\\n   */\\r\\n  event Pool(address indexed token0, address indexed token1, address pool);\\r\\n\\r\\n  /**\\r\\n   *  @notice Emitted when the farming address is changed\\r\\n   *  @param newFarmingAddress The farming address after the address was changed\\r\\n   */\\r\\n  event FarmingAddress(address indexed newFarmingAddress);\\r\\n\\r\\n  event FeeConfiguration(\\r\\n    uint16 alpha1,\\r\\n    uint16 alpha2,\\r\\n    uint32 beta1,\\r\\n    uint32 beta2,\\r\\n    uint16 gamma1,\\r\\n    uint16 gamma2,\\r\\n    uint32 volumeBeta,\\r\\n    uint16 volumeGamma,\\r\\n    uint16 baseFee\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   *  @notice Returns the current owner of the factory\\r\\n   *  @dev Can be changed by the current owner via setOwner\\r\\n   *  @return The address of the factory owner\\r\\n   */\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   *  @notice Returns the current poolDeployerAddress\\r\\n   *  @return The address of the poolDeployer\\r\\n   */\\r\\n  function poolDeployer() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Is retrieved from the pools to restrict calling\\r\\n   * certain functions not by a tokenomics contract\\r\\n   * @return The tokenomics contract address\\r\\n   */\\r\\n  function farmingAddress() external view returns (address);\\r\\n\\r\\n  function vaultAddress() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   *  @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\r\\n   *  @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n   *  @param tokenA The contract address of either token0 or token1\\r\\n   *  @param tokenB The contract address of the other token\\r\\n   *  @return pool The pool address\\r\\n   */\\r\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\r\\n\\r\\n  /**\\r\\n   *  @notice Creates a pool for the given two tokens and fee\\r\\n   *  @param tokenA One of the two tokens in the desired pool\\r\\n   *  @param tokenB The other of the two tokens in the desired pool\\r\\n   *  @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\r\\n   *  from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\r\\n   *  are invalid.\\r\\n   *  @return pool The address of the newly created pool\\r\\n   */\\r\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\r\\n\\r\\n  /**\\r\\n   *  @notice Updates the owner of the factory\\r\\n   *  @dev Must be called by the current owner\\r\\n   *  @param _owner The new owner of the factory\\r\\n   */\\r\\n  function setOwner(address _owner) external;\\r\\n\\r\\n  /**\\r\\n   * @dev updates tokenomics address on the factory\\r\\n   * @param _farmingAddress The new tokenomics contract address\\r\\n   */\\r\\n  function setFarmingAddress(address _farmingAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev updates vault address on the factory\\r\\n   * @param _vaultAddress The new vault contract address\\r\\n   */\\r\\n  function setVaultAddress(address _vaultAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Changes initial fee configuration for new pools\\r\\n   * @dev changes coefficients for sigmoids: \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\r\\n   * alpha1 + alpha2 + baseFee (max possible fee) must be <= type(uint16).max\\r\\n   * gammas must be > 0\\r\\n   * @param alpha1 max value of the first sigmoid\\r\\n   * @param alpha2 max value of the second sigmoid\\r\\n   * @param beta1 shift along the x-axis for the first sigmoid\\r\\n   * @param beta2 shift along the x-axis for the second sigmoid\\r\\n   * @param gamma1 horizontal stretch factor for the first sigmoid\\r\\n   * @param gamma2 horizontal stretch factor for the second sigmoid\\r\\n   * @param volumeBeta shift along the x-axis for the outer volume-sigmoid\\r\\n   * @param volumeGamma horizontal stretch factor the outer volume-sigmoid\\r\\n   * @param baseFee minimum possible fee\\r\\n   */\\r\\n  function setBaseFeeConfiguration(\\r\\n    uint16 alpha1,\\r\\n    uint16 alpha2,\\r\\n    uint32 beta1,\\r\\n    uint32 beta2,\\r\\n    uint16 gamma1,\\r\\n    uint16 gamma2,\\r\\n    uint32 volumeBeta,\\r\\n    uint16 volumeGamma,\\r\\n    uint16 baseFee\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Minimal ERC20 interface for Algebra\\r\\n/// @notice Contains a subset of the full ERC20 interface that is used in Algebra\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IERC20Minimal {\\r\\n  /// @notice Returns the balance of a token\\r\\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\r\\n  /// @return The number of tokens held by the account\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\r\\n  /// @param recipient The account that will receive the amount transferred\\r\\n  /// @param amount The number of tokens to send from the sender to the recipient\\r\\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /// @notice Returns the current allowance given to a spender by an owner\\r\\n  /// @param owner The account of the token owner\\r\\n  /// @param spender The account of the token spender\\r\\n  /// @return The current allowance granted by `owner` to `spender`\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\r\\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\r\\n  /// @param amount The amount of tokens allowed to be used by `spender`\\r\\n  /// @return Returns true for a successful approval, false for unsuccessful\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\r\\n  /// @param sender The account from which the transfer will be initiated\\r\\n  /// @param recipient The recipient of the transfer\\r\\n  /// @param amount The amount of the transfer\\r\\n  /// @return Returns true for a successful transfer, false for unsuccessful\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\r\\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\\r\\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\\r\\n  /// @param value The amount of tokens that were transferred\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\r\\n  /// @param owner The account that approved spending of its tokens\\r\\n  /// @param spender The account for which the spending allowance was modified\\r\\n  /// @param value The new allowance from the owner to the spender\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IAlgebraSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#swap\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraSwapCallback {\\r\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n  /// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\r\\n  function algebraSwapCallback(\\r\\n    int256 amount0Delta,\\r\\n    int256 amount1Delta,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IAlgebraMintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#mint\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#mint must implement this interface\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraMintCallback {\\r\\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IAlgebraPool#mint.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\r\\n  /// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\r\\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#mint call\\r\\n  function algebraMintCallback(\\r\\n    uint256 amount0Owed,\\r\\n    uint256 amount1Owed,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IAlgebraFlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n *  @title Callback for IAlgebraPoolActions#flash\\r\\n *  @notice Any contract that calls IAlgebraPoolActions#flash must implement this interface\\r\\n *  @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n *  https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraFlashCallback {\\r\\n  /**\\r\\n   *  @notice Called to `msg.sender` after transferring to the recipient from IAlgebraPool#flash.\\r\\n   *  @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\r\\n   *  The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n   *  @param fee0 The fee amount in token0 due to the pool by the end of the flash\\r\\n   *  @param fee1 The fee amount in token1 due to the pool by the end of the flash\\r\\n   *  @param data Any data passed through by the caller via the IAlgebraPoolActions#flash call\\r\\n   */\\r\\n  function algebraFlashCallback(\\r\\n    uint256 fee0,\\r\\n    uint256 fee1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolState {\\n  /**\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\n   * and is exposed as a single method to save gas when accessed externally.\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n   * boundary;\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n   * Returns timepointIndex The index of the last written timepoint;\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\n   */\\n  function globalState()\\n    external\\n    view\\n    returns (\\n      uint160 price,\\n      int24 tick,\\n      uint16 fee,\\n      uint16 timepointIndex,\\n      uint16 communityFeeToken0,\\n      uint16 communityFeeToken1,\\n      bool unlocked\\n    );\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth0Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n   * @dev This value can overflow the uint256\\n   */\\n  function totalFeeGrowth1Token() external view returns (uint256);\\n\\n  /**\\n   * @notice The currently in range liquidity available to the pool\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\n   * Returned value cannot exceed type(uint128).max\\n   */\\n  function liquidity() external view returns (uint128);\\n\\n  /**\\n   * @notice Look up information about a specific tick in the pool\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\n   * @param tick The tick to look up\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n   * tick upper;\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n   * a specific position.\\n   */\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityTotal,\\n      int128 liquidityDelta,\\n      uint256 outerFeeGrowth0Token,\\n      uint256 outerFeeGrowth1Token,\\n      int56 outerTickCumulative,\\n      uint160 outerSecondsPerLiquidity,\\n      uint32 outerSecondsSpent,\\n      bool initialized\\n    );\\n\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the information about a position by the position's key\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n   * @return liquidityAmount The amount of liquidity in the position;\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n   */\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityAmount,\\n      uint32 lastLiquidityAddTimestamp,\\n      uint256 innerFeeGrowth0Token,\\n      uint256 innerFeeGrowth1Token,\\n      uint128 fees0,\\n      uint128 fees1\\n    );\\n\\n  /**\\n   * @notice Returns data about a specific timepoint index\\n   * @param index The element of the timepoints array to fetch\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\n   * ago, rather than at a specific index in the array.\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\n   * Returns blockTimestamp The timestamp of the timepoint;\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\n   * Returns averageTick Time-weighted average tick;\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\n   */\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    );\\n\\n  /**\\n   * @notice Returns the information about active incentive\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\n   */\\n  function activeIncentive() external view returns (address virtualPool);\\n\\n  /**\\n   * @notice Returns the lock time for added liquidity\\n   */\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../IDataStorageOperator.sol';\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /**\\r\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n   * @return The operator address\\r\\n   */\\r\\n  function dataStorageOperator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n   * @return The contract address\\r\\n   */\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The first of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The second of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The pool tick spacing\\r\\n   * @dev Ticks can only be used at multiples of this value\\r\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n   * This value is an int24 to avoid casting even though it is always positive.\\r\\n   * @return The tick spacing\\r\\n   */\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /**\\r\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n   * @return The max amount of liquidity per tick\\r\\n   */\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n  /**\\r\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n   * you must call it with secondsAgos = [3600, 0].\\r\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n   * from the current block timestamp\\r\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n   */\\r\\n  function getTimepoints(uint32[] calldata secondsAgos)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n   * snapshot is taken and the second snapshot is taken.\\r\\n   * @param bottomTick The lower tick of the range\\r\\n   * @param topTick The upper tick of the range\\r\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n   */\\r\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 innerTickCumulative,\\r\\n      uint160 innerSecondsSpentPerLiquidity,\\r\\n      uint32 innerSecondsSpent\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraPoolEvents {\\n  /**\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n   */\\n  event Initialize(uint160 price, int24 tick);\\n\\n  /**\\n   * @notice Emitted when liquidity is minted for a given position\\n   * @param sender The address that minted the liquidity\\n   * @param owner The owner of the position and recipient of any minted liquidity\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\n   * @param amount0 How much token0 was required for the minted liquidity\\n   * @param amount1 How much token1 was required for the minted liquidity\\n   */\\n  event Mint(\\n    address sender,\\n    address indexed owner,\\n    int24 indexed bottomTick,\\n    int24 indexed topTick,\\n    uint128 liquidityAmount,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /**\\n   * @notice Emitted when fees are collected by the owner of a position\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n   * @param owner The owner of the position for which fees are collected\\n   * @param recipient The address that received fees\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param amount0 The amount of token0 fees collected\\n   * @param amount1 The amount of token1 fees collected\\n   */\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\n\\n  /**\\n   * @notice Emitted when a position's liquidity is removed\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n   * @param owner The owner of the position for which liquidity is removed\\n   * @param bottomTick The lower tick of the position\\n   * @param topTick The upper tick of the position\\n   * @param liquidityAmount The amount of liquidity to remove\\n   * @param amount0 The amount of token0 withdrawn\\n   * @param amount1 The amount of token1 withdrawn\\n   */\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\n\\n  /**\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\n   * @param sender The address that initiated the swap call, and that received the callback\\n   * @param recipient The address that received the output of the swap\\n   * @param amount0 The delta of the token0 balance of the pool\\n   * @param amount1 The delta of the token1 balance of the pool\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\n   * @param liquidity The liquidity of the pool after the swap\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\n   */\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\n\\n  /**\\n   * @notice Emitted by the pool for any flashes of token0/token1\\n   * @param sender The address that initiated the swap call, and that received the callback\\n   * @param recipient The address that received the tokens from flash\\n   * @param amount0 The amount of token0 that was flashed\\n   * @param amount1 The amount of token1 that was flashed\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n   */\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\n\\n  /**\\n   * @notice Emitted when the community fee is changed by the pool\\n   * @param communityFee0New The updated value of the token0 community fee percent\\n   * @param communityFee1New The updated value of the token1 community fee percent\\n   */\\n  event CommunityFee(uint16 communityFee0New, uint16 communityFee1New);\\n\\n  /**\\n   * @notice Emitted when new activeIncentive is set\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\n   */\\n  event Incentive(address indexed virtualPoolAddress);\\n\\n  /**\\n   * @notice Emitted when the fee changes\\n   * @param fee The value of the token fee\\n   */\\n  event Fee(uint16 fee);\\n\\n  /**\\n   * @notice Emitted when the LiquidityCooldown changes\\n   * @param liquidityCooldown The value of locktime for added liquidity\\n   */\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /**\\r\\n   * @notice Sets the initial price for the pool\\r\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n   * @param price the initial sqrt price of the pool as a Q64.96\\r\\n   */\\r\\n  function initialize(uint160 price) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n   * @param sender The address which will receive potential surplus of paid tokens\\r\\n   * @param recipient The address for which the liquidity will be created\\r\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n   * @param topTick The upper tick of the position in which to add liquidity\\r\\n   * @param amount The desired amount of liquidity to mint\\r\\n   * @param data Any data that should be passed through to the callback\\r\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return liquidityActual The actual minted amount of liquidity\\r\\n   */\\r\\n  function mint(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amount0,\\r\\n      uint256 amount1,\\r\\n      uint128 liquidityActual\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Collects tokens owed to a position\\r\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n   * @param recipient The address which should receive the fees collected\\r\\n   * @param bottomTick The lower tick of the position for which to collect fees\\r\\n   * @param topTick The upper tick of the position for which to collect fees\\r\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n   * @return amount0 The amount of fees collected in token0\\r\\n   * @return amount1 The amount of fees collected in token1\\r\\n   */\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n   * @dev Fees must be collected separately via a call to #collect\\r\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n   * @param topTick The upper tick of the position for which to burn liquidity\\r\\n   * @param amount How much liquidity to burn\\r\\n   * @return amount0 The amount of token0 sent to the recipient\\r\\n   * @return amount1 The amount of token1 sent to the recipient\\r\\n   */\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount\\r\\n  ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param sender The address called this function (Comes from the Router)\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swapSupportingFeeOnInputTokens(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n   * the donation amount(s) from the callback\\r\\n   * @param recipient The address which will receive the token0 and token1 amounts\\r\\n   * @param amount0 The amount of token0 to send\\r\\n   * @param amount1 The amount of token1 to send\\r\\n   * @param data Any data to be passed through to the callback\\r\\n   */\\r\\n  function flash(\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Permissioned pool actions\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraPoolPermissionedActions {\\n  /**\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\n   */\\n  function setCommunityFee(uint16 communityFee0, uint16 communityFee1) external;\\n\\n  /**\\n   * @notice Sets an active incentive\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\n   */\\n  function setIncentive(address virtualPoolAddress) external;\\n\\n  /**\\n   * @notice Sets new lock time for added liquidity\\n   * @param newLiquidityCooldown The time in seconds\\n   */\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title AdaptiveFee\\r\\n/// @notice Calculates fee based on combination of sigmoids\\r\\nlibrary AdaptiveFee {\\r\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\n  struct Configuration {\\r\\n    uint16 alpha1; // max value of the first sigmoid\\r\\n    uint16 alpha2; // max value of the second sigmoid\\r\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\r\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\r\\n    uint16 baseFee; // minimum possible fee\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates fee based on formula:\\r\\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\r\\n  /// maximum value capped by baseFee + alpha1 + alpha2\\r\\n  function getFee(\\r\\n    uint88 volatility,\\r\\n    uint256 volumePerLiquidity,\\r\\n    Configuration memory config\\r\\n  ) internal pure returns (uint16 fee) {\\r\\n    uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\\r\\n      sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\r\\n\\r\\n    if (sumOfSigmoids > type(uint16).max) {\\r\\n      // should be impossible, just in case\\r\\n      sumOfSigmoids = type(uint16).max;\\r\\n    }\\r\\n\\r\\n    return uint16(config.baseFee + sigmoid(volumePerLiquidity, config.volumeGamma, uint16(sumOfSigmoids), config.volumeBeta)); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\r\\n  }\\r\\n\\r\\n  /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\r\\n  /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\r\\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\r\\n  function sigmoid(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint16 alpha,\\r\\n    uint256 beta\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    if (x > beta) {\\r\\n      x = x - beta;\\r\\n      if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = exp(x, g, g8); // < 155 bits\\r\\n      res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\r\\n      // so res <= alpha\\r\\n    } else {\\r\\n      x = beta - x;\\r\\n      if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\r\\n      res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\r\\n      // g8 <= ex, so res <= alpha\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\r\\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\r\\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\r\\n  function exp(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint256 gHighestDegree\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    // calculating:\\r\\n    // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\r\\n\\r\\n    // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\r\\n    // so each summand < 152 bits and res < 155 bits\\r\\n    uint256 xLowestDegree = x;\\r\\n    res = gHighestDegree; // g**8\\r\\n\\r\\n    gHighestDegree /= g; // g**7\\r\\n    res += xLowestDegree * gHighestDegree;\\r\\n\\r\\n    gHighestDegree /= g; // g**6\\r\\n    xLowestDegree *= x; // x**2\\r\\n    res += (xLowestDegree * gHighestDegree) / 2;\\r\\n\\r\\n    gHighestDegree /= g; // g**5\\r\\n    xLowestDegree *= x; // x**3\\r\\n    res += (xLowestDegree * gHighestDegree) / 6;\\r\\n\\r\\n    gHighestDegree /= g; // g**4\\r\\n    xLowestDegree *= x; // x**4\\r\\n    res += (xLowestDegree * gHighestDegree) / 24;\\r\\n\\r\\n    gHighestDegree /= g; // g**3\\r\\n    xLowestDegree *= x; // x**5\\r\\n    res += (xLowestDegree * gHighestDegree) / 120;\\r\\n\\r\\n    gHighestDegree /= g; // g**2\\r\\n    xLowestDegree *= x; // x**6\\r\\n    res += (xLowestDegree * gHighestDegree) / 720;\\r\\n\\r\\n    xLowestDegree *= x; // x**7\\r\\n    res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"communityFee0New\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"communityFee1New\",\"type\":\"uint16\"}],\"name\":\"CommunityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"virtualPoolAddress\",\"type\":\"address\"}],\"name\":\"Incentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidityCooldown\",\"type\":\"uint32\"}],\"name\":\"LiquidityCooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeIncentive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataStorageOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"}],\"name\":\"getInnerCumulatives\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"innerTickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"innerSecondsSpentPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"innerSecondsSpent\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"getTimepoints\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulatives\",\"type\":\"uint160[]\"},{\"internalType\":\"uint112[]\",\"name\":\"volatilityCumulatives\",\"type\":\"uint112[]\"},{\"internalType\":\"uint256[]\",\"name\":\"volumePerAvgLiquiditys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalState\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"timepointIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"communityFeeToken0\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"communityFeeToken1\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"initialPrice\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCooldown\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidityDesired\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityActual\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastLiquidityAddTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fees0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fees1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"communityFee0\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"communityFee1\",\"type\":\"uint16\"}],\"name\":\"setCommunityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"virtualPoolAddress\",\"type\":\"address\"}],\"name\":\"setIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newLiquidityCooldown\",\"type\":\"uint32\"}],\"name\":\"setLiquidityCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountRequired\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountRequired\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapSupportingFeeOnInputTokens\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityTotal\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"outerTickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"outerSecondsPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"outerSecondsSpent\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"timepoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulative\",\"type\":\"uint160\"},{\"internalType\":\"uint88\",\"name\":\"volatilityCumulative\",\"type\":\"uint88\"},{\"internalType\":\"int24\",\"name\":\"averageTick\",\"type\":\"int24\"},{\"internalType\":\"uint144\",\"name\":\"volumePerLiquidityCumulative\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth0Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth1Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlgebraPool", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}