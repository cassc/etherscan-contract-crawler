{"SourceCode": "/*SPDX-License-Identifier: UNLICENSED*/\r\npragma solidity 0.8.17;\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function maxSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _maxSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_, uint256 maxSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _maxSupply = maxSupply_ * 10**decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-maximumSupply}.\r\n     */\r\n    function maxSupply() public view virtual override returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        require(totalSupply()<=maxSupply(), \"Maximum limit of token minting reached\");\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BBXToken is ERC20, ERC20Burnable{\r\n\r\n    /* Utility */\r\n\tuint256 constant public PERCENTS_DIVIDER = 1e4;\r\n\r\n    // Referral percentages\r\n    uint256 public constant FIRST_REF = 10;   /*written as plain 10%, basis point set in constructor*/\r\n\r\n    \r\n    uint constant public REINVEST_PERC = 0;\r\n    // Before reinvest\r\n    uint256 public WITHDRAWAL_DEADTIME = 0;\r\n    \r\n\r\n    // Operating addresses\r\n    address payable public owner;      // Smart Contract Owner (who deploys)\r\n    address payable public treasury;\r\n    IBEP20 usdt;\r\n    uint256 usdToBbx = 10;\r\n\r\n    // uint256 \r\n    uint256 plan0_user_count;\r\n    uint256 plan1_user_count;\r\n    uint256 plan2_user_count;\r\n    uint256 plan3_user_count;\r\n\r\n    uint256 total_investors;\r\n    uint256 total_contributed;\r\n    uint256 total_withdrawn;\r\n    uint256 total_referral_bonus;\r\n    uint256[] referral_bonuses;\r\n\r\n    struct Plan {\r\n        uint256 time;\t\t\t// number of days of the plan\r\n        uint16 percent;\t\t\t// base percent of the plan (before increments)\r\n        uint256 min_invest;\r\n        uint256 max_invest;\r\n        uint16 daily_flips;\r\n    }\r\n\r\n    struct PlayerDeposit {\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint256 totalWithdraw;\r\n        uint256 time;\r\n        bool capitalWithdrawn;\r\n    }\r\n\r\n     struct PlayerWitdraw{\r\n        uint256 time;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct Player {\r\n        address referral;\r\n        uint256 dividends;\r\n        uint256 referral_bonus;\r\n        uint256 last_payout;\r\n        uint256 last_withdrawal;\r\n        uint256 total_contributed;\r\n        uint256 total_withdrawn;\r\n        uint256 total_referral_bonus;\r\n        uint256 activeAirdrop_bonus;\r\n        PlayerDeposit[] deposits;\r\n        PlayerWitdraw[] withdrawals;\r\n        mapping(uint8 => uint256) referrals_per_level;\r\n    }\r\n    address[] public userList;\r\n    mapping(address => Player) internal players;\r\n    Plan[] internal plans;\r\n\r\n    event Deposit(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event CapitalWithdraw(uint256 indexed depositID, address indexed forUser, uint256 capitalAmount);\r\n    event Reinvest(address indexed addr, uint256 amount);\r\n    event ReferralPayout(address indexed addr, uint256 amount, uint8 level);\r\n    event ReDeposit(address indexed addr, uint256 amount);\r\n\r\n\r\n\tconstructor(uint256 maxSupply_, address treasury_, address usdt_)ERC20(\"BBX TOKEN\", \"BBX\", maxSupply_) {\r\n\t    \r\n        treasury = payable(treasury_);\r\n        owner = payable(msg.sender);\r\n        usdt = IBEP20(usdt_);\r\n\r\n        plans.push(Plan(60 days, 200, 16000 * 10**decimals(), 60000 * 10**decimals(), 80));    //Box Games NFT plan\r\n        plans.push(Plan(45 days, 100, 6000 * 10**decimals(), 15000 * 10**decimals(), 40));    //Box MEME NFT plan\r\n        plans.push(Plan(28 days, 80, 100 * 10**decimals(), 5000 * 10**decimals(), 20));    //Box Collectibles NFT plan\r\n        plans.push(Plan(90 days, 300, 65000 * 10**decimals(), 1800000 * 10**decimals(), 200));   //Box Music NFT plan\r\n        referral_bonuses.push(100 * FIRST_REF);\r\n\r\n        //10% to admin: 10% * 500,000,000 = 50,000,000\r\n        _mint(owner, 50000000 * 10**decimals());\r\n        //90% to self: 90% * 500,000,000 = 450,000,000\r\n        _mint(address(this), 450000000 * 10**decimals());\r\n\r\n\t}\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    /**************************************** Votings From Contract**************************************/\r\n    uint256 public lastCandidateId = 0;\r\n    uint8 public maxCandidates = 1;\r\n    uint8 public totalCandidates;\r\n \r\n    struct Candidate{\r\n        bytes32 agenda;\r\n        bytes32[] options; \r\n        uint256[] perOptionVotes; \r\n        uint256 totalVotes; \r\n        bool isActive; \r\n    }\r\n\r\n    mapping (uint256 => Candidate) public candidates;\r\n\r\n    function newCandidate(bytes32 _agenda, bytes32[] memory _options) external {\r\n        require(msg.sender == owner, \"only owner can add candidates\");\r\n        require(totalCandidates<maxCandidates,\"max number of candidates reached\");\r\n        Candidate storage candidate = candidates[lastCandidateId+1];\r\n        candidate.agenda = _agenda;\r\n        candidate.isActive = true;\r\n        for(uint8 index=0;index<_options.length;index++){\r\n            candidate.options[index] = _options[index];\r\n        }\r\n        totalCandidates++;\r\n\r\n    }\r\n\r\n    function castVote(uint8 _option, uint256 _candidate) external{\r\n        Player storage player = players[msg.sender];\r\n        require(player.deposits.length>0,\"User not allowed to cast vote\");\r\n        Candidate storage candidate = candidates[_candidate];\r\n        candidate.perOptionVotes[_option]++;\r\n        candidate.totalVotes++;\r\n        \r\n    }\r\n\r\n    function markDone(uint256 _candidate) external {\r\n        require(msg.sender == owner, \"only owner can stop candidates\");\r\n        Candidate storage candidate = candidates[_candidate];\r\n        candidate.isActive = false;\r\n    }\r\n\r\n    function setMaxCandidates(uint8 _value) external{\r\n        require(msg.sender == owner, \"only owner can set max candidates\");\r\n        maxCandidates = _value;\r\n    }\r\n    /*******************************************************************************************************/\r\n\r\n\r\n    function deposit(address _referral, uint8 _plan, uint _amount) external{\r\n        require(_plan < 4);\r\n        require(!isContract(msg.sender) && msg.sender == tx.origin);\r\n        require(_amount >= 1e8, \"Zero amount\");\r\n        uint _planMin = plans[_plan].min_invest;\r\n        uint _planMax = plans[_plan].max_invest;\r\n\r\n        require(_amount >= _planMin, \"Deposit is below minimum invest amount\");\r\n        require(_amount <= _planMax, \"Deposit is above maximum invest amount\");\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n\r\n        /* Check and set referral*/\r\n\t\trequire(usdt.transferFrom(msg.sender, treasury, _amount), \"Transferred failed\");\r\n        _setReferral(msg.sender, _referral);\r\n\r\n        /* Create deposit*/\r\n        player.deposits.push(PlayerDeposit({\r\n            plan: _plan,\r\n            amount: _amount,\r\n            totalWithdraw: 0,\r\n            time: uint256(block.timestamp),\r\n            capitalWithdrawn: false\r\n        }));\r\n\r\n        /* Add new user if this is first deposit*/\r\n        if(player.total_contributed == 0x0){\r\n            total_investors += 1;\r\n        }\r\n\r\n        player.total_contributed += _amount;\r\n        total_contributed += _amount;\r\n\r\n        /**Generate referral rewards */\r\n        _referralPayout(msg.sender, _amount);\r\n        _plan == 0?plan0_user_count++ : _plan == 1?plan1_user_count++ : _plan == 2?plan2_user_count++ : plan3_user_count++;\r\n        \r\n\r\n        /**Reward BBX tokwn**/\r\n        uint256 _reward = _amount * usdToBbx;\r\n        _transfer(address(this), msg.sender, _reward);\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    function _setReferral(address _addr, address _referral) private {\r\n        // Set referral if the user is a new user\r\n        if(players[_addr].referral == address(0)) {\r\n            userList.push(_addr);\r\n            // If referral is a registered user, set it as ref, otherwise set aAddress as ref\r\n            if(players[_referral].total_contributed > 0) {\r\n                players[_addr].referral = _referral;\r\n            } else {\r\n                players[_addr].referral = owner;\r\n            }\r\n            \r\n            // Update the referral counters\r\n            for(uint8 i = 0; i < referral_bonuses.length; i++) {\r\n                players[_referral].referrals_per_level[i]++;\r\n                \r\n                _referral = players[_referral].referral;\r\n                if(_referral == address(0)) break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _referralPayout(address _addr, uint256 _amount) private {\r\n        address ref = players[_addr].referral;\r\n\r\n\r\n        // Generate upline rewards\r\n        for(uint8 i = 0; i < referral_bonuses.length; i++) {\r\n            if(ref == address(0)) break;\r\n            uint256 bonus = _amount * referral_bonuses[i] / PERCENTS_DIVIDER;\r\n\r\n            players[ref].referral_bonus += bonus;\r\n            players[ref].total_referral_bonus += bonus;\r\n            total_referral_bonus += bonus;\r\n\r\n            if(players[ref].referrals_per_level[i]%10 == 0){\r\n                players[ref].activeAirdrop_bonus += 100 * (10**decimals());\r\n            }\r\n            \r\n\r\n            emit ReferralPayout(ref, bonus, (i+1));\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n\r\n    function claimActiveAirdropBonus() external {\r\n        uint256 reward = players[msg.sender].activeAirdrop_bonus;\r\n        require(reward>0, \"no reward for you\");\r\n        players[msg.sender].activeAirdrop_bonus = 0;\r\n        _transfer(address(this), msg.sender, reward);\r\n    }\r\n\r\n    function withdraw(uint256 desiredAmount, address _user) external {\r\n\r\n        require(msg.sender == treasury, \"Only treasurer is allowed to wiithdraw\");\r\n        \r\n        Player storage player = players[_user];\r\n\r\n        // Can withdraw once every WITHDRAWAL_DEADTIME days\r\n        require(uint256(block.timestamp) > (player.last_withdrawal + WITHDRAWAL_DEADTIME) || (player.withdrawals.length <= 0), \"You cannot withdraw during deadtime\");\r\n        require(usdt.balanceOf(treasury) > 0, \"Cannot withdraw, contract balance is 0\");\r\n\r\n        // Calculate dividends (ROC)\r\n        uint256 payout = this.payoutOf(_user);\r\n        player.dividends += payout;\r\n\r\n        // Calculate the amount we should withdraw\r\n        uint256 amount_withdrawable = player.dividends + player.referral_bonus;\r\n        require(amount_withdrawable > 0, \"Zero amount to withdraw\");\r\n        require(desiredAmount <= amount_withdrawable, \"Desired amount exceeds available balance\");\r\n        if(desiredAmount <= amount_withdrawable){\r\n            amount_withdrawable = desiredAmount;\r\n        }\r\n        \r\n        // Calculate the reinvest part and the wallet part\r\n        // uint256 autoReinvestAmount = (amount_withdrawable * REINVEST_PERC) / 100;\r\n        uint256 autoReinvestAmount = 0;\r\n        uint256 withdrawableLessAutoReinvest = amount_withdrawable - autoReinvestAmount;\r\n        \r\n        // Do Withdraw\r\n        if (usdt.balanceOf(treasury) < withdrawableLessAutoReinvest) {\r\n            player.dividends = withdrawableLessAutoReinvest - (usdt.balanceOf(treasury));\r\n\t\t\twithdrawableLessAutoReinvest = usdt.balanceOf(treasury);\r\n\t\t} else {\r\n            player.dividends = 0;\r\n        }\r\n        require(usdt.transferFrom(treasury, _user, withdrawableLessAutoReinvest), \"Transfer from failed\");\r\n\r\n        // Update player state\r\n        player.referral_bonus = 0;\r\n        player.total_withdrawn += amount_withdrawable;\r\n        total_withdrawn += amount_withdrawable;\r\n        player.last_withdrawal = uint256(block.timestamp);\r\n        // If there were new dividends, update the payout timestamp\r\n        if(payout > 0) {\r\n            _updateTotalPayout(_user);\r\n            player.last_payout = uint256(block.timestamp);\r\n        }\r\n        \r\n        // Add the withdrawal to the list of the done withdrawals\r\n        player.withdrawals.push(PlayerWitdraw({\r\n            time: uint256(block.timestamp),\r\n            amount: amount_withdrawable\r\n        }));\r\n       \r\n\r\n        emit Withdraw(_user, amount_withdrawable);\r\n    }\r\n\r\n    function withdrawCapital(uint256 depositId, address user) external {\r\n        require(msg.sender == treasury);\r\n        Player storage player = players[user];\r\n        PlayerDeposit storage thisDeposit = player.deposits[depositId];\r\n\r\n\r\n        bool _capitalWithdrawn = thisDeposit.capitalWithdrawn;\r\n        (,,,,,,bool[] memory _hasEndedArr) = this.contributionsInfo(user);\r\n        bool _hasEnded = _hasEndedArr[depositId];\r\n\r\n\r\n        require(!_capitalWithdrawn, \"error: capital already withdrawn\");\r\n        require(_hasEnded, \"error: contract has not ended yet\");\r\n\r\n        uint256 capital = thisDeposit.amount;\r\n        require(usdt.balanceOf(treasury) > 0, \"Cannot withdraw, contract balance is 0\");\r\n        require(capital > 0, \"Invalid Deposit\");\r\n\r\n        if(usdt.balanceOf(treasury) < capital){\r\n            capital = usdt.balanceOf(treasury);\r\n        }    \r\n\r\n        require(usdt.transferFrom(treasury, user, capital), \"Transfer from failed\");\r\n        \r\n\r\n        // Update player state\r\n        player.total_withdrawn += capital;\r\n        total_withdrawn += capital;\r\n        player.last_withdrawal = uint256(block.timestamp);\r\n        thisDeposit.capitalWithdrawn = true;\r\n\r\n        \r\n        // Add the withdrawal to the list of the done withdrawals\r\n        player.withdrawals.push(PlayerWitdraw({\r\n            time: uint256(block.timestamp),\r\n            amount: capital\r\n        }));\r\n       \r\n\r\n        emit CapitalWithdraw(depositId, user, capital);\r\n    }\r\n\r\n\r\n    function _updateTotalPayout(address _addr) private {\r\n        Player storage player = players[_addr];\r\n\r\n        // For every deposit calculate the ROC and update the withdrawn part\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            uint _plan = dep.plan;\r\n            uint time = plans[_plan].time;\r\n            uint256 time_end = dep.time + time;\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : uint256(block.timestamp);\r\n\r\n            if(from < to) {\r\n                uint256 rateOfInterest = plans[_plan].percent;\r\n                player.deposits[i].totalWithdraw += dep.amount + ((dep.amount * (to-from) * rateOfInterest) / (86400 * PERCENTS_DIVIDER));  /*calculating simple interest on deposit amount for each second*/\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function withdrawalsOf(address _addrs) view external returns(uint256 _amount) {\r\n        Player storage player = players[_addrs];\r\n        // Calculate all the real withdrawn amount (to wallet, not reinvested)\r\n        for(uint256 n = 0; n < player.withdrawals.length; n++){\r\n            _amount += player.withdrawals[n].amount;\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n\r\n    function payoutOf(address _addr) view external returns(uint256 value) {\r\n        Player storage player = players[_addr];\r\n\r\n        // For every deposit calculate the ROC\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            uint _plan = dep.plan;\r\n            uint time = plans[_plan].time;\r\n            uint256 time_end = dep.time + time;\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : uint256(block.timestamp);\r\n\r\n            if(from < to) {\r\n                uint256 rateOfInterest = plans[_plan].percent;\r\n                value += ((dep.amount * (to-from) * rateOfInterest) / (86400 * PERCENTS_DIVIDER));  /*calculating simple interest on deposit amount for each second*/\r\n            }\r\n        }\r\n        // Total dividends from all deposits\r\n        return value;\r\n    }\r\n\r\n    function earnigsFromSpecificDeposit(uint256 _depositId, address _address) view external returns(uint256 currentEarnings, uint256 totalEarnings){\r\n        Player storage player = players[_address];\r\n        \r\n        /* Earnigs for a given deposit*/\r\n        PlayerDeposit storage dep = player.deposits[_depositId];\r\n        uint _plan = dep.plan;\r\n        uint time = plans[_plan].time;\r\n        uint256 time_end = dep.time + time;\r\n\r\n        uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n        uint256 to = block.timestamp > time_end ? time_end : uint256(block.timestamp);\r\n\r\n        uint256 _from = dep.time;\r\n\r\n        if(from < to) {\r\n            uint256 rateOfInterest = plans[_plan].percent;\r\n            currentEarnings += ((dep.amount * (to-from) * rateOfInterest) / (86400 * PERCENTS_DIVIDER));  /*calculating simple interest on deposit amount for each second*/\r\n        }\r\n\r\n        if(_from < to){\r\n            uint256 rateOfInterest = plans[_plan].percent;\r\n            totalEarnings += ((dep.amount * (to-_from) * rateOfInterest) / (86400 * PERCENTS_DIVIDER));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function contractInfo() view external returns(uint256 _total_contributed, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_referral_bonus) {\r\n        return (total_contributed, total_investors, total_withdrawn, total_referral_bonus);\r\n    }\r\n\r\n    function perPlanUserCount() view external returns(uint256 _plan0_user_count, uint256 _plan1_user_count, uint256 _plan2_user_count, uint256 _plan3_user_count) {\r\n        return (plan0_user_count, plan1_user_count, plan2_user_count, plan3_user_count);\r\n    } \r\n\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, uint256 withdrawable_referral_bonus, uint256 invested, uint256 withdrawn, uint256 referral_bonus, uint256[8] memory referrals, uint256 _last_withdrawal, address upline, uint256 _activeAirdrop_bonus) {\r\n        Player storage player = players[_addr];\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        // Calculate number of referrals for each level\r\n        for(uint8 i = 0; i < referral_bonuses.length; i++) {\r\n            referrals[i] = player.referrals_per_level[i];\r\n        }\r\n        // Return user information\r\n        return (\r\n            payout + player.dividends + player.referral_bonus,\r\n            player.referral_bonus,\r\n            player.total_contributed,\r\n            player.total_withdrawn,\r\n            player.total_referral_bonus,\r\n            referrals,\r\n            player.last_withdrawal,\r\n            player.referral,\r\n            player.activeAirdrop_bonus\r\n        );\r\n    }\r\n\r\n \r\n    function contributionsInfo(address _addr) view external returns(uint256[] memory endTimes, uint256[] memory amounts, uint256[] memory totalWithdraws, uint256[] memory depositPlan, uint256[] memory depTimes, bool[] memory capitalWithdrawn, bool[] memory hasEnded) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256[] memory _endTimes = new uint256[](player.deposits.length);\r\n        uint256[] memory _amounts = new uint256[](player.deposits.length);\r\n        uint256[] memory _totalWithdraws = new uint256[](player.deposits.length);\r\n        uint256[] memory _depositPlan = new uint256[](player.deposits.length);\r\n        uint256[] memory _depTimes = new uint256[](player.deposits.length);\r\n        bool[] memory _capitalWithdrawn = new bool[](player.deposits.length);\r\n        bool[] memory _hasEnded = new bool[](player.deposits.length);\r\n\r\n        // Create arrays with deposits info, each index is related to a deposit\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n          PlayerDeposit storage dep = player.deposits[i];\r\n          uint _plan = dep.plan;\r\n          uint time = plans[_plan].time;\r\n          _amounts[i] = dep.amount;\r\n          _totalWithdraws[i] = dep.totalWithdraw;\r\n          _endTimes[i] = dep.time + time;\r\n          _depositPlan[i] = _plan;\r\n          _depTimes[i] = dep.time;\r\n          _capitalWithdrawn[i] = dep.capitalWithdrawn;\r\n          _hasEnded[i] = block.timestamp >= (dep.time + time) ? true:false;\r\n        }\r\n\r\n        return (\r\n          _endTimes,\r\n          _amounts,\r\n          _totalWithdraws,\r\n          _depositPlan,\r\n          _depTimes,\r\n          _capitalWithdrawn,\r\n          _hasEnded\r\n        );\r\n    }\r\n\r\n    \r\n    function emergencySwapExit() public{\r\n        require(msg.sender == owner, \"You are not the owner!\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function setTreasury(address payable _treasury) external{\r\n        require(msg.sender == owner, \"You are not the owner!\");\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner)external{\r\n        require(msg.sender == owner, \"You are not the owner!\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setWithdrawalDeadTime(uint256 valueInSeconds) external{\r\n        require(msg.sender == owner, \"You are not the owner!\");\r\n        WITHDRAWAL_DEADTIME = valueInSeconds;\r\n    }\r\n\r\n    function setToken() external{\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capitalAmount\",\"type\":\"uint256\"}],\"name\":\"CapitalWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ReferralPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIRST_REF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_DEADTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"agenda\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_candidate\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActiveAirdropBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_contributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"contributionsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWithdraws\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositPlan\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"capitalWithdrawn\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"hasEnded\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"earnigsFromSpecificDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySwapExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCandidateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidate\",\"type\":\"uint256\"}],\"name\":\"markDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCandidates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_agenda\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_options\",\"type\":\"bytes32[]\"}],\"name\":\"newCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perPlanUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan0_user_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan1_user_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan2_user_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plan3_user_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setMaxCandidates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInSeconds\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDeadTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCandidates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"referrals\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"_last_withdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_activeAirdrop_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"desiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrs\",\"type\":\"address\"}],\"name\":\"withdrawalsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BBXToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000e7af3263f4ca0fbbff740e5a1eef4563b953ce02000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ec3dea8da1652eb47116234f36d914937cbae174df9b020161e16f7fad1bc32"}