{"SourceCode": "// File: @openzeppelin/contracts@4.7.3/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.7.3/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.7.3/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/Staking.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\ncontract Staking is Ownable {\r\n    IERC20 public rewardToken;\r\n    IERC20 public stakingToken;\r\n\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public rewardPerSecond;\r\n    uint256 public distributionFinish;\r\n    uint256 public rewardsDuration;\r\n\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n\r\n    uint256 public totalBalance;\r\n\r\n    event RewardAdded(uint256 amount);\r\n    event RewardsDurationUpdated(uint256 duration);\r\n    event Stake(address indexed user, uint256 amount);\r\n    event Unstake(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 amount);\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        address _rewardToken,\r\n        uint256 _rewardsDuration\r\n    ) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n        setRewardsDuration(_rewardsDuration);\r\n    }\r\n\r\n    modifier updateReward(address user) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeDistributionActive();\r\n        if (user != address(0)) {\r\n            rewards[user] = earned(user);\r\n            userRewardPerTokenPaid[user] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier nonNullAmount(uint256 amount) {\r\n        require(amount != 0, \"Invalid amount\");\r\n        _;\r\n    }\r\n\r\n    function stake(uint256 amount) external updateReward(msg.sender) {\r\n        address user = msg.sender;\r\n\r\n        _stake(user, amount);\r\n        stakingToken.transferFrom(user, address(this), amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) external updateReward(msg.sender) {\r\n        address user = msg.sender;\r\n\r\n        _unstake(user, amount);\r\n        stakingToken.transfer(user, amount);\r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        address user = msg.sender;\r\n\r\n        uint256 reward = _getReward(user);\r\n        rewardToken.transfer(user, reward);\r\n    }\r\n\r\n    function reinvest() external updateReward(msg.sender) {\r\n        require(stakingToken == rewardToken, \"Reinvest unavailable\");\r\n        address user = msg.sender;\r\n\r\n        uint256 reward = _getReward(user);\r\n        _stake(user, reward);\r\n    }\r\n\r\n    function exit() external updateReward(msg.sender) {\r\n        address user = msg.sender;\r\n\r\n        uint256 userBalance = balances[user];\r\n        _unstake(user, userBalance);\r\n        stakingToken.transfer(user, userBalance);\r\n\r\n        uint256 reward = _getReward(user);\r\n        rewardToken.transfer(user, reward);\r\n    }\r\n\r\n    function addReward(uint256 amount) external onlyOwner updateReward(address(0)) {\r\n        if (block.timestamp >= distributionFinish) {\r\n            rewardPerSecond = amount / rewardsDuration;\r\n        } else {\r\n            uint256 remaining = distributionFinish - block.timestamp;\r\n            uint256 leftover = remaining * rewardPerSecond;\r\n            rewardPerSecond = (leftover + amount) / rewardsDuration;\r\n        }\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint256 balance;\r\n        if (rewardToken == stakingToken) {\r\n            balance = rewardToken.balanceOf(address(this)) - totalBalance;\r\n        } else {\r\n            balance = rewardToken.balanceOf(address(this));\r\n        }\r\n\r\n        require(rewardPerSecond <= balance / rewardsDuration, \"Provided reward too high\");\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        distributionFinish = block.timestamp + rewardsDuration;\r\n\r\n        emit RewardAdded(amount);\r\n    }\r\n\r\n    function setRewardsDuration(uint256 _rewardsDuration) public onlyOwner {\r\n        require(block.timestamp > distributionFinish, \"Previous distribution period NOT finished\");\r\n        require(_rewardsDuration != 0, \"Invalid duration\");\r\n        rewardsDuration = _rewardsDuration;\r\n\r\n        emit RewardsDurationUpdated(_rewardsDuration);\r\n    }\r\n\r\n    function lastTimeDistributionActive() public view returns (uint256) {\r\n        return block.timestamp < distributionFinish ? block.timestamp : distributionFinish;\r\n    }\r\n\r\n    /**\r\n     * In case all stakers are gone, reward per token is 0\r\n     * Otherwise we add:\r\n     * last (can be current) period of distribution * reward per second -> reward generated in the last between updates period\r\n     * divided by total staked balance\r\n     * to the current value of reward per token stored\r\n     */\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalBalance == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            (((lastTimeDistributionActive() - lastUpdateTime) * rewardPerSecond * 1e18) / totalBalance);\r\n    }\r\n\r\n    /**\r\n     * User stake balance is multiplied by\r\n     * reward per token minus the paid reward per token.\r\n     * Total reward is added to the value described above.\r\n     *\r\n     * This way we can calculate the reward earned by the user from his wast interaction until now.\r\n     */\r\n    function earned(address user) public view returns (uint256) {\r\n        return ((balances[user] * (rewardPerToken() - userRewardPerTokenPaid[user])) / 1e18) + rewards[user];\r\n    }\r\n\r\n    function _stake(address user, uint256 amount) private nonNullAmount(amount) {\r\n        totalBalance = totalBalance + amount;\r\n        balances[user] = balances[user] + amount;\r\n\r\n        emit Stake(user, amount);\r\n    }\r\n\r\n    function _unstake(address user, uint256 amount) private nonNullAmount(amount) {\r\n        uint256 userBalance = balances[user];\r\n        require(userBalance >= amount, \"Insufficient balance\");\r\n\r\n        totalBalance = totalBalance - amount;\r\n        balances[user] = userBalance - amount;\r\n\r\n        emit Unstake(user, amount);\r\n    }\r\n\r\n    function _getReward(address user) private returns (uint256) {\r\n        uint256 reward = rewards[user];\r\n        require(reward != 0, \"No reward\");\r\n\r\n        rewards[user] = 0;\r\n\r\n        emit RewardPaid(user, reward);\r\n\r\n        return reward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeDistributionActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000e14bf347575cb4c13c670ecc5b298db8409aa013000000000000000000000000e14bf347575cb4c13c670ecc5b298db8409aa0130000000000000000000000000000000000000000000000000000000000f0c8a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://acc25a5e742ac44c18a97f0a7384f5ac64c91d84320f2b080150a22282f0e435"}