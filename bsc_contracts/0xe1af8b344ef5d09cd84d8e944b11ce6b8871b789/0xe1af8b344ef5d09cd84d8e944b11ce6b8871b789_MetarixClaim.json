{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(token.transfer(to, value), \"SafeERC20 Transfer Failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(token.transferFrom(from, to, value), \"SafeERC20 TransferFrom failed\");\r\n    }\r\n}\r\n\r\ncontract MetarixClaim is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public name;\r\n    IERC20 public ERC20Interface;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public unlockTime;\r\n    mapping(address => mapping(uint256 => mapping(address => uint256))) userTokenClaim;\r\n\r\n    event MetarixAdded(address indexed token, uint256 saleno, uint256 amount);\r\n    event Claimed(address indexed user, address indexed token, uint256 amount);\r\n\r\n    modifier _hasAllowance(\r\n        address allower,\r\n        uint256 amount,\r\n        address token\r\n    ) {\r\n        // Make sure the allower has provided the right allowance.\r\n        require(token != address(0), \"Zero token address\");\r\n        ERC20Interface = IERC20(token);\r\n        uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));\r\n        require(amount <= ourAllowance, \"Not enough allowance\");\r\n        _;\r\n    }\r\n\r\n    function uploadUserData(\r\n        address metarixAddress,\r\n        uint256 totalReward,\r\n        uint256 saleType,\r\n        uint256 release,\r\n        address[] memory users,\r\n        uint256[] memory tokenValues\r\n    )\r\n        external\r\n        _hasAllowance(msg.sender, totalReward, metarixAddress)\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(totalReward > 0 && users.length > 0, \"Invalid data\");\r\n        require(users.length == tokenValues.length, \"Invalid records\");\r\n        require(release > block.timestamp, \"Invalid time\");\r\n        if (unlockTime[metarixAddress][saleType] > 0) {\r\n            require(\r\n                block.timestamp < unlockTime[metarixAddress][saleType],\r\n                \"Time Started alredy\"\r\n            );\r\n        }\r\n        unlockTime[metarixAddress][saleType] = release;\r\n        uint256 rewardCheck = totalReward;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            userTokenClaim[metarixAddress][saleType][users[i]] =\r\n                userTokenClaim[metarixAddress][saleType][users[i]] +\r\n                tokenValues[i];\r\n            unchecked {\r\n                rewardCheck = rewardCheck - tokenValues[i];\r\n            }\r\n        }\r\n        require(rewardCheck == 0, \"Reward values are Incorrect\");\r\n        ERC20Interface = IERC20(metarixAddress);\r\n        ERC20Interface.safeTransferFrom(msg.sender, address(this), totalReward);\r\n        emit MetarixAdded(metarixAddress, saleType, totalReward);\r\n        return true;\r\n    }\r\n\r\n    function getUserClaimToken(\r\n        address metarixAddress,\r\n        uint256 saleType,\r\n        address user\r\n    ) external view returns (uint256) {\r\n        return userTokenClaim[metarixAddress][saleType][user];\r\n    }\r\n\r\n    function claim(address metarixAddress, uint256 saleType)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            unlockTime[metarixAddress][saleType] < block.timestamp,\r\n            \"please wait for the unlock time\"\r\n        );\r\n        uint256 amount = userTokenClaim[metarixAddress][saleType][\r\n            msg.sender\r\n        ];\r\n        require(\r\n            amount > 0,\r\n            \"No claimable tokens available\"\r\n        );\r\n        delete userTokenClaim[metarixAddress][saleType][msg.sender];\r\n        ERC20Interface = IERC20(metarixAddress);\r\n        require(\r\n            ERC20Interface.balanceOf(address(this)) >= amount,\r\n            \"No tokens available\"\r\n        );\r\n        ERC20Interface.safeTransfer(msg.sender, amount);\r\n        emit Claimed(msg.sender, metarixAddress, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MetarixAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20Interface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metarixAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleType\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metarixAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metarixAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenValues\",\"type\":\"uint256[]\"}],\"name\":\"uploadUserData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetarixClaim", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://861475b05e48e69d3a3185753349df677b9152cad29804417312b6bd4ec16171"}