{"SourceCode": "pragma solidity ^0.8.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier:MIT\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable private _owner;\r\n    address payable private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = payable(0x74C1F2bEA2686c38933Ddf5D7BDEF243455b6D4A); //main\r\n        // _owner = payable(0x1bF99f349eFdEa693e622792A3D70833979E2854);//test\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDEXPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IDEXRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDEXRouter02 is IDEXRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract WBTOKEN is Context, IBEP20, Ownable {\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 70_000_000 * 10**8;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"WB TOKEN\"; // token name\r\n    string private _symbol = \"WB\"; // token ticker\r\n    uint8 private _decimals = 8; // token decimals\r\n\r\n    IDEXRouter02 public DEXRouter;\r\n    address public DEXPair;\r\n    address public DEXPair2;\r\n    IBEP20 public BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); // BUSD address mainnet\r\n    // IBEP20 public BUSD = IBEP20(0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7); // BUSD address testnet\r\n\r\n    address payable public marketWallet =\r\n        payable(0x92266AA18C33Ed0bA981552f9F9894f1535525E5);\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 minTokenNumberToSell = _tTotal / 1000; // 0.1% of total supply\r\n    uint256 public maxFee = 100; // 10% max fees limit per transaction\r\n    bool public swapAndLiquifyEnabled = false; // should be true to turn on to liquidate the pool\r\n    bool inSwapAndLiquify = false;\r\n    uint256 divider = 1000;\r\n\r\n    // buy tax fee\r\n    uint256 public redistributionFeeOnBuying;\r\n    uint256 public liquidityFeeOnBuying;\r\n    uint256 public marketingwalletFeeOnBuying;\r\n\r\n    // sell tax fee\r\n    uint256 public redistributionFeeOnSelling;\r\n    uint256 public liquidityFeeOnSelling;\r\n    uint256 public marketingwalletFeeOnSelling;\r\n\r\n    // normal tax fee\r\n    uint256 public redistributionFee;\r\n    uint256 public liquidityFee;\r\n    uint256 public marketingwalletFee;\r\n\r\n    // for smart contract use\r\n    uint256 private _currentRedistributionFee;\r\n    uint256 private _currentLiquidityFee;\r\n    uint256 private _currentmarketingwalletFee;\r\n\r\n    bool public tradingOpen = false;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        _rOwned[owner()] = _rTotal;\r\n\r\n        // IDEXRouter02 _DEXRouter = IDEXRouter02(\r\n        //     0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        // ); //test\r\n        IDEXRouter02 _DEXRouter = IDEXRouter02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        ); //main\r\n        // Create a DEX pair for this new token\r\n        DEXPair = IDEXFactory(_DEXRouter.factory()).createPair(\r\n            address(this),\r\n            _DEXRouter.WETH()\r\n        );\r\n        DEXPair2 = IDEXFactory(_DEXRouter.factory()).createPair(\r\n            address(this),\r\n            address(BUSD)\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        DEXRouter = _DEXRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[0xaC343A4ab22c7880Dfb24b74F04B79E20d2D1989] = true; //presale wallet\r\n        _isExcludedFromFee[marketWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - (amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + (addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - (subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        uint256 rAmount = tAmount * (_getRate());\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _rTotal = _rTotal - (rAmount);\r\n        _tFeeTotal = _tFeeTotal + (tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            uint256 rAmount = tAmount * (_getRate());\r\n            return rAmount;\r\n        } else {\r\n            uint256 rAmount = tAmount * (_getRate());\r\n            uint256 rTransferAmount = rAmount -\r\n                (totalFeePerTx(tAmount) * (_getRate()));\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / (currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = _tOwned[account] * (_getRate());\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setMinTokenNumberToSell(uint256 _amount) public onlyOwner {\r\n        minTokenNumberToSell = _amount;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _state) public onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        emit SwapAndLiquifyEnabledUpdated(_state);\r\n    }\r\n\r\n    function setmarketWallet(address payable _marketWallet) external onlyOwner {\r\n        require(\r\n            _marketWallet != address(0),\r\n            \"Market wallet cannot be address zero\"\r\n        );\r\n        marketWallet = _marketWallet;\r\n    }\r\n\r\n    function setRoute(\r\n        IDEXRouter02 _router,\r\n        address _pair,\r\n        address _pairBUSD\r\n    ) external onlyOwner {\r\n        require(\r\n            address(_router) != address(0),\r\n            \"Router adress cannot be address zero\"\r\n        );\r\n        require(_pair != address(0), \"Pair adress cannot be address zero\");\r\n        DEXRouter = _router;\r\n        DEXPair = _pair;\r\n        DEXPair2 = _pairBUSD;\r\n    }\r\n\r\n    function withdrawBNB(uint256 _amount) external onlyOwner {\r\n        require(address(this).balance >= _amount, \"Invalid Amount\");\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function withdrawToken(IBEP20 _token, uint256 _amount) external onlyOwner {\r\n        require(_token.balanceOf(address(this)) >= _amount, \"Invalid Amount\");\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    //to receive BNB from DEXRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function totalFeePerTx(uint256 tAmount) internal view returns (uint256) {\r\n        uint256 percentage = (tAmount *\r\n            (_currentRedistributionFee +\r\n                (_currentLiquidityFee) +\r\n                (_currentmarketingwalletFee))) / (divider);\r\n        return percentage;\r\n    }\r\n\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = (tAmount * (_currentRedistributionFee)) / (divider);\r\n        uint256 rFee = tFee * (_getRate());\r\n        _rTotal = _rTotal - (rFee);\r\n        _tFeeTotal = _tFeeTotal + (tFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / (tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - (_rOwned[_excluded[i]]);\r\n            tSupply = tSupply - (_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidityPoolFee(uint256 tAmount, uint256 currentRate)\r\n        internal\r\n    {\r\n        uint256 tPoolFee = (tAmount * (_currentLiquidityFee)) / (divider);\r\n        uint256 rPoolFee = tPoolFee * (currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)] + (rPoolFee);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + (tPoolFee);\r\n        emit Transfer(_msgSender(), address(this), tPoolFee);\r\n    }\r\n\r\n    function _takeMarketFee(uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 tCharityFee = (tAmount * (_currentmarketingwalletFee)) /\r\n            (divider);\r\n        uint256 rCharityFee = tCharityFee * (currentRate);\r\n        _rOwned[marketWallet] = _rOwned[marketWallet] + (rCharityFee);\r\n        if (_isExcluded[marketWallet])\r\n            _tOwned[marketWallet] = _tOwned[marketWallet] + (tCharityFee);\r\n        emit Transfer(_msgSender(), marketWallet, tCharityFee);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _currentRedistributionFee = 0;\r\n        _currentLiquidityFee = 0;\r\n        _currentmarketingwalletFee = 0;\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        _currentRedistributionFee = redistributionFeeOnBuying;\r\n        _currentLiquidityFee = liquidityFeeOnBuying;\r\n        _currentmarketingwalletFee = marketingwalletFeeOnBuying;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _currentRedistributionFee = redistributionFeeOnSelling;\r\n        _currentLiquidityFee = liquidityFeeOnSelling;\r\n        _currentmarketingwalletFee = marketingwalletFeeOnSelling;\r\n    }\r\n\r\n    function setNormalFee() private {\r\n        _currentRedistributionFee = redistributionFee;\r\n        _currentLiquidityFee = liquidityFee;\r\n        _currentmarketingwalletFee = marketingwalletFee;\r\n    }\r\n\r\n    function StartTrading() external onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        tradingOpen = true;\r\n        // buy tax fee\r\n        redistributionFeeOnBuying = 0; // 0% will be distributed among holder as token divideneds\r\n        liquidityFeeOnBuying = 40; // 4% will be added to the liquidity pool\r\n        marketingwalletFeeOnBuying = 60; // 6% will go to the marketingwallet address\r\n\r\n        // sell tax fee\r\n        redistributionFeeOnSelling = 0; // 0% will be distributed among holder as token divideneds\r\n        liquidityFeeOnSelling = 40; // 4% will be added to the liquidity pool\r\n        marketingwalletFeeOnSelling = 60; // 6% will go to the market address\r\n\r\n        // normal tax fee\r\n        redistributionFee = 0; // 0% will be distributed among holder as token divideneds\r\n        liquidityFee = 40; // 4% will be added to the liquidity pool\r\n        marketingwalletFee = 60; // 6% will go to the market address\r\n    }\r\n\r\n    function setmarketingwalletFee(\r\n        uint256 _buy,\r\n        uint256 _sell,\r\n        uint256 _normal\r\n    ) external onlyOwner {\r\n        require(\r\n            _buy + redistributionFeeOnBuying + liquidityFeeOnBuying <= maxFee,\r\n            \" Buy Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _sell + redistributionFeeOnSelling + liquidityFeeOnSelling <=\r\n                maxFee,\r\n            \" Sell Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _normal + redistributionFee + liquidityFee <= maxFee,\r\n            \" Normal Fee cannot be more than 10%\"\r\n        );\r\n        marketingwalletFeeOnBuying = _buy;\r\n        marketingwalletFeeOnSelling = _sell;\r\n        marketingwalletFee = _normal;\r\n    }\r\n\r\n    function setRedistributionFee(\r\n        uint256 _buy,\r\n        uint256 _sell,\r\n        uint256 _normal\r\n    ) external onlyOwner {\r\n        require(\r\n            _buy + marketingwalletFeeOnBuying + liquidityFeeOnBuying <= maxFee,\r\n            \" Buy Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _sell + marketingwalletFeeOnSelling + liquidityFeeOnSelling <=\r\n                maxFee,\r\n            \" Sell Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _normal + marketingwalletFee + liquidityFee <= maxFee,\r\n            \" Normal Fee cannot be more than 10%\"\r\n        );\r\n        redistributionFeeOnBuying = _buy;\r\n        redistributionFeeOnSelling = _sell;\r\n        redistributionFee = _normal;\r\n    }\r\n\r\n    function setLiquidityFee(\r\n        uint256 _buy,\r\n        uint256 _sell,\r\n        uint256 _normal\r\n    ) external onlyOwner {\r\n        require(\r\n            _buy + marketingwalletFeeOnBuying + redistributionFeeOnBuying <=\r\n                maxFee,\r\n            \" Buy Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _sell + marketingwalletFeeOnSelling + redistributionFeeOnSelling <=\r\n                maxFee,\r\n            \" Sell Fee cannot be more than 10%\"\r\n        );\r\n        require(\r\n            _normal + marketingwalletFee + redistributionFee <= maxFee,\r\n            \" Normal Fee cannot be more than 10%\"\r\n        );\r\n        liquidityFeeOnBuying = _buy;\r\n        liquidityFeeOnSelling = _sell;\r\n        liquidityFee = _normal;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address _owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(_owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"BEP20: Transfer amount must be greater than zero\");\r\n\r\n        // swap and liquify\r\n        swapAndLiquify(from, to);\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        }\r\n        // buying handler\r\n        else if (from == DEXPair || from == DEXPair2) {\r\n            setBuyFee();\r\n        }\r\n        // selling handler\r\n        else if (to == DEXPair || to == DEXPair2) {\r\n            if (from != owner()) {\r\n                require(tradingOpen, \"Trading is not enabled yet\");\r\n            }\r\n            setSellFee();\r\n        }\r\n        // normal transaction handler\r\n        else {\r\n            setNormalFee();\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount - (totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount * (currentRate);\r\n        uint256 rTransferAmount = rAmount -\r\n            (totalFeePerTx(tAmount) * (currentRate));\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\r\n        if (_currentLiquidityFee > 0) {\r\n            _takeLiquidityPoolFee(tAmount, currentRate);\r\n        }\r\n        if (_currentRedistributionFee > 0) {\r\n            _reflectFee(tAmount);\r\n        }\r\n        if (_currentmarketingwalletFee > 0) {\r\n            _takeMarketFee(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount - (totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount * (currentRate);\r\n        uint256 rTransferAmount = rAmount -\r\n            (totalFeePerTx(tAmount) * (currentRate));\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\r\n        if (_currentLiquidityFee > 0) {\r\n            _takeLiquidityPoolFee(tAmount, currentRate);\r\n        }\r\n        if (_currentRedistributionFee > 0) {\r\n            _reflectFee(tAmount);\r\n        }\r\n        if (_currentmarketingwalletFee > 0) {\r\n            _takeMarketFee(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount - (totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount * (currentRate);\r\n        uint256 rTransferAmount = rAmount -\r\n            (totalFeePerTx(tAmount) * (currentRate));\r\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\r\n        if (_currentLiquidityFee > 0) {\r\n            _takeLiquidityPoolFee(tAmount, currentRate);\r\n        }\r\n        if (_currentRedistributionFee > 0) {\r\n            _reflectFee(tAmount);\r\n        }\r\n        if (_currentmarketingwalletFee > 0) {\r\n            _takeMarketFee(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount - (totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount * (currentRate);\r\n        uint256 rTransferAmount = rAmount -\r\n            (totalFeePerTx(tAmount) * (currentRate));\r\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\r\n        if (_currentLiquidityFee > 0) {\r\n            _takeLiquidityPoolFee(tAmount, currentRate);\r\n        }\r\n        if (_currentRedistributionFee > 0) {\r\n            _reflectFee(tAmount);\r\n        }\r\n        if (_currentmarketingwalletFee > 0) {\r\n            _takeMarketFee(tAmount, currentRate);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function swapAndLiquify(address from, address to) private {\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is DEX pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenNumberToSell;\r\n\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            shouldSell &&\r\n            from != DEXPair &&\r\n            swapAndLiquifyEnabled &&\r\n            !(from == address(this) &&\r\n                (to == address(DEXPair) || to == address(DEXPair2))) // swap 1 time\r\n        ) {\r\n            // only sell for minTokenNumberToSell, decouple from _maxTxAmount\r\n            // split the contract balance into 4 pieces\r\n\r\n            contractTokenBalance = minTokenNumberToSell;\r\n            // approve contract\r\n            _approve(address(this), address(DEXRouter), contractTokenBalance);\r\n\r\n            // add liquidity\r\n            // split the contract balance into 2 pieces\r\n\r\n            uint256 otherPiece = contractTokenBalance / (2);\r\n            uint256 tokenAmountToBeSwapped = contractTokenBalance -\r\n                (otherPiece);\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            // now is to lock into staking pool\r\n            Utils.swapTokensForEth(address(DEXRouter), tokenAmountToBeSwapped);\r\n\r\n            // how much BNB did we just swap into?\r\n\r\n            // capture the contract's current BNB balance.\r\n            // this is so that we can capture exactly the amount of BNB that the\r\n            // swap creates, and not make the liquidity event include any BNB that\r\n            // has been manually sent to the contract\r\n\r\n            uint256 bnbToBeAddedToLiquidity = address(this).balance -\r\n                (initialBalance);\r\n\r\n            // add liquidity to DEX\r\n            Utils.addLiquidity(\r\n                address(DEXRouter),\r\n                owner(),\r\n                otherPiece,\r\n                bnbToBeAddedToLiquidity\r\n            );\r\n\r\n            emit SwapAndLiquify(\r\n                tokenAmountToBeSwapped,\r\n                bnbToBeAddedToLiquidity,\r\n                otherPiece\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Utils {\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        internal\r\n    {\r\n        IDEXRouter02 DEXRouter = IDEXRouter02(routerAddress);\r\n\r\n        // generate the DEX pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = DEXRouter.WETH();\r\n\r\n        // make the swap\r\n        DEXRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDEXRouter02 DEXRouter = IDEXRouter02(routerAddress);\r\n\r\n        // generate the DEX pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = DEXRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        DEXRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: ethAmount\r\n        }(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDEXRouter02 DEXRouter = IDEXRouter02(routerAddress);\r\n\r\n        // add the liquidity\r\n        DEXRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEXPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEXPair2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEXRouter\",\"outputs\":[{\"internalType\":\"contract IDEXRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwalletFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwalletFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normal\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenNumberToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normal\",\"type\":\"uint256\"}],\"name\":\"setRedistributionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairBUSD\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketWallet\",\"type\":\"address\"}],\"name\":\"setmarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normal\",\"type\":\"uint256\"}],\"name\":\"setmarketingwalletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WBTOKEN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5871679f50a5274076b223c61877adc14e5e9ffd3ff853ea21c1245b7c92b11b"}